practical	O
artiﬁcial	O
intelligence	O
programming	O
with	O
java	O
third	O
edition	O
mark	O
watson	O
copyright	O
2001-2008	O
mark	O
watson	O
.	O
all	O
rights	O
reserved	O
.	O
this	O
work	O
is	O
licensed	O
under	O
a	O
creative	O
commons	O
attribution-noncommercial-no	O
derivative	O
works	O
version	O
3.0	O
united	O
states	O
license	O
.	O
november	O
11	O
,	O
2008	O
1	O
introduction	O
there	O
are	O
many	O
ﬁne	O
books	O
on	O
artiﬁcial	O
intelligence	O
(	O
ai	O
)	O
and	O
good	O
tutorials	O
and	O
software	O
on	O
the	O
web	O
.	O
this	O
book	O
is	O
intended	O
for	O
professional	O
programmers	O
who	O
either	O
already	O
have	O
an	O
interest	O
in	O
ai	O
or	O
need	O
to	O
use	O
speciﬁc	O
ai	O
technologies	O
at	O
work	O
.	O
the	O
material	O
is	O
not	O
intended	O
as	O
a	O
complete	O
reference	O
for	O
ai	O
theory	O
.	O
instead	O
,	O
i	O
provide	O
enough	O
theoretical	O
background	O
to	O
understand	O
the	O
example	O
programs	O
and	O
to	O
provide	O
a	O
launching	O
point	O
if	O
you	O
want	O
or	O
need	O
to	O
delve	O
deeper	O
into	O
any	O
of	O
the	O
topics	O
covered	O
.	O
1.1	O
other	O
jvm	O
languages	O
the	O
java	O
language	O
and	O
jvm	O
platform	O
are	O
very	O
widely	O
used	O
so	O
that	O
techniques	O
that	O
you	O
learn	O
can	O
be	O
broadly	O
useful	O
.	O
there	O
are	O
other	O
jvm	O
languages	O
like	O
jruby	O
,	O
clojure	O
,	O
jython	O
,	O
and	O
scala	O
that	O
can	O
use	O
existing	O
java	O
classes	O
.	O
while	O
the	O
examples	O
in	O
this	O
book	O
are	O
written	O
in	O
java	O
you	O
should	O
have	O
little	O
trouble	O
using	O
my	O
java	O
example	O
classes	O
and	O
the	O
open	O
source	O
libraries	O
with	O
these	O
alternative	O
jvm	O
languages	O
.	O
1.2	O
why	O
is	O
a	O
pdf	O
version	O
of	O
this	O
book	O
available	O
free	O
on	O
the	O
web	O
?	O
i	O
have	O
written	O
14	O
books	O
that	O
have	O
been	O
published	O
by	O
the	O
traditional	O
publishers	O
springer-	O
verlag	O
,	O
mcgraw-hill	O
,	O
j.	O
wiley	O
,	O
morgan	O
kaufman	O
,	O
hungry	O
minds	O
,	O
mcp	O
,	O
and	O
sybex	O
.	O
this	O
is	O
my	O
ﬁrst	O
book	O
that	O
i	O
have	O
produced	O
and	O
published	O
on	O
my	O
own	O
and	O
my	O
moti-	O
vation	O
for	O
this	O
change	O
is	O
the	O
ability	O
to	O
write	O
for	O
smaller	O
niche	O
markets	O
on	O
topics	O
that	O
most	O
interest	O
me	O
.	O
as	O
an	O
author	O
i	O
want	O
to	O
both	O
earn	O
a	O
living	O
writing	O
and	O
have	O
many	O
people	O
read	O
and	O
enjoy	O
my	O
books	O
.	O
by	O
offering	O
for	O
sale	O
both	O
a	O
print	O
version	O
and	O
a	O
for-fee	O
pdf	O
version	O
for	O
purchase	O
at	O
http	O
:	O
//www.lulu.com/content/4502573	O
i	O
can	O
earn	O
some	O
money	O
for	O
my	O
efforts	O
and	O
also	O
allow	O
readers	O
who	O
can	O
not	O
afford	O
to	O
buy	O
many	O
books	O
or	O
may	O
only	O
be	O
interested	O
in	O
a	O
few	O
chapters	O
of	O
this	O
book	O
to	O
read	O
the	O
free	O
pdf	O
version	O
that	O
is	O
available	O
from	O
my	O
web	O
site	O
.	O
1	O
1	O
introduction	O
please	O
note	O
that	O
i	O
do	O
not	O
give	O
permission	O
to	O
post	O
the	O
free	O
pdf	O
version	O
of	O
this	O
book	O
on	O
other	O
people	O
’	O
s	O
web	O
sites	O
:	O
i	O
consider	O
this	O
to	O
be	O
commercial	O
exploitation	O
in	O
violation	O
of	O
the	O
creative	O
commons	O
license	O
that	O
i	O
have	O
chosen	O
for	O
this	O
book	O
.	O
having	O
my	O
free	O
web	O
books	O
only	O
available	O
on	O
my	O
web	O
site	O
brings	O
viewers	O
to	O
my	O
site	O
and	O
helps	O
attract	O
customers	O
for	O
my	O
consulting	O
business	O
.	O
i	O
do	O
encourage	O
you	O
to	O
copy	O
the	O
pdf	O
for	O
this	O
book	O
onto	O
your	O
own	O
computer	O
for	O
local	O
reading	O
and	O
it	O
is	O
ﬁne	O
to	O
email	O
copies	O
of	O
the	O
free	O
pdf	O
to	O
friends	O
.	O
if	O
you	O
enjoy	O
reading	O
the	O
no-cost	O
pdf	O
version	O
of	O
this	O
book	O
i	O
would	O
also	O
appreciate	O
it	O
if	O
you	O
would	O
purchase	O
a	O
print	O
copy	O
using	O
the	O
purchase	O
link	O
:	O
http	O
:	O
//www.lulu.com/content/4502573	O
i	O
thank	O
you	O
for	O
your	O
support	O
.	O
1.3	O
book	O
software	O
you	O
can	O
download	O
a	O
large	O
zip	O
ﬁle	O
containing	O
all	O
code	O
and	O
test	O
data	O
used	O
in	O
this	O
book	O
from	O
the	O
url	O
:	O
http	O
:	O
//markwatson.com/opencontent/javaai_3rd_code.zip	O
all	O
the	O
example	O
code	O
that	O
i	O
have	O
written	O
is	O
covered	O
by	O
the	O
licenses	O
discussed	O
in	O
the	O
preface	O
.	O
the	O
code	O
examples	O
usually	O
consist	O
of	O
reusable	O
(	O
non	O
gui	O
)	O
libraries	O
and	O
throwaway	O
text-based	O
test	O
programs	O
to	O
solve	O
a	O
speciﬁc	O
application	O
problem	O
;	O
in	O
some	O
cases	O
,	O
the	O
test	O
code	O
will	O
contain	O
a	O
test	O
or	O
demonstration	O
gui	O
.	O
1.4	O
use	O
of	O
java	O
generics	O
and	O
native	O
types	O
in	O
general	O
i	O
usually	O
use	O
java	O
generics	O
and	O
the	O
new	O
collection	O
classes	O
for	O
almost	O
all	O
of	O
my	O
java	O
programming	O
.	O
that	O
is	O
also	O
the	O
case	O
for	O
the	O
examples	O
in	O
this	O
book	O
except	O
when	O
using	O
native	O
types	O
and	O
arrays	O
provides	O
a	O
real	O
performance	O
advantage	O
(	O
for	O
example	O
,	O
in	O
the	O
search	B
examples	O
)	O
.	O
since	O
arrays	O
must	O
contain	O
reiﬁable	O
types	O
they	O
play	O
poorly	O
with	O
generics	O
so	O
i	O
prefer	O
not	O
to	O
mix	O
coding	O
styles	O
in	O
the	O
same	O
code	O
base	O
.	O
there	O
are	O
some	O
obvious	O
cases	O
where	O
not	O
using	O
primitive	O
types	O
leads	O
to	O
excessive	O
object	O
creation	O
and	O
boxing/unboxing	O
.	O
that	O
said	O
,	O
i	O
expect	O
java	O
compilers	O
,	O
hotspot	O
,	O
and	O
the	O
jvm	O
in	O
general	O
to	O
keep	O
getting	O
better	O
and	O
this	O
may	O
be	O
a	O
non-issue	O
in	O
the	O
future	O
.	O
2	O
1.5	O
notes	O
on	O
java	O
coding	O
styles	O
used	O
in	O
this	O
book	O
1.5	O
notes	O
on	O
java	O
coding	O
styles	O
used	O
in	O
this	O
book	O
many	O
of	O
the	O
example	O
programs	O
do	O
not	O
strictly	O
follow	O
common	O
java	O
programming	O
idioms	O
–	O
this	O
is	O
usually	O
done	O
for	O
brevity	O
.	O
for	O
example	O
,	O
when	O
a	O
short	O
example	O
is	O
all	O
in	O
one	O
java	O
package	O
i	O
will	O
save	O
lines	O
of	O
code	O
and	O
programing	O
listing	O
space	O
by	O
not	O
declaring	O
class	O
data	O
private	O
with	O
public	O
getters	O
and	O
setters	O
;	O
instead	O
,	O
i	O
will	O
sometimes	O
simply	O
use	O
package	O
visibility	O
as	O
in	O
this	O
example	O
:	O
public	O
static	O
class	O
problem	O
{	O
//	O
constants	O
for	O
appliance	O
types	O
:	O
enum	O
appliance	O
{	O
refrigerator	O
,	O
microwave	O
,	O
tv	O
,	O
dvd	O
}	O
;	O
//	O
constants	O
for	O
problem	O
types	O
:	O
enum	O
problemtype	O
{	O
not_running	O
,	O
smoking	O
,	O
on_fire	O
,	O
makes_noise	O
}	O
;	O
//	O
constants	O
for	O
environmental	O
data	O
:	O
enum	O
environmentaldescription	O
{	O
circuit_breaker_off	O
,	O
lights_off_in_room	O
}	O
;	O
appliance	O
appliancetype	O
;	O
list	O
<	O
problemtype	O
>	O
problemtypes	O
=	O
new	O
arraylist	O
<	O
problemtype	O
>	O
(	O
)	O
;	O
list	O
<	O
environmentaldescription	O
>	O
environmentaldata	O
=	O
new	O
arraylist	O
<	O
environmentaldescription	O
>	O
(	O
)	O
;	O
//	O
etc.	O
}	O
please	O
understand	O
that	O
i	O
do	O
not	O
advocate	O
this	O
style	O
of	O
programming	O
in	O
large	O
projects	O
but	O
one	O
challenge	O
in	O
writing	O
about	O
software	O
development	O
is	O
the	O
requirement	O
to	O
make	O
the	O
examples	O
short	O
and	O
easily	O
read	O
and	O
understood	O
.	O
many	O
of	O
the	O
examples	O
started	O
as	O
large	O
code	O
bases	O
for	O
my	O
own	O
projects	O
that	O
i	O
“	O
whittled	O
down	O
”	O
to	O
a	O
small	O
size	O
to	O
show	O
one	O
or	O
two	O
speciﬁc	O
techniques	O
.	O
forgoing	O
the	O
use	O
of	O
“	O
getters	O
and	O
setters	O
”	O
in	O
many	O
of	O
the	O
examples	O
is	O
just	O
another	O
way	O
to	O
shorten	O
the	O
examples	O
.	O
authors	O
of	O
programming	O
books	O
are	O
faced	O
with	O
a	O
problem	O
in	O
formatting	O
program	O
snippets	O
:	O
limited	O
page	O
width	O
.	O
you	O
will	O
frequently	O
see	O
what	O
would	O
be	O
a	O
single	O
line	O
in	O
a	O
java	O
source	O
ﬁle	O
split	O
over	O
two	O
or	O
three	O
lines	O
to	O
accommodate	O
limited	O
page	O
width	O
as	O
seen	O
in	O
this	O
example	O
:	O
private	O
static	O
void	O
createtestfacts	O
(	O
workingmemory	O
workingmemory	O
)	O
throws	O
exception	O
{	O
...	O
}	O
3	O
1	O
introduction	O
1.6	O
book	O
summary	O
chapter	O
1	O
is	O
the	O
introduction	O
for	O
this	O
book	O
.	O
chapter	O
2	O
deals	O
with	O
heuristic	O
search	B
in	O
two	O
domains	O
:	O
two-dimensional	O
grids	O
(	O
for	O
example	O
mazes	O
)	O
and	O
graphs	O
(	O
deﬁned	O
by	O
nodes	O
and	O
edges	O
connecting	O
nodes	O
)	O
.	O
chapter	O
3	O
covers	O
logic	B
,	O
knowledge	B
representation	I
,	O
and	O
reasoning	B
using	O
the	O
power-	O
loom	O
system	O
.	O
chapter	O
4	O
covers	O
the	O
semantic	B
web	I
.	O
you	O
will	O
learn	O
how	O
to	O
use	O
rdf	O
and	O
rdfs	O
data	O
for	O
knowledge	B
representation	I
and	O
how	O
to	O
use	O
the	O
popular	O
sesame	O
open	O
source	O
semantic	B
web	I
system	O
.	O
chapter	O
5	O
introduces	O
you	O
to	O
rule-based	O
or	O
production	O
systems	O
.	O
we	O
will	O
use	O
the	O
open	O
source	O
drools	O
system	O
to	O
implement	O
simple	O
expert	O
systems	O
for	O
solving	O
“	O
blocks	O
world	O
”	O
problems	O
and	O
to	O
simulate	O
a	O
help	O
desk	O
system	O
.	O
chapter	O
6	O
gives	O
an	O
overview	O
of	O
genetic	O
algorithms	O
,	O
provides	O
a	O
java	O
library	O
,	O
and	O
solves	O
a	O
test	O
problem	O
.	O
the	O
chapter	O
ends	O
with	O
suggestions	O
for	O
projects	O
you	O
might	O
want	O
to	O
try	O
.	O
chapter	O
7	O
introduces	O
hopﬁeld	O
and	O
back	B
propagation	I
neural	O
networks	O
.	O
in	O
addition	O
to	O
java	O
libraries	O
you	O
can	O
use	O
in	O
your	O
own	O
projects	O
,	O
we	O
will	O
use	O
two	O
swing-based	O
java	O
applications	O
to	O
visualize	O
how	O
neural	O
networks	O
are	O
trained	O
.	O
chapter	O
8	O
introduces	O
you	O
to	O
the	O
gpled	O
weka	O
project	O
.	O
weka	O
is	O
a	O
best	O
of	O
breed	O
toolkit	O
for	O
solving	O
a	O
wide	O
range	O
of	O
machine	B
learning	I
problems	O
.	O
chapter	O
9	O
covers	O
several	O
statistical	O
natural	O
language	O
processing	O
(	O
nlp	O
)	O
techniques	O
that	O
i	O
often	O
use	O
in	O
my	O
own	O
work	O
:	O
processing	O
text	O
(	O
tokenizing	O
,	O
stemming	O
,	O
and	O
de-	O
termining	O
part	O
of	O
speech	O
)	O
,	O
named	B
entity	I
extraction	I
from	O
text	O
,	O
using	O
the	O
wordnet	O
lexical	O
database	O
,	O
automatically	O
assigning	O
tags	O
to	O
text	O
,	O
text	B
clustering	I
,	O
three	O
different	O
approaches	O
to	O
spelling	B
correction	O
,	O
and	O
a	O
short	O
tutorial	O
on	O
markov	O
models	O
.	O
chapter	O
10	O
provides	O
useful	O
techniques	O
for	O
gathering	O
and	O
using	O
information	O
:	O
using	O
the	O
open	O
calais	O
web	O
services	O
for	O
extracting	O
semantic	O
information	O
from	O
text	O
,	O
infor-	O
mation	O
discovery	O
in	O
relational	O
databases	O
,	O
and	O
three	O
different	O
approaches	O
to	O
indexing	O
and	O
searching	O
text	O
.	O
4	O
2	O
search	B
early	O
ai	O
research	O
emphasized	O
the	O
optimization	O
of	O
search	B
algorithms	O
.	O
this	O
approach	O
made	O
a	O
lot	O
of	O
sense	O
because	O
many	O
ai	O
tasks	O
can	O
be	O
solved	O
effectively	O
by	O
deﬁning	O
state	O
spaces	O
and	O
using	O
search	B
algorithms	O
to	O
deﬁne	O
and	O
explore	O
search	B
trees	O
in	O
this	O
state	O
space	O
.	O
search	B
programs	O
were	O
frequently	O
made	O
tractable	O
by	O
using	O
heuristics	O
to	O
limit	O
areas	O
of	O
search	B
in	O
these	O
search	B
trees	O
.	O
this	O
use	O
of	O
heuristics	O
converts	O
intractable	O
problems	O
to	O
solvable	O
problems	O
by	O
compromising	O
the	O
quality	O
of	O
solutions	O
;	O
this	O
trade	O
off	O
of	O
less	O
computational	O
complexity	O
for	O
less	O
than	O
optimal	O
solutions	O
has	O
become	O
a	O
standard	O
design	O
pattern	O
for	O
ai	O
programming	O
.	O
we	O
will	O
see	O
in	O
this	O
chapter	O
that	O
we	O
trade	O
off	O
memory	O
for	O
faster	O
computation	O
time	O
and	O
better	O
results	O
;	O
often	O
,	O
by	O
storing	O
extra	O
data	O
we	O
can	O
make	O
search	B
time	O
faster	O
,	O
and	O
make	O
future	O
searches	O
in	O
the	O
same	O
search	B
space	O
even	O
more	O
efﬁcient	O
.	O
what	O
are	O
the	O
limitations	O
of	O
search	B
?	O
early	O
on	O
,	O
search	B
applied	O
to	O
problems	O
like	O
check-	O
ers	O
and	O
chess	B
misled	O
early	O
researchers	O
into	O
underestimating	O
the	O
extreme	O
difﬁculty	O
of	O
writing	O
software	O
that	O
performs	O
tasks	O
in	O
domains	O
that	O
require	O
general	O
world	O
knowl-	O
edge	O
or	O
deal	O
with	O
complex	O
and	O
changing	O
environments	O
.	O
these	O
types	O
of	O
problems	O
usually	O
require	O
the	O
understanding	O
and	O
then	O
the	O
implementation	O
of	O
domain	O
speciﬁc	O
knowledge	O
.	O
in	O
this	O
chapter	O
,	O
we	O
will	O
use	O
three	O
search	B
problem	O
domains	O
for	O
studying	O
search	B
algo-	O
rithms	O
:	O
path	O
ﬁnding	O
in	O
a	O
maze	O
,	O
path	O
ﬁnding	O
in	O
a	O
graph	O
,	O
and	O
alpha-beta	B
search	I
in	O
the	O
games	O
tic-tac-toe	B
and	O
chess	B
.	O
2.1	O
representation	O
of	O
search	B
state	O
space	O
and	O
search	B
operators	O
we	O
will	O
use	O
a	O
single	O
search	B
tree	I
representation	O
in	O
graph	O
search	B
and	O
maze	O
search	B
examples	O
in	O
this	O
chapter	O
.	O
search	B
trees	O
consist	O
of	O
nodes	O
that	O
deﬁne	O
locations	O
in	O
state	O
space	O
and	O
links	O
to	O
other	O
nodes	O
.	O
for	O
some	O
small	O
problems	O
,	O
the	O
search	B
tree	I
can	O
be	O
easily	O
speciﬁed	O
statically	O
;	O
for	O
example	O
,	O
when	O
performing	O
search	B
in	O
game	O
mazes	O
,	O
we	O
can	O
compute	O
and	O
save	O
a	O
search	B
tree	I
for	O
the	O
entire	O
state	O
space	O
of	O
the	O
maze	O
.	O
for	O
many	O
problems	O
,	O
it	O
is	O
impossible	O
to	O
completely	O
enumerate	O
a	O
search	B
tree	I
for	O
a	O
state	O
space	O
so	O
we	O
must	O
deﬁne	O
successor	O
node	O
search	B
operators	O
that	O
for	O
a	O
given	O
node	O
produce	O
all	O
nodes	O
that	O
can	O
be	O
reached	O
from	O
the	O
current	O
node	O
in	O
one	O
step	O
;	O
for	O
example	O
,	O
in	O
the	O
5	O
2	O
search	B
game	O
of	O
chess	B
we	O
can	O
not	O
possibly	O
enumerate	O
the	O
search	B
tree	I
for	O
all	O
possible	O
games	O
of	O
chess	B
,	O
so	O
we	O
deﬁne	O
a	O
successor	O
node	O
search	B
operator	O
that	O
given	O
a	O
board	O
position	O
(	O
represented	O
by	O
a	O
node	O
in	O
the	O
search	B
tree	I
)	O
calculates	O
all	O
possible	O
moves	O
for	O
either	O
the	O
white	O
or	O
black	O
pieces	O
.	O
the	O
possible	O
chess	B
moves	O
are	O
calculated	O
by	O
a	O
successor	O
node	O
search	B
operator	O
and	O
are	O
represented	O
by	O
newly	O
calculated	O
nodes	O
that	O
are	O
linked	O
to	O
the	O
previous	O
node	O
.	O
note	O
that	O
even	O
when	O
it	O
is	O
simple	O
to	O
fully	O
enumerate	O
a	O
search	B
tree	I
,	O
as	O
in	O
the	O
game	O
maze	O
example	O
,	O
we	O
still	O
might	O
want	O
to	O
generate	O
the	O
search	B
tree	I
dynamically	O
as	O
we	O
will	O
do	O
in	O
this	O
chapter	O
)	O
.	O
for	O
calculating	O
a	O
search	B
tree	I
we	O
use	O
a	O
graph	O
.	O
we	O
will	O
represent	O
graphs	O
as	O
node	O
with	O
links	O
between	O
some	O
of	O
the	O
nodes	O
.	O
for	O
solving	O
puzzles	O
and	O
for	O
game	O
related	O
search	B
,	O
we	O
will	O
represent	O
positions	O
in	O
the	O
search	B
space	O
with	O
java	O
objects	O
called	O
nodes	O
.	O
nodes	O
contain	O
arrays	O
of	O
references	O
to	O
both	O
child	O
and	O
parent	O
nodes	O
.	O
a	O
search	B
space	O
using	O
this	O
node	O
representation	O
can	O
be	O
viewed	O
as	O
a	O
directed	O
graph	O
or	O
a	O
tree	O
.	O
the	O
node	O
that	O
has	O
no	O
parent	O
nodes	O
is	O
the	O
root	O
node	O
and	O
all	O
nodes	O
that	O
have	O
no	O
child	O
nodes	O
a	O
called	O
leaf	O
nodes	O
.	O
search	B
operators	O
are	O
used	O
to	O
move	O
from	O
one	O
point	O
in	O
the	O
search	B
space	O
to	O
another	O
.	O
we	O
deal	O
with	O
quantized	O
search	B
spaces	O
in	O
this	O
chapter	O
,	O
but	O
search	B
spaces	O
can	O
also	O
be	O
continuous	O
in	O
some	O
applications	O
.	O
often	O
search	B
spaces	O
are	O
either	O
very	O
large	O
or	O
are	O
inﬁnite	O
.	O
in	O
these	O
cases	O
,	O
we	O
implicitly	O
deﬁne	O
a	O
search	B
space	O
using	O
some	O
algorithm	O
for	O
extending	O
the	O
space	O
from	O
our	O
reference	O
position	O
in	O
the	O
space	O
.	O
figure	O
2.1	O
shows	O
representations	O
of	O
search	B
space	O
as	O
both	O
connected	O
nodes	O
in	O
a	O
graph	O
and	O
as	O
a	O
two-	O
dimensional	O
grid	O
with	O
arrows	O
indicating	O
possible	O
movement	O
from	O
a	O
reference	O
point	O
denoted	O
by	O
r.	O
when	O
we	O
specify	O
a	O
search	B
space	O
as	O
a	O
two-dimensional	O
array	O
,	O
search	B
operators	O
will	O
move	O
the	O
point	O
of	O
reference	O
in	O
the	O
search	B
space	O
from	O
a	O
speciﬁc	O
grid	O
location	O
to	O
an	O
adjoining	O
grid	O
location	O
.	O
for	O
some	O
applications	O
,	O
search	B
operators	O
are	O
limited	O
to	O
moving	O
up/down/left/right	O
and	O
in	O
other	O
applications	O
operators	O
can	O
additionally	O
move	O
the	O
reference	O
location	O
diagonally	O
.	O
when	O
we	O
specify	O
a	O
search	B
space	O
using	O
node	O
representation	O
,	O
search	B
operators	O
can	O
move	O
the	O
reference	O
point	O
down	O
to	O
any	O
child	O
node	O
or	O
up	O
to	O
the	O
parent	O
node	O
.	O
for	O
search	B
spaces	O
that	O
are	O
represented	O
implicitly	O
,	O
search	B
operators	O
are	O
also	O
responsible	O
for	O
determining	O
legal	O
child	O
nodes	O
,	O
if	O
any	O
,	O
from	O
the	O
reference	O
point	O
.	O
note	O
that	O
i	O
use	O
different	O
libraries	O
for	O
the	O
maze	O
and	O
graph	O
search	B
examples	O
.	O
2.2	O
finding	O
paths	O
in	O
mazes	O
the	O
example	O
program	O
used	O
in	O
this	O
section	O
is	O
mazesearch.java	O
in	O
the	O
directory	O
sr-	O
c/search/maze	O
and	O
i	O
assume	O
that	O
the	O
reader	O
has	O
downloaded	O
the	O
entire	O
example	O
zip	O
ﬁle	O
for	O
this	O
book	O
and	O
placed	O
the	O
source	O
ﬁles	O
for	O
the	O
examples	O
in	O
a	O
convenient	O
place	O
.	O
6	O
2.2	O
finding	O
paths	O
in	O
mazes	O
figure	O
2.1	O
:	O
a	O
directed	O
graph	O
representation	O
is	O
shown	O
on	O
the	O
left	O
and	O
a	O
two-	O
dimensional	O
grid	O
(	O
or	O
maze	O
)	O
representation	O
is	O
shown	O
on	O
the	O
right	O
.	O
in	O
both	O
representations	O
,	O
the	O
letter	O
r	O
is	O
used	O
to	O
represent	O
the	O
current	O
posi-	O
tion	O
(	O
or	O
reference	O
point	O
)	O
and	O
the	O
arrowheads	O
indicate	O
legal	O
moves	O
gener-	O
ated	O
by	O
a	O
search	B
operator	O
.	O
in	O
the	O
maze	O
representation	O
,	O
the	O
two	O
grid	O
cells	O
marked	O
with	O
an	O
x	O
indicate	O
that	O
a	O
search	B
operator	O
can	O
not	O
generate	O
this	O
grid	O
location	O
.	O
figure	O
2.2	O
shows	O
the	O
uml	O
class	O
diagram	O
for	O
the	O
maze	O
search	B
classes	O
:	O
depth	O
ﬁrst	O
and	O
breadth	O
ﬁrst	O
search	O
.	O
the	O
abstract	O
base	O
class	O
abstractsearchengine	O
contains	O
common	O
code	O
and	O
data	O
that	O
is	O
required	O
by	O
both	O
the	O
classes	O
depthf	O
irstsearch	O
and	O
breadthf	O
irstsearch	O
.	O
the	O
class	O
m	O
aze	O
is	O
used	O
to	O
record	O
the	O
data	O
for	O
a	O
two-	O
dimensional	O
maze	O
,	O
including	O
which	O
grid	O
locations	O
contain	O
walls	O
or	O
obstacles	O
.	O
the	O
class	O
m	O
aze	O
deﬁnes	O
three	O
static	O
short	O
integer	O
values	O
used	O
to	O
indicate	O
obstacles	O
,	O
the	O
starting	O
location	O
,	O
and	O
the	O
ending	O
location	O
.	O
the	O
java	O
class	O
m	O
aze	O
deﬁnes	O
the	O
search	B
space	O
.	O
this	O
class	O
allocates	O
a	O
two-dimensional	O
array	O
of	O
short	O
integers	O
to	O
represent	O
the	O
state	O
of	O
any	O
grid	O
location	O
in	O
the	O
maze	O
.	O
when-	O
ever	O
we	O
need	O
to	O
store	O
a	O
pair	O
of	O
integers	O
,	O
we	O
will	O
use	O
an	O
instance	O
of	O
the	O
standard	O
java	O
class	O
java.awt.dimension	O
,	O
which	O
has	O
two	O
integer	O
data	O
components	O
:	O
width	O
and	O
height	O
.	O
whenever	O
we	O
need	O
to	O
store	O
an	O
x-y	O
grid	O
location	O
,	O
we	O
create	O
a	O
new	O
dimension	O
object	O
(	O
if	O
required	O
)	O
,	O
and	O
store	O
the	O
x	O
coordinate	O
in	O
dimension.width	O
and	O
the	O
y	O
coor-	O
dinate	O
in	O
dimension.height	O
.	O
as	O
in	O
the	O
right-hand	O
side	O
of	O
figure	O
2.1	O
,	O
the	O
operator	O
for	O
moving	O
through	O
the	O
search	B
space	O
from	O
given	O
x-y	O
coordinates	O
allows	O
a	O
transition	O
to	O
any	O
adjacent	O
grid	O
location	O
that	O
is	O
empty	O
.	O
the	O
maze	O
class	O
also	O
contains	O
the	O
x-y	O
location	O
for	O
the	O
starting	O
location	O
(	O
startloc	O
)	O
and	O
goal	O
location	O
(	O
goalloc	O
)	O
.	O
note	O
that	O
for	O
these	O
examples	O
,	O
the	O
class	O
maze	O
sets	O
the	O
starting	O
location	O
to	O
grid	O
coordinates	O
0-0	O
(	O
upper	O
left	O
corner	O
of	O
the	O
maze	O
in	O
the	O
ﬁgures	O
to	O
follow	O
)	O
and	O
the	O
goal	O
node	O
in	O
(	O
width	O
-	O
1	O
)	O
-	O
(	O
height	O
-	O
1	O
)	O
(	O
lower	O
right	O
corner	O
in	O
the	O
following	O
ﬁgures	O
)	O
.	O
7	O
rr	O
2	O
search	B
figure	O
2.2	O
:	O
uml	O
class	O
diagram	O
for	O
the	O
maze	O
search	B
java	O
classes	O
the	O
abstract	O
class	O
abstractsearchengine	O
is	O
the	O
base	O
class	O
for	O
both	O
the	O
depth	O
ﬁrst	O
(	O
uses	O
a	O
stack	O
to	O
store	O
moves	O
)	O
search	B
class	O
depthf	O
irstsearchengine	O
and	O
the	O
breadth	O
ﬁrst	O
(	O
uses	O
a	O
queue	O
to	O
store	O
moves	O
)	O
search	B
class	O
breadthf	O
irstsearchengine	O
.	O
we	O
will	O
start	O
by	O
looking	O
at	O
the	O
common	O
data	O
and	O
behavior	O
deﬁned	O
in	O
abstractsearchengine	O
.	O
the	O
class	O
constructor	O
has	O
two	O
required	O
arguments	O
:	O
the	O
width	O
and	O
height	O
of	O
the	O
maze	O
,	O
measured	O
in	O
grid	O
cells	O
.	O
the	O
constructor	O
deﬁnes	O
an	O
instance	O
of	O
the	O
m	O
aze	O
class	O
of	O
the	O
desired	O
size	O
and	O
then	O
calls	O
the	O
utility	O
method	O
initsearch	O
to	O
allocate	O
an	O
array	O
searchp	O
ath	O
of	O
dimension	O
objects	O
,	O
which	O
will	O
be	O
used	O
to	O
record	O
the	O
path	O
traversed	O
through	O
the	O
maze	O
.	O
the	O
abstract	O
base	O
class	O
also	O
deﬁnes	O
other	O
utility	O
methods	O
:	O
•	O
equals	O
(	O
dimensiond1	O
,	O
dimensiond2	O
)	O
–	O
checks	O
to	O
see	O
if	O
two	O
arguments	O
of	O
type	O
dimension	O
are	O
the	O
same	O
.	O
•	O
getp	O
ossiblem	O
oves	O
(	O
dimensionlocation	O
)	O
–	O
returns	O
an	O
array	O
of	O
dimension	O
objects	O
that	O
can	O
be	O
moved	O
to	O
from	O
the	O
speciﬁed	O
location	O
.	O
this	O
implements	O
the	O
movement	O
operator	O
.	O
now	O
,	O
we	O
will	O
look	O
at	O
the	O
depth	O
ﬁrst	O
search	O
procedure	O
.	O
the	O
constructor	O
for	O
the	O
derived	O
class	O
depthf	O
irstsearchengine	O
calls	O
the	O
base	O
class	O
constructor	O
and	O
then	O
solves	O
the	O
search	B
problem	O
by	O
calling	O
the	O
method	O
iteratesearch	O
.	O
we	O
will	O
look	O
at	O
this	O
method	O
in	O
some	O
detail	O
.	O
the	O
arguments	O
to	O
iteratesearch	O
specify	O
the	O
current	O
location	O
and	O
the	O
current	O
search	B
depth	O
:	O
8	O
mazegetvalue	O
:	O
shortsetvalue	O
:	O
voidmazeabstractsearchenginegetpath	O
:	O
dimension	O
[	O
]	O
#	O
searchpath	O
#	O
initsearchabstractsearchengine1depthfirstsearchengineiteratesearchdepthfirstsearchenginebreadthfirstsearchenginebreadthfirstsearchenginemazedepthfirstsearchpaintmain	O
(	O
static	O
)	O
mazedepthfirstsearchmazebreadthfirstsearchpaintmain	O
(	O
static	O
)	O
mazebreadthfirstsearchjava	O
main	O
test	O
programs	O
using	O
jfc11	O
2.2	O
finding	O
paths	O
in	O
mazes	O
private	O
void	O
iteratesearch	O
(	O
dimension	O
loc	O
,	O
int	O
depth	O
)	O
the	O
class	O
variable	O
issearching	O
is	O
used	O
to	O
halt	O
search	B
,	O
avoiding	O
more	O
solutions	O
,	O
once	O
one	O
path	O
to	O
the	O
goal	O
is	O
found	O
.	O
if	O
(	O
issearching	O
==	O
false	O
)	O
return	O
;	O
we	O
set	O
the	O
maze	O
value	O
to	O
the	O
depth	O
for	O
display	O
purposes	O
only	O
:	O
maze.setvalue	O
(	O
loc.width	O
,	O
loc.height	O
,	O
(	O
short	O
)	O
depth	O
)	O
;	O
here	O
,	O
we	O
use	O
the	O
super	O
class	O
getp	O
ossiblem	O
oves	O
method	O
to	O
get	O
an	O
array	O
of	O
possible	O
neighboring	O
squares	O
that	O
we	O
could	O
move	O
to	O
;	O
we	O
then	O
loop	O
over	O
the	O
four	O
possible	O
moves	O
(	O
a	O
null	O
value	O
in	O
the	O
array	O
indicates	O
an	O
illegal	O
move	O
)	O
:	O
dimension	O
[	O
]	O
moves	O
=	O
getpossiblemoves	O
(	O
loc	O
)	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
4	O
;	O
i++	O
)	O
{	O
if	O
(	O
moves	O
[	O
i	O
]	O
==	O
null	O
)	O
break	O
;	O
//	O
out	O
of	O
possible	O
moves	O
//	O
from	O
this	O
location	O
record	O
the	O
next	O
move	O
in	O
the	O
search	B
path	O
array	O
and	O
check	O
to	O
see	O
if	O
we	O
are	O
done	O
:	O
searchpath	O
[	O
depth	O
]	O
=	O
moves	O
[	O
i	O
]	O
;	O
if	O
(	O
equals	O
(	O
moves	O
[	O
i	O
]	O
,	O
goalloc	O
)	O
)	O
{	O
system.out.println	O
(	O
``	O
found	O
the	O
goal	O
at	O
``	O
+	O
moves	O
[	O
i	O
]	O
.width	O
+	O
‘	O
‘	O
,	O
``	O
+	O
moves	O
[	O
i	O
]	O
.height	O
)	O
;	O
issearching	O
=	O
false	O
;	O
maxdepth	O
=	O
depth	O
;	O
return	O
;	O
}	O
else	O
{	O
if	O
the	O
next	O
possible	O
move	O
is	O
not	O
the	O
goal	O
move	O
,	O
we	O
recursively	O
call	O
the	O
iteratesearch	O
method	O
again	O
,	O
but	O
starting	O
from	O
this	O
new	O
location	O
and	O
increasing	O
the	O
depth	O
counter	O
by	O
one	O
:	O
iteratesearch	O
(	O
moves	O
[	O
i	O
]	O
,	O
depth	O
+	O
1	O
)	O
;	O
if	O
(	O
issearching	O
==	O
false	O
)	O
return	O
;	O
}	O
9	O
2	O
search	B
figure	O
2.3	O
:	O
using	O
depth	O
ﬁrst	O
search	O
to	O
ﬁnd	O
a	O
path	O
in	O
a	O
maze	O
ﬁnds	O
a	O
non-optimal	O
solution	O
figure	O
2.3	O
shows	O
how	O
poor	O
a	O
path	O
a	O
depth	O
ﬁrst	O
search	O
can	O
ﬁnd	O
between	O
the	O
start	O
and	O
goal	O
locations	O
in	O
the	O
maze	O
.	O
the	O
maze	O
is	O
a	O
10-by-10	O
grid	O
.	O
the	O
letter	O
s	O
marks	O
the	O
starting	O
location	O
in	O
the	O
upper	O
left	O
corner	O
and	O
the	O
goal	O
position	O
is	O
marked	O
with	O
a	O
g	O
in	O
the	O
lower	O
right	O
corner	O
of	O
the	O
grid	O
.	O
blocked	O
grid	O
cells	O
are	O
painted	O
light	O
gray	O
.	O
the	O
basic	O
problem	O
with	O
the	O
depth	O
ﬁrst	O
search	O
is	O
that	O
the	O
search	B
engine	O
will	O
often	O
start	O
searching	O
in	O
a	O
bad	O
direction	O
,	O
but	O
still	O
ﬁnd	O
a	O
path	O
eventually	O
,	O
even	O
given	O
a	O
poor	O
start	O
.	O
the	O
advantage	O
of	O
a	O
depth	O
ﬁrst	O
search	O
over	O
a	O
breadth	O
ﬁrst	O
search	O
is	O
that	O
the	O
depth	O
ﬁrst	O
search	O
requires	O
much	O
less	O
memory	O
.	O
we	O
will	O
see	O
that	O
possible	O
moves	O
for	O
depth	O
ﬁrst	O
search	O
are	O
stored	O
on	O
a	O
stack	O
(	O
last	O
in	O
,	O
ﬁrst	O
out	O
data	O
structure	O
)	O
and	O
possible	O
moves	O
for	O
a	O
breadth	O
ﬁrst	O
search	O
are	O
stored	O
in	O
a	O
queue	O
(	O
ﬁrst	O
in	O
,	O
ﬁrst	O
out	O
data	O
structure	O
)	O
.	O
the	O
derived	O
class	O
breadthf	O
irstsearch	O
is	O
similar	O
to	O
the	O
depthf	O
irstsearch	O
pro-	O
cedure	O
with	O
one	O
major	O
difference	O
:	O
from	O
a	O
speciﬁed	O
search	B
location	O
we	O
calculate	O
all	O
possible	O
moves	O
,	O
and	O
make	O
one	O
possible	O
trial	O
move	O
at	O
a	O
time	O
.	O
we	O
use	O
a	O
queue	O
data	O
structure	O
for	O
storing	O
possible	O
moves	O
,	O
placing	O
possible	O
moves	O
on	O
the	O
back	O
of	O
the	O
queue	O
as	O
they	O
are	O
calculated	O
,	O
and	O
pulling	O
test	O
moves	O
from	O
the	O
front	O
of	O
the	O
queue	O
.	O
the	O
10	O
2.2	O
finding	O
paths	O
in	O
mazes	O
effect	O
of	O
a	O
breadth	O
ﬁrst	O
search	O
is	O
that	O
it	O
“	O
fans	O
out	O
”	O
uniformly	O
from	O
the	O
starting	O
node	O
until	O
the	O
goal	O
node	O
is	O
found	O
.	O
the	O
class	O
constructor	O
for	O
breadthf	O
irstsearch	O
calls	O
the	O
super	O
class	O
constructor	O
to	O
initialize	O
the	O
maze	O
,	O
and	O
then	O
uses	O
the	O
auxiliary	O
method	O
dosearchon2dgrid	O
for	O
per-	O
forming	O
a	O
breadth	O
ﬁrst	O
search	O
for	O
the	O
goal	O
.	O
we	O
will	O
look	O
at	O
the	O
class	O
breadthf	O
irstsearch	O
in	O
some	O
detail	O
.	O
breadth	O
ﬁrst	O
search	O
uses	O
a	O
queue	O
instead	O
of	O
a	O
stack	O
(	O
depth	O
ﬁrst	O
search	O
)	O
to	O
store	O
possible	O
moves	O
.	O
the	O
utility	O
class	O
dimensionqueue	O
implements	O
a	O
standard	O
queue	O
data	O
structure	O
that	O
handles	O
instances	O
of	O
the	O
class	O
dimension	O
.	O
the	O
method	O
dosearchon2dgrid	O
is	O
not	O
recursive	O
,	O
it	O
uses	O
a	O
loop	O
to	O
add	O
new	O
search	B
positions	O
to	O
the	O
end	O
of	O
an	O
instance	O
of	O
class	O
dimensionqueue	O
and	O
to	O
remove	O
and	O
test	O
new	O
locations	O
from	O
the	O
front	O
of	O
the	O
queue	O
.	O
the	O
two-dimensional	O
array	O
allreadyv	O
isited	O
keeps	O
us	O
from	O
searching	O
the	O
same	O
location	O
twice	O
.	O
to	O
calculate	O
the	O
shortest	O
path	O
after	O
the	O
goal	O
is	O
found	O
,	O
we	O
use	O
the	O
predecessor	O
array	O
:	O
private	O
void	O
dosearchon2dgrid	O
(	O
)	O
{	O
int	O
width	O
=	O
maze.getwidth	O
(	O
)	O
;	O
int	O
height	O
=	O
maze.getheight	O
(	O
)	O
;	O
boolean	O
alreadyvisitedflag	O
[	O
]	O
[	O
]	O
=	O
new	O
boolean	O
[	O
width	O
]	O
[	O
height	O
]	O
;	O
dimension	O
predecessor	O
[	O
]	O
[	O
]	O
=	O
new	O
dimension	O
[	O
width	O
]	O
[	O
height	O
]	O
;	O
dimensionqueue	O
queue	O
=	O
new	O
dimensionqueue	O
(	O
)	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
width	O
;	O
i++	O
)	O
{	O
for	O
(	O
int	O
j=0	O
;	O
j	O
<	O
height	O
;	O
j++	O
)	O
{	O
alreadyvisitedflag	O
[	O
i	O
]	O
[	O
j	O
]	O
=	O
false	O
;	O
predecessor	O
[	O
i	O
]	O
[	O
j	O
]	O
=	O
null	O
;	O
}	O
}	O
we	O
start	O
the	O
search	B
by	O
setting	O
the	O
already	O
visited	O
ﬂag	O
for	O
the	O
starting	O
location	O
to	O
true	O
value	O
and	O
adding	O
the	O
starting	O
location	O
to	O
the	O
back	O
of	O
the	O
queue	O
:	O
alreadyvisitedflag	O
[	O
startloc.width	O
]	O
[	O
startloc.height	O
]	O
=	O
true	O
;	O
queue.addtobackofqueue	O
(	O
startloc	O
)	O
;	O
boolean	O
success	O
=	O
false	O
;	O
this	O
outer	O
loop	O
runs	O
until	O
either	O
the	O
queue	O
is	O
empty	O
or	O
the	O
goal	O
is	O
found	O
:	O
outer	O
:	O
while	O
(	O
queue.isempty	O
(	O
)	O
==	O
false	O
)	O
{	O
11	O
2	O
search	B
we	O
peek	O
at	O
the	O
dimension	O
object	O
at	O
the	O
front	O
of	O
the	O
queue	O
(	O
but	O
do	O
not	O
remove	O
it	O
)	O
and	O
get	O
the	O
adjacent	O
locations	O
to	O
the	O
current	O
position	O
in	O
the	O
maze	O
:	O
dimension	O
head	O
=	O
queue.peekatfrontofqueue	O
(	O
)	O
;	O
dimension	O
[	O
]	O
connected	O
=	O
getpossiblemoves	O
(	O
head	O
)	O
;	O
we	O
loop	O
over	O
each	O
possible	O
move	O
;	O
if	O
the	O
possible	O
move	O
is	O
valid	O
(	O
i.e.	O
,	O
not	O
null	O
)	O
and	O
if	O
we	O
have	O
not	O
already	O
visited	O
the	O
possible	O
move	O
location	O
,	O
then	O
we	O
add	O
the	O
possible	O
move	O
to	O
the	O
back	O
of	O
the	O
queue	O
and	O
set	O
the	O
predecessor	O
array	O
for	O
the	O
new	O
location	O
to	O
the	O
last	O
square	O
visited	O
(	O
head	O
is	O
the	O
value	O
from	O
the	O
front	O
of	O
the	O
queue	O
)	O
.	O
if	O
we	O
ﬁnd	O
the	O
goal	O
,	O
break	O
out	O
of	O
the	O
loop	O
:	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
4	O
;	O
i++	O
)	O
{	O
if	O
(	O
connected	O
[	O
i	O
]	O
==	O
null	O
)	O
break	O
;	O
int	O
w	O
=	O
connected	O
[	O
i	O
]	O
.width	O
;	O
int	O
h	O
=	O
connected	O
[	O
i	O
]	O
.height	O
;	O
if	O
(	O
alreadyvisitedflag	O
[	O
w	O
]	O
[	O
h	O
]	O
==	O
false	O
)	O
{	O
alreadyvisitedflag	O
[	O
w	O
]	O
[	O
h	O
]	O
=	O
true	O
;	O
predecessor	O
[	O
w	O
]	O
[	O
h	O
]	O
=	O
head	O
;	O
queue.addtobackofqueue	O
(	O
connected	O
[	O
i	O
]	O
)	O
;	O
if	O
(	O
equals	O
(	O
connected	O
[	O
i	O
]	O
,	O
goalloc	O
)	O
)	O
{	O
success	O
=	O
true	O
;	O
break	O
outer	O
;	O
//	O
we	O
are	O
done	O
}	O
}	O
}	O
we	O
have	O
processed	O
the	O
location	O
at	O
the	O
front	O
of	O
the	O
queue	O
(	O
in	O
the	O
variable	O
head	O
)	O
,	O
so	O
remove	O
it	O
:	O
queue.removefromfrontofqueue	O
(	O
)	O
;	O
}	O
now	O
that	O
we	O
are	O
out	O
of	O
the	O
main	O
loop	O
,	O
we	O
need	O
to	O
use	O
the	O
predecessor	O
array	O
to	O
get	O
the	O
shortest	O
path	O
.	O
note	O
that	O
we	O
ﬁll	O
in	O
the	O
searchp	O
ath	O
array	O
in	O
reverse	O
order	O
,	O
starting	O
with	O
the	O
goal	O
location	O
:	O
maxdepth	O
=	O
0	O
;	O
if	O
(	O
success	O
)	O
{	O
searchpath	O
[	O
maxdepth++	O
]	O
=	O
goalloc	O
;	O
12	O
2.3	O
finding	O
paths	O
in	O
graphs	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
100	O
;	O
i++	O
)	O
{	O
searchpath	O
[	O
maxdepth	O
]	O
=	O
predecessor	O
[	O
searchpath	O
[	O
maxdepth	O
-	O
1	O
]	O
.	O
width	O
]	O
[	O
searchpath	O
[	O
maxdepth	O
-	O
1	O
]	O
.	O
height	O
]	O
;	O
maxdepth++	O
;	O
if	O
(	O
equals	O
(	O
searchpath	O
[	O
maxdepth	O
-	O
1	O
]	O
,	O
startloc	O
)	O
)	O
break	O
;	O
//	O
back	O
to	O
starting	O
node	O
}	O
}	O
}	O
figure	O
2.4	O
shows	O
a	O
good	O
path	O
solution	O
between	O
starting	O
and	O
goal	O
nodes	O
.	O
starting	O
from	O
the	O
initial	O
position	O
,	O
the	O
breadth	O
ﬁrst	O
search	O
engine	O
adds	O
all	O
possible	O
moves	O
to	O
the	O
back	O
of	O
a	O
queue	O
data	O
structure	O
.	O
for	O
each	O
possible	O
move	O
added	O
to	O
this	O
queue	O
in	O
one	O
search	B
cycle	O
,	O
all	O
possible	O
moves	O
are	O
added	O
to	O
the	O
queue	O
for	O
each	O
new	O
move	O
recorded	O
.	O
visually	O
,	O
think	O
of	O
possible	O
moves	O
added	O
to	O
the	O
queue	O
as	O
“	O
fanning	O
out	O
”	O
like	O
a	O
wave	O
from	O
the	O
starting	O
location	O
.	O
the	O
breadth	O
ﬁrst	O
search	O
engine	O
stops	O
when	O
this	O
“	O
wave	O
”	O
reaches	O
the	O
goal	O
location	O
.	O
in	O
general	O
,	O
i	O
prefer	O
breadth	O
ﬁrst	O
search	O
techniques	O
to	O
depth	O
ﬁrst	O
search	O
techniques	O
when	O
memory	O
storage	O
for	O
the	O
queue	O
used	O
in	O
the	O
search	B
process	O
is	O
not	O
an	O
issue	O
.	O
in	O
general	O
,	O
the	O
memory	O
requirements	O
for	O
performing	O
depth	O
ﬁrst	O
search	O
is	O
much	O
less	O
than	O
breadth	O
ﬁrst	O
search	O
.	O
to	O
run	O
the	O
two	O
example	O
programs	O
from	O
this	O
section	O
,	O
change	O
directory	O
to	O
src/search/-	O
maze	O
and	O
type	O
:	O
javac	O
*.java	O
java	O
mazedepthfirstsearch	O
java	O
mazebreadthfirstsearch	O
note	O
that	O
the	O
classes	O
m	O
azedepthf	O
irstsearch	O
and	O
m	O
azebreadthf	O
irstsearch	O
are	O
simple	O
java	O
jfc	O
applications	O
that	O
produced	O
figures	O
2.3	O
and	O
2.4.	O
the	O
interested	O
reader	O
can	O
read	O
through	O
the	O
source	O
code	O
for	O
the	O
gui	O
test	O
programs	O
,	O
but	O
we	O
will	O
only	O
cover	O
the	O
core	O
ai	O
code	O
in	O
this	O
book	O
.	O
if	O
you	O
are	O
interested	O
in	O
the	O
gui	O
test	O
programs	O
and	O
you	O
are	O
not	O
familiar	O
with	O
the	O
java	O
jfc	O
(	O
or	O
swing	O
)	O
classes	O
,	O
there	O
are	O
several	O
good	O
tutorials	O
on	O
jfc	O
programming	O
at	O
java.sun.com	O
.	O
2.3	O
finding	O
paths	O
in	O
graphs	O
in	O
the	O
last	O
section	O
,	O
we	O
used	O
both	O
depth	O
ﬁrst	O
and	O
breadth	O
ﬁrst	O
search	O
techniques	O
to	O
ﬁnd	O
a	O
path	O
between	O
a	O
starting	O
location	O
and	O
a	O
goal	O
location	O
in	O
a	O
maze	O
.	O
another	O
common	O
13	O
2	O
search	B
figure	O
2.4	O
:	O
using	O
breadth	O
ﬁrst	O
search	O
in	O
a	O
maze	O
to	O
ﬁnd	O
an	O
optimal	O
solution	O
type	O
of	O
search	B
space	O
is	O
represented	O
by	O
a	O
graph	O
.	O
a	O
graph	O
is	O
a	O
set	O
of	O
nodes	O
and	O
links	O
.	O
we	O
characterize	O
nodes	O
as	O
containing	O
the	O
following	O
data	O
:	O
•	O
a	O
name	O
and/or	O
other	O
data	O
•	O
zero	O
or	O
more	O
links	O
to	O
other	O
nodes	O
•	O
a	O
position	O
in	O
space	O
(	O
this	O
is	O
optional	O
,	O
usually	O
for	O
display	O
or	O
visualization	O
pur-	O
poses	O
)	O
links	O
between	O
nodes	O
are	O
often	O
called	O
edges	O
.	O
the	O
algorithms	O
used	O
for	O
ﬁnding	O
paths	O
in	O
graphs	O
are	O
very	O
similar	O
to	O
ﬁnding	O
paths	O
in	O
a	O
two-dimensional	O
maze	O
.	O
the	O
primary	O
difference	O
is	O
the	O
operators	O
that	O
allow	O
us	O
to	O
move	O
from	O
one	O
node	O
to	O
another	O
.	O
in	O
the	O
last	O
section	O
we	O
saw	O
that	O
in	O
a	O
maze	O
,	O
an	O
agent	O
can	O
move	O
from	O
one	O
grid	O
space	O
to	O
another	O
if	O
the	O
target	O
space	O
is	O
empty	O
.	O
for	O
graph	O
search	B
,	O
a	O
movement	O
operator	O
allows	O
movement	O
to	O
another	O
node	O
if	O
there	O
is	O
a	O
link	O
to	O
the	O
target	O
node	O
.	O
figure	O
2.5	O
shows	O
the	O
uml	O
class	O
diagram	O
for	O
the	O
graph	O
search	B
java	O
classes	O
that	O
we	O
will	O
use	O
in	O
this	O
section	O
.	O
the	O
abstract	O
class	O
abstractgraphsearch	O
class	O
is	O
the	O
base	O
class	O
for	O
both	O
depthf	O
irstsearch	O
and	O
breadthf	O
irstsearch	O
.	O
the	O
classes	O
graphdepthf	O
irstsearch	O
and	O
graphbreadthf	O
irstsearch	O
and	O
test	O
programs	O
also	O
provide	O
a	O
java	O
foundation	O
class	O
(	O
jfc	O
)	O
or	O
swing	O
based	O
user	O
interface	O
.	O
these	O
two	O
test	O
programs	O
produced	O
figures	O
2.6	O
and	O
2.7	O
.	O
14	O
2.3	O
finding	O
paths	O
in	O
graphs	O
figure	O
2.5	O
:	O
uml	O
class	O
diagram	O
for	O
the	O
graph	O
search	B
classes	O
15	O
#	O
getnodeindex	O
(	O
string	O
name	O
)	O
:	O
intgetnodename	O
(	O
int	O
index	O
)	O
:	O
stringaddnode	O
(	O
string	O
name	O
,	O
int	O
x	O
,	O
int	O
y	O
)	O
:	O
voidgetnodename	O
(	O
int	O
index	O
)	O
:	O
stringgetnodex	O
(	O
int	O
index	O
)	O
:	O
intgetnodey	O
(	O
int	O
index	O
)	O
:	O
intgetlink1	O
(	O
int	O
index	O
)	O
:	O
intgetlink2	O
(	O
int	O
index	O
)	O
:	O
intaddlink	O
(	O
int	O
node1	O
,	O
int	O
node2	O
)	O
k	O
:	O
voidﬁndpath	O
:	O
int	O
[	O
]	O
abstractgraphsearchfindpath	O
(	O
int	O
start_node	O
,	O
int	O
goal_node	O
)	O
:	O
int	O
[	O
]	O
depthfirstsearchfindpath	O
(	O
int	O
start_node	O
,	O
int	O
goal_node	O
)	O
:	O
int	O
[	O
]	O
breadthfirstsearchmain	O
(	O
string	O
[	O
]	O
args	O
)	O
:	O
voidpaintnode	O
(	O
graphics	O
g	O
,	O
string	O
name	O
,	O
int	O
x	O
,	O
int	O
y	O
)	O
:	O
voidpaint	O
(	O
graphics	O
g	O
)	O
:	O
voidgraphdepthfirstsearchmain	O
(	O
string	O
[	O
]	O
args	O
)	O
:	O
voidpaintnode	O
(	O
graphics	O
g	O
,	O
string	O
name	O
,	O
int	O
x	O
,	O
int	O
y	O
)	O
:	O
voidpaint	O
(	O
graphics	O
g	O
)	O
:	O
voidgraphdepthfirstsearchjava	O
main	O
test	O
programs	O
using	O
jfc11	O
2	O
search	B
as	O
seen	O
in	O
figure	O
2.5	O
,	O
most	O
of	O
the	O
data	O
for	O
the	O
search	B
operations	O
(	O
i.e.	O
,	O
nodes	O
,	O
links	O
,	O
etc	O
.	O
)	O
is	O
deﬁned	O
in	O
the	O
abstract	O
class	O
abstractgraphsearch	O
.	O
this	O
abstract	O
class	O
is	O
customized	O
through	O
inheritance	O
to	O
use	O
a	O
stack	O
for	O
storing	O
possible	O
moves	O
(	O
i.e.	O
,	O
the	O
array	O
path	O
)	O
for	O
depth	O
ﬁrst	O
search	O
and	O
a	O
queue	O
for	O
breadth	O
ﬁrst	O
search	O
.	O
the	O
abstract	O
class	O
abstractgraphsearch	O
allocates	O
data	O
required	O
by	O
both	O
derived	O
classes	O
:	O
final	O
public	O
static	O
int	O
max	O
=	O
50	O
;	O
protected	O
int	O
[	O
]	O
path	O
=	O
new	O
int	O
[	O
abstractgraphsearch.max	O
]	O
;	O
protected	O
int	O
num_path	O
=	O
0	O
;	O
//	O
for	O
nodes	O
:	O
protected	O
string	O
[	O
]	O
nodenames	O
=	O
new	O
string	O
[	O
max	O
]	O
;	O
protected	O
int	O
[	O
]	O
node_x	O
=	O
new	O
int	O
[	O
max	O
]	O
;	O
protected	O
int	O
[	O
]	O
node_y	O
=	O
new	O
int	O
[	O
max	O
]	O
;	O
//	O
for	O
links	O
between	O
nodes	O
:	O
protected	O
int	O
[	O
]	O
link_1	O
=	O
new	O
int	O
[	O
max	O
]	O
;	O
protected	O
int	O
[	O
]	O
link_2	O
=	O
new	O
int	O
[	O
max	O
]	O
;	O
protected	O
int	O
[	O
]	O
lengths	O
=	O
new	O
int	O
[	O
max	O
]	O
;	O
protected	O
int	O
numnodes	O
=	O
0	O
;	O
protected	O
int	O
numlinks	O
=	O
0	O
;	O
protected	O
int	O
goalnodeindex	O
=	O
-1	O
,	O
startnodeindex	O
=	O
-1	O
;	O
the	O
abstract	O
base	O
class	O
also	O
provides	O
several	O
common	O
utility	O
methods	O
:	O
•	O
addnode	O
(	O
string	O
name	O
,	O
int	O
x	O
,	O
int	O
y	O
)	O
–	O
adds	O
a	O
new	O
node	O
•	O
addlink	O
(	O
int	O
n1	O
,	O
int	O
n2	O
)	O
–	O
adds	O
a	O
bidirectional	O
link	O
between	O
nodes	O
indexed	O
by	O
n1	O
and	O
n2	O
.	O
node	O
indexes	O
start	O
at	O
zero	O
and	O
are	O
in	O
the	O
order	O
of	O
calling	O
addnode	O
.	O
•	O
addlink	O
(	O
string	O
n1	O
,	O
string	O
n2	O
)	O
–	O
adds	O
a	O
bidirectional	O
link	O
between	O
nodes	O
spec-	O
iﬁed	O
by	O
their	O
names	O
•	O
getnumnodes	O
(	O
)	O
–	O
returns	O
the	O
number	O
of	O
nodes	O
•	O
getnumlinks	O
(	O
)	O
–	O
returns	O
the	O
number	O
of	O
links	O
•	O
getnodename	O
(	O
int	O
index	O
)	O
–	O
returns	O
a	O
node	O
’	O
s	O
name	O
•	O
getnodex	O
(	O
)	O
,	O
getnodey	O
(	O
)	O
–	O
return	O
the	O
coordinates	O
of	O
a	O
node	O
•	O
getnodeindex	O
(	O
string	O
name	O
)	O
–	O
gets	O
the	O
index	O
of	O
a	O
node	O
,	O
given	O
its	O
name	O
16	O
2.3	O
finding	O
paths	O
in	O
graphs	O
the	O
abstract	O
base	O
class	O
deﬁnes	O
an	O
abstract	O
method	O
f	O
indp	O
ath	O
that	O
must	O
be	O
overrid-	O
den	O
.	O
we	O
will	O
start	O
with	O
the	O
derived	O
class	O
depthf	O
irstsearch	O
,	O
looking	O
at	O
its	O
im-	O
plementation	O
of	O
ﬁndpath	O
.	O
the	O
f	O
indp	O
ath	O
method	O
returns	O
an	O
array	O
of	O
node	O
indices	O
indicating	O
the	O
calculated	O
path	O
:	O
public	O
int	O
[	O
]	O
findpath	O
(	O
int	O
start_node	O
,	O
int	O
goal_node	O
)	O
{	O
the	O
class	O
variable	O
path	O
is	O
an	O
array	O
that	O
is	O
used	O
for	O
temporary	O
storage	O
;	O
we	O
set	O
the	O
ﬁrst	O
element	O
to	O
the	O
starting	O
node	O
index	O
,	O
and	O
call	O
the	O
utility	O
method	O
f	O
indp	O
athhelper	O
:	O
path	O
[	O
0	O
]	O
=	O
start_node	O
;	O
//	O
the	O
starting	O
node	O
return	O
findpathhelper	O
(	O
path	O
,	O
1	O
,	O
goal_node	O
)	O
;	O
}	O
the	O
method	O
ﬁndpathhelper	O
is	O
the	O
interesting	O
method	O
in	O
this	O
class	O
that	O
actually	O
per-	O
forms	O
the	O
depth	O
ﬁrst	O
search	O
;	O
we	O
will	O
look	O
at	O
it	O
in	O
some	O
detail	O
:	O
the	O
path	O
array	O
is	O
used	O
as	O
a	O
stack	O
to	O
keep	O
track	O
of	O
which	O
nodes	O
are	O
being	O
visited	O
during	O
the	O
search	B
.	O
the	O
argument	O
num	O
path	O
is	O
the	O
number	O
of	O
locations	O
in	O
the	O
path	O
,	O
which	O
is	O
also	O
the	O
search	B
depth	O
:	O
public	O
int	O
[	O
]	O
findpathhelper	O
(	O
int	O
[	O
]	O
path	O
,	O
int	O
num_path	O
,	O
int	O
goal_node	O
)	O
{	O
first	O
,	O
re-check	O
to	O
see	O
if	O
we	O
have	O
reached	O
the	O
goal	O
node	O
;	O
if	O
we	O
have	O
,	O
make	O
a	O
new	O
array	O
of	O
the	O
current	O
size	O
and	O
copy	O
the	O
path	O
into	O
it	O
.	O
this	O
new	O
array	O
is	O
returned	O
as	O
the	O
value	O
of	O
the	O
method	O
:	O
if	O
(	O
goal_node	O
==	O
path	O
[	O
num_path	O
-	O
1	O
]	O
)	O
{	O
int	O
[	O
]	O
ret	O
=	O
new	O
int	O
[	O
num_path	O
]	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
num_path	O
;	O
i++	O
)	O
{	O
ret	O
[	O
i	O
]	O
=	O
path	O
[	O
i	O
]	O
;	O
}	O
return	O
ret	O
;	O
//	O
we	O
are	O
done	O
!	O
}	O
we	O
have	O
not	O
found	O
the	O
goal	O
node	O
,	O
so	O
call	O
the	O
method	O
connected	O
nodes	O
to	O
ﬁnd	O
all	O
nodes	O
connected	O
to	O
the	O
current	O
node	O
that	O
are	O
not	O
already	O
on	O
the	O
search	B
path	O
(	O
see	O
the	O
source	O
code	O
for	O
the	O
implementation	O
of	O
connected	O
nodes	O
)	O
:	O
17	O
2	O
search	B
int	O
[	O
]	O
new_nodes	O
=	O
connected_nodes	O
(	O
path	O
,	O
num_path	O
)	O
;	O
if	O
there	O
are	O
still	O
connected	O
nodes	O
to	O
search	B
,	O
add	O
the	O
next	O
possible	O
“	O
node	O
to	O
visit	O
”	O
to	O
the	O
top	O
of	O
the	O
stack	O
(	O
variable	O
path	O
in	O
the	O
program	O
)	O
and	O
recursively	O
call	O
the	O
method	O
f	O
indp	O
athhelper	O
again	O
:	O
if	O
(	O
new_nodes	O
!	O
=	O
null	O
)	O
{	O
for	O
(	O
int	O
j=0	O
;	O
j	O
<	O
new_nodes.length	O
;	O
j++	O
)	O
{	O
path	O
[	O
num_path	O
]	O
=	O
new_nodes	O
[	O
j	O
]	O
;	O
int	O
[	O
]	O
test	O
=	O
findpathhelper	O
(	O
new_path	O
,	O
num_path	O
+	O
1	O
,	O
goal_node	O
)	O
;	O
if	O
(	O
test	O
!	O
=	O
null	O
)	O
{	O
if	O
(	O
test	O
[	O
test.length-1	O
]	O
==	O
goal_node	O
)	O
{	O
return	O
test	O
;	O
}	O
}	O
}	O
}	O
if	O
we	O
have	O
not	O
found	O
the	O
goal	O
node	O
,	O
return	O
null	O
,	O
instead	O
of	O
an	O
array	O
of	O
node	O
indices	O
:	O
return	O
null	O
;	O
}	O
derived	O
class	O
breadthf	O
irstsearch	O
also	O
must	O
deﬁne	O
abstract	O
method	O
f	O
indp	O
ath	O
.	O
this	O
method	O
is	O
very	O
similar	O
to	O
the	O
breadth	O
ﬁrst	O
search	O
method	O
used	O
for	O
ﬁnding	O
a	O
path	O
in	O
a	O
maze	O
:	O
a	O
queue	O
is	O
used	O
to	O
store	O
possible	O
moves	O
.	O
for	O
a	O
maze	O
,	O
we	O
used	O
a	O
queue	O
class	O
that	O
stored	O
instances	O
of	O
the	O
class	O
dimension	O
,	O
so	O
for	O
this	O
problem	O
,	O
the	O
queue	O
only	O
needs	O
to	O
store	O
integer	O
node	O
indices	O
.	O
the	O
return	O
value	O
of	O
f	O
indp	O
ath	O
is	O
an	O
array	O
of	O
node	O
indices	O
that	O
make	O
up	O
the	O
path	O
from	O
the	O
starting	O
node	O
to	O
the	O
goal	O
.	O
public	O
int	O
[	O
]	O
findpath	O
(	O
int	O
start_node	O
,	O
int	O
goal_node	O
)	O
{	O
we	O
start	O
by	O
setting	O
up	O
a	O
ﬂag	O
array	O
alreadyv	O
isited	O
to	O
prevent	O
visiting	O
the	O
same	O
node	O
twice	O
,	O
and	O
allocating	O
a	O
predecessors	O
array	O
that	O
we	O
will	O
use	O
to	O
ﬁnd	O
the	O
shortest	O
path	O
once	O
the	O
goal	O
is	O
reached	O
:	O
//	O
data	O
structures	O
for	O
depth	O
first	O
search	B
:	O
18	O
2.3	O
finding	O
paths	O
in	O
graphs	O
boolean	O
[	O
]	O
alreadyvisitedflag	O
=	O
int	O
[	O
]	O
predecessor	O
=	O
new	O
int	O
[	O
numnodes	O
]	O
;	O
new	O
boolean	O
[	O
numnodes	O
]	O
;	O
the	O
class	O
intqueue	O
is	O
a	O
private	O
class	O
deﬁned	O
in	O
the	O
ﬁle	O
breadthfirstsearch.java	O
;	O
it	O
implements	O
a	O
standard	O
queue	O
:	O
intqueue	O
queue	O
=	O
new	O
intqueue	O
(	O
numnodes	O
+	O
2	O
)	O
;	O
before	O
the	O
main	O
loop	O
,	O
we	O
need	O
to	O
initialize	O
the	O
already	O
visited	O
and	O
predecessor	O
ar-	O
rays	O
,	O
set	O
the	O
visited	O
ﬂag	O
for	O
the	O
starting	O
node	O
to	O
true	O
,	O
and	O
add	O
the	O
starting	O
node	O
index	O
to	O
the	O
back	O
of	O
the	O
queue	O
:	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
numnodes	O
;	O
i++	O
)	O
{	O
alreadyvisitedflag	O
[	O
i	O
]	O
=	O
false	O
;	O
predecessor	O
[	O
i	O
]	O
=	O
-1	O
;	O
}	O
alreadyvisitedflag	O
[	O
start_node	O
]	O
=	O
true	O
;	O
queue.addtobackofqueue	O
(	O
start_node	O
)	O
;	O
the	O
main	O
loop	O
runs	O
until	O
we	O
ﬁnd	O
the	O
goal	O
node	O
or	O
the	O
search	B
queue	O
is	O
empty	O
:	O
outer	O
:	O
while	O
(	O
queue.isempty	O
(	O
)	O
==	O
false	O
)	O
{	O
we	O
will	O
read	O
(	O
without	O
removing	O
)	O
the	O
node	O
index	O
at	O
the	O
front	O
of	O
the	O
queue	O
and	O
calcu-	O
late	O
the	O
nodes	O
that	O
are	O
connected	O
to	O
the	O
current	O
node	O
(	O
but	O
not	O
already	O
on	O
the	O
visited	O
list	O
)	O
using	O
the	O
connected	O
nodes	O
method	O
(	O
the	O
interested	O
reader	O
can	O
see	O
the	O
imple-	O
mentation	O
in	O
the	O
source	O
code	O
for	O
this	O
class	O
)	O
:	O
int	O
head	O
=	O
queue.peekatfrontofqueue	O
(	O
)	O
;	O
int	O
[	O
]	O
connected	O
=	O
connected_nodes	O
(	O
head	O
)	O
;	O
if	O
(	O
connected	O
!	O
=	O
null	O
)	O
{	O
if	O
each	O
node	O
connected	O
by	O
a	O
link	O
to	O
the	O
current	O
node	O
has	O
not	O
already	O
been	O
visited	O
,	O
set	O
the	O
predecessor	O
array	O
and	O
add	O
the	O
new	O
node	O
index	O
to	O
the	O
back	O
of	O
the	O
search	B
queue	O
;	O
we	O
stop	O
if	O
the	O
goal	O
is	O
found	O
:	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
connected.length	O
;	O
i++	O
)	O
{	O
if	O
(	O
alreadyvisitedflag	O
[	O
connected	O
[	O
i	O
]	O
]	O
==	O
false	O
)	O
{	O
predecessor	O
[	O
connected	O
[	O
i	O
]	O
]	O
=	O
head	O
;	O
19	O
2	O
search	B
}	O
}	O
queue.addtobackofqueue	O
(	O
connected	O
[	O
i	O
]	O
)	O
;	O
if	O
(	O
connected	O
[	O
i	O
]	O
==	O
goal_node	O
)	O
break	O
outer	O
;	O
}	O
}	O
alreadyvisitedflag	O
[	O
head	O
]	O
=	O
true	O
;	O
queue.removefromqueue	O
(	O
)	O
;	O
//	O
ignore	O
return	O
value	O
now	O
that	O
the	O
goal	O
node	O
has	O
been	O
found	O
,	O
we	O
can	O
build	O
a	O
new	O
array	O
of	O
returned	O
node	O
indices	O
for	O
the	O
calculated	O
path	O
using	O
the	O
predecessor	O
array	O
:	O
int	O
[	O
]	O
ret	O
=	O
new	O
int	O
[	O
numnodes	O
+	O
1	O
]	O
;	O
int	O
count	O
=	O
0	O
;	O
ret	O
[	O
count++	O
]	O
=	O
goal_node	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
numnodes	O
;	O
i++	O
)	O
{	O
ret	O
[	O
count	O
]	O
=	O
predecessor	O
[	O
ret	O
[	O
count	O
-	O
1	O
]	O
]	O
;	O
count++	O
;	O
if	O
(	O
ret	O
[	O
count	O
-	O
1	O
]	O
==	O
start_node	O
)	O
break	O
;	O
}	O
int	O
[	O
]	O
ret2	O
=	O
new	O
int	O
[	O
count	O
]	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
count	O
;	O
i++	O
)	O
{	O
ret2	O
[	O
i	O
]	O
=	O
ret	O
[	O
count	O
-	O
1	O
-	O
i	O
]	O
;	O
}	O
return	O
ret2	O
;	O
}	O
in	O
order	O
to	O
run	O
both	O
the	O
depth	O
ﬁrst	O
and	O
breadth	O
ﬁrst	O
graph	O
search	B
examples	O
,	O
change	O
directory	O
to	O
src-search-maze	O
and	O
type	O
the	O
following	O
commands	O
:	O
javac	O
*.java	O
java	O
graphdepthfirstsearch	O
java	O
graphbeadthfirstsearch	O
figure	O
2.6	O
shows	O
the	O
results	O
of	O
ﬁnding	O
a	O
route	O
from	O
node	O
1	O
to	O
node	O
9	O
in	O
the	O
small	O
test	O
graph	O
.	O
like	O
the	O
depth	O
ﬁrst	O
results	O
seen	O
in	O
the	O
maze	O
search	B
,	O
this	O
path	O
is	O
not	O
optimal	O
.	O
figure	O
2.7	O
shows	O
an	O
optimal	O
path	O
found	O
using	O
a	O
breadth	O
ﬁrst	O
search	O
.	O
as	O
we	O
saw	O
in	O
the	O
maze	O
search	B
example	O
,	O
we	O
ﬁnd	O
optimal	O
solutions	O
using	O
breadth	O
ﬁrst	O
search	O
at	O
the	O
cost	O
of	O
extra	O
memory	O
required	O
for	O
the	O
breadth	O
ﬁrst	O
search	O
.	O
20	O
2.3	O
finding	O
paths	O
in	O
graphs	O
figure	O
2.6	O
:	O
using	O
depth	O
ﬁrst	O
search	O
in	O
a	O
sample	O
graph	O
figure	O
2.7	O
:	O
using	O
breadth	O
ﬁrst	O
search	O
in	O
a	O
sample	O
graph	O
21	O
2	O
search	B
2.4	O
adding	O
heuristics	O
to	O
breadth	O
first	O
search	B
we	O
can	O
usually	O
make	O
breadth	O
ﬁrst	O
search	O
more	O
efﬁcient	O
by	O
ordering	O
the	O
search	B
order	O
for	O
all	O
branches	O
from	O
a	O
given	O
position	O
in	O
the	O
search	B
space	O
.	O
for	O
example	O
,	O
when	O
adding	O
new	O
nodes	O
from	O
a	O
speciﬁed	O
reference	O
point	O
in	O
the	O
search	B
space	O
,	O
we	O
might	O
want	O
to	O
add	O
nodes	O
to	O
the	O
search	B
queue	O
ﬁrst	O
that	O
are	O
“	O
in	O
the	O
direction	O
”	O
of	O
the	O
goal	O
location	O
:	O
in	O
a	O
two-dimensional	O
search	B
like	O
our	O
maze	O
search	B
,	O
we	O
might	O
want	O
to	O
search	B
connected	O
grid	O
cells	O
ﬁrst	O
that	O
were	O
closest	O
to	O
the	O
goal	O
grid	O
space	O
.	O
in	O
this	O
case	O
,	O
pre-sorting	O
nodes	O
(	O
in	O
order	O
of	O
closest	O
distance	O
to	O
the	O
goal	O
)	O
added	O
to	O
the	O
breadth	O
ﬁrst	O
search	O
queue	O
could	O
have	O
a	O
dramatic	O
effect	O
on	O
search	B
efﬁciency	O
.	O
in	O
the	O
next	O
chapter	O
we	O
will	O
build	O
a	O
simple	O
real-time	O
planning	O
system	O
around	O
our	O
breadth	O
ﬁrst	O
maze	O
search	B
program	O
;	O
this	O
new	O
program	O
will	O
use	O
heuristics	O
.	O
the	O
alpha-beta	O
additions	O
to	O
breadth	O
ﬁrst	O
search	O
are	O
seen	O
in	O
in	O
the	O
next	O
section	O
.	O
2.5	O
search	B
and	O
game	B
playing	I
now	O
that	O
a	O
computer	O
program	O
has	O
won	O
a	O
match	O
against	O
the	O
human	O
world	O
champion	O
,	O
perhaps	O
people	O
’	O
s	O
expectations	O
of	O
ai	O
systems	O
will	O
be	O
prematurely	O
optimistic	O
.	O
game	O
search	O
techniques	O
are	O
not	O
real	O
ai	O
,	O
but	O
rather	O
,	O
standard	O
programming	O
techniques	O
.	O
a	O
better	O
platform	O
for	O
doing	O
ai	O
research	O
is	O
the	O
game	O
of	O
go	O
.	O
there	O
are	O
so	O
many	O
possible	O
moves	O
in	O
the	O
game	O
of	O
go	O
that	O
brute	O
force	O
look	O
ahead	O
(	O
as	O
is	O
used	O
in	O
chess	B
playing	O
programs	O
)	O
simply	O
does	O
not	O
work	O
.	O
that	O
said	O
,	O
min-max	O
type	O
search	B
algorithms	O
with	O
alpha-beta	O
cutoff	O
optimizations	O
are	O
an	O
important	O
programming	O
technique	O
and	O
will	O
be	O
covered	O
in	O
some	O
detail	O
in	O
the	O
re-	O
mainder	O
of	O
this	O
chapter	O
.	O
we	O
will	O
design	O
an	O
abstract	O
java	O
class	O
library	O
for	O
imple-	O
menting	O
alpha-beta	O
enhanced	O
min-max	O
search	B
,	O
and	O
then	O
use	O
this	O
framework	O
to	O
write	O
programs	O
to	O
play	O
tic-tac-toe	B
and	O
chess	B
.	O
2.5.1	O
alpha-beta	B
search	I
the	O
ﬁrst	O
game	O
that	O
we	O
will	O
implement	O
will	O
be	O
tic-tac-toe	B
,	O
so	O
we	O
will	O
use	O
this	O
simple	O
game	O
to	O
explain	O
how	O
the	O
min-max	O
search	B
(	O
with	O
alpha-beta	O
cutoffs	O
)	O
works	O
.	O
figure	O
2.8	O
shows	O
the	O
possible	O
moves	O
generated	O
from	O
a	O
tic-tac-toe	B
position	O
where	O
x	O
has	O
made	O
three	O
moves	O
and	O
o	O
has	O
made	O
two	O
moves	O
;	O
it	O
is	O
o	O
’	O
s	O
turn	O
to	O
move	O
.	O
this	O
is	O
“	O
level	O
0	O
”	O
in	O
figure	O
2.8.	O
at	O
level	O
0	O
,	O
o	O
has	O
four	O
possible	O
moves	O
.	O
how	O
do	O
we	O
assign	O
a	O
ﬁtness	B
value	O
to	O
each	O
of	O
o	O
’	O
s	O
possible	O
moves	O
at	O
level	O
0	O
?	O
the	O
basic	O
min-max	O
search	B
algorithm	O
provides	O
a	O
simple	O
solution	O
to	O
this	O
problem	O
:	O
for	O
each	O
possible	O
move	O
by	O
o	O
in	O
level	O
1	O
,	O
make	O
the	O
move	O
and	O
store	O
the	O
resulting	O
4	O
board	O
positions	O
.	O
now	O
,	O
at	O
level	O
1	O
,	O
it	O
is	O
x	O
’	O
s	O
turn	O
to	O
move	O
.	O
how	O
do	O
we	O
assign	O
values	O
to	O
each	O
of	O
x	O
’	O
s	O
possible	O
three	O
moves	O
22	O
2.5	O
search	B
and	O
game	B
playing	I
figure	O
2.8	O
:	O
alpha-beta	O
algorithm	O
applied	O
to	O
part	O
of	O
a	O
game	O
of	O
tic-tac-toe	B
in	O
figure	O
2.8	O
?	O
simple	O
,	O
we	O
continue	O
to	O
search	B
by	O
making	O
each	O
of	O
x	O
’	O
s	O
possible	O
moves	O
and	O
storing	O
each	O
possible	O
board	O
position	O
for	O
level	O
2.	O
we	O
keep	O
recursively	O
applying	O
this	O
algorithm	O
until	O
we	O
either	O
reach	O
a	O
maximum	O
search	B
depth	O
,	O
or	O
there	O
is	O
a	O
win	O
,	O
loss	O
,	O
or	O
draw	O
detected	O
in	O
a	O
generated	O
move	O
.	O
we	O
assume	O
that	O
there	O
is	O
a	O
ﬁtness	B
function	O
available	O
that	O
rates	O
a	O
given	O
board	O
position	O
relative	O
to	O
either	O
side	O
.	O
note	O
that	O
the	O
value	O
of	O
any	O
board	O
position	O
for	O
x	O
is	O
the	O
negative	O
of	O
the	O
value	O
for	O
o.	O
to	O
make	O
the	O
search	B
more	O
efﬁcient	O
,	O
we	O
maintain	O
values	O
for	O
alpha	O
and	O
beta	O
for	O
each	O
search	B
level	O
.	O
alpha	O
and	O
beta	O
determine	O
the	O
best	O
possible/worst	O
possible	O
move	O
avail-	O
able	O
at	O
a	O
given	O
level	O
.	O
if	O
we	O
reach	O
a	O
situation	O
like	O
the	O
second	O
position	O
in	O
level	O
2	O
where	O
x	O
has	O
won	O
,	O
then	O
we	O
can	O
immediately	O
determine	O
that	O
o	O
’	O
s	O
last	O
move	O
in	O
level	O
1	O
that	O
produced	O
this	O
position	O
(	O
of	O
allowing	O
x	O
an	O
instant	O
win	O
)	O
is	O
a	O
low	O
valued	O
move	O
for	O
o	O
(	O
but	O
a	O
high	O
valued	O
move	O
for	O
x	O
)	O
.	O
this	O
allows	O
us	O
to	O
immediately	O
“	O
prune	O
”	O
the	O
search	B
tree	I
by	O
ignoring	O
all	O
other	O
possible	O
positions	O
arising	O
from	O
the	O
ﬁrst	O
o	O
move	O
in	O
level	O
1.	O
this	O
alpha-beta	O
cutoff	O
(	O
or	O
tree	O
pruning	O
)	O
procedure	O
can	O
save	O
a	O
large	O
percentage	O
of	O
search	B
time	O
,	O
especially	O
if	O
we	O
can	O
set	O
the	O
search	B
order	O
at	O
each	O
level	O
with	O
“	O
probably	O
best	O
”	O
moves	O
considered	O
ﬁrst	O
.	O
while	O
tree	O
diagrams	O
as	O
seen	O
in	O
figure	O
2.8	O
quickly	O
get	O
complicated	O
,	O
it	O
is	O
easy	O
for	O
a	O
computer	O
program	O
to	O
generate	O
possible	O
moves	O
,	O
calculate	O
new	O
possible	O
board	O
posi-	O
tions	O
and	O
temporarily	O
store	O
them	O
,	O
and	O
recursively	O
apply	O
the	O
same	O
procedure	O
to	O
the	O
next	O
search	B
level	O
(	O
but	O
switching	O
min-max	O
“	O
sides	O
”	O
in	O
the	O
board	O
evaluation	O
)	O
.	O
we	O
will	O
see	O
in	O
the	O
next	O
section	O
that	O
it	O
only	O
requires	O
about	O
100	O
lines	O
of	O
java	O
code	O
to	O
implement	O
an	O
abstract	O
class	O
framework	O
for	O
handling	O
the	O
details	O
of	O
performing	O
an	O
alpha-beta	O
en-	O
hanced	O
search	B
.	O
the	O
additional	O
game	O
speciﬁc	O
classes	O
for	O
tic-tac-toe	B
require	O
about	O
an	O
additional	O
150	O
lines	O
of	O
code	O
to	O
implement	O
;	O
chess	B
requires	O
an	O
additional	O
450	O
lines	O
of	O
code	O
.	O
23	O
xxxxxxxxxxxxxxxxxxxxxxxxxxooooooooooooooooooooooolevel	O
0	O
:	O
o	O
to	O
movelevel	O
1	O
:	O
x	O
to	O
movelevel	O
2	O
:	O
o	O
to	O
move	O
2	O
search	B
2.5.2	O
a	O
java	O
framework	O
for	O
search	B
and	O
game	B
playing	I
the	O
general	O
interface	O
for	O
the	O
java	O
classes	O
that	O
we	O
will	O
develop	O
in	O
this	O
section	O
was	O
inspired	O
by	O
the	O
common	O
lisp	O
game-playing	O
framework	O
written	O
by	O
kevin	O
knight	O
and	O
described	O
in	O
(	O
rich	O
,	O
knight	O
1991	O
)	O
.	O
the	O
abstract	O
class	O
gamesearch	O
contains	O
the	O
code	O
for	O
running	O
a	O
two-player	O
game	O
and	O
performing	O
an	O
alpha-beta	B
search	I
.	O
this	O
class	O
needs	O
to	O
be	O
sub-classed	O
to	O
provide	O
the	O
eight	O
methods	O
:	O
public	O
abstract	O
boolean	O
drawnposition	O
(	O
position	O
p	O
)	O
public	O
abstract	O
boolean	O
wonposition	O
(	O
position	O
p	O
,	O
positionevaluation	O
(	O
position	O
p	O
,	O
boolean	O
player	O
)	O
boolean	O
player	O
)	O
public	O
abstract	O
void	O
printposition	O
(	O
position	O
p	O
)	O
public	O
abstract	O
position	O
[	O
]	O
possiblemoves	O
(	O
position	O
p	O
,	O
boolean	O
player	O
)	O
public	O
abstract	O
position	O
makemove	O
(	O
position	O
p	O
,	O
boolean	O
player	O
,	O
move	O
move	O
)	O
public	O
abstract	O
boolean	O
reachedmaxdepth	O
(	O
position	O
p	O
,	O
int	O
depth	O
)	O
public	O
abstract	O
move	O
getmove	O
(	O
)	O
the	O
method	O
drawnp	O
osition	O
should	O
return	O
a	O
boolean	O
true	O
value	O
if	O
the	O
given	O
po-	O
sition	O
evaluates	O
to	O
a	O
draw	O
situation	O
.	O
the	O
method	O
wonp	O
osition	O
should	O
return	O
a	O
true	O
value	O
if	O
the	O
input	O
position	O
is	O
won	O
for	O
the	O
indicated	O
player	O
.	O
by	O
convention	O
,	O
i	O
use	O
a	O
boolean	O
true	O
value	O
to	O
represent	O
the	O
computer	O
and	O
a	O
boolean	O
false	O
value	O
to	O
represent	O
the	O
human	O
opponent	O
.	O
the	O
method	O
positionevaluation	O
returns	O
a	O
posi-	O
tion	O
evaluation	O
for	O
a	O
speciﬁed	O
board	O
position	O
and	O
player	O
.	O
note	O
that	O
if	O
we	O
call	O
po-	O
sitionevaluation	O
switching	O
the	O
player	O
for	O
the	O
same	O
board	O
position	O
,	O
then	O
the	O
value	O
returned	O
is	O
the	O
negative	O
of	O
the	O
value	O
calculated	O
for	O
the	O
opposing	O
player	O
.	O
the	O
method	O
possiblem	O
oves	O
returns	O
an	O
array	O
of	O
objects	O
belonging	O
to	O
the	O
class	O
position	O
.	O
in	O
an	O
actual	O
game	O
like	O
chess	B
,	O
the	O
position	O
objects	O
will	O
actually	O
belong	O
to	O
a	O
chess-speciﬁc	O
reﬁnement	O
of	O
the	O
position	O
class	O
(	O
e.g.	O
,	O
for	O
the	O
chess	B
program	O
developed	O
later	O
in	O
this	O
chapter	O
,	O
the	O
method	O
possiblem	O
oves	O
will	O
return	O
an	O
array	O
of	O
chessp	O
osition	O
ob-	O
jects	O
)	O
.	O
the	O
method	O
makem	O
ove	O
will	O
return	O
a	O
new	O
position	O
object	O
for	O
a	O
speciﬁed	O
board	O
position	O
,	O
side	O
to	O
move	O
,	O
and	O
move	O
.	O
the	O
method	O
reachedm	O
axdepth	O
returns	O
a	O
boolean	O
true	O
value	O
if	O
the	O
search	B
process	O
has	O
reached	O
a	O
satisfactory	O
depth	O
.	O
for	O
the	O
tic-tac-toe	B
program	O
,	O
the	O
method	O
reachedm	O
axdepth	O
does	O
not	O
return	O
true	O
unless	O
ei-	O
ther	O
side	O
has	O
won	O
the	O
game	O
or	O
the	O
board	O
is	O
full	O
;	O
for	O
the	O
chess	B
program	O
,	O
the	O
method	O
reachedm	O
axdepth	O
returns	O
true	O
if	O
the	O
search	B
has	O
reached	O
a	O
depth	O
of	O
4	O
half	O
moves	O
deep	O
(	O
this	O
is	O
not	O
the	O
best	O
strategy	O
,	O
but	O
it	O
has	O
the	O
advantage	O
of	O
making	O
the	O
example	O
24	O
2.5	O
search	B
and	O
game	B
playing	I
program	O
short	O
and	O
easy	O
to	O
understand	O
)	O
.	O
the	O
method	O
getm	O
ove	O
returns	O
an	O
object	O
of	O
a	O
class	O
derived	O
from	O
the	O
class	O
m	O
ove	O
(	O
e.g.	O
,	O
t	O
ict	O
act	O
oem	O
ove	O
or	O
chessm	O
ove	O
)	O
.	O
the	O
gamesearch	O
class	O
implements	O
the	O
following	O
methods	O
to	O
perform	O
game	O
search	O
:	O
protected	O
vector	O
alphabeta	O
(	O
int	O
depth	O
,	O
position	O
p	O
,	O
protected	O
vector	O
alphabetahelper	O
(	O
int	O
depth	O
,	O
boolean	O
player	O
)	O
position	O
p	O
,	O
boolean	O
player	O
,	O
float	O
alpha	O
,	O
float	O
beta	O
)	O
public	O
void	O
playgame	O
(	O
position	O
startingposition	O
,	O
boolean	O
humanplayfirst	O
)	O
the	O
method	O
alphabeta	O
is	O
simple	O
;	O
it	O
calls	O
the	O
helper	O
method	O
alphabetahelper	O
with	O
initial	O
search	B
conditions	O
;	O
the	O
method	O
alphabetahelper	O
then	O
calls	O
itself	O
recur-	O
sively	O
.	O
the	O
code	O
for	O
alphabeta	O
is	O
:	O
protected	O
vector	O
alphabeta	O
(	O
int	O
depth	O
,	O
vector	O
v	O
=	O
alphabetahelper	O
(	O
depth	O
,	O
p	O
,	O
player	O
,	O
position	O
p	O
,	O
boolean	O
player	O
)	O
{	O
1000000.0f	O
,	O
-1000000.0f	O
)	O
;	O
return	O
v	O
;	O
}	O
it	O
is	O
important	O
to	O
understand	O
what	O
is	O
in	O
the	O
vector	O
returned	O
by	O
the	O
methods	O
alphabeta	O
and	O
alphabetahelper	O
.	O
the	O
ﬁrst	O
element	O
is	O
a	O
ﬂoating	O
point	O
position	O
evaluation	O
for	O
the	O
point	O
of	O
view	O
of	O
the	O
player	O
whose	O
turn	O
it	O
is	O
to	O
move	O
;	O
the	O
remaining	O
values	O
are	O
the	O
“	O
best	O
move	O
”	O
for	O
each	O
side	O
to	O
the	O
last	O
search	B
depth	O
.	O
as	O
an	O
example	O
,	O
if	O
i	O
let	O
the	O
tic-tac-	O
toe	O
program	O
play	O
ﬁrst	O
,	O
it	O
places	O
a	O
marker	O
at	O
square	O
index	O
0	O
,	O
then	O
i	O
place	O
my	O
marker	O
in	O
the	O
center	O
of	O
the	O
board	O
an	O
index	O
4.	O
at	O
this	O
point	O
,	O
to	O
calculate	O
the	O
next	O
computer	O
move	O
,	O
alphabeta	O
is	O
called	O
and	O
returns	O
the	O
following	O
elements	O
in	O
a	O
vector	O
:	O
next	O
element	O
:	O
0.0	O
next	O
element	O
:	O
[	O
-1,0,0,0,1,0,0,0,0	O
,	O
]	O
next	O
element	O
:	O
[	O
-1,1,0,0,1,0,0,0,0	O
,	O
]	O
next	O
element	O
:	O
[	O
-1,1,0,0,1,0,0	O
,	O
-1,0	O
,	O
]	O
next	O
element	O
:	O
[	O
-1,1,0,1,1,0,0	O
,	O
-1,0	O
,	O
]	O
next	O
element	O
:	O
[	O
-1,1,0,1,1	O
,	O
-1,0	O
,	O
-1,0	O
,	O
]	O
next	O
element	O
:	O
[	O
-1,1,1,1,1	O
,	O
-1,0	O
,	O
-1,0	O
,	O
]	O
25	O
2	O
search	B
next	O
element	O
:	O
[	O
-1,1,1,1,1	O
,	O
-1	O
,	O
-1	O
,	O
-1,0	O
,	O
]	O
next	O
element	O
:	O
[	O
-1,1,1,1,1	O
,	O
-1	O
,	O
-1	O
,	O
-1,1	O
,	O
]	O
here	O
,	O
the	O
alpha-beta	O
enhanced	O
min-max	O
search	B
looked	O
all	O
the	O
way	O
to	O
the	O
end	O
of	O
the	O
game	O
and	O
these	O
board	O
positions	O
represent	O
what	O
the	O
search	B
procedure	O
calculated	O
as	O
the	O
best	O
moves	O
for	O
each	O
side	O
.	O
note	O
that	O
the	O
class	O
t	O
ict	O
act	O
oep	O
osition	O
(	O
derived	O
from	O
the	O
abstract	O
class	O
p	O
osition	O
)	O
has	O
a	O
tostring	O
method	O
to	O
print	O
the	O
board	O
values	O
to	O
a	O
string	O
.	O
the	O
same	O
printout	O
of	O
the	O
returned	O
vector	O
from	O
alphabeta	O
for	O
the	O
chess	B
program	O
is	O
:	O
next	O
element	O
:	O
5.4	O
next	O
element	O
:	O
[	O
4,2,3,5,9,3,2,4,7,7,1,1,1,0,1,1,1,1,7,7	O
,	O
0,0,0,0,0,0,0,0,7,7,0,0,0,1,0,0,0,0,7,7	O
,	O
0,0,0,0,0,0,0,0,7,7,0,0,0,0	O
,	O
-1,0,0,0,7,7	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1,0	O
,	O
-1	O
,	O
-1	O
,	O
-1,7,7	O
,	O
-4	O
,	O
-2	O
,	O
-3	O
,	O
-5	O
,	O
-9	O
,	O
-3	O
,	O
-2	O
,	O
-4	O
,	O
]	O
next	O
element	O
:	O
[	O
4,2,3,0,9,3,2,4,7,7,1,1,1,5,1,1,1,1,7,7	O
,	O
0,0,0,0,0,0,0,0,7,7,0,0,0,1,0,0,0,0,7,7	O
,	O
0,0,0,0,0,0,0,0,7,7,0,0,0,0	O
,	O
-1,0,0,0,7,7	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1,0	O
,	O
-1	O
,	O
-1	O
,	O
-1,7,7	O
,	O
-4	O
,	O
-2	O
,	O
-3	O
,	O
-5	O
,	O
-9	O
,	O
-3	O
,	O
-2	O
,	O
-4	O
,	O
]	O
next	O
element	O
:	O
[	O
4,2,3,0,9,3,2,4,7,7,1,1,1,5,1,1,1,1,7,7	O
,	O
0,0,0,0,0,0,0,0,7,7,0,0,0,1,0,0,0,0,7,7	O
,	O
0,0,0,0,0,0,0,0,7,7,0,0,0,0	O
,	O
-1	O
,	O
-5,0,0,7,7	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1,0	O
,	O
-1	O
,	O
-1	O
,	O
-1,7,7	O
,	O
-4	O
,	O
-2	O
,	O
-3,0	O
,	O
-9	O
,	O
-3	O
,	O
-2	O
,	O
-4	O
,	O
]	O
next	O
element	O
:	O
[	O
4,2,3,0,9,3,0,4,7,7,1,1,1,5,1,1,1,1,7,7	O
,	O
0,0,0,0,0,2,0,0,7,7,0,0,0,1,0,0,0,0,7,7	O
,	O
0,0,0	O
,	O
,0,0,0,0,0,7,7,0,0,0,0	O
,	O
-1	O
,	O
-5,0,0,7,7	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1,0	O
,	O
-1	O
,	O
-1	O
,	O
-1,7,7	O
,	O
-4	O
,	O
-2	O
,	O
-3,0	O
,	O
-9	O
,	O
-3	O
,	O
-2	O
,	O
-4	O
,	O
]	O
next	O
element	O
:	O
[	O
4,2,3,0,9,3,0,4,7,7,1,1,1,5,1,1,1,1,7,7	O
,	O
0,0,0,0,0,2,0,0,7,7,0,0,0,1,0,0,0,0,7,7	O
,	O
-1,0,0,0,0,0,0,0,7,7,0,0,0,0	O
,	O
-1	O
,	O
-5,0,0,7,7	O
,	O
0	O
,	O
-1	O
,	O
-1	O
,	O
-1,0	O
,	O
-1	O
,	O
-1	O
,	O
-1,7,7	O
,	O
-4	O
,	O
-2	O
,	O
-3,0	O
,	O
-9	O
,	O
-3	O
,	O
-2	O
,	O
-4	O
,	O
]	O
26	O
2.5	O
search	B
and	O
game	B
playing	I
here	O
,	O
the	O
search	B
procedure	O
assigned	O
the	O
side	O
to	O
move	O
(	O
the	O
computer	O
)	O
a	O
position	O
evaluation	O
score	O
of	O
5.4	O
;	O
this	O
is	O
an	O
artifact	O
of	O
searching	O
to	O
a	O
ﬁxed	O
depth	O
.	O
notice	O
that	O
the	O
board	O
representation	O
is	O
different	O
for	O
chess	B
,	O
but	O
because	O
the	O
gamesearch	O
class	O
manipulates	O
objects	O
derived	O
from	O
the	O
classes	O
p	O
osition	O
and	O
m	O
ove	O
,	O
the	O
gamesearch	O
class	O
does	O
not	O
need	O
to	O
have	O
any	O
knowledge	O
of	O
the	O
rules	O
for	O
a	O
speciﬁc	O
game	O
.	O
we	O
will	O
discuss	O
the	O
format	O
of	O
the	O
chess	B
position	O
class	O
chessp	O
osition	O
in	O
more	O
detail	O
when	O
we	O
develop	O
the	O
chess	B
program	O
.	O
the	O
classes	O
move	O
and	O
position	O
contain	O
no	O
data	O
and	O
methods	O
at	O
all	O
.	O
the	O
classes	O
move	O
and	O
position	O
are	O
used	O
as	O
placeholders	O
for	O
derived	O
classes	O
for	O
speciﬁc	O
games	O
.	O
the	O
search	B
methods	O
in	O
the	O
abstract	O
gamesearch	O
class	O
manipulate	O
objects	O
derived	O
from	O
the	O
classes	O
move	O
and	O
position	O
.	O
now	O
that	O
we	O
have	O
seen	O
the	O
debug	O
printout	O
of	O
the	O
contents	O
of	O
the	O
vector	O
returned	O
from	O
the	O
methods	O
alphabeta	O
and	O
alphabetahelper	O
,	O
it	O
will	O
be	O
easier	O
to	O
understand	O
how	O
the	O
method	O
alphabetahelper	O
works	O
.	O
the	O
following	O
text	O
shows	O
code	O
fragments	O
from	O
the	O
alphabetahelper	O
method	O
interspersed	O
with	O
book	O
text	O
:	O
protected	O
vector	O
alphabetahelper	O
(	O
int	O
depth	O
,	O
position	O
p	O
,	O
boolean	O
player	O
,	O
float	O
alpha	O
,	O
float	O
beta	O
)	O
{	O
here	O
,	O
we	O
notice	O
that	O
the	O
method	O
signature	O
is	O
the	O
same	O
as	O
for	O
alphabeta	O
,	O
except	O
that	O
we	O
pass	O
ﬂoating	O
point	O
alpha	O
and	O
beta	O
values	O
.	O
the	O
important	O
point	O
in	O
understanding	O
min-max	O
search	B
is	O
that	O
most	O
of	O
the	O
evaluation	O
work	O
is	O
done	O
while	O
“	O
backing	O
up	O
”	O
the	O
search	B
tree	I
;	O
that	O
is	O
,	O
the	O
search	B
proceeds	O
to	O
a	O
leaf	O
node	O
(	O
a	O
node	O
is	O
a	O
leaf	O
if	O
the	O
method	O
reachedm	O
axdepth	O
return	O
a	O
boolean	O
true	O
value	O
)	O
,	O
and	O
then	O
a	O
return	O
vector	O
for	O
the	O
leaf	O
node	O
is	O
created	O
by	O
making	O
a	O
new	O
vector	O
and	O
setting	O
its	O
ﬁrst	O
element	O
to	O
the	O
position	O
evaluation	O
of	O
the	O
position	O
at	O
the	O
leaf	O
node	O
and	O
setting	O
the	O
second	O
element	O
of	O
the	O
return	O
vector	O
to	O
the	O
board	O
position	O
at	O
the	O
leaf	O
node	O
:	O
if	O
(	O
reachedmaxdepth	O
(	O
p	O
,	O
depth	O
)	O
)	O
{	O
vector	O
v	O
=	O
new	O
vector	O
(	O
2	O
)	O
;	O
float	O
value	O
=	O
positionevaluation	O
(	O
p	O
,	O
player	O
)	O
;	O
v.addelement	O
(	O
new	O
float	O
(	O
value	O
)	O
)	O
;	O
v.addelement	O
(	O
p	O
)	O
;	O
return	O
v	O
;	O
}	O
if	O
we	O
have	O
not	O
reached	O
the	O
maximum	O
search	B
depth	O
(	O
i.e.	O
,	O
we	O
are	O
not	O
yet	O
at	O
a	O
leaf	O
node	O
in	O
the	O
search	B
tree	I
)	O
,	O
then	O
we	O
enumerate	O
all	O
possible	O
moves	O
from	O
the	O
current	O
position	O
using	O
the	O
method	O
possiblem	O
oves	O
and	O
recursively	O
call	O
alphabetahelper	O
for	O
each	O
27	O
2	O
search	B
new	O
generated	O
board	O
position	O
.	O
in	O
terms	O
of	O
figure	O
2.8	O
,	O
at	O
this	O
point	O
we	O
are	O
moving	O
down	O
to	O
another	O
search	B
level	O
(	O
e.g.	O
,	O
from	O
level	O
1	O
to	O
level	O
2	O
;	O
the	O
level	O
in	O
figure	O
2.8	O
corresponds	O
to	O
depth	O
argument	O
in	O
alphabetahelper	O
)	O
:	O
vector	O
best	O
=	O
new	O
vector	O
(	O
)	O
;	O
position	O
[	O
]	O
moves	O
=	O
possiblemoves	O
(	O
p	O
,	O
player	O
)	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
moves.length	O
;	O
i++	O
)	O
{	O
vector	O
v2	O
=	O
alphabetahelper	O
(	O
depth	O
+	O
1	O
,	O
moves	O
[	O
i	O
]	O
,	O
!	O
player	O
,	O
-beta	O
,	O
-alpha	O
)	O
;	O
float	O
value	O
=	O
-	O
(	O
(	O
float	O
)	O
v2.elementat	O
(	O
0	O
)	O
)	O
.floatvalue	O
(	O
)	O
;	O
if	O
(	O
value	O
>	O
beta	O
)	O
{	O
if	O
(	O
gamesearch.debug	O
)	O
system.out.println	O
(	O
``	O
!	O
!	O
!	O
value=	O
''	O
+	O
value+	O
''	O
,	O
beta=	O
''	O
+beta	O
)	O
;	O
beta	O
=	O
value	O
;	O
best	O
=	O
new	O
vector	O
(	O
)	O
;	O
best.addelement	O
(	O
moves	O
[	O
i	O
]	O
)	O
;	O
enumeration	O
enum	O
=	O
v2.elements	O
(	O
)	O
;	O
enum.nextelement	O
(	O
)	O
;	O
//	O
skip	O
previous	O
value	O
while	O
(	O
enum.hasmoreelements	O
(	O
)	O
)	O
{	O
object	O
o	O
=	O
enum.nextelement	O
(	O
)	O
;	O
if	O
(	O
o	O
!	O
=	O
null	O
)	O
best.addelement	O
(	O
o	O
)	O
;	O
}	O
}	O
/**	O
*	O
use	O
the	O
alpha-beta	O
cutoff	O
test	O
to	O
abort	O
*	O
search	B
if	O
we	O
found	O
a	O
move	O
that	O
proves	O
that	O
*	O
the	O
previous	O
move	O
in	O
the	O
move	O
chain	O
was	O
dubious	O
*/	O
if	O
(	O
beta	O
>	O
=	O
alpha	O
)	O
{	O
break	O
;	O
}	O
}	O
notice	O
that	O
when	O
we	O
recursively	O
call	O
alphabetahelper	O
,	O
we	O
are	O
“	O
ﬂipping	O
”	O
the	O
player	O
argument	O
to	O
the	O
opposite	O
boolean	O
value	O
.	O
after	O
calculating	O
the	O
best	O
move	O
at	O
this	O
depth	O
(	O
or	O
level	O
)	O
,	O
we	O
add	O
it	O
to	O
the	O
end	O
of	O
the	O
return	O
vector	O
:	O
vector	O
v3	O
=	O
new	O
vector	O
(	O
)	O
;	O
v3.addelement	O
(	O
new	O
float	O
(	O
beta	O
)	O
)	O
;	O
enumeration	O
enum	O
=	O
best.elements	O
(	O
)	O
;	O
28	O
2.5	O
search	B
and	O
game	B
playing	I
while	O
(	O
enum.hasmoreelements	O
(	O
)	O
)	O
{	O
v3.addelement	O
(	O
enum.nextelement	O
(	O
)	O
)	O
;	O
}	O
return	O
v3	O
;	O
when	O
the	O
recursive	O
calls	O
back	O
up	O
and	O
the	O
ﬁrst	O
call	O
to	O
alphabetahelper	O
returns	O
a	O
vector	O
to	O
the	O
method	O
alphabeta	O
,	O
all	O
of	O
the	O
“	O
best	O
”	O
moves	O
for	O
each	O
side	O
are	O
stored	O
in	O
the	O
return	O
vector	O
,	O
along	O
with	O
the	O
evaluation	O
of	O
the	O
board	O
position	O
for	O
the	O
side	O
to	O
move	O
.	O
the	O
class	O
gamesearch	O
method	O
playgame	O
is	O
fairly	O
simple	O
;	O
the	O
following	O
code	O
fragment	O
is	O
a	O
partial	O
listing	O
of	O
playgame	O
showing	O
how	O
to	O
call	O
alphabeta	O
,	O
getm	O
ove	O
,	O
and	O
makem	O
ove	O
:	O
public	O
void	O
playgame	O
(	O
position	O
startingposition	O
,	O
boolean	O
humanplayfirst	O
)	O
{	O
system.out.println	O
(	O
``	O
your	O
move	O
:	O
''	O
)	O
;	O
move	O
move	O
=	O
getmove	O
(	O
)	O
;	O
startingposition	O
=	O
makemove	O
(	O
startingposition	O
,	O
human	O
,	O
move	O
)	O
;	O
printposition	O
(	O
startingposition	O
)	O
;	O
vector	O
v	O
=	O
alphabeta	O
(	O
0	O
,	O
startingposition	O
,	O
program	O
)	O
;	O
startingposition	O
=	O
(	O
position	O
)	O
v.elementat	O
(	O
1	O
)	O
;	O
}	O
}	O
the	O
debug	O
printout	O
of	O
the	O
vector	O
returned	O
from	O
the	O
method	O
alphabeta	O
seen	O
earlier	O
in	O
this	O
section	O
was	O
printed	O
using	O
the	O
following	O
code	O
immediately	O
after	O
the	O
call	O
to	O
the	O
method	O
alphabeta	O
:	O
enumeration	O
enum	O
=	O
v.elements	O
(	O
)	O
;	O
while	O
(	O
enum.hasmoreelements	O
(	O
)	O
)	O
{	O
system.out.println	O
(	O
``	O
next	O
element	O
:	O
``	O
+	O
enum.nextelement	O
(	O
)	O
)	O
;	O
}	O
in	O
the	O
next	O
few	O
sections	O
,	O
we	O
will	O
implement	O
a	O
tic-tac-toe	B
program	O
and	O
a	O
chess-	O
playing	O
program	O
using	O
this	O
java	O
class	O
framework	O
.	O
2.5.3	O
tic-tac-toe	B
using	O
the	O
alpha-beta	B
search	I
algorithm	O
using	O
the	O
java	O
class	O
framework	O
of	O
gamesearch	O
,	O
p	O
osition	O
,	O
and	O
m	O
ove	O
,	O
it	O
is	O
simple	O
to	O
write	O
a	O
basic	O
tic-tac-toe	B
program	O
by	O
writing	O
three	O
new	O
derived	O
classes	O
(	O
see	O
figure	O
29	O
2	O
search	B
figure	O
2.9	O
:	O
uml	O
class	O
diagrams	O
for	O
game	O
search	O
engine	O
and	O
tic-tac-toe	B
2.9	O
)	O
t	O
ict	O
act	O
oe	O
(	O
derived	O
from	O
gamesearch	O
)	O
,	O
t	O
ict	O
act	O
oem	O
ove	O
(	O
derived	O
from	O
m	O
ove	O
)	O
,	O
and	O
t	O
ict	O
act	O
oep	O
osition	O
(	O
derived	O
from	O
p	O
osition	O
)	O
.	O
i	O
assume	O
that	O
the	O
reader	O
has	O
the	O
book	O
example	O
code	O
installed	O
and	O
available	O
for	O
view-	O
ing	O
.	O
in	O
this	O
section	O
,	O
i	O
will	O
only	O
discuss	O
the	O
most	O
interesting	O
details	O
of	O
the	O
tic-tac-	O
toe	O
class	O
reﬁnements	O
;	O
i	O
assume	O
that	O
the	O
reader	O
can	O
look	O
at	O
the	O
source	O
code	O
.	O
we	O
will	O
start	O
by	O
looking	O
at	O
the	O
reﬁnements	O
for	O
the	O
position	O
and	O
move	O
classes	O
.	O
the	O
t	O
ict	O
act	O
oem	O
ove	O
class	O
is	O
trivial	O
,	O
adding	O
a	O
single	O
integer	O
value	O
to	O
record	O
the	O
square	O
index	O
for	O
the	O
new	O
move	O
:	O
public	O
class	O
tictactoemove	O
extends	O
move	O
{	O
public	O
int	O
moveindex	O
;	O
}	O
the	O
board	O
position	O
indices	O
are	O
in	O
the	O
range	O
of	O
[	O
0..8	O
]	O
and	O
can	O
be	O
considered	O
to	O
be	O
in	O
the	O
following	O
order	O
:	O
0	O
1	O
2	O
3	O
4	O
5	O
6	O
7	O
8	O
the	O
class	O
t	O
ict	O
act	O
oep	O
osition	O
is	O
also	O
simple	O
:	O
30	O
moveposition+moveindex	O
:	O
inttictactoemove+tostring	O
:	O
string+blank	O
:	O
int+human	O
:	O
int+program	O
:	O
intboard	O
:	O
int	O
[	O
]	O
tictactoeposition	O
#	O
alphabeta	O
:	O
arraylist	O
#	O
alphabetahelper	O
:	O
arraylist+playgame	O
:	O
void+debug	O
:	O
boolean+program	O
:	O
boolean+human	O
:	O
booleangamesearch+drawnposition	O
:	O
boolean+wonposition	O
:	O
boolean-wincheck	O
:	O
boolean+positionevaluation	O
:	O
ﬂoat+printposition	O
:	O
void+possiblemoves	O
:	O
position	O
[	O
]	O
+makemove	O
:	O
position+reachedmaxdepth	O
:	O
boolean+main	O
:	O
void+move	O
:	O
movetictactoe	O
2.5	O
search	B
and	O
game	B
playing	I
public	O
class	O
tictactoeposition	O
extends	O
position	O
{	O
final	O
static	O
public	O
int	O
blank	O
=	O
0	O
;	O
final	O
static	O
public	O
int	O
human	O
=	O
1	O
;	O
final	O
static	O
public	O
int	O
program	O
=	O
-1	O
;	O
int	O
[	O
]	O
board	O
=	O
new	O
int	O
[	O
9	O
]	O
;	O
public	O
string	O
tostring	O
(	O
)	O
{	O
stringbuffer	O
sb	O
=	O
new	O
stringbuffer	O
(	O
``	O
[	O
``	O
)	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
9	O
;	O
i++	O
)	O
sb.append	O
(	O
``	O
''	O
+board	O
[	O
i	O
]	O
+	O
''	O
,	O
''	O
)	O
;	O
sb.append	O
(	O
``	O
]	O
''	O
)	O
;	O
return	O
sb.tostring	O
(	O
)	O
;	O
}	O
}	O
this	O
class	O
allocates	O
an	O
array	O
of	O
nine	O
integers	O
to	O
represent	O
the	O
board	O
,	O
deﬁnes	O
constant	O
values	O
for	O
blank	O
,	O
human	O
,	O
and	O
computer	O
squares	O
,	O
and	O
deﬁnes	O
a	O
tostring	O
method	O
to	O
print	O
out	O
the	O
board	O
representation	O
to	O
a	O
string	O
.	O
the	O
t	O
ict	O
act	O
oe	O
class	O
must	O
deﬁne	O
the	O
following	O
abstract	O
methods	O
from	O
the	O
base	O
class	O
gamesearch	O
:	O
public	O
abstract	O
boolean	O
drawnposition	O
(	O
position	O
p	O
)	O
public	O
abstract	O
boolean	O
wonposition	O
(	O
position	O
p	O
,	O
public	O
abstract	O
float	O
positionevaluation	O
(	O
position	O
p	O
,	O
boolean	O
player	O
)	O
public	O
abstract	O
void	O
printposition	O
(	O
position	O
p	O
)	O
public	O
abstract	O
position	O
[	O
]	O
possiblemoves	O
(	O
position	O
p	O
,	O
boolean	O
player	O
)	O
boolean	O
player	O
)	O
public	O
abstract	O
position	O
makemove	O
(	O
position	O
p	O
,	O
public	O
abstract	O
boolean	O
reachedmaxdepth	O
(	O
position	O
p	O
,	O
int	O
depth	O
)	O
public	O
abstract	O
move	O
getmove	O
(	O
)	O
boolean	O
player	O
,	O
move	O
move	O
)	O
the	O
implementation	O
of	O
these	O
methods	O
uses	O
the	O
reﬁned	O
classes	O
t	O
ict	O
act	O
oem	O
ove	O
and	O
t	O
ict	O
act	O
oep	O
osition	O
.	O
for	O
example	O
,	O
consider	O
the	O
method	O
drawnp	O
osition	O
that	O
is	O
responsible	O
for	O
selecting	O
a	O
drawn	O
(	O
or	O
tied	O
)	O
position	O
:	O
public	O
boolean	O
drawnposition	O
(	O
position	O
p	O
)	O
{	O
boolean	O
ret	O
=	O
true	O
;	O
tictactoeposition	O
pos	O
=	O
(	O
tictactoeposition	O
)	O
p	O
;	O
31	O
2	O
search	B
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
9	O
;	O
i++	O
)	O
{	O
if	O
(	O
pos.board	O
[	O
i	O
]	O
==	O
tictactoeposition.blank	O
)	O
{	O
ret	O
=	O
false	O
;	O
break	O
;	O
}	O
}	O
return	O
ret	O
;	O
}	O
the	O
overridden	O
methods	O
from	O
the	O
gamesearch	O
base	O
class	O
must	O
always	O
cast	O
argu-	O
ments	O
of	O
type	O
p	O
osition	O
and	O
m	O
ove	O
to	O
t	O
ict	O
act	O
oep	O
osition	O
and	O
t	O
ict	O
act	O
oem	O
ove	O
.	O
note	O
that	O
in	O
the	O
method	O
drawnp	O
osition	O
,	O
the	O
argument	O
of	O
class	O
p	O
osition	O
is	O
cast	O
to	O
the	O
class	O
t	O
ict	O
act	O
oep	O
osition	O
.	O
a	O
position	O
is	O
considered	O
to	O
be	O
a	O
draw	O
if	O
all	O
of	O
the	O
squares	O
are	O
full	O
.	O
we	O
will	O
see	O
that	O
checks	O
for	O
a	O
won	O
position	O
are	O
always	O
made	O
be-	O
fore	O
checks	O
for	O
a	O
drawn	O
position	O
,	O
so	O
that	O
the	O
method	O
drawnp	O
osition	O
does	O
not	O
need	O
to	O
make	O
a	O
redundant	O
check	O
for	O
a	O
won	O
position	O
.	O
the	O
method	O
wonp	O
osition	O
is	O
also	O
simple	O
;	O
it	O
uses	O
a	O
private	O
helper	O
method	O
wincheck	O
to	O
test	O
for	O
all	O
possible	O
winning	O
patterns	O
in	O
tic-tac-toe	B
.	O
the	O
method	O
positionevaluation	O
uses	O
the	O
following	O
board	O
features	O
to	O
assign	O
a	O
ﬁtness	B
value	O
from	O
the	O
point	O
of	O
view	O
of	O
either	O
player	O
:	O
the	O
number	O
of	O
blank	O
squares	O
on	O
the	O
board	O
if	O
the	O
position	O
is	O
won	O
by	O
either	O
side	O
if	O
the	O
center	O
square	O
is	O
taken	O
the	O
method	O
positionevaluation	O
is	O
simple	O
,	O
and	O
is	O
a	O
good	O
place	O
for	O
the	O
interested	O
reader	O
to	O
start	O
modifying	O
both	O
the	O
tic-tac-toe	B
and	O
chess	B
programs	O
:	O
public	O
float	O
positionevaluation	O
(	O
position	O
p	O
,	O
boolean	O
player	O
)	O
{	O
int	O
count	O
=	O
0	O
;	O
tictactoeposition	O
pos	O
=	O
(	O
tictactoeposition	O
)	O
p	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
9	O
;	O
i++	O
)	O
{	O
if	O
(	O
pos.board	O
[	O
i	O
]	O
==	O
0	O
)	O
count++	O
;	O
}	O
count	O
=	O
10	O
-	O
count	O
;	O
//	O
prefer	O
the	O
center	O
square	O
:	O
float	O
base	O
=	O
1.0f	O
;	O
if	O
(	O
pos.board	O
[	O
4	O
]	O
==	O
tictactoeposition.human	O
&	O
&	O
player	O
)	O
{	O
base	O
+=	O
0.4f	O
;	O
}	O
if	O
(	O
pos.board	O
[	O
4	O
]	O
==	O
tictactoeposition.program	O
&	O
&	O
!	O
player	O
)	O
{	O
32	O
2.5	O
search	B
and	O
game	B
playing	I
base	O
-=	O
0.4f	O
;	O
}	O
float	O
ret	O
=	O
(	O
base	O
-	O
1.0f	O
)	O
;	O
if	O
(	O
wonposition	O
(	O
p	O
,	O
player	O
)	O
)	O
{	O
return	O
base	O
+	O
(	O
1.0f	O
/	O
count	O
)	O
;	O
}	O
if	O
(	O
wonposition	O
(	O
p	O
,	O
!	O
player	O
)	O
)	O
{	O
return	O
-	O
(	O
base	O
+	O
(	O
1.0f	O
/	O
count	O
)	O
)	O
;	O
}	O
return	O
ret	O
;	O
}	O
the	O
only	O
other	O
method	O
that	O
we	O
will	O
look	O
at	O
here	O
is	O
possiblem	O
oves	O
;	O
the	O
interested	O
reader	O
can	O
look	O
at	O
the	O
implementation	O
of	O
the	O
other	O
(	O
very	O
simple	O
)	O
methods	O
in	O
the	O
source	O
code	O
.	O
the	O
method	O
possiblem	O
oves	O
is	O
called	O
with	O
a	O
current	O
position	O
,	O
and	O
the	O
side	O
to	O
move	O
(	O
i.e.	O
,	O
program	O
or	O
human	O
)	O
:	O
public	O
position	O
[	O
]	O
possiblemoves	O
(	O
position	O
p	O
,	O
tictactoeposition	O
pos	O
=	O
(	O
tictactoeposition	O
)	O
p	O
;	O
int	O
count	O
=	O
0	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
9	O
;	O
i++	O
)	O
{	O
boolean	O
player	O
)	O
{	O
if	O
(	O
pos.board	O
[	O
i	O
]	O
==	O
0	O
)	O
count++	O
;	O
}	O
if	O
(	O
count	O
==	O
0	O
)	O
return	O
null	O
;	O
position	O
[	O
]	O
ret	O
=	O
new	O
position	O
[	O
count	O
]	O
;	O
count	O
=	O
0	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
9	O
;	O
i++	O
)	O
{	O
if	O
(	O
pos.board	O
[	O
i	O
]	O
==	O
0	O
)	O
{	O
tictactoeposition	O
pos2	O
=	O
new	O
tictactoeposition	O
(	O
)	O
;	O
for	O
(	O
int	O
j=0	O
;	O
j	O
<	O
9	O
;	O
j++	O
)	O
pos2.board	O
[	O
j	O
]	O
=	O
pos.board	O
[	O
j	O
]	O
;	O
if	O
(	O
player	O
)	O
pos2.board	O
[	O
i	O
]	O
=	O
1	O
;	O
else	O
pos2.board	O
[	O
i	O
]	O
=	O
-1	O
;	O
ret	O
[	O
count++	O
]	O
=	O
pos2	O
;	O
}	O
}	O
return	O
ret	O
;	O
}	O
it	O
is	O
very	O
simple	O
to	O
generate	O
possible	O
moves	O
:	O
every	O
blank	O
square	O
is	O
a	O
legal	O
move	O
.	O
(	O
this	O
method	O
will	O
not	O
be	O
as	O
straightforward	O
in	O
the	O
example	O
chess	O
program	O
!	O
)	O
33	O
2	O
search	B
it	O
is	O
simple	O
to	O
compile	O
and	O
run	O
the	O
example	O
tic-tac-toe	O
program	O
:	O
change	O
directory	O
to	O
src-search-game	O
and	O
type	O
:	O
javac	O
*.java	O
java	O
tictactoe	O
when	O
asked	O
to	O
enter	O
moves	O
,	O
enter	O
an	O
integer	O
between	O
0	O
and	O
8	O
for	O
a	O
square	O
that	O
is	O
currently	O
blank	O
(	O
i.e.	O
,	O
has	O
a	O
zero	O
value	O
)	O
.	O
the	O
following	O
shows	O
this	O
labeling	O
of	O
squares	O
on	O
the	O
tic-tac-toe	B
board	O
:	O
0	O
1	O
2	O
3	O
4	O
5	O
6	O
7	O
8	O
2.5.4	O
chess	B
using	O
the	O
alpha-beta	B
search	I
algorithm	O
using	O
the	O
java	O
class	O
framework	O
of	O
gamesearch	O
,	O
p	O
osition	O
,	O
and	O
m	O
ove	O
,	O
it	O
is	O
rea-	O
sonably	O
easy	O
to	O
write	O
a	O
simple	O
chess	B
program	O
by	O
writing	O
three	O
new	O
derived	O
classes	O
(	O
see	O
figure	O
2.10	O
)	O
chess	B
(	O
derived	O
from	O
gamesearch	O
)	O
,	O
chessm	O
ove	O
(	O
derived	O
from	O
m	O
ove	O
)	O
,	O
and	O
chessp	O
osition	O
(	O
derived	O
from	O
p	O
osition	O
)	O
.	O
the	O
chess	B
program	O
devel-	O
oped	O
in	O
this	O
section	O
is	O
intended	O
to	O
be	O
an	O
easy	O
to	O
understand	O
example	O
of	O
using	O
alpha-	O
beta	O
min-max	O
search	B
;	O
as	O
such	O
,	O
it	O
ignores	O
several	O
details	O
that	O
a	O
fully	O
implemented	O
chess	B
program	O
would	O
implement	O
:	O
•	O
allow	O
the	O
computer	O
to	O
play	O
either	O
side	O
(	O
computer	O
always	O
plays	O
black	O
in	O
this	O
example	O
)	O
.	O
•	O
allow	O
en-passant	O
pawn	O
captures	O
.	O
•	O
allow	O
the	O
player	O
to	O
take	O
back	O
a	O
move	O
after	O
making	O
a	O
mistake	O
.	O
the	O
reader	O
is	O
assumed	O
to	O
have	O
read	O
the	O
last	O
section	O
on	O
implementing	O
the	O
tic-tac-	O
toe	O
game	O
;	O
details	O
of	O
reﬁning	O
the	O
gamesearch	O
,	O
move	O
,	O
and	O
position	O
classes	O
are	O
not	O
repeated	O
in	O
this	O
section	O
.	O
figure	O
2.10	O
shows	O
the	O
uml	O
class	O
diagram	O
for	O
both	O
the	O
general	O
purpose	O
gamesearch	O
framework	O
and	O
the	O
classes	O
derived	O
to	O
implement	O
chess	B
speciﬁc	O
data	O
and	O
behavior	O
.	O
the	O
class	O
chessmove	O
contains	O
data	O
for	O
recording	O
from	O
and	O
to	O
square	O
indices	O
:	O
public	O
class	O
chessmove	O
extends	O
move	O
{	O
public	O
int	O
from	O
;	O
public	O
int	O
to	O
;	O
}	O
34	O
2.5	O
search	B
and	O
game	B
playing	I
figure	O
2.10	O
:	O
uml	O
class	O
diagrams	O
for	O
game	O
search	O
engine	O
and	O
chess	B
35	O
moveposition+from	O
:	O
int+to	O
:	O
intchessmove+tostring	O
:	O
string+blank	O
:	O
int+human	O
:	O
int+program	O
:	O
int+pawn	O
:	O
int+knight	O
:	O
int+bishop	O
:	O
int+rook	O
:	O
int+queen	O
:	O
int+king	O
:	O
intboard	O
:	O
int	O
[	O
]	O
chessposition	O
#	O
alphabeta	O
:	O
arraylist	O
#	O
alphabetahelper	O
:	O
arraylist+playgame	O
:	O
void+debug	O
:	O
boolean+program	O
:	O
boolean+human	O
:	O
booleangamesearch+drawnposition	O
:	O
boolean+wonposition	O
:	O
boolean-wincheck	O
:	O
boolean+positionevaluation	O
:	O
ﬂoat+printposition	O
:	O
void+possiblemoves	O
:	O
position	O
[	O
]	O
+makemove	O
:	O
position+reachedmaxdepth	O
:	O
boolean+main	O
:	O
void-setcontroldata	O
:	O
void-calcpossiblemoves	O
:	O
int-calcpiecemoves	O
:	O
int+move	O
:	O
move-computercontrol	O
:	O
ﬂoat	O
[	O
]	O
-humancontrol	O
:	O
ﬂoat	O
[	O
]	O
-possiblemovelist	O
:	O
move	O
[	O
]	O
-piece_moves	O
:	O
int	O
[	O
]	O
-initialboard	O
:	O
int	O
[	O
]	O
-index	O
:	O
int	O
[	O
]	O
-piecemovementtable	O
:	O
int	O
[	O
]	O
-value	O
:	O
int	O
[	O
]	O
chess	B
2	O
search	B
figure	O
2.11	O
:	O
the	O
example	O
chess	O
program	O
does	O
not	O
contain	O
an	O
opening	O
book	O
so	O
it	O
plays	O
to	O
maximize	O
the	O
mobility	O
of	O
its	O
pieces	O
and	O
maximize	O
material	O
advantage	O
using	O
a	O
two-move	O
lookahead	O
.	O
the	O
ﬁrst	O
version	O
of	O
the	O
chess	B
program	O
contains	O
a	O
few	O
heuristics	O
like	O
wanting	O
to	O
control	O
the	O
center	O
four	O
squares	O
.	O
the	O
board	O
is	O
represented	O
as	O
an	O
integer	O
array	O
with	O
120	O
elements	O
.	O
a	O
chessboard	O
only	O
has	O
64	O
squares	O
;	O
the	O
remaining	O
board	O
values	O
are	O
set	O
to	O
a	O
special	O
value	O
of	O
7	O
,	O
which	O
indicates	O
an	O
“	O
off	O
board	O
”	O
square	O
.	O
the	O
initial	O
board	O
setup	O
is	O
deﬁned	O
statically	O
in	O
the	O
chess	B
class	O
and	O
the	O
off-board	O
squares	O
have	O
a	O
value	O
of	O
“	O
7	O
”	O
:	O
private	O
static	O
int	O
[	O
]	O
initialboard	O
=	O
{	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
4	O
,	O
2	O
,	O
3	O
,	O
5	O
,	O
9	O
,	O
3	O
,	O
2	O
,	O
4	O
,	O
7	O
,	O
7	O
,	O
1	O
,	O
1	O
,	O
1	O
,	O
1	O
,	O
1	O
,	O
1	O
,	O
1	O
,	O
1	O
,	O
7	O
,	O
7	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
7	O
,	O
7	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
7	O
,	O
7	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
7	O
,	O
7	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
7	O
,	O
7	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
7	O
,	O
7	O
,	O
//	O
black	O
pawns	O
-4	O
,	O
-2	O
,	O
-3	O
,	O
-5	O
,	O
-9	O
,	O
-3	O
,	O
-2	O
,	O
-4	O
,	O
7	O
,	O
7	O
,	O
//	O
black	O
pieces	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
,	O
7	O
//	O
white	O
pieces	O
//	O
white	O
pawns	O
//	O
8	O
blank	O
squares	O
//	O
8	O
blank	O
squares	O
//	O
8	O
blank	O
squares	O
//	O
8	O
blank	O
squares	O
}	O
;	O
it	O
is	O
difﬁcult	O
to	O
see	O
from	O
this	O
listing	O
of	O
the	O
board	O
square	O
values	O
but	O
in	O
effect	O
a	O
regular	O
chess	B
board	O
if	O
padded	O
on	O
all	O
sides	O
with	O
two	O
rows	O
and	O
columns	O
of	O
“	O
7	O
”	O
values	O
.	O
36	O
1c4b62d4bb7blackincreasesthemobilityofitspiecesbyﬁanchettoingthequeensidebishop:8rm0lkans7obopopop60o0z0z0z5z0z0z0z040zpo0z0z3z0z0z0z02po0zpopo1snaqjbmrabcdefgh	O
2.5	O
search	B
and	O
game	B
playing	I
figure	O
2.12	O
:	O
continuing	O
the	O
ﬁrst	O
sample	O
game	O
:	O
the	O
computer	O
is	O
looking	O
ahead	O
two	O
moves	O
and	O
no	O
opening	O
book	O
is	O
used	O
.	O
we	O
see	O
the	O
start	O
of	O
a	O
sample	O
chess	B
game	O
in	O
figure	O
2.11	O
and	O
the	O
continuation	O
of	O
this	O
same	O
game	O
in	O
figure	O
2.12.the	O
lookahead	O
is	O
limited	O
to	O
2	O
moves	O
(	O
4	O
ply	O
)	O
.	O
the	O
class	O
chessp	O
osition	O
contains	O
data	O
for	O
this	O
representation	O
and	O
deﬁnes	O
constant	O
values	O
for	O
playing	O
sides	O
and	O
piece	O
types	O
:	O
public	O
class	O
chessposition	O
extends	O
position	O
{	O
final	O
static	O
public	O
int	O
blank	O
=	O
0	O
;	O
final	O
static	O
public	O
int	O
human	O
=	O
1	O
;	O
final	O
static	O
public	O
int	O
program	O
=	O
-1	O
;	O
final	O
static	O
public	O
int	O
pawn	O
=	O
1	O
;	O
final	O
static	O
public	O
int	O
knight	O
=	O
2	O
;	O
final	O
static	O
public	O
int	O
bishop	O
=	O
3	O
;	O
final	O
static	O
public	O
int	O
rook	O
=	O
4	O
;	O
final	O
static	O
public	O
int	O
queen	O
=	O
5	O
;	O
final	O
static	O
public	O
int	O
king	O
=	O
6	O
;	O
int	O
[	O
]	O
board	O
=	O
new	O
int	O
[	O
120	O
]	O
;	O
public	O
string	O
tostring	O
(	O
)	O
{	O
stringbuffer	O
sb	O
=	O
new	O
stringbuffer	O
(	O
``	O
[	O
``	O
)	O
;	O
for	O
(	O
int	O
i=22	O
;	O
i	O
<	O
100	O
;	O
i++	O
)	O
{	O
sb.append	O
(	O
``	O
''	O
+board	O
[	O
i	O
]	O
+	O
''	O
,	O
''	O
)	O
;	O
}	O
sb.append	O
(	O
``	O
]	O
''	O
)	O
;	O
return	O
sb.tostring	O
(	O
)	O
;	O
}	O
37	O
3nf3g64bf4bg75nc3black	O
(	O
thecomputer	O
)	O
continuestoincreasepiecemobilityandcontrolthecentersquares:8rm0lkzns7obopopap60o0z0zpz5z0z0z0z040zpo0a0z3z0m0znz02po0zpopo1s0zqjbzrabcdefgh	O
2	O
search	B
}	O
the	O
class	O
chess	B
also	O
deﬁnes	O
other	O
static	O
data	O
.	O
the	O
following	O
array	O
is	O
used	O
to	O
encode	O
the	O
values	O
assigned	O
to	O
each	O
piece	O
type	O
(	O
e.g.	O
,	O
pawns	O
are	O
worth	O
one	O
point	O
,	O
knights	O
and	O
bishops	O
are	O
worth	O
3	O
points	O
,	O
etc	O
.	O
)	O
:	O
private	O
static	O
int	O
[	O
]	O
value	O
=	O
{	O
0	O
,	O
1	O
,	O
3	O
,	O
3	O
,	O
5	O
,	O
9	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
12	O
}	O
;	O
the	O
following	O
array	O
is	O
used	O
to	O
codify	O
the	O
possible	O
incremental	O
moves	O
for	O
pieces	O
:	O
private	O
static	O
int	O
[	O
]	O
piecemovementtable	O
=	O
{	O
0	O
,	O
-1	O
,	O
1	O
,	O
10	O
,	O
-10	O
,	O
0	O
,	O
-1	O
,	O
1	O
,	O
10	O
,	O
-10	O
,	O
-9	O
,	O
-11	O
,	O
9	O
,	O
11	O
,	O
0	O
,	O
8	O
,	O
-8	O
,	O
12	O
,	O
-12	O
,	O
19	O
,	O
-19	O
,	O
21	O
,	O
-21	O
,	O
0	O
,	O
10	O
,	O
20	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
}	O
;	O
the	O
starting	O
index	O
into	O
the	O
piecemovementtable	O
array	O
is	O
calculated	O
by	O
indexing	O
the	O
following	O
array	O
with	O
the	O
piece	O
type	O
index	O
(	O
e.g.	O
,	O
pawns	O
are	O
piece	O
type	O
1	O
,	O
knights	O
are	O
piece	O
type	O
2	O
,	O
bishops	O
are	O
piece	O
type	O
3	O
,	O
rooks	O
are	O
piece	O
type	O
4	O
,	O
etc	O
.	O
:	O
private	O
static	O
int	O
[	O
]	O
index	O
=	O
{	O
0	O
,	O
12	O
,	O
15	O
,	O
10	O
,	O
1	O
,	O
6	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
6	O
}	O
;	O
when	O
we	O
implement	O
the	O
method	O
possiblem	O
oves	O
for	O
the	O
class	O
chess	B
,	O
we	O
will	O
see	O
that	O
except	O
for	O
pawn	O
moves	O
,	O
all	O
other	O
possible	O
piece	O
type	O
moves	O
are	O
very	O
easy	O
to	O
calculate	O
using	O
this	O
static	O
data	O
.	O
the	O
method	O
possiblem	O
oves	O
is	O
simple	O
because	O
it	O
uses	O
a	O
private	O
helper	O
method	O
calcp	O
iecem	O
oves	O
to	O
do	O
the	O
real	O
work	O
.	O
the	O
method	O
possiblem	O
oves	O
calculates	O
all	O
possible	O
moves	O
for	O
a	O
given	O
board	O
position	O
and	O
side	O
to	O
move	O
by	O
calling	O
calcp	O
iecem	O
ove	O
for	O
each	O
square	O
index	O
that	O
references	O
a	O
piece	O
for	O
the	O
side	O
to	O
move	O
.	O
we	O
need	O
to	O
perform	O
similar	O
actions	O
for	O
calculating	O
possible	O
moves	O
and	O
squares	O
that	O
are	O
controlled	O
by	O
each	O
side	O
.	O
in	O
the	O
ﬁrst	O
version	O
of	O
the	O
class	O
chess	B
that	O
i	O
wrote	O
,	O
i	O
used	O
a	O
single	O
method	O
for	O
calculating	O
both	O
possible	O
move	O
squares	O
and	O
controlled	O
squares	O
.	O
however	O
,	O
the	O
code	O
was	O
difﬁcult	O
to	O
read	O
,	O
so	O
i	O
split	O
this	O
initial	O
move	O
generating	O
method	O
out	O
into	O
three	O
methods	O
:	O
•	O
possiblemoves	O
–	O
required	O
because	O
this	O
was	O
an	O
abstract	O
method	O
in	O
game-	O
search	B
.	O
this	O
method	O
calls	O
calcpiecemoves	O
for	O
all	O
squares	O
containing	O
pieces	O
for	O
the	O
side	O
to	O
move	O
,	O
and	O
collects	O
all	O
possible	O
moves	O
.	O
38	O
2.5	O
search	B
and	O
game	B
playing	I
•	O
calcpiecemoves	O
–	O
responsible	O
to	O
calculating	O
pawn	O
moves	O
and	O
other	O
piece	O
type	O
moves	O
for	O
a	O
speciﬁed	O
square	O
index	O
.	O
•	O
setcontroldata	O
–	O
sets	O
the	O
global	O
array	O
computercontrol	O
and	O
humancontrol	O
.	O
this	O
method	O
is	O
similar	O
to	O
a	O
combination	O
of	O
possiblemoves	O
and	O
calcpiece-	O
moves	O
,	O
but	O
takes	O
into	O
effect	O
“	O
moves	O
”	O
onto	O
squares	O
that	O
belong	O
to	O
the	O
same	O
side	O
for	O
calculating	O
the	O
effect	O
of	O
one	O
piece	O
guarding	O
another	O
.	O
this	O
control	O
data	O
is	O
used	O
in	O
the	O
board	O
position	O
evaluation	O
method	O
positionevaluation	O
.	O
we	O
will	O
discuss	O
calcp	O
iecem	O
oves	O
here	O
,	O
and	O
leave	O
it	O
as	O
an	O
exercise	O
to	O
carefully	O
read	O
the	O
similar	O
method	O
setcontroldata	O
in	O
the	O
source	O
code	O
.	O
this	O
method	O
places	O
the	O
cal-	O
culated	O
piece	O
movement	O
data	O
in	O
static	O
storage	O
(	O
the	O
array	O
piece	O
moves	O
)	O
to	O
avoid	O
creat-	O
ing	O
a	O
new	O
java	O
object	O
whenever	O
this	O
method	O
is	O
called	O
;	O
method	O
calcp	O
iecem	O
oves	O
re-	O
turns	O
an	O
integer	O
count	O
of	O
the	O
number	O
of	O
items	O
placed	O
in	O
the	O
static	O
array	O
piece	O
moves	O
.	O
the	O
method	O
calcp	O
iecem	O
oves	O
is	O
called	O
with	O
a	O
position	O
and	O
a	O
square	O
index	O
;	O
ﬁrst	O
,	O
the	O
piece	O
type	O
and	O
side	O
are	O
determined	O
for	O
the	O
square	O
index	O
:	O
private	O
int	O
calcpiecemoves	O
(	O
chessposition	O
pos	O
,	O
int	O
square_index	O
)	O
{	O
int	O
[	O
]	O
b	O
=	O
pos.board	O
;	O
int	O
piece	O
=	O
b	O
[	O
square_index	O
]	O
;	O
int	O
piece_type	O
=	O
piece	O
;	O
if	O
(	O
piece_type	O
<	O
0	O
)	O
piece_type	O
=	O
-piece_type	O
;	O
int	O
piece_index	O
=	O
index	O
[	O
piece_type	O
]	O
;	O
int	O
move_index	O
=	O
piecemovementtable	O
[	O
piece_index	O
]	O
;	O
if	O
(	O
piece	O
<	O
0	O
)	O
side_index	O
=	O
-1	O
;	O
else	O
side_index	O
=	O
1	O
;	O
then	O
,	O
a	O
switch	O
statement	O
controls	O
move	O
generation	O
for	O
each	O
type	O
of	O
chess	B
piece	O
(	O
movement	O
generation	O
code	O
is	O
not	O
shown	O
–	O
see	O
the	O
ﬁle	O
chess.java	O
)	O
:	O
switch	O
(	O
piece_type	O
)	O
{	O
case	O
chessposition.pawn	O
:	O
break	O
;	O
case	O
chessposition.knight	O
:	O
case	O
chessposition.bishop	O
:	O
case	O
chessposition.rook	O
:	O
case	O
chessposition.king	O
:	O
case	O
chessposition.queen	O
:	O
break	O
;	O
}	O
the	O
logic	B
for	O
pawn	O
moves	O
is	O
a	O
little	O
complex	O
but	O
the	O
implementation	O
is	O
simple	O
.	O
we	O
start	O
by	O
checking	O
for	O
pawn	O
captures	O
of	O
pieces	O
of	O
the	O
opposite	O
color	O
.	O
then	O
check	O
for	O
39	O
2	O
search	B
initial	O
pawn	O
moves	O
of	O
two	O
squares	O
forward	O
,	O
and	O
ﬁnally	O
,	O
normal	O
pawn	O
moves	O
of	O
one	O
square	O
forward	O
.	O
generated	O
possible	O
moves	O
are	O
placed	O
in	O
the	O
static	O
array	O
piece	O
moves	O
and	O
a	O
possible	O
move	O
count	O
is	O
incremented	O
.	O
the	O
move	O
logic	B
for	O
knights	O
,	O
bishops	O
,	O
rooks	O
,	O
queens	O
,	O
and	O
kings	O
is	O
very	O
simple	O
since	O
it	O
is	O
all	O
table	O
driven	O
.	O
first	O
,	O
we	O
use	O
the	O
piece	O
type	O
as	O
an	O
index	O
into	O
the	O
static	O
array	O
index	O
;	O
this	O
value	O
is	O
then	O
used	O
as	O
an	O
index	O
into	O
the	O
static	O
array	O
piecem	O
ovementt	O
able	O
.	O
there	O
are	O
two	O
loops	O
:	O
an	O
outer	O
loop	O
fetches	O
the	O
next	O
piece	O
movement	O
delta	O
from	O
the	O
piecem	O
ovementt	O
able	O
array	O
and	O
the	O
inner	O
loop	O
applies	O
the	O
piece	O
movement	O
delta	O
set	O
in	O
the	O
outer	O
loop	O
until	O
the	O
new	O
square	O
index	O
is	O
off	O
the	O
board	O
or	O
“	O
runs	O
into	O
”	O
a	O
piece	O
on	O
the	O
same	O
side	O
.	O
note	O
that	O
for	O
kings	O
and	O
knights	O
,	O
the	O
inner	O
loop	O
is	O
only	O
executed	O
one	O
time	O
per	O
iteration	O
through	O
the	O
outer	O
loop	O
:	O
move_index	O
=	O
piece	O
;	O
if	O
(	O
move_index	O
<	O
0	O
)	O
move_index	O
=	O
-move_index	O
;	O
move_index	O
=	O
index	O
[	O
move_index	O
]	O
;	O
//system.out.println	O
(	O
``	O
move_index=	O
''	O
+move_index	O
)	O
;	O
next_square	O
=	O
square_index	O
+	O
piecemovementtable	O
[	O
move_index	O
]	O
;	O
outer	O
:	O
while	O
(	O
true	O
)	O
{	O
inner	O
:	O
while	O
(	O
true	O
)	O
{	O
if	O
(	O
next_square	O
>	O
99	O
)	O
break	O
inner	O
;	O
if	O
(	O
next_square	O
<	O
22	O
)	O
break	O
inner	O
;	O
if	O
(	O
b	O
[	O
next_square	O
]	O
==	O
7	O
)	O
break	O
inner	O
;	O
//	O
check	O
for	O
piece	O
on	O
the	O
same	O
side	O
:	O
if	O
(	O
side_index	O
<	O
0	O
&	O
&	O
b	O
[	O
next_square	O
]	O
<	O
0	O
)	O
break	O
inner	O
;	O
if	O
(	O
side_index	O
>	O
0	O
&	O
&	O
b	O
[	O
next_square	O
]	O
>	O
0	O
)	O
break	O
inner	O
;	O
piece_moves	O
[	O
count++	O
]	O
=	O
next_square	O
;	O
if	O
(	O
b	O
[	O
next_square	O
]	O
!	O
=	O
0	O
)	O
break	O
inner	O
;	O
if	O
(	O
piece_type	O
==	O
chessposition.knight	O
)	O
break	O
inner	O
;	O
if	O
(	O
piece_type	O
==	O
chessposition.king	O
)	O
break	O
inner	O
;	O
next_square	O
+=	O
piecemovementtable	O
[	O
move_index	O
]	O
;	O
}	O
move_index	O
+=	O
1	O
;	O
if	O
(	O
piecemovementtable	O
[	O
move_index	O
]	O
==	O
0	O
)	O
break	O
outer	O
;	O
next_square	O
=	O
square_index	O
+	O
40	O
2.5	O
search	B
and	O
game	B
playing	I
figure	O
2.13	O
:	O
second	O
game	O
with	O
a	O
2	O
1/2	O
move	O
lookahead.	O
}	O
piecemovementtable	O
[	O
move_index	O
]	O
;	O
figure	O
2.13	O
shows	O
the	O
start	O
of	O
a	O
second	O
example	O
game	O
.	O
the	O
computer	O
was	O
making	O
too	O
many	O
trivial	O
mistakes	O
in	O
the	O
ﬁrst	O
game	O
so	O
here	O
i	O
increased	O
the	O
lookahead	O
to	O
2	O
1/2	O
moves	O
.	O
now	O
the	O
computer	O
takes	O
one	O
to	O
two	O
seconds	O
per	O
move	O
and	O
plays	O
a	O
better	O
game	O
.	O
increasing	O
the	O
lookahead	O
to	O
3	O
full	O
moves	O
yields	O
a	O
better	O
game	O
but	O
then	O
the	O
program	O
can	O
take	O
up	O
to	O
about	O
ten	O
seconds	O
per	O
move	O
.	O
the	O
method	O
setcontroldata	O
is	O
very	O
similar	O
to	O
this	O
method	O
;	O
i	O
leave	O
it	O
as	O
an	O
exercise	O
to	O
the	O
reader	O
to	O
read	O
through	O
the	O
source	O
code	O
.	O
method	O
setcontroldata	O
differs	O
in	O
also	O
considering	O
moves	O
that	O
protect	O
pieces	O
of	O
the	O
same	O
color	O
;	O
calculated	O
square	O
control	O
data	O
is	O
stored	O
in	O
the	O
static	O
arrays	O
computercontrol	O
and	O
humancontrol	O
.	O
this	O
square	O
control	O
data	O
is	O
used	O
in	O
the	O
method	O
positionevaluation	O
that	O
assigns	O
a	O
numerical	O
rating	O
to	O
a	O
speciﬁed	O
chessboard	O
position	O
on	O
either	O
the	O
computer	O
or	O
human	O
side	O
.	O
the	O
following	O
aspects	O
of	O
a	O
chessboard	O
position	O
are	O
used	O
for	O
the	O
evaluation	O
:	O
•	O
material	O
count	O
(	O
pawns	O
count	O
1	O
point	O
,	O
knights	O
and	O
bishops	O
3	O
points	O
,	O
etc	O
.	O
)	O
•	O
count	O
of	O
which	O
squares	O
are	O
controlled	O
by	O
each	O
side	O
•	O
extra	O
credit	O
for	O
control	O
of	O
the	O
center	O
of	O
the	O
board	O
•	O
credit	O
for	O
attacked	O
enemy	O
pieces	O
notice	O
that	O
the	O
evaluation	O
is	O
calculated	O
initially	O
assuming	O
the	O
computer	O
’	O
s	O
side	O
to	O
move	O
.	O
if	O
the	O
position	O
if	O
evaluated	O
from	O
the	O
human	O
player	O
’	O
s	O
perspective	O
,	O
the	O
evalua-	O
41	O
1d4e62e4qh4black	O
(	O
thecomputer	O
)	O
increasesthemobilityofitspiecesbybringingoutthequeenearlybutwewillseethatthissoongetsblackintrouble.8rmbzkans7opopzpop60z0zpz0z5z0z0z0z040z0opz0l3z0z0z0z02popz0opo1snaqjbmrabcdefgh	O
2	O
search	B
figure	O
2.14	O
:	O
continuing	O
the	O
second	O
game	O
with	O
a	O
two	O
and	O
a	O
half	O
move	O
lookahead	O
.	O
we	O
will	O
add	O
more	O
heuristics	O
to	O
the	O
static	O
evaluation	O
method	O
to	O
reduce	O
the	O
value	O
of	O
moving	O
the	O
queen	O
early	O
in	O
the	O
game	O
.	O
tion	O
value	O
is	O
multiplied	O
by	O
minus	O
one	O
.	O
the	O
implementation	O
of	O
positionevaluation	O
is	O
:	O
public	O
float	O
positionevaluation	O
(	O
position	O
p	O
,	O
boolean	O
player	O
)	O
{	O
chessposition	O
pos	O
=	O
(	O
chessposition	O
)	O
p	O
;	O
int	O
[	O
]	O
b	O
=	O
pos.board	O
;	O
float	O
ret	O
=	O
0.0f	O
;	O
//	O
adjust	O
for	O
material	O
:	O
for	O
(	O
int	O
i=22	O
;	O
i	O
<	O
100	O
;	O
i++	O
)	O
{	O
if	O
(	O
b	O
[	O
i	O
]	O
!	O
=	O
0	O
&	O
&	O
b	O
[	O
i	O
]	O
!	O
=	O
7	O
)	O
ret	O
+=	O
b	O
[	O
i	O
]	O
;	O
}	O
//	O
adjust	O
for	O
positional	O
advantages	O
:	O
setcontroldata	O
(	O
pos	O
)	O
;	O
int	O
control	O
=	O
0	O
;	O
for	O
(	O
int	O
i=22	O
;	O
i	O
<	O
100	O
;	O
i++	O
)	O
{	O
control	O
+=	O
humancontrol	O
[	O
i	O
]	O
;	O
control	O
-=	O
computercontrol	O
[	O
i	O
]	O
;	O
}	O
//	O
count	O
center	O
squares	O
extra	O
:	O
control	O
+=	O
humancontrol	O
[	O
55	O
]	O
-	O
computercontrol	O
[	O
55	O
]	O
;	O
control	O
+=	O
humancontrol	O
[	O
56	O
]	O
-	O
computercontrol	O
[	O
56	O
]	O
;	O
control	O
+=	O
humancontrol	O
[	O
65	O
]	O
-	O
computercontrol	O
[	O
65	O
]	O
;	O
42	O
3nc3nf64bd3bb45nf3qh5blackcontinuestodeveloppiecesandputspressureonthepawnone4butthevulnerablequeenmakesthisaweakpositionforblack:8rmbzkz0s7opopzpop60z0zpm0z5z0z0z0zq40a0opz0z3z0mbznz02popz0opo1s0aqj0zrabcdefgh	O
control	O
+=	O
humancontrol	O
[	O
66	O
]	O
-	O
computercontrol	O
[	O
66	O
]	O
;	O
2.5	O
search	B
and	O
game	B
playing	I
control	O
/=	O
10.0f	O
;	O
ret	O
+=	O
control	O
;	O
//	O
credit	O
for	O
attacked	O
pieces	O
:	O
for	O
(	O
int	O
i=22	O
;	O
i	O
<	O
100	O
;	O
i++	O
)	O
{	O
if	O
(	O
b	O
[	O
i	O
]	O
==	O
0	O
||	O
b	O
[	O
i	O
]	O
==	O
7	O
)	O
continue	O
;	O
if	O
(	O
b	O
[	O
i	O
]	O
<	O
0	O
)	O
{	O
if	O
(	O
humancontrol	O
[	O
i	O
]	O
>	O
computercontrol	O
[	O
i	O
]	O
)	O
{	O
ret	O
+=	O
0.9f	O
*	O
value	O
[	O
-b	O
[	O
i	O
]	O
]	O
;	O
}	O
}	O
if	O
(	O
b	O
[	O
i	O
]	O
>	O
0	O
)	O
{	O
if	O
(	O
humancontrol	O
[	O
i	O
]	O
<	O
computercontrol	O
[	O
i	O
]	O
)	O
{	O
ret	O
-=	O
0.9f	O
*	O
value	O
[	O
b	O
[	O
i	O
]	O
]	O
;	O
}	O
}	O
}	O
//	O
adjust	O
if	O
computer	O
side	O
to	O
move	O
:	O
if	O
(	O
!	O
player	O
)	O
ret	O
=	O
-ret	O
;	O
return	O
ret	O
;	O
}	O
it	O
is	O
simple	O
to	O
compile	O
and	O
run	O
the	O
example	O
chess	O
program	O
by	O
changing	O
directory	O
to	O
src-search-game	O
and	O
typing	O
:	O
javac	O
*.java	O
java	O
chess	B
when	O
asked	O
to	O
enter	O
moves	O
,	O
enter	O
string	O
like	O
“	O
d2d4	O
”	O
to	O
enter	O
a	O
move	O
in	O
chess	B
alge-	O
braic	O
notation	O
.	O
here	O
is	O
sample	O
output	O
from	O
the	O
program	O
:	O
board	O
position	O
:	O
br	O
bn	O
bb	O
.	O
bk	O
bb	O
bn	O
br	O
bp	O
bp	O
bp	O
bp	O
.	O
bp	O
bp	O
bp	O
.	O
.	O
.	O
.	O
.	O
wp	O
bp	O
bq	O
.	O
.	O
.	O
.	O
.	O
.	O
.	O
wp	O
wp	O
wp	O
.	O
wp	O
wp	O
wp	O
wp	O
wr	O
wn	O
wb	O
wq	O
wk	O
wb	O
.	O
wr	O
.	O
wn	O
.	O
43	O
2	O
search	B
your	O
move	O
:	O
c2c4	O
class.method	O
name	O
chess.main	O
gamesearch.playgame	O
gamesearch.alphabeta	O
gamesearch.alphabetahelper	O
chess.positionevaluate	O
chess.setcontroldata	O
chess.possiblemoves	O
chess.calcpossiblemoves	O
chess.calcpiecemoves	O
%	O
of	O
total	O
runtime	O
%	O
in	O
this	O
method	O
97.7	O
96.5	O
82.6	O
82.6	O
42.9	O
29.1	O
23.2	O
1.7	O
1.7	O
0.0	O
0.0	O
0.0	O
0.0	O
13.9	O
29.1	O
11.3	O
0.8	O
0.8	O
table	O
2.1	O
:	O
runtimes	O
by	O
method	O
for	O
chess	B
program	O
the	O
example	O
chess	O
program	O
plays	O
in	O
general	O
good	O
moves	O
,	O
but	O
its	O
play	O
could	O
be	O
greatly	O
enhanced	O
with	O
an	O
“	O
opening	O
book	O
”	O
of	O
common	O
chess	B
opening	O
move	O
sequences	O
.	O
if	O
you	O
run	O
the	O
example	O
chess	O
program	O
,	O
depending	O
on	O
the	O
speed	O
of	O
your	O
computer	O
and	O
your	O
java	O
runtime	O
system	O
,	O
the	O
program	O
takes	O
a	O
while	O
to	O
move	O
(	O
about	O
5	O
seconds	O
per	O
move	O
on	O
my	O
pc	O
)	O
.	O
where	O
is	O
the	O
time	O
spent	O
in	O
the	O
chess	B
program	O
?	O
table	O
2.1	O
shows	O
the	O
total	O
runtime	O
(	O
i.e.	O
,	O
time	O
for	O
a	O
method	O
and	O
recursively	O
all	O
called	O
methods	O
)	O
and	O
method-only	O
time	O
for	O
the	O
most	O
time	O
consuming	O
methods	O
.	O
methods	O
that	O
show	O
zero	O
percent	O
method	O
only	O
time	O
used	O
less	O
than	O
0.1	O
percent	O
of	O
the	O
time	O
so	O
they	O
print	O
as	O
zero	O
values	O
.	O
the	O
interested	O
reader	O
is	O
encouraged	O
to	O
choose	O
a	O
simple	O
two-player	O
game	O
,	O
and	O
using	O
the	O
game	O
search	O
class	O
framework	O
,	O
implement	O
your	O
own	O
game-playing	O
program	O
.	O
44	O
3	O
reasoning	B
reasoning	O
is	O
a	O
broad	O
topic	O
.	O
in	O
this	O
chapter	O
we	O
will	O
concentrate	O
on	O
the	O
use	O
of	O
the	O
powerloom	O
descriptive	O
logic	B
reasoning	O
system	O
.	O
powerloom	O
is	O
available	O
with	O
a	O
java	O
runtime	O
and	O
java	O
api	O
–	O
this	O
is	O
what	O
i	O
will	O
use	O
for	O
the	O
examples	O
in	O
this	O
chapter	O
.	O
powerloom	O
can	O
also	O
be	O
used	O
with	O
jruby	O
.	O
powerloom	O
is	O
available	O
in	O
common	O
lisp	O
and	O
c++	O
versions	O
.	O
additionally	O
,	O
we	O
will	O
look	O
brieﬂy	O
at	O
different	O
kinds	O
of	O
reasoning	B
systems	O
in	O
chapter	O
4	O
on	O
the	O
semantic	B
web	I
.	O
while	O
the	O
material	O
in	O
this	O
chapter	O
will	O
get	O
you	O
started	O
with	O
development	O
using	O
a	O
powerful	O
reasoning	B
system	O
and	O
embedding	O
this	O
reasoning	B
system	O
in	O
java	O
applica-	O
tions	O
,	O
you	O
will	O
likely	O
want	O
to	O
dig	O
deeper	O
and	O
i	O
suggest	O
sources	O
for	O
further	O
study	O
at	O
the	O
end	O
of	O
this	O
chapter	O
.	O
powerloom	O
is	O
a	O
newer	O
version	O
of	O
the	O
classic	O
loom	O
descriptive	O
logic	B
reasoning	O
system	O
written	O
at	O
isi	O
.	O
the	O
required	O
jar	O
ﬁles	O
for	O
powerloom	O
are	O
included	O
in	O
the	O
zip	O
ﬁle	O
for	O
this	O
book	O
but	O
at	O
some	O
point	O
you	O
will	O
probably	O
want	O
to	O
download	O
the	O
entire	O
powerloom	O
distribution	O
to	O
get	O
more	O
examples	O
and	O
access	O
to	O
documentation	O
;	O
the	O
powerloom	O
web	O
site	O
can	O
be	O
found	O
at	O
http	O
:	O
//www.isi.edu/isd/loom/powerloom/	O
.	O
while	O
we	O
will	O
look	O
at	O
an	O
example	O
of	O
embedding	O
the	O
powerloom	O
runtime	O
and	O
a	O
pow-	O
erloom	O
model	O
in	O
a	O
java	O
example	O
program	O
,	O
i	O
want	O
to	O
make	O
a	O
general	O
comment	O
on	O
powerloom	O
development	O
:	O
you	O
will	O
spend	O
most	O
of	O
your	O
time	O
interactively	O
running	O
powerloom	O
in	O
an	O
interactive	O
shell	O
that	O
lets	O
you	O
type	O
in	O
concepts	O
,	O
relations	O
,	O
rules	O
,	O
and	O
queries	O
and	O
immediately	O
see	O
the	O
results	O
.	O
if	O
you	O
have	O
ever	O
programmed	O
in	O
lisp	O
,	O
then	O
this	O
mode	O
of	O
interactive	O
programming	O
will	O
be	O
familiar	O
to	O
you	O
.	O
as	O
seen	O
in	O
figure	O
3.1	O
after	O
interactive	O
development	O
you	O
can	O
deploy	O
in	O
a	O
java	O
application	O
.	O
this	O
style	O
of	O
development	O
supports	O
entering	O
facts	O
and	O
trying	O
rules	O
and	O
relations	O
interactively	O
and	O
as	O
you	O
get	O
things	O
working	O
you	O
can	O
paste	O
what	O
works	O
into	O
a	O
powerloom	O
source	O
ﬁle	O
.	O
if	O
you	O
have	O
only	O
worked	O
with	O
compiled	O
langauges	O
like	O
java	O
and	O
c++	O
this	O
develop-	O
ment	O
style	O
may	O
take	O
a	O
while	O
to	O
get	O
used	O
to	O
and	O
appreciate	O
.	O
as	O
seen	O
in	O
figure	O
3.1	O
the	O
powerloom	O
runtime	O
system	O
,	O
with	O
relations	O
and	O
rules	O
,	O
can	O
be	O
embedded	O
in	O
java	O
applications	O
that	O
typically	O
clear	O
powerloom	O
data	O
memory	O
,	O
assert	O
facts	O
from	O
other	O
live	O
data	O
sources	O
,	O
and	O
then	O
use	O
powerloom	O
for	O
inferencing	O
.	O
45	O
3	O
reasoning	B
figure	O
3.1	O
:	O
overview	O
of	O
how	O
we	O
will	O
use	O
powerloom	O
for	O
development	O
and	O
deployment	O
3.1	O
logic	B
we	O
will	O
look	O
at	O
different	O
types	O
of	O
logic	B
and	O
reasoning	B
systems	O
in	O
this	O
section	O
and	O
then	O
get	O
into	O
powerloom	O
speciﬁc	O
examples	O
in	O
section	O
3.2.	O
logic	B
is	O
the	O
basis	O
for	O
both	O
knowledge	B
representation	I
and	O
for	O
reasoning	B
about	O
knowledge	O
.	O
we	O
will	O
encode	O
knowledge	O
using	O
logic	B
and	O
see	O
that	O
we	O
can	O
then	O
infer	O
new	O
facts	O
that	O
are	O
not	O
explicitly	O
asserted	O
.	O
first	O
order	O
logic	B
was	O
invented	O
by	O
the	O
philosophers	O
frege	O
and	O
peirce	O
and	O
is	O
the	O
most	O
widely	O
studied	O
logic	B
system	O
.	O
unfortunately	O
,	O
full	O
first	O
order	O
logic	B
is	O
not	O
computa-	O
tionally	O
tractable	O
for	O
most	O
non-trivial	O
problems	O
so	O
we	O
use	O
more	O
restricted	O
logics	O
.	O
we	O
will	O
use	O
two	O
reasoning	B
systems	O
in	O
this	O
book	O
that	O
support	O
more	O
limited	O
logics	O
:	O
•	O
we	O
use	O
powerloom	O
is	O
this	O
chapter	O
.	O
powerloom	O
supports	O
a	O
combination	O
of	O
limited	O
ﬁrst	B
order	I
predicate	I
logic	O
and	O
features	O
of	O
description	O
logic	B
.	O
power-	O
loom	O
is	O
able	O
to	O
classify	O
objects	O
,	O
use	O
rules	O
to	O
infer	O
facts	O
from	O
existing	O
facts	O
and	O
to	O
perform	O
subsumption	O
(	O
determining	O
class	O
membership	O
of	O
instances	O
)	O
.	O
•	O
we	O
will	O
use	O
rdf	O
schema	O
(	O
rdfs	O
)	O
reasoning	B
in	O
chapter	O
4.	O
rdfs	O
supports	O
more	O
limited	O
reasoning	B
than	O
descriptive	O
logic	B
reasoners	O
like	O
powerloom	O
and	O
owl	O
description	O
logic	B
reasoners	O
.	O
46	O
powerloomreasoning	O
system	O
runtimeconceptsrelationsrulesconcepts	O
are	O
likeclasses	O
-	O
they	O
canbe	O
organized	O
intohierarchiesdeveloperinteractivedevelopmentapplication	O
programspowerloomapiweb	O
services	O
3.1	O
logic	B
3.1.1	O
history	O
of	O
logic	B
the	O
greek	O
philosopher	O
aristotle	O
studied	O
forms	O
of	O
logic	B
as	O
part	O
of	O
his	O
desire	O
to	O
im-	O
prove	O
the	O
representation	O
of	O
knowledge	O
.	O
he	O
started	O
a	O
study	O
of	O
logic	B
and	O
the	O
deﬁnition	O
of	O
both	O
terms	O
(	O
e.g.	O
,	O
subjects	O
,	O
predicates	O
,	O
nouns	O
,	O
verbs	O
)	O
and	O
types	O
of	O
logical	O
deduc-	O
tion	O
.	O
much	O
later	O
the	O
philosopher	O
frege	O
deﬁned	O
predicate	O
logic	B
(	O
for	O
example	O
:	O
all	O
birds	O
have	O
feathers	O
.	O
brady	O
is	O
a	O
bird	O
,	O
therefore	O
brady	O
has	O
feathers	O
)	O
that	O
forms	O
the	O
basis	O
for	O
the	O
modern	O
prolog	O
programming	O
language	O
.	O
3.1.2	O
examples	O
of	O
different	O
logic	B
types	O
propositional	O
logic	B
is	O
limited	O
to	O
atomic	O
statements	O
that	O
can	O
be	O
either	O
true	O
or	O
false	O
:	O
brady-is-a-bird	O
brady-has-feathers	O
first	O
order	O
predicate	O
logic	B
allows	O
access	O
to	O
the	O
structure	O
of	O
logic	B
statements	O
dealing	O
with	O
predicates	O
that	O
operate	O
on	O
atoms	O
.	O
to	O
use	O
a	O
prolog	O
notation	O
:	O
feathers	O
(	O
x	O
)	O
:	O
-	O
bird	O
(	O
x	O
)	O
.	O
bird	O
(	O
brady	O
)	O
.	O
here	O
“	O
feathers	O
”	O
and	O
“	O
bird	O
”	O
are	O
predicates	O
and	O
“	O
brady	O
”	O
is	O
an	O
atom	O
.	O
the	O
ﬁrst	O
example	O
states	O
that	O
for	O
all	O
x	O
,	O
if	O
x	O
is	O
a	O
bird	O
,	O
then	O
x	O
has	O
feathers	O
.	O
in	O
the	O
second	O
example	O
we	O
state	O
that	O
brady	O
is	O
a	O
bird	O
.	O
notice	O
that	O
in	O
the	O
prolog	O
notation	O
that	O
we	O
are	O
using	O
,	O
variables	O
are	O
capitalized	O
and	O
predicate	O
names	O
and	O
literal	O
atoms	O
are	O
lower	O
case	O
.	O
here	O
is	O
a	O
query	O
that	O
asks	O
who	O
has	O
feathers	O
:	O
?	O
-	O
feathers	O
(	O
x	O
)	O
.	O
x	O
=	O
brady	O
in	O
this	O
example	O
through	O
inference	O
we	O
have	O
determined	O
a	O
new	O
fact	O
,	O
that	O
brady	O
has	O
feathers	O
because	O
we	O
know	O
that	O
brady	O
is	O
a	O
bird	O
and	O
we	O
have	O
the	O
rule	O
(	O
or	O
predicate	O
)	O
stating	O
that	O
all	O
birds	O
have	O
feathers	O
.	O
prolog	O
is	O
not	O
strictly	O
a	O
pure	O
logic	B
programming	O
language	O
since	O
the	O
order	O
in	O
which	O
rules	O
(	O
predicates	O
)	O
are	O
deﬁned	O
chnages	O
the	O
infer-	O
ence	O
results	O
.	O
prolog	O
is	O
a	O
great	O
language	O
for	O
some	O
types	O
of	O
projects	O
(	O
i	O
have	O
used	O
prolog	O
in	O
both	O
natural	O
language	O
processing	O
and	O
in	O
planning	O
projects	O
)	O
.	O
we	O
will	O
see	O
that	O
powerloom	O
is	O
considerably	O
more	O
ﬂexible	O
than	O
prolog	O
but	O
does	O
have	O
a	O
steep	O
learning	O
curve	O
.	O
47	O
3	O
reasoning	B
description	O
logic	B
deals	O
with	O
descriptions	O
of	O
concepts	O
and	O
how	O
these	O
descriptions	O
deﬁne	O
the	O
domain	O
of	O
concepts	O
.	O
in	O
terms	O
used	O
in	O
object	O
oriented	O
programming	O
lan-	O
guages	O
:	O
membership	O
in	O
a	O
class	O
is	O
determined	O
implicitly	O
by	O
the	O
description	O
of	O
the	O
object	O
and	O
not	O
by	O
explicitly	O
stating	O
something	O
like	O
“	O
brady	O
is	O
a	O
member	O
of	O
the	O
bird	O
class.	O
”	O
description	O
logics	O
divide	O
statements	O
into	O
relations	O
(	O
historically	O
refered	O
to	O
as	O
tbox	O
)	O
and	O
concepts	O
(	O
historically	O
called	O
abox	O
)	O
.	O
we	O
would	O
say	O
that	O
a	O
statement	O
like	O
“	O
all	O
birds	O
have	O
feathers	O
”	O
is	O
stored	O
in	O
the	O
tbox	O
while	O
a	O
speciﬁc	O
assertion	O
like	O
“	O
brady	O
is	O
a	O
bird	O
”	O
is	O
stored	O
in	O
the	O
abox	O
.	O
3.2	O
powerloom	O
overview	O
powerloom	O
is	O
designed	O
to	O
be	O
an	O
expressive	O
language	O
for	O
knowledge	B
representation	I
and	O
reasoning	B
.	O
as	O
a	O
result	O
,	O
powerloom	O
is	O
not	O
a	O
complete	O
reasoning	B
system	O
but	O
makes	O
tradeoffs	O
for	O
completeness	O
of	O
inferences	O
and	O
expressivity	O
vs.	O
computational	O
efﬁciency	O
.	O
it	O
is	O
interesting	O
to	O
note	O
that	O
loom	O
and	O
powerloom	O
were	O
designed	O
and	O
implemented	O
to	O
solve	O
real	O
world	O
problems	O
and	O
the	O
tradeoffs	O
to	O
make	O
these	O
problems	O
computationally	O
tractable	O
have	O
informed	O
the	O
design	O
and	O
implementation	O
of	O
these	O
systems	O
.	O
powerloom	O
does	O
not	O
make	O
all	O
posible	O
inferences	O
from	O
concepts	O
that	O
it	O
operates	O
on	O
.	O
the	O
powerloom	O
distribution	O
contains	O
two	O
very	O
detailed	O
examples	O
for	O
representing	O
relationships	O
between	O
companies	O
and	O
for	O
information	O
dealing	O
with	O
airplanes	O
.	O
these	O
examples	O
are	O
more	O
detailed	O
than	O
the	O
simpler	O
example	O
of	O
data	O
from	O
news	O
stories	O
used	O
in	O
this	O
chapter	O
.	O
we	O
will	O
look	O
one	O
of	O
these	O
examples	O
(	O
business	O
rules	O
and	O
relations	O
)	O
and	O
after	O
working	O
through	O
this	O
chapter	O
,	O
i	O
encourage	O
you	O
to	O
interactively	O
experiment	O
with	O
the	O
two	O
examples	O
that	O
ship	O
with	O
powerloom	O
.	O
we	O
will	O
start	O
by	O
deﬁning	O
some	O
terms	O
used	O
in	O
powerloom	O
:	O
•	O
concept	O
–	O
the	O
java	O
equivalent	O
would	O
be	O
an	O
instance	O
of	O
a	O
class	O
•	O
relation	O
–	O
speciﬁes	O
a	O
link	O
between	O
two	O
concepts	O
•	O
function	O
–	O
functional	O
mapping	O
of	O
one	O
concept	O
to	O
another	O
•	O
rule	O
–	O
allows	O
new	O
concepts	O
to	O
be	O
deduced	O
without	O
explicitly	O
asserting	O
them	O
a	O
relation	O
can	O
specify	O
the	O
types	O
of	O
concepts	O
that	O
a	O
relation	O
connects	O
.	O
an	O
example	O
will	O
make	O
this	O
clear	O
and	O
introduce	O
the	O
lisp-like	O
syntax	O
of	O
powerloom	O
statements	O
:	O
;	O
;	O
;	O
concepts	O
:	O
(	O
defconcept	O
person	O
)	O
(	O
defconcept	O
parent	O
(	O
?	O
p	O
person	O
)	O
)	O
48	O
3.3	O
running	O
powerloom	O
interactively	O
;	O
;	O
;	O
relation	O
:	O
(	O
defrelation	O
parent-of	O
(	O
(	O
?	O
p1	O
parent	O
)	O
(	O
?	O
p2	O
person	O
)	O
)	O
)	O
here	O
i	O
have	O
deﬁned	O
two	O
concepts	O
:	O
person	O
and	O
parent	O
.	O
note	O
that	O
we	O
have	O
a	O
hierarchy	O
of	O
concept	O
types	O
here	O
:	O
the	O
parent	O
is	O
a	O
more	O
speciﬁc	O
concept	O
type	O
than	O
the	O
person	O
concept	O
.	O
all	O
instances	O
that	O
are	O
parents	O
are	O
also	O
of	O
type	O
person	O
.	O
the	O
relation	O
parent-	O
of	O
links	O
a	O
parent	O
concept	O
to	O
a	O
person	O
concept	O
.	O
we	O
will	O
learn	O
more	O
about	O
basic	O
powerloom	O
functionality	O
in	O
the	O
next	O
two	O
sections	O
as	O
we	O
use	O
powerloom	O
in	O
an	O
interactive	O
session	O
and	O
when	O
we	O
embed	O
powerloom	O
in	O
a	O
java	O
example	O
program	O
.	O
3.3	O
running	O
powerloom	O
interactively	O
we	O
will	O
experiment	O
with	O
powerloom	O
concepts	O
,	O
relations	O
,	O
and	O
rules	O
in	O
this	O
section	O
in	O
an	O
interactive	O
command	O
shell	O
.	O
i	O
will	O
introduce	O
more	O
examples	O
of	O
powerloom	O
functionality	O
for	O
asserting	O
instances	O
of	O
concepts	O
,	O
performing	O
queries	O
,	O
loading	O
pow-	O
erloom	O
source	O
ﬁles	O
,	O
deﬁning	O
relations	O
,	O
using	O
separate	O
modules	O
,	O
and	O
asking	O
power-	O
loom	O
to	O
explain	O
the	O
inference	O
process	O
that	O
it	O
used	O
for	O
query	O
processing	O
.	O
you	O
can	O
run	O
powerloom	O
using	O
the	O
command	O
line	O
interface	O
by	O
changing	O
directory	O
to	O
the	O
lib	O
subdirectory	O
from	O
the	O
zip	O
ﬁle	O
for	O
this	O
book	O
and	O
trying	O
:	O
java	O
-cp	O
powerloom.jar	O
:	O
stella.jar	O
\\	O
edu.isi.powerloom.powerloom	O
this	O
starts	O
the	O
powerloom	O
standalone	O
system	O
and	O
prints	O
a	O
prompt	O
that	O
includes	O
the	O
name	O
of	O
the	O
current	O
module	O
.	O
the	O
default	O
module	O
name	O
is	O
“	O
pl-user	O
”	O
.	O
in	O
the	O
ﬁrst	O
example	O
,	O
when	O
i	O
enter	O
the	O
person	O
concept	O
at	O
the	O
interactive	O
prompt	O
then	O
powerloom	O
prints	O
the	O
result	O
of	O
the	O
expression	O
that	O
just	O
entered	O
.	O
pl-user	O
|=	O
(	O
defconcept	O
person	O
)	O
|c|person	O
pl-user	O
|=	O
(	O
defconcept	O
parent	O
(	O
?	O
p	O
person	O
)	O
)	O
|c|parent	O
pl-user	O
|=	O
(	O
defrelation	O
parent-of	O
(	O
(	O
?	O
p1	O
parent	O
)	O
(	O
?	O
p2	O
person	O
)	O
)	O
)	O
|r|parent-of	O
pl-user	O
|=	O
(	O
assert	O
(	O
person	O
ken	O
)	O
)	O
|p|	O
(	O
person	O
ken	O
)	O
pl-user	O
|=	O
(	O
assert	O
(	O
person	O
mark	O
)	O
)	O
49	O
3	O
reasoning	B
|p|	O
(	O
person	O
mark	O
)	O
pl-user	O
|=	O
(	O
assert	O
(	O
parent-of	O
ken	O
mark	O
)	O
)	O
|p|	O
(	O
parent-of	O
ken	O
mark	O
)	O
now	O
that	O
we	O
have	O
entered	O
two	O
concepts	O
,	O
a	O
test	O
relation	O
,	O
and	O
asserted	O
a	O
few	O
facts	O
,	O
we	O
can	O
look	O
at	O
an	O
example	O
of	O
powerloom	O
’	O
s	O
query	O
language	O
:	O
pl-user	O
|=	O
(	O
retrieve	O
all	O
?	O
p	O
(	O
person	O
?	O
p	O
)	O
)	O
there	O
are	O
2	O
solutions	O
:	O
#	O
1	O
:	O
?	O
p=mark	O
#	O
2	O
:	O
?	O
p=ken	O
pl-user	O
|=	O
(	O
retrieve	O
all	O
?	O
p	O
(	O
parent	O
?	O
p	O
)	O
)	O
there	O
is	O
1	O
solution	O
:	O
#	O
1	O
:	O
?	O
p=ken	O
pl-user	O
|=	O
the	O
obvious	O
point	O
to	O
note	O
from	O
this	O
example	O
is	O
that	O
we	O
never	O
speciﬁed	O
that	O
ken	O
was	O
a	O
parent	O
;	O
rather	O
,	O
powerloom	O
deduced	O
this	O
from	O
the	O
parent-of	O
relation	O
.	O
powerloom	O
’	O
s	O
command	O
line	O
system	O
prompts	O
you	O
with	O
the	O
string	O
“	O
pl-user	O
—=	O
“	O
and	O
you	O
can	O
type	O
any	O
deﬁnition	O
or	O
query	O
.	O
like	O
lisp	O
,	O
powerloom	O
uses	O
a	O
preﬁx	O
notation	O
and	O
expressions	O
are	O
contained	O
in	O
parenthesis	O
.	O
powerloom	O
supports	O
a	O
mod-	O
ule	O
system	O
for	O
partitioning	O
concepts	O
,	O
relations	O
,	O
functions	O
,	O
and	O
rules	O
into	O
different	O
sets	O
and	O
as	O
previously	O
mentioned	O
“	O
pl-user	O
”	O
is	O
the	O
default	O
module	O
.	O
powerloom	O
modules	O
can	O
form	O
a	O
hierarchy	O
,	O
inheriting	O
concepts	O
,	O
relations	O
,	O
and	O
rules	O
from	O
parent	O
modules	O
.	O
the	O
subdirectory	O
test	O
data	O
contains	O
the	O
demo	O
ﬁle	O
business.plm	O
written	O
by	O
robert	O
macgregor	O
that	O
is	O
supplied	O
with	O
the	O
full	O
powerloom	O
distribution	O
.	O
you	O
can	O
load	O
his	O
complete	O
example	O
using	O
:	O
pl-user	O
|=	O
(	O
load	O
``	O
../test_data/business.plm	O
''	O
)	O
this	O
is	O
a	O
good	O
example	O
because	O
it	O
demonstrates	O
most	O
of	O
the	O
available	O
functionality	O
of	O
powerloom	O
in	O
a	O
short	O
200	O
lines	O
.	O
when	O
you	O
are	O
done	O
reading	O
this	O
chapter	O
,	O
please	O
take	O
a	O
few	O
minutes	O
to	O
read	O
through	O
this	O
example	O
ﬁle	O
since	O
i	O
do	O
not	O
list	O
it	O
here	O
.	O
there	O
are	O
a	O
few	O
things	O
to	O
notice	O
in	O
this	O
example	O
.	O
here	O
we	O
see	O
a	O
rule	O
used	O
to	O
make	O
the	O
relation	O
“	O
contains	O
”	O
transitive	O
:	O
(	O
defrelation	O
contains	O
(	O
(	O
?	O
l1	O
geographic-location	O
)	O
(	O
?	O
l2	O
geographic-location	O
)	O
)	O
)	O
50	O
3.3	O
running	O
powerloom	O
interactively	O
(	O
defrule	O
transitive-contains	O
(	O
=	O
>	O
(	O
and	O
(	O
contains	O
?	O
l1	O
?	O
l2	O
)	O
(	O
contains	O
?	O
l2	O
?	O
l3	O
)	O
)	O
(	O
contains	O
?	O
l1	O
?	O
l3	O
)	O
)	O
)	O
the	O
operator	O
=	O
>	O
means	O
that	O
if	O
the	O
ﬁrst	O
clause	O
is	O
true	O
then	O
so	O
is	O
the	O
second	O
.	O
in	O
english	O
,	O
this	O
rule	O
could	O
be	O
stated	O
“	O
if	O
an	O
instance	O
i1	O
contains	O
i2	O
and	O
if	O
instance	O
i2	O
contains	O
i3	O
then	O
we	O
can	O
infer	O
that	O
i1	O
also	O
contains	O
i3.	O
”	O
to	O
see	O
how	O
this	O
rule	O
works	O
in	O
practice	O
,	O
we	O
can	O
switch	O
to	O
the	O
example	O
module	O
“	O
business	O
”	O
and	O
ﬁnd	O
all	O
locations	O
contained	O
inside	O
another	O
location	O
:	O
pl-user	O
|=	O
(	O
in-module	O
``	O
business	O
''	O
)	O
business	O
|=	O
(	O
retrieve	O
all	O
(	O
?	O
location1	O
?	O
location2	O
)	O
(	O
contains	O
?	O
location1	O
?	O
location2	O
)	O
)	O
there	O
are	O
15	O
solutions	O
:	O
#	O
1	O
:	O
?	O
location1=southern-us	O
,	O
?	O
location2=texas	O
#	O
2	O
:	O
?	O
location1=texas	O
,	O
?	O
location2=austin	O
#	O
3	O
:	O
?	O
location1=texas	O
,	O
?	O
location2=dallas	O
#	O
4	O
:	O
?	O
location1=united-states	O
,	O
?	O
location2=southern-us	O
#	O
5	O
:	O
?	O
location1=georgia	O
,	O
?	O
location2=atlanta	O
#	O
6	O
:	O
?	O
location1=eastern-us	O
,	O
?	O
location2=georgia	O
#	O
7	O
:	O
?	O
location1=united-states	O
,	O
?	O
location2=eastern-us	O
#	O
8	O
:	O
?	O
location1=southern-us	O
,	O
?	O
location2=dallas	O
#	O
9	O
:	O
?	O
location1=southern-us	O
,	O
?	O
location2=austin	O
#	O
10	O
:	O
?	O
location1=united-states	O
,	O
?	O
location2=dallas	O
#	O
11	O
:	O
?	O
location1=united-states	O
,	O
?	O
location2=texas	O
#	O
12	O
:	O
?	O
location1=united-states	O
,	O
?	O
location2=austin	O
#	O
13	O
:	O
?	O
location1=eastern-us	O
,	O
?	O
location2=atlanta	O
#	O
14	O
:	O
?	O
location1=united-states	O
,	O
?	O
location2=georgia	O
#	O
15	O
:	O
?	O
location1=united-states	O
,	O
?	O
location2=atlanta	O
business	O
|=	O
here	O
we	O
have	O
ﬁfteen	O
solutions	O
even	O
though	O
there	O
are	O
only	O
seven	O
“	O
contains	O
”	O
relations	O
asserted	O
in	O
the	O
business.plm	O
ﬁle	O
–	O
the	O
other	O
eight	O
solutions	O
were	O
inferred	O
.	O
in	O
addition	O
to	O
the	O
“	O
retrieve	O
”	O
function	O
that	O
ﬁnds	O
solutions	O
matching	O
a	O
query	O
you	O
can	O
also	O
use	O
the	O
“	O
ask	O
”	O
function	O
to	O
determine	O
if	O
a	O
speciﬁed	O
relation	O
is	O
true	O
;	O
for	O
example	O
:	O
business	O
|=	O
(	O
ask	O
(	O
contains	O
united-states	O
dallas	O
)	O
)	O
true	O
business	O
|=	O
51	O
3	O
reasoning	B
for	O
complex	O
queries	O
you	O
can	O
use	O
the	O
“	O
why	O
”	O
function	O
to	O
see	O
how	O
powerloom	O
solved	O
the	O
last	O
query	O
:	O
business	O
|=	O
(	O
ask	O
(	O
contains	O
southern-us	O
dallas	O
)	O
)	O
true	O
business	O
|=	O
(	O
why	O
)	O
1	O
(	O
contains	O
?	O
location1	O
?	O
location2	O
)	O
follows	O
by	O
modus	O
ponens	O
with	O
substitution	O
{	O
?	O
l1/southern-us	O
,	O
?	O
l3/dallas	O
,	O
?	O
l2/texas	O
}	O
since	O
1.1	O
!	O
(	O
forall	O
(	O
?	O
l1	O
?	O
l3	O
)	O
(	O
<	O
=	O
(	O
contains	O
?	O
l1	O
?	O
l3	O
)	O
(	O
exists	O
(	O
?	O
l2	O
)	O
(	O
and	O
(	O
contains	O
?	O
l1	O
?	O
l2	O
)	O
(	O
contains	O
?	O
l2	O
?	O
l3	O
)	O
)	O
)	O
)	O
)	O
and	O
and	O
1.2	O
!	O
(	O
contains	O
southern-us	O
texas	O
)	O
1.3	O
!	O
(	O
contains	O
texas	O
dallas	O
)	O
business	O
|=	O
by	O
default	O
the	O
explanation	O
facility	O
is	O
turned	O
off	O
because	O
it	O
causes	O
powerloom	O
to	O
run	O
more	O
slowly	O
;	O
it	O
was	O
turned	O
on	O
in	O
the	O
ﬁle	O
business.plm	O
using	O
the	O
statement	O
:	O
(	O
set-feature	O
justifications	O
)	O
3.4	O
using	O
the	O
powerloom	O
apis	O
in	O
java	O
programs	O
once	O
you	O
interactively	O
develop	O
concepts	O
,	O
rules	O
and	O
relations	O
then	O
it	O
is	O
likely	O
that	O
you	O
may	O
want	O
to	O
use	O
them	O
with	O
powerloom	O
in	O
an	O
embedded	O
mode	O
,	O
making	O
powerloom	O
a	O
part	O
of	O
your	O
application	O
.	O
i	O
will	O
get	O
you	O
started	O
with	O
a	O
few	O
java	O
example	O
programs	O
.	O
the	O
source	O
code	O
for	O
this	O
chapter	O
is	O
in	O
the	O
subdirectory	O
src-powerloom-reasoning	O
.	O
if	O
you	O
download	O
the	O
powerloom	O
manual	O
(	O
a	O
pdf	O
ﬁle	O
)	O
from	O
the	O
powerloom	O
web	O
site	O
,	O
you	O
will	O
have	O
the	O
complete	O
java	O
api	O
documentation	O
for	O
the	O
java	O
version	O
of	O
power-	O
loom	O
(	O
there	O
are	O
also	O
c++	O
and	O
common	O
lisp	O
versions	O
with	O
separate	O
documentation	O
)	O
.	O
i	O
have	O
found	O
that	O
i	O
usually	O
use	O
just	O
a	O
small	O
subset	O
of	O
the	O
java	O
powerloom	O
apis	O
and	O
i	O
have	O
“	O
wrapped	O
”	O
this	O
subset	O
in	O
a	O
wrapper	O
class	O
in	O
the	O
ﬁle	O
powerloomutils.java	O
.	O
we	O
will	O
use	O
my	O
wrapper	O
class	O
for	O
the	O
examples	O
in	O
the	O
rest	O
of	O
this	O
chapter	O
.	O
my	O
wrapper	O
class	O
has	O
the	O
follow	O
public	O
methods	O
:	O
52	O
3.4	O
using	O
the	O
powerloom	O
apis	O
in	O
java	O
programs	O
•	O
powerloomutils	O
(	O
)	O
–	O
constructor	O
initializes	O
the	O
java	O
powerloom	O
runtime	O
sys-	O
tem	O
.	O
•	O
load	O
(	O
string	O
fpath	O
)	O
–	O
load	O
a	O
source	O
*.plm	O
ﬁle	O
.	O
•	O
changemodule	O
(	O
string	O
workingmodule	O
)	O
–	O
set	O
the	O
current	O
powerloom	O
working	O
module	O
(	O
“	O
pl-user	O
”	O
is	O
the	O
default	O
module	O
)	O
.	O
•	O
assertproposition	O
(	O
string	O
proposition	O
)	O
–	O
asserts	O
a	O
new	O
proposition	O
;	O
for	O
exam-	O
ple	O
:	O
”	O
(	O
and	O
(	O
company	O
c3	O
)	O
(	O
company-name	O
c3	O
\	O
”	O
moms	O
grocery\	O
”	O
)	O
)	O
”	O
.	O
note	O
that	O
quotation	O
marks	O
are	O
escaped	O
with	O
a	O
backslash	O
character	O
.	O
you	O
can	O
also	O
use	O
single	O
quote	O
characters	O
like	O
:	O
”	O
(	O
and	O
(	O
company	O
c3	O
)	O
(	O
company-name	O
c3	O
’	O
moms	O
grocery	O
’	O
)	O
)	O
”	O
because	O
i	O
convert	O
single	O
quotes	O
in	O
my	O
wrapper	O
code	O
.	O
•	O
createrelation	O
(	O
string	O
relation	O
,	O
int	O
arity	O
)	O
–	O
create	O
a	O
new	O
relation	O
with	O
a	O
speci-	O
ﬁed	O
arity	O
(	O
number	O
of	O
“	O
arguments	O
”	O
)	O
.	O
for	O
example	O
you	O
could	O
create	O
a	O
relation	O
“	O
owns	O
”	O
with	O
arity	O
2	O
and	O
then	O
assert	O
“	O
(	O
owns	O
elaine	O
’	O
moms	O
grocery	O
’	O
)	O
”	O
–	O
i	O
usu-	O
ally	O
do	O
not	O
use	O
this	O
api	O
since	O
i	O
prefer	O
to	O
place	O
relations	O
(	O
with	O
rules	O
)	O
in	O
a	O
source	O
code	O
ﬁle	O
ending	O
in	O
the	O
extention	O
*.plm	O
.	O
•	O
doquery	O
(	O
string	O
query	O
)	O
–	O
returns	O
a	O
list	O
of	O
results	O
from	O
a	O
query	O
.	O
each	O
result	O
in	O
the	O
list	O
is	O
itself	O
a	O
list	O
.	O
you	O
will	O
always	O
want	O
to	O
work	O
in	O
an	O
interactive	O
powerloom	O
console	O
for	O
writing	O
and	O
debugging	O
powerloom	O
models	O
.	O
i	O
built	O
the	O
model	O
in	O
test.plm	O
(	O
in	O
the	O
subdirectory	O
test	O
data	O
)	O
interactively	O
and	O
we	O
will	O
use	O
it	O
here	O
in	O
an	O
embedded	O
java	O
example	O
:	O
powerloomutils	O
plu	O
=	O
new	O
powerloomutils	O
(	O
)	O
;	O
plu.load	O
(	O
``	O
test_data/test.plm	O
''	O
)	O
;	O
plu.changemodule	O
(	O
``	O
business	O
''	O
)	O
;	O
plu.assertproposition	O
(	O
''	O
(	O
and	O
(	O
company	O
c1	O
)	O
''	O
+	O
''	O
(	O
company-name	O
c1	O
\	O
''	O
moms	O
grocery\	O
''	O
)	O
)	O
''	O
)	O
;	O
plu.assertproposition	O
(	O
''	O
(	O
and	O
(	O
company	O
c2	O
)	O
''	O
+	O
''	O
(	O
company-name	O
c2	O
\	O
''	O
ibm\	O
''	O
)	O
)	O
''	O
)	O
;	O
plu.assertproposition	O
(	O
''	O
(	O
and	O
(	O
company	O
c3	O
)	O
''	O
+	O
''	O
(	O
company-name	O
c3	O
\	O
''	O
apple\	O
''	O
)	O
)	O
''	O
)	O
;	O
list	O
answers	O
=	O
plu.doquery	O
(	O
``	O
all	O
?	O
x	O
(	O
company	O
?	O
x	O
)	O
''	O
)	O
;	O
system.out.println	O
(	O
answers	O
)	O
;	O
//	O
answers	O
:	O
[	O
[	O
c3	O
]	O
,	O
[	O
c2	O
]	O
,	O
[	O
c1	O
]	O
]	O
answers	O
=	O
plu.doquery	O
(	O
''	O
all	O
(	O
?	O
x	O
?	O
name	O
)	O
''	O
+	O
''	O
''	O
(	O
and	O
''	O
+	O
(	O
company	O
?	O
x	O
)	O
''	O
+	O
53	O
3	O
reasoning	B
''	O
(	O
company-name	O
?	O
x	O
?	O
name	O
)	O
)	O
''	O
)	O
;	O
[	O
[	O
c3	O
,	O
``	O
apple	O
''	O
]	O
,	O
system.out.println	O
(	O
answers	O
)	O
;	O
//	O
answers	O
:	O
//	O
//	O
//	O
plu.createrelation	O
(	O
``	O
ceo	O
''	O
,	O
2	O
)	O
;	O
plu.assertproposition	O
(	O
[	O
c2	O
,	O
``	O
ibm	O
''	O
]	O
,	O
[	O
c1	O
,	O
``	O
moms	O
grocery	O
''	O
]	O
]	O
''	O
(	O
ceo	O
\	O
''	O
apple\	O
''	O
\	O
''	O
stevejobs\	O
''	O
)	O
''	O
)	O
;	O
answers	O
=	O
plu.doquery	O
(	O
(	O
and	O
''	O
+	O
''	O
all	O
(	O
?	O
x	O
?	O
name	O
?	O
ceo	O
)	O
''	O
+	O
''	O
''	O
''	O
(	O
company-name	O
?	O
x	O
?	O
name	O
)	O
''	O
+	O
(	O
ceo	O
?	O
name	O
?	O
ceo	O
)	O
)	O
''	O
)	O
;	O
system.out.println	O
(	O
answers	O
)	O
;	O
//	O
answers	O
:	O
[	O
[	O
c3	O
,	O
``	O
apple	O
''	O
,	O
``	O
stevejobs	O
''	O
]	O
]	O
i	O
have	O
added	O
the	O
program	O
output	O
produced	O
by	O
printing	O
the	O
value	O
of	O
the	O
list	O
variable	O
“	O
answers	O
”	O
as	O
comments	O
after	O
each	O
system.out.println	O
call	O
.	O
in	O
the	O
wrapper	O
api	O
calls	O
that	O
take	O
a	O
string	O
argument	O
,	O
i	O
broke	O
long	O
strings	O
over	O
several	O
lines	O
for	O
formatting	O
to	O
the	O
width	O
of	O
a	O
page	O
;	O
you	O
would	O
not	O
do	O
this	O
in	O
your	O
own	O
programs	O
because	O
of	O
the	O
cost	O
of	O
the	O
extra	O
string	O
concatenation	O
.	O
we	O
will	O
not	O
look	O
at	O
the	O
implementation	O
of	O
the	O
p	O
owerloomu	O
tils	O
class	O
–	O
you	O
can	O
read	O
the	O
code	O
if	O
you	O
are	O
interested	O
.	O
that	O
said	O
,	O
i	O
will	O
make	O
a	O
few	O
commments	O
on	O
the	O
java	O
powerloom	O
apis	O
.	O
the	O
class	O
p	O
li	O
contains	O
static	O
methods	O
for	O
initializing	O
the	O
system	O
,	O
loading	O
powerloom	O
source	O
ﬁles	O
.	O
here	O
are	O
a	O
few	O
examples	O
:	O
pli.initialize	O
(	O
)	O
;	O
pli.load	O
(	O
``	O
test.plm	O
''	O
,	O
null	O
)	O
;	O
pli.schangemodule	O
(	O
``	O
business	O
''	O
,	O
null	O
)	O
;	O
3.5	O
suggestions	O
for	O
further	O
study	O
this	O
chapter	O
has	O
provided	O
a	O
brief	O
introduction	O
to	O
powerloom	O
,	O
one	O
of	O
my	O
favorite	O
ai	O
tools	O
.	O
i	O
also	O
showed	O
you	O
how	O
to	O
go	O
about	O
embedding	O
the	O
powerloom	O
knowledge	B
representation	I
and	O
reasoning	B
systems	O
in	O
your	O
java	O
programs	O
.	O
assuming	O
that	O
you	O
see	O
beneﬁt	O
to	O
further	O
study	O
i	O
recommend	O
reading	O
through	O
the	O
powerloom	O
manual	O
and	O
the	O
presentations	O
(	O
pdf	O
ﬁles	O
)	O
on	O
the	O
powerloom	O
web	O
site	O
.	O
as	O
you	O
read	O
through	O
this	O
material	O
it	O
is	O
best	O
to	O
have	O
an	O
interactive	O
powerloom	O
session	O
open	O
to	O
try	O
the	O
examples	O
as	O
you	O
read	O
them	O
.	O
54	O
3.5	O
suggestions	O
for	O
further	O
study	O
knowledge	B
representation	I
and	O
logic	B
are	O
huge	O
subjects	O
and	O
i	O
will	O
close	O
out	O
this	O
chapter	O
by	O
recommending	O
a	O
few	O
books	O
that	O
have	O
been	O
the	O
most	O
helpful	O
to	O
me	O
:	O
•	O
knowledge	B
representation	I
by	O
john	O
sowa	O
.	O
this	O
has	O
always	O
been	O
my	O
favorite	O
reference	O
for	O
knowledge	B
representation	I
,	O
logic	B
,	O
and	O
ontologies	O
.	O
•	O
artiﬁcial	O
intelligence	O
,	O
a	O
modern	O
approach	O
by	O
stuart	O
russell	O
and	O
peter	O
norvig	O
.	O
a	O
very	O
good	O
theoretical	O
treatment	O
of	O
logic	B
and	O
knowledge	B
representation	I
.	O
•	O
the	O
art	O
of	O
prolog	O
by	O
leon	O
sterling	O
and	O
ehud	O
shapiro	O
.	O
prolog	O
implements	O
a	O
form	O
of	O
predicate	O
logic	B
that	O
is	O
less	O
expressive	O
than	O
the	O
descriptive	O
logics	O
supported	O
by	O
powerloom	O
and	O
owl	O
(	O
chapter	O
4	O
)	O
.	O
that	O
said	O
,	O
prolog	O
is	O
very	O
efﬁcient	O
and	O
fairly	O
easy	O
to	O
learn	O
and	O
so	O
is	O
sometimes	O
a	O
better	O
choice	O
.	O
this	O
book	O
is	O
one	O
of	O
my	O
favorite	O
general	O
prolog	O
references	O
.	O
the	O
prolog	O
language	O
is	O
a	O
powerful	O
ai	O
development	O
tool	O
.	O
both	O
the	O
open	O
source	O
swi-	O
prolog	O
and	O
the	O
commercial	O
amzi	O
prolog	O
systems	O
have	O
good	O
java	O
interfaces	O
.	O
i	O
don	O
’	O
t	O
cover	O
prolog	O
in	O
this	O
book	O
but	O
there	O
are	O
several	O
very	O
good	O
tutorials	O
on	O
the	O
web	O
if	O
you	O
decide	O
to	O
experiment	O
with	O
prolog	O
.	O
we	O
will	O
continue	O
chapter	O
4	O
with	O
our	O
study	O
of	O
logic-based	O
reasoning	B
systems	O
in	O
the	O
context	O
of	O
the	O
semantic	B
web	I
.	O
55	O
3	O
reasoning	B
56	O
4	O
semantic	B
web	I
the	O
semantic	B
web	I
is	O
intended	O
to	O
provide	O
a	O
massive	O
linked	O
set	O
of	O
data	O
for	O
use	O
by	O
soft-	O
ware	O
systems	O
just	O
as	O
the	O
world	O
wide	O
web	O
provides	O
a	O
massive	O
collection	O
of	O
linked	O
web	O
pages	O
for	O
human	O
reading	O
and	O
browsing	O
.	O
the	O
semantic	B
web	I
is	O
like	O
the	O
web	O
in	O
that	O
anyone	O
can	O
generate	O
any	O
content	O
that	O
they	O
want	O
.	O
this	O
freedom	O
to	O
publish	O
any-	O
thing	O
works	O
for	O
the	O
web	O
because	O
we	O
use	O
our	O
ability	O
to	O
understand	O
natural	O
language	O
to	O
interpret	O
what	O
we	O
read	O
–	O
and	O
often	O
to	O
dismiss	O
material	O
that	O
based	O
upon	O
our	O
own	O
knowledge	O
we	O
consider	O
to	O
be	O
incorrect	O
.	O
the	O
core	O
concept	O
for	O
the	O
semantic	B
web	I
is	O
data	O
integration	O
and	O
use	O
from	O
different	O
sources	O
.	O
as	O
we	O
will	O
soon	O
see	O
,	O
the	O
tools	O
for	O
implementing	O
the	O
semantic	B
web	I
are	O
designed	O
for	O
encoding	O
data	O
and	O
sharing	O
data	O
from	O
many	O
different	O
sources	O
.	O
there	O
are	O
several	O
very	O
good	O
semantic	B
web	I
toolkits	O
for	O
the	O
java	O
language	O
and	O
plat-	O
form	O
.	O
i	O
will	O
use	O
sesame	O
because	O
it	O
is	O
what	O
i	O
often	O
use	O
in	O
my	O
own	O
work	O
and	O
i	O
believe	O
that	O
it	O
is	O
a	O
good	O
starting	O
technology	O
for	O
your	O
ﬁrst	O
experiments	O
with	O
semantic	B
web	I
technologies	O
.	O
this	O
chapter	O
provides	O
an	O
incomplete	O
coverage	O
of	O
semantic	B
web	I
tech-	O
nologies	O
and	O
is	O
intended	O
merely	O
as	O
a	O
gentle	O
introduction	O
to	O
a	O
few	O
useful	O
techniques	O
and	O
how	O
to	O
implement	O
those	O
techniques	O
in	O
java	O
.	O
figure	O
4.1	O
shows	O
a	O
layered	O
set	O
of	O
data	O
models	O
that	O
are	O
used	O
to	O
implement	O
seman-	O
tic	O
web	O
applications	O
.	O
to	O
design	O
and	O
implement	O
these	O
applications	O
we	O
need	O
to	O
think	O
in	O
terms	O
of	O
physical	O
models	O
(	O
storage	O
and	O
access	O
of	O
rdf	O
,	O
rdfs	O
,	O
and	O
perhaps	O
owl	O
data	O
)	O
,	O
logical	O
models	O
(	O
how	O
we	O
use	O
rdf	O
and	O
rdfs	O
to	O
deﬁne	O
relationships	O
between	O
data	O
represented	O
as	O
unique	O
uris	O
and	O
string	O
literals	O
and	O
how	O
we	O
logically	O
combine	O
data	O
from	O
different	O
sources	O
)	O
and	O
conceptual	O
modeling	O
(	O
higher	O
level	O
knowledge	O
rep-	O
resentation	O
using	O
owl	O
)	O
.	O
i	O
am	O
currently	O
writing	O
a	O
separate	O
book	O
practical	O
semantic	B
web	I
programming	O
in	O
java	O
that	O
goes	O
into	O
much	O
more	O
detail	O
on	O
the	O
use	O
of	O
sesame	O
,	O
jena	O
,	O
protege	O
,	O
owlapis	O
,	O
rd-	O
f/rdfs/owl	O
modeling	O
,	O
and	O
descriptive	O
logic	B
reasoners	O
.	O
this	O
chapter	O
is	O
meant	O
to	O
get	O
you	O
interested	O
in	O
this	O
technology	O
but	O
is	O
not	O
intended	O
as	O
a	O
detailed	O
guide	O
.	O
57	O
4	O
semantic	B
web	I
figure	O
4.1	O
:	O
layers	O
of	O
data	O
models	O
used	O
in	O
implementing	O
semantic	B
web	I
applications	O
4.1	O
relational	B
database	I
model	O
has	O
problems	O
dealing	O
with	O
rapidly	O
changing	O
data	O
requirements	O
when	O
people	O
are	O
ﬁrst	O
introduced	O
to	O
semantic	B
web	I
technologies	O
their	O
ﬁrst	O
reac-	O
tion	O
is	O
often	O
something	O
like	O
,	O
“	O
i	O
can	O
just	O
do	O
that	O
with	O
a	O
database.	O
”	O
the	O
relational	B
database	I
model	O
is	O
an	O
efﬁcient	O
way	O
to	O
express	O
and	O
work	O
with	O
slowly	O
changing	O
data	O
models	O
.	O
there	O
are	O
some	O
clever	O
tools	O
for	O
dealing	O
with	O
data	O
change	O
requirements	O
in	O
the	O
database	O
world	O
(	O
activerecord	O
and	O
migrations	O
being	O
a	O
good	O
example	O
)	O
but	O
it	O
is	O
awkward	O
to	O
have	O
end	O
users	O
and	O
even	O
developers	O
tagging	B
on	O
new	O
data	O
attributes	O
to	O
relational	B
database	I
tables	O
.	O
this	O
same	O
limitation	O
also	O
applies	O
to	O
object	O
oriented	O
programming	O
and	O
object	O
mod-	O
eling	O
.	O
even	O
with	O
dynamic	O
languages	O
that	O
facilitate	O
modifying	O
classes	O
at	O
runtime	O
,	O
the	O
options	O
for	O
adding	O
attributes	O
to	O
existing	O
models	O
is	O
just	O
too	O
limiting	O
.	O
the	O
same	O
argument	O
can	O
be	O
made	O
against	O
the	O
use	O
of	O
xml	O
constrained	O
by	O
conformance	O
to	O
ei-	O
ther	O
dtds	O
or	O
xml	O
schemas	O
.	O
it	O
is	O
true	O
that	O
rdf	O
and	O
rdfs	O
can	O
be	O
serialized	O
to	O
xml	O
using	O
many	O
pre-existing	O
xml	O
namespaces	O
for	O
different	O
knowledge	O
sources	O
and	O
their	O
schemas	O
but	O
it	O
turns	O
out	O
that	O
this	O
is	O
done	O
in	O
a	O
way	O
that	O
does	O
not	O
reduce	O
the	O
ﬂexibility	O
for	O
extending	O
data	O
models	O
.	O
xml	O
storage	O
is	O
really	O
only	O
a	O
serialization	O
of	O
rdf	O
and	O
many	O
developers	O
who	O
are	O
just	O
starting	O
to	O
use	O
semantic	B
web	I
technologies	O
initially	O
get	O
confused	O
trying	O
to	O
read	O
xml	O
serialization	O
of	O
rdf	O
–	O
almost	O
like	O
trying	O
to	O
read	O
a	O
pdf	O
ﬁle	O
with	O
a	O
plain	O
text	O
editor	O
and	O
something	O
to	O
be	O
avoided	O
.	O
58	O
owl	O
:	O
extends	O
rdfs	O
to	O
allow	O
expression	O
of	O
richer	O
class	O
relationships	O
,	O
cardinality	O
,	O
etc.xml	O
:	O
a	O
syntax	O
for	O
tree	O
structured	O
documents	O
xml	O
schema	O
:	O
a	O
language	O
for	O
placing	O
restrictions	O
on	O
xml	O
documentsrdf	O
:	O
modeling	O
subject	O
,	O
predicate	O
and	O
object	O
linksrdfs	O
:	O
vocabulary	O
for	O
describing	O
properties	O
and	O
class	O
membership	O
by	O
properties	O
4.2	O
rdf	O
:	O
the	O
universal	O
data	O
format	O
a	O
major	O
goal	O
for	O
the	O
rest	O
of	O
this	O
chapter	O
is	O
convincing	O
you	O
that	O
modeling	O
data	O
with	O
rdf	O
and	O
rdfs	O
facilitates	O
freely	O
extending	O
data	O
models	O
and	O
also	O
allows	O
fairly	O
easy	O
integration	O
of	O
data	O
from	O
different	O
sources	O
using	O
different	O
schemas	O
without	O
explicitly	O
converting	O
data	O
from	O
one	O
schema	O
to	O
another	O
for	O
reuse	O
.	O
4.2	O
rdf	O
:	O
the	O
universal	O
data	O
format	O
the	O
resource	O
description	O
framework	O
(	O
rdf	O
)	O
is	O
used	O
to	O
encode	O
information	O
and	O
the	O
rdf	O
schema	O
(	O
rdfs	O
)	O
facilitates	O
using	O
data	O
with	O
different	O
rdf	O
encodings	O
without	O
the	O
need	O
to	O
convert	O
data	O
formats	O
.	O
rdf	O
data	O
was	O
originally	O
encoded	O
as	O
xml	O
and	O
intended	O
for	O
automated	O
processing	O
.	O
in	O
this	O
chapter	O
we	O
will	O
use	O
two	O
simple	O
to	O
read	O
formats	O
called	O
”	O
n-triples	O
”	O
and	O
”	O
n3.	O
”	O
sesame	O
can	O
be	O
used	O
to	O
convert	O
between	O
all	O
rdf	O
formats	O
so	O
we	O
might	O
as	O
well	O
use	O
formats	O
that	O
are	O
easier	O
to	O
read	O
and	O
understand	O
.	O
rdf	O
data	O
consists	O
of	O
a	O
set	O
of	O
triple	O
values	O
:	O
•	O
subject	O
•	O
predicate	O
•	O
object	O
some	O
of	O
my	O
work	O
with	O
semantic	B
web	I
technologies	O
deals	O
with	O
processing	O
news	O
sto-	O
ries	O
,	O
extracting	O
semantic	O
information	O
from	O
the	O
text	O
,	O
and	O
storing	O
it	O
in	O
rdf	O
.	O
i	O
will	O
use	O
this	O
application	O
domain	O
for	O
the	O
examples	O
in	O
this	O
chapter	O
.	O
i	O
deal	O
with	O
triples	O
like	O
:	O
•	O
subject	O
:	O
a	O
url	O
(	O
or	O
uri	O
)	O
of	O
a	O
news	O
article	O
•	O
predicate	O
:	O
a	O
relation	O
like	O
”	O
containsperson	O
”	O
•	O
object	O
:	O
a	O
value	O
like	O
”	O
bill	O
clinton	O
”	O
as	O
previously	O
mentioned	O
,	O
we	O
will	O
use	O
either	O
uris	O
or	O
string	O
literals	O
as	O
values	O
for	O
subjects	O
and	O
objects	O
.	O
we	O
will	O
always	O
use	O
uris	O
for	O
the	O
values	O
of	O
predicates	O
.	O
in	O
any	O
case	O
uris	O
are	O
usually	O
preferred	O
to	O
string	O
literals	O
because	O
they	O
are	O
unique	O
.	O
we	O
will	O
see	O
an	O
example	O
of	O
this	O
preferred	O
use	O
but	O
ﬁrst	O
we	O
need	O
to	O
learn	O
the	O
n-triple	O
and	O
n3	O
rdf	O
formats	O
.	O
in	O
section	O
4.1	O
i	O
proposed	O
the	O
idea	O
that	O
rdf	O
was	O
more	O
ﬂexible	O
than	O
object	O
modeling	O
in	O
programming	O
languages	O
,	O
relational	O
databases	O
,	O
and	O
xml	O
with	O
schemas	O
.	O
if	O
we	O
can	O
tag	O
new	O
attributes	O
on	O
the	O
ﬂy	O
to	O
existing	O
data	O
,	O
how	O
do	O
we	O
prevent	O
what	O
i	O
might	O
call	O
“	O
data	O
chaos	O
”	O
as	O
we	O
modify	O
existing	O
data	O
sources	O
?	O
it	O
turns	O
out	O
that	O
the	O
solution	O
to	O
this	O
problem	O
is	O
also	O
the	O
solution	O
for	O
encoding	O
real	O
semantics	O
(	O
or	O
meaning	O
)	O
with	O
data	O
:	O
we	O
usually	O
use	O
unique	O
uris	O
for	O
rdf	O
subjects	O
,	O
predicates	O
,	O
and	O
objects	O
,	O
and	O
usually	O
59	O
4	O
semantic	B
web	I
with	O
a	O
preference	O
for	O
not	O
using	O
string	O
literals	O
.	O
i	O
will	O
try	O
to	O
make	O
this	O
idea	O
more	O
clear	O
with	O
some	O
examples	O
.	O
any	O
part	O
of	O
a	O
triple	O
(	O
subject	O
,	O
predicate	O
,	O
or	O
object	O
)	O
is	O
either	O
a	O
uri	O
or	O
a	O
string	O
literal	O
.	O
uris	O
encode	O
namespaces	O
.	O
for	O
example	O
,	O
the	O
containsperson	O
predicate	O
in	O
the	O
last	O
example	O
could	O
properly	O
be	O
written	O
as	O
:	O
http	O
:	O
//knowledgebooks.com/ontology/	O
#	O
containsperson	O
the	O
ﬁrst	O
part	O
of	O
this	O
uri	O
is	O
considered	O
to	O
be	O
the	O
namespace	O
for	O
(	O
what	O
we	O
will	O
use	O
as	O
a	O
predicate	O
)	O
“	O
containsperson.	O
”	O
when	O
different	O
rdf	O
triples	O
use	O
this	O
same	O
predicate	O
,	O
this	O
is	O
some	O
assurance	O
to	O
us	O
that	O
all	O
users	O
of	O
this	O
predicate	O
subscribe	O
to	O
the	O
same	O
meaning	O
.	O
furthermore	O
,	O
we	O
will	O
see	O
in	O
section	O
4.3	O
we	O
can	O
use	O
rdfs	O
to	O
state	O
equiva-	O
lency	O
between	O
this	O
predicate	O
(	O
in	O
the	O
namespace	O
http	O
:	O
//knowledgebooks.com/ontology/	O
)	O
with	O
predicates	O
represented	O
by	O
different	O
uris	O
used	O
in	O
other	O
data	O
sources	O
.	O
in	O
an	O
“	O
ar-	O
tiﬁcial	O
intelligence	O
”	O
sense	O
,	O
software	O
that	O
we	O
write	O
does	O
not	O
understand	O
a	O
predicate	O
like	O
“	O
containsperson	O
”	O
in	O
the	O
way	O
that	O
a	O
human	O
reader	O
can	O
by	O
combining	O
understood	O
common	O
meanings	O
for	O
the	O
words	O
“	O
contains	O
”	O
and	O
“	O
person	O
”	O
but	O
for	O
many	O
interesting	O
and	O
useful	O
types	O
of	O
applications	O
that	O
is	O
ﬁne	O
as	O
long	O
as	O
the	O
predicate	O
is	O
used	O
consis-	O
tently	O
.	O
we	O
will	O
see	O
shortly	O
that	O
we	O
can	O
deﬁne	O
abbreviation	O
preﬁxes	O
for	O
namespaces	O
which	O
makes	O
rdf	O
and	O
rdfs	O
ﬁles	O
shorter	O
and	O
easier	O
to	O
read	O
.	O
a	O
statement	O
in	O
n-triple	O
format	O
consists	O
of	O
three	O
uris	O
(	O
or	O
string	O
literals	O
–	O
any	O
com-	O
bination	O
)	O
followed	O
by	O
a	O
period	O
to	O
end	O
the	O
statement	O
.	O
while	O
statements	O
are	O
often	O
written	O
one	O
per	O
line	O
in	O
a	O
source	O
ﬁle	O
they	O
can	O
be	O
broken	O
across	O
lines	O
;	O
it	O
is	O
the	O
ending	O
period	O
which	O
marks	O
the	O
end	O
of	O
a	O
statement	O
.	O
the	O
standard	O
ﬁle	O
extension	O
for	O
n-triple	O
format	O
ﬁles	O
is	O
*.nt	O
and	O
the	O
standard	O
format	O
for	O
n3	O
format	O
ﬁles	O
is	O
*.n3	O
.	O
my	O
preference	O
is	O
to	O
use	O
n-triple	O
format	O
ﬁles	O
as	O
output	O
from	O
programs	O
that	O
i	O
write	O
to	O
save	O
data	O
as	O
rdf	O
.	O
i	O
often	O
use	O
sesame	O
to	O
convert	O
n-triple	O
ﬁles	O
to	O
n3	O
if	O
i	O
will	O
be	O
reading	O
them	O
or	O
even	O
hand	O
editing	O
them	O
.	O
you	O
will	O
see	O
why	O
i	O
prefer	O
the	O
n3	O
format	O
when	O
we	O
look	O
at	O
an	O
example	O
:	O
@	O
prefix	O
kb	O
:	O
<	O
http	O
:	O
//knowledgebooks.com/ontology	O
#	O
>	O
.	O
<	O
http	O
:	O
//news.com/201234	O
/	O
>	O
kb	O
:	O
containscountry	O
``	O
china	O
''	O
.	O
here	O
we	O
see	O
the	O
use	O
of	O
an	O
abbreviation	O
preﬁx	O
“	O
kb	O
:	O
”	O
for	O
the	O
namespace	O
for	O
my	O
com-	O
pany	O
knowledgebooks.com	O
ontologies	O
.	O
the	O
ﬁrst	O
term	O
in	O
the	O
rdf	O
statement	O
(	O
the	O
subject	O
)	O
is	O
the	O
uri	O
of	O
a	O
news	O
article	O
.	O
the	O
second	O
term	O
(	O
the	O
predicate	O
)	O
is	O
“	O
contain-	O
scountry	O
”	O
in	O
the	O
“	O
kb	O
:	O
”	O
namespace	O
.	O
the	O
last	O
item	O
in	O
the	O
statement	O
(	O
the	O
object	O
)	O
is	O
a	O
string	O
literal	O
“	O
china.	O
”	O
i	O
would	O
describe	O
this	O
rdf	O
statement	O
in	O
english	O
as	O
,	O
“	O
the	O
news	O
article	O
at	O
uri	O
http	O
:	O
//news.com/201234	O
mentions	O
the	O
country	O
china.	O
”	O
this	O
was	O
a	O
very	O
simple	O
n3	O
example	O
which	O
we	O
will	O
expand	O
to	O
show	O
additional	O
fea-	O
tures	O
of	O
the	O
n3	O
notation	O
.	O
as	O
another	O
example	O
,	O
suppose	O
that	O
this	O
news	O
article	O
also	O
60	O
4.2	O
rdf	O
:	O
the	O
universal	O
data	O
format	O
mentions	O
the	O
usa	O
.	O
instead	O
of	O
adding	O
a	O
whole	O
new	O
statement	O
like	O
this	O
:	O
@	O
prefix	O
kb	O
:	O
<	O
http	O
:	O
//knowledgebooks.com/ontology	O
#	O
>	O
.	O
<	O
http	O
:	O
//news.com/201234	O
/	O
>	O
kb	O
:	O
containscountry	O
``	O
china	O
''	O
<	O
http	O
:	O
//news.com/201234	O
/	O
>	O
kb	O
:	O
containscountry	O
``	O
usa	O
''	O
.	O
.	O
we	O
can	O
combine	O
them	O
using	O
n3	O
notation	O
.	O
n3	O
allows	O
us	O
to	O
collapse	O
multiple	O
rdf	O
statements	O
that	O
share	O
the	O
same	O
subject	O
and	O
optionally	O
the	O
same	O
predicate	O
:	O
@	O
prefix	O
kb	O
:	O
<	O
http	O
:	O
//knowledgebooks.com/ontology	O
#	O
>	O
.	O
<	O
http	O
:	O
//news.com/201234	O
/	O
>	O
kb	O
:	O
containscountry	O
``	O
china	O
''	O
,	O
''	O
usa	O
''	O
.	O
we	O
can	O
also	O
add	O
in	O
additional	O
predicates	O
that	O
use	O
the	O
same	O
subject	O
:	O
@	O
prefix	O
kb	O
:	O
<	O
http	O
:	O
//knowledgebooks.com/ontology	O
#	O
>	O
.	O
<	O
http	O
:	O
//news.com/201234	O
/	O
>	O
kb	O
:	O
containscountry	O
``	O
china	O
''	O
,	O
kb	O
:	O
containsorganization	O
``	O
united	O
nations	O
''	O
;	O
kb	O
:	O
containsperson	O
``	O
ban	O
ki-moon	O
''	O
,	O
``	O
gordon	O
brown	O
''	O
,	O
''	O
hu	O
jintao	O
''	O
,	O
``	O
george	O
w.	O
bush	O
''	O
,	O
''	O
pervez	O
musharraf	O
''	O
,	O
''	O
vladimir	O
putin	O
''	O
,	O
''	O
mahmoud	O
ahmadinejad	O
''	O
.	O
``	O
usa	O
''	O
.	O
this	O
single	O
n3	O
statement	O
represents	O
ten	O
individual	O
rdf	O
triples	O
.	O
each	O
section	O
deﬁn-	O
ing	O
triples	O
with	O
the	O
same	O
subject	O
and	O
predicate	O
have	O
objects	O
separated	O
by	O
commas	O
and	O
ending	O
with	O
a	O
period	O
.	O
please	O
note	O
that	O
whatever	O
rdf	O
storage	O
system	O
we	O
use	O
(	O
we	O
will	O
be	O
using	O
sesame	O
)	O
it	O
makes	O
no	O
difference	O
if	O
we	O
load	O
rdf	O
as	O
xml	O
,	O
n-triple	O
,	O
of	O
n3	O
format	O
ﬁles	O
:	O
internally	O
subject	O
,	O
predicate	O
,	O
and	O
object	O
triples	O
are	O
stored	O
in	O
the	O
same	O
way	O
and	O
are	O
used	O
in	O
the	O
same	O
way	O
.	O
i	O
promised	O
you	O
that	O
the	O
data	O
in	O
rdf	O
data	O
stores	O
was	O
easy	O
to	O
extend	O
.	O
as	O
an	O
example	O
,	O
let	O
us	O
assume	O
that	O
we	O
have	O
written	O
software	O
that	O
is	O
able	O
to	O
read	O
online	O
news	O
articles	O
and	O
create	O
rdf	O
data	O
that	O
captures	O
some	O
of	O
the	O
semantics	O
in	O
the	O
articles	O
.	O
if	O
we	O
extend	O
our	O
program	O
to	O
also	O
recognize	O
dates	O
when	O
the	O
articles	O
are	O
published	O
,	O
we	O
can	O
simply	O
reprocess	O
articles	O
and	O
for	O
each	O
article	O
add	O
a	O
triple	O
to	O
our	O
rdf	O
data	O
store	O
using	O
a	O
form	O
like	O
:	O
<	O
http	O
:	O
//news.com/201234	O
/	O
>	O
kb	O
:	O
datepublished	O
''	O
2008-05-11	O
''	O
.	O
61	O
4	O
semantic	B
web	I
furthermore	O
,	O
if	O
we	O
do	O
not	O
have	O
dates	O
for	O
all	O
news	O
articles	O
that	O
is	O
often	O
acceptable	O
depending	O
on	O
the	O
application	O
.	O
4.3	O
extending	O
rdf	O
with	O
rdf	O
schema	O
rdfs	O
supports	O
the	O
deﬁnition	O
of	O
classes	O
and	O
properties	O
based	O
on	O
set	O
inclusion	O
.	O
in	O
rdfs	O
classes	O
and	O
properties	O
are	O
orthogonal	O
.	O
we	O
will	O
not	O
simply	O
be	O
using	O
properties	O
to	O
deﬁne	O
data	O
attributes	O
for	O
classes	O
–	O
this	O
is	O
different	O
than	O
object	O
modeling	O
and	O
object	O
oriented	O
programming	O
languages	O
like	O
java	O
.	O
rdfs	O
is	O
encoded	O
as	O
rdf	O
–	O
the	O
same	O
syntax	O
.	O
because	O
the	O
semantic	B
web	I
is	O
intended	O
to	O
be	O
processed	O
automatically	O
by	O
software	O
systems	O
it	O
is	O
encoded	O
as	O
rdf	O
.	O
there	O
is	O
a	O
problem	O
that	O
must	O
be	O
solved	O
in	O
implement-	O
ing	O
and	O
using	O
the	O
semantic	B
web	I
:	O
everyone	O
who	O
publishes	O
semantic	B
web	I
data	O
is	O
free	O
to	O
create	O
their	O
own	O
rdf	O
schemas	O
for	O
storing	O
data	O
;	O
for	O
example	O
,	O
there	O
is	O
usually	O
no	O
single	O
standard	O
rdf	O
schema	O
deﬁnition	O
for	O
topics	O
like	O
news	O
stories	O
and	O
stock	O
market	O
data	O
.	O
understanding	O
the	O
difﬁculty	O
of	O
integrating	O
different	O
data	O
sources	O
in	O
different	O
formats	O
helps	O
to	O
understand	O
the	O
design	O
decisions	O
behind	O
the	O
semantic	B
web	I
.	O
we	O
will	O
start	O
with	O
an	O
example	O
that	O
is	O
an	O
extension	O
of	O
the	O
example	O
in	O
the	O
last	O
section	O
that	O
also	O
uses	O
rdfs	O
.	O
we	O
add	O
a	O
few	O
additional	O
rdf	O
statements	O
(	O
that	O
are	O
rdfs	O
)	O
:	O
@	O
prefix	O
kb	O
:	O
<	O
http	O
:	O
//knowledgebooks.com/ontology	O
#	O
>	O
.	O
@	O
prefix	O
rdfs	O
:	O
<	O
http	O
:	O
//www.w3.org/2000/01/rdf-schema	O
#	O
>	O
.	O
kb	O
:	O
containscity	O
rdfs	O
:	O
subpropertyof	O
kb	O
:	O
containsplace	O
.	O
kb	O
:	O
containscountry	O
rdfs	O
:	O
subpropertyof	O
kb	O
:	O
containsplace	O
.	O
kb	O
:	O
containsstate	O
rdfs	O
:	O
subpropertyof	O
kb	O
:	O
containsplace	O
.	O
the	O
last	O
three	O
lines	O
declare	O
that	O
:	O
•	O
the	O
property	O
containscity	O
is	O
a	O
subproperty	O
of	O
containsplace	O
.	O
•	O
the	O
property	O
containscountry	O
is	O
a	O
subproperty	O
of	O
containsplace	O
.	O
•	O
the	O
property	O
containsstate	O
is	O
a	O
subproperty	O
of	O
containsplace	O
.	O
why	O
is	O
this	O
useful	O
?	O
for	O
at	O
least	O
two	O
reasons	O
:	O
•	O
you	O
can	O
query	O
an	O
rdf	O
data	O
store	O
for	O
all	O
triples	O
that	O
use	O
property	O
containsplace	O
and	O
also	O
match	O
triples	O
with	O
property	O
equal	O
to	O
containscity	O
,	O
containscountry	O
,	O
or	O
containsstate	O
.	O
there	O
may	O
not	O
even	O
be	O
any	O
triples	O
that	O
explicitly	O
use	O
the	O
property	O
containsplace	O
.	O
62	O
4.4	O
the	O
sparql	O
query	O
language	O
•	O
consider	O
a	O
hypothetical	O
case	O
where	O
you	O
are	O
using	O
two	O
different	O
rdf	O
data	O
stores	O
that	O
use	O
different	O
properties	O
for	O
naming	O
cities	O
:	O
“	O
cityname	O
”	O
and	O
“	O
city.	O
”	O
you	O
can	O
deﬁne	O
“	O
cityname	O
”	O
to	O
be	O
a	O
subproperty	O
of	O
“	O
city	O
”	O
and	O
then	O
write	O
all	O
queries	O
against	O
the	O
single	O
property	O
name	O
“	O
city.	O
”	O
this	O
removes	O
the	O
necessity	O
to	O
convert	O
data	O
from	O
different	O
sources	O
to	O
use	O
the	O
same	O
schema	O
.	O
in	O
addition	O
to	O
providing	O
a	O
vocabulary	O
for	O
describing	O
properties	O
and	O
class	O
membership	O
by	O
properties	O
,	O
rdfs	O
is	O
also	O
used	O
for	O
logical	O
inference	O
to	O
infer	O
new	O
triples	O
,	O
combine	O
data	O
from	O
different	O
rdf	O
data	O
sources	O
,	O
and	O
to	O
allow	O
effective	O
querying	O
of	O
rdf	O
data	O
stores	O
.	O
we	O
will	O
see	O
examples	O
of	O
all	O
of	O
these	O
features	O
of	O
rdfs	O
when	O
we	O
start	O
using	O
the	O
sesame	O
libraries	O
in	O
the	O
next	O
section	O
to	O
perform	O
sparql	O
queries	O
.	O
4.4	O
the	O
sparql	O
query	O
language	O
sparql	O
is	O
a	O
query	O
language	O
used	O
to	O
query	O
rdf	O
data	O
stores	O
.	O
while	O
sparql	O
may	O
initially	O
look	O
like	O
sql	O
,	O
we	O
will	O
see	O
that	O
there	O
are	O
some	O
important	O
differences	O
like	O
support	O
for	O
rdfs	O
and	O
owl	O
inferencing	O
(	O
see	O
section	O
4.6	O
)	O
and	O
graph-based	O
instead	O
of	O
relational	O
matching	O
operations	O
.	O
we	O
will	O
cover	O
the	O
basics	O
of	O
sparql	O
in	O
this	O
section	O
and	O
then	O
see	O
more	O
examples	O
in	O
section	O
4.5	O
when	O
we	O
learn	O
how	O
to	O
embed	O
sesame	O
in	O
java	O
applications	O
.	O
we	O
will	O
use	O
the	O
n3	O
format	O
rdf	O
ﬁle	O
test	O
data/news.n3	O
for	O
the	O
examples	O
in	O
this	O
section	O
and	O
in	O
section	O
4.5.	O
this	O
ﬁle	O
was	O
created	O
automatically	O
by	O
spidering	O
reuters	O
news	O
stories	O
on	O
the	O
news.yahoo.com	O
web	O
site	O
and	O
automatically	O
extracting	O
named	O
entities	O
from	O
the	O
text	O
of	O
the	O
articles	O
.	O
we	O
will	O
see	O
techniques	O
for	O
extracting	O
named	O
entities	O
from	O
text	O
in	O
chapters	O
9	O
and	O
10.	O
in	O
this	O
chapter	O
we	O
use	O
these	O
sample	O
rdf	O
ﬁles	O
that	O
i	O
have	O
created	O
as	O
input	O
from	O
another	O
source	O
.	O
you	O
have	O
already	O
seen	O
snippets	O
of	O
this	O
ﬁle	O
in	O
section	O
4.3	O
and	O
i	O
list	O
the	O
entire	O
ﬁle	O
here	O
for	O
reference	O
(	O
edited	O
to	O
ﬁt	O
line	O
width	O
:	O
you	O
may	O
ﬁnd	O
the	O
ﬁle	O
news.n3	O
easier	O
to	O
read	O
if	O
you	O
are	O
at	O
your	O
computer	O
and	O
open	O
the	O
ﬁle	O
in	O
a	O
text	O
editor	O
so	O
you	O
will	O
not	O
be	O
limited	O
to	O
what	O
ﬁts	O
on	O
a	O
book	O
page	O
)	O
:	O
@	O
prefix	O
kb	O
:	O
<	O
http	O
:	O
//knowledgebooks.com/ontology	O
#	O
>	O
.	O
@	O
prefix	O
rdfs	O
:	O
<	O
http	O
:	O
//www.w3.org/2000/01/rdf-schema	O
#	O
>	O
.	O
kb	O
:	O
containscity	O
rdfs	O
:	O
subpropertyof	O
kb	O
:	O
containsplace	O
.	O
kb	O
:	O
containscountry	O
rdfs	O
:	O
subpropertyof	O
kb	O
:	O
containsplace	O
.	O
kb	O
:	O
containsstate	O
rdfs	O
:	O
subpropertyof	O
kb	O
:	O
containsplace	O
.	O
<	O
http	O
:	O
//yahoo.com/20080616/usa_flooding_dc_16	O
/	O
>	O
63	O
4	O
semantic	B
web	I
kb	O
:	O
containscity	O
``	O
burlington	O
''	O
,	O
``	O
denver	O
''	O
,	O
''	O
st.	O
paul	O
''	O
,	O
''	O
chicago	O
''	O
,	O
''	O
quincy	O
''	O
,	O
``	O
chicago	O
''	O
,	O
''	O
iowa	O
city	O
''	O
;	O
kb	O
:	O
containsregion	O
``	O
u.s.	O
midwest	O
''	O
,	O
``	O
midwest	O
''	O
;	O
kb	O
:	O
containscountry	O
``	O
united	O
states	O
''	O
,	O
``	O
japan	O
''	O
;	O
kb	O
:	O
containsstate	O
``	O
minnesota	O
''	O
,	O
``	O
illinois	O
''	O
,	O
kb	O
:	O
containsorganization	O
``	O
national	O
guard	O
''	O
,	O
''	O
mississippi	O
''	O
,	O
``	O
iowa	O
''	O
;	O
''	O
u.s.	O
department	O
of	O
agriculture	O
''	O
,	O
''	O
white	O
house	O
''	O
,	O
''	O
chicago	O
board	O
of	O
trade	O
''	O
,	O
''	O
department	O
of	O
transportation	O
''	O
;	O
kb	O
:	O
containsperson	O
``	O
dena	O
gray-fisher	O
''	O
,	O
''	O
donald	O
miller	O
''	O
,	O
''	O
glenn	O
hollander	O
''	O
,	O
''	O
rich	O
feltes	O
''	O
,	O
''	O
george	O
w.	O
bush	O
''	O
;	O
kb	O
:	O
containsindustryterm	O
``	O
food	O
inflation	O
''	O
,	O
``	O
food	O
''	O
,	O
''	O
finance	O
ministers	O
''	O
,	O
''	O
oil	O
''	O
.	O
<	O
http	O
:	O
//yahoo.com/78325/ts_nm/usa_politics_dc_2	O
/	O
>	O
kb	O
:	O
containscity	O
``	O
washington	O
''	O
,	O
``	O
baghdad	O
''	O
,	O
kb	O
:	O
containscountry	O
``	O
united	O
states	O
''	O
,	O
''	O
arlington	O
''	O
,	O
``	O
flint	O
''	O
;	O
''	O
afghanistan	O
''	O
,	O
''	O
iraq	O
''	O
;	O
kb	O
:	O
containsstate	O
``	O
illinois	O
''	O
,	O
``	O
virginia	O
''	O
,	O
''	O
arizona	O
''	O
,	O
``	O
michigan	O
''	O
;	O
kb	O
:	O
containsorganization	O
``	O
white	O
house	O
''	O
,	O
kb	O
:	O
containsperson	O
``	O
david	O
petraeus	O
''	O
,	O
''	O
obama	O
administration	O
''	O
,	O
''	O
iraqi	O
government	O
''	O
;	O
''	O
john	O
mccain	O
''	O
,	O
''	O
hoshiyar	O
zebari	O
''	O
,	O
''	O
barack	O
obama	O
''	O
,	O
''	O
george	O
w.	O
bush	O
''	O
,	O
''	O
carly	O
fiorina	O
''	O
;	O
kb	O
:	O
containsindustryterm	O
``	O
oil	O
prices	O
''	O
.	O
<	O
http	O
:	O
//yahoo.com/10944/ts_nm/worldleaders_dc_1	O
/	O
>	O
kb	O
:	O
containscity	O
``	O
washington	O
''	O
;	O
kb	O
:	O
containscountry	O
``	O
united	O
states	O
''	O
,	O
``	O
pakistan	O
''	O
,	O
''	O
islamic	O
republic	O
of	O
iran	O
''	O
;	O
64	O
4.4	O
the	O
sparql	O
query	O
language	O
kb	O
:	O
containsstate	O
``	O
maryland	O
''	O
;	O
kb	O
:	O
containsorganization	O
``	O
university	O
of	O
maryland	O
''	O
,	O
''	O
united	O
nations	O
''	O
;	O
kb	O
:	O
containsperson	O
``	O
ban	O
ki-moon	O
''	O
,	O
``	O
gordon	O
brown	O
''	O
,	O
''	O
hu	O
jintao	O
''	O
,	O
``	O
george	O
w.	O
bush	O
''	O
,	O
''	O
pervez	O
musharraf	O
''	O
,	O
''	O
vladimir	O
putin	O
''	O
,	O
''	O
steven	O
kull	O
''	O
,	O
''	O
mahmoud	O
ahmadinejad	O
''	O
.	O
<	O
http	O
:	O
//yahoo.com/10622/global_economy_dc_4	O
/	O
>	O
kb	O
:	O
containscity	O
``	O
sao	O
paulo	O
''	O
,	O
``	O
kuala	O
lumpur	O
''	O
;	O
kb	O
:	O
containsregion	O
``	O
midwest	O
''	O
;	O
kb	O
:	O
containscountry	O
``	O
united	O
states	O
''	O
,	O
``	O
britain	O
''	O
,	O
''	O
saudi	O
arabia	O
''	O
,	O
``	O
spain	O
''	O
,	O
''	O
italy	O
''	O
,	O
india	O
''	O
,	O
''	O
''	O
france	O
''	O
,	O
``	O
canada	O
''	O
,	O
''	O
russia	O
''	O
,	O
``	O
germany	O
''	O
,	O
``	O
china	O
''	O
,	O
''	O
japan	O
''	O
,	O
``	O
south	O
korea	O
''	O
;	O
kb	O
:	O
containsorganization	O
``	O
federal	O
reserve	O
bank	O
''	O
,	O
''	O
european	O
union	O
''	O
,	O
''	O
european	O
central	O
bank	O
''	O
,	O
''	O
european	O
commission	O
''	O
;	O
kb	O
:	O
containsperson	O
``	O
lee	O
myung-bak	O
''	O
,	O
``	O
rajat	O
nag	O
''	O
,	O
kb	O
:	O
containscompany	O
``	O
development	O
bank	O
managing	O
''	O
,	O
''	O
luiz	O
inacio	O
lula	O
da	O
silva	O
''	O
,	O
''	O
jeffrey	O
lacker	O
''	O
;	O
kb	O
:	O
containsindustryterm	O
``	O
central	O
bank	O
''	O
,	O
``	O
food	O
''	O
,	O
''	O
reuters	O
''	O
,	O
''	O
richmond	O
federal	O
reserve	O
bank	O
''	O
;	O
''	O
energy	O
costs	O
''	O
,	O
''	O
finance	O
ministers	O
''	O
,	O
''	O
crude	O
oil	O
prices	O
''	O
,	O
''	O
oil	O
prices	O
''	O
,	O
''	O
oil	O
shock	O
''	O
,	O
''	O
food	O
prices	O
''	O
,	O
''	O
finance	O
ministers	O
''	O
,	O
''	O
oil	O
prices	O
''	O
,	O
``	O
oil	O
''	O
.	O
in	O
the	O
following	O
examples	O
,	O
we	O
will	O
look	O
at	O
queries	O
but	O
not	O
the	O
results	O
.	O
please	O
be	O
patient	O
:	O
these	O
same	O
queries	O
are	O
used	O
in	O
the	O
embedded	O
java	O
examples	O
in	O
the	O
next	O
section	O
so	O
it	O
makes	O
sense	O
to	O
only	O
list	O
the	O
query	O
return	O
values	O
in	O
one	O
place	O
.	O
besides	O
that	O
,	O
you	O
will	O
enjoy	O
running	O
the	O
example	O
programs	O
yourself	O
and	O
experiment	O
with	O
modifying	O
the	O
queries	O
.	O
65	O
4	O
semantic	B
web	I
we	O
will	O
start	O
with	O
a	O
simple	O
sparql	O
query	O
for	O
subjects	O
(	O
news	O
article	O
urls	O
)	O
and	O
ob-	O
jects	O
(	O
matching	O
countries	O
)	O
with	O
the	O
value	O
for	O
the	O
predicate	O
equal	O
to	O
containscountry	O
:	O
select	O
?	O
subject	O
?	O
object	O
where	O
{	O
?	O
subject	O
http	O
:	O
//knowledgebooks.com/ontology	O
#	O
containscountry	O
>	O
?	O
object	O
.	O
}	O
variables	O
in	O
queries	O
start	O
with	O
a	O
question	O
mark	O
character	O
and	O
can	O
have	O
any	O
names	O
.	O
we	O
can	O
make	O
this	O
query	O
easier	O
and	O
reduce	O
the	O
chance	O
of	O
misspelling	O
errors	O
by	O
using	O
a	O
namespace	O
preﬁx	O
:	O
prefix	O
kb	O
:	O
<	O
http	O
:	O
//knowledgebooks.com/ontology	O
#	O
>	O
select	O
?	O
subject	O
?	O
object	O
where	O
{	O
?	O
subject	O
kb	O
:	O
containscountry	O
?	O
object	O
.	O
}	O
we	O
could	O
have	O
ﬁltered	O
on	O
any	O
other	O
predicate	O
,	O
for	O
instance	O
containsp	O
lace	O
.	O
here	O
is	O
another	O
example	O
using	O
a	O
match	O
against	O
a	O
string	O
literal	O
to	O
ﬁnd	O
all	O
articles	O
exactly	O
matching	O
the	O
text	O
“	O
maryland.	O
”	O
the	O
following	O
queries	O
were	O
copied	O
from	O
java	O
source	O
ﬁles	O
and	O
were	O
embedded	O
as	O
string	O
literals	O
so	O
you	O
will	O
see	O
quotation	O
marks	O
backslash	O
escaped	O
in	O
these	O
examples	O
.	O
if	O
you	O
were	O
entering	O
these	O
queries	O
into	O
a	O
query	O
form	O
you	O
would	O
not	O
escape	O
the	O
quotation	O
marks	O
.	O
prefix	O
kb	O
:	O
<	O
http	O
:	O
//knowledgebooks.com/ontology	O
#	O
>	O
select	O
?	O
subject	O
where	O
{	O
?	O
subject	O
kb	O
:	O
containsstate	O
\	O
''	O
maryland\	O
''	O
.	O
}	O
we	O
can	O
also	O
match	O
partial	O
string	O
literals	O
against	O
regular	O
expressions	O
:	O
prefix	O
kb	O
:	O
select	O
?	O
subject	O
?	O
object	O
where	O
{	O
?	O
subject	O
kb	O
:	O
containsorganization	O
?	O
object	O
filter	O
regex	O
(	O
?	O
object	O
,	O
\	O
''	O
university\	O
''	O
)	O
.	O
}	O
66	O
4.5	O
using	O
sesame	O
prior	O
to	O
this	O
last	O
example	O
query	O
we	O
only	O
requested	O
that	O
the	O
query	O
return	O
values	O
for	O
subject	O
and	O
predicate	O
for	O
triples	O
that	O
matched	O
the	O
query	O
.	O
however	O
,	O
we	O
might	O
want	O
to	O
return	O
all	O
triples	O
whose	O
subject	O
(	O
in	O
this	O
case	O
a	O
news	O
article	O
uri	O
)	O
is	O
in	O
one	O
of	O
the	O
matched	O
triples	O
.	O
note	O
that	O
there	O
are	O
two	O
matching	O
triples	O
,	O
each	O
terminated	O
with	O
a	O
period	O
:	O
prefix	O
kb	O
:	O
<	O
http	O
:	O
//knowledgebooks.com/ontology	O
#	O
>	O
select	O
?	O
subject	O
?	O
a_predicate	O
?	O
an_object	O
where	O
{	O
?	O
subject	O
kb	O
:	O
containsorganization	O
?	O
object	O
filter	O
regex	O
(	O
?	O
object	O
,	O
\	O
''	O
university\	O
''	O
)	O
.	O
?	O
subject	O
?	O
a_predicate	O
?	O
an_object	O
.	O
}	O
distinct	O
order	O
by	O
?	O
a_predicate	O
?	O
an_object	O
limit	O
10	O
offset	O
5	O
when	O
where	O
clauses	O
contain	O
more	O
than	O
one	O
triple	O
pattern	O
to	O
match	O
,	O
this	O
is	O
equiva-	O
lent	O
to	O
a	O
boolean	O
“	O
and	O
”	O
operation	O
.	O
the	O
distinct	O
clause	O
removes	O
duplicate	O
results	O
.	O
the	O
order	O
by	O
clause	O
sorts	O
the	O
output	O
in	O
alphabetical	O
order	O
:	O
in	O
this	O
case	O
ﬁrst	O
by	O
predicate	O
(	O
containscity	O
,	O
containscountry	O
,	O
etc	O
.	O
)	O
and	O
then	O
by	O
object	O
.	O
the	O
limit	O
mod-	O
iﬁer	O
limits	O
the	O
number	O
of	O
results	O
returned	O
and	O
the	O
offset	O
modiﬁer	O
sets	O
the	O
number	O
of	O
matching	O
results	O
to	O
skip	O
.	O
we	O
are	O
done	O
with	O
our	O
quick	O
tutorial	O
on	O
using	O
the	O
select	O
query	O
form	O
.	O
there	O
are	O
three	O
other	O
query	O
forms	O
that	O
i	O
am	O
not	O
covering	O
in	O
this	O
chapter	O
:	O
•	O
construct	O
–	O
returns	O
a	O
new	O
rdf	O
graph	O
of	O
query	O
results	O
•	O
ask	O
–	O
returns	O
boolean	O
true	O
or	O
false	O
indicating	O
if	O
a	O
query	O
matches	O
any	O
triples	O
•	O
describe	O
–	O
returns	O
a	O
new	O
rdf	O
graph	O
containing	O
matched	O
resources	O
4.5	O
using	O
sesame	O
sesame	O
is	O
a	O
complete	O
java	O
library	O
for	O
developing	O
rdf/rdfs	O
applications	O
and	O
we	O
will	O
use	O
it	O
in	O
this	O
chapter	O
.	O
currently	O
sesame	O
’	O
s	O
support	O
for	O
owl	O
(	O
see	O
section	O
4.6	O
)	O
is	O
limited	O
.	O
other	O
java	O
libraries	O
i	O
have	O
used	O
that	O
more	O
fully	O
support	O
owl	O
are	O
jena	O
,	O
owlapi	O
,	O
and	O
the	O
protege	O
library	O
.	O
67	O
4	O
semantic	B
web	I
figure	O
4.2	O
:	O
java	O
utility	O
classes	O
and	O
interface	O
for	O
using	O
sesame	O
figure	O
4.2	O
shows	O
a	O
uml	O
diagram	O
for	O
the	O
wrapper	O
classes	O
and	O
interface	O
that	O
i	O
wrote	O
for	O
sesame	O
to	O
make	O
it	O
easier	O
for	O
you	O
to	O
get	O
started	O
.	O
my	O
wrapper	O
uses	O
an	O
in-memory	O
rdf	O
repository	O
that	O
supports	O
inference	O
,	O
loading	O
rdf/rdfs/owl	O
ﬁles	O
,	O
and	O
per-	O
forming	O
queries	O
.	O
if	O
you	O
decide	O
to	O
use	O
semantic	B
web	I
technologies	O
in	O
your	O
develop-	O
ment	O
you	O
will	O
eventually	O
want	O
to	O
use	O
the	O
full	O
sesame	O
apis	O
for	O
programatically	O
creat-	O
ing	O
new	O
rdf	O
triples	O
,	O
ﬁner	O
control	O
of	O
the	O
type	O
of	O
repository	O
(	O
options	O
are	O
in-memory	O
,	O
disk	O
based	O
,	O
and	O
database	O
)	O
and	O
inferencing	O
,	O
and	O
programatically	O
using	O
query	O
results	O
.	O
that	O
said	O
,	O
using	O
my	O
wrapper	O
library	O
is	O
a	O
good	O
place	O
for	O
you	O
to	O
start	O
to	O
start	O
experi-	O
menting	O
.	O
the	O
class	O
constructor	O
t	O
riplestoresesamem	O
anager	O
opens	O
a	O
new	O
in-memory	O
rdf	O
triple	O
store	O
.	O
i	O
will	O
not	O
cover	O
the	O
internal	O
implementation	O
of	O
the	O
classes	O
and	O
interface	O
seen	O
in	O
figure	O
4.2	O
but	O
you	O
can	O
read	O
the	O
source	O
code	O
in	O
the	O
subdirectory	O
src-semantic-	O
web	O
.	O
we	O
will	O
look	O
in	O
some	O
detail	O
at	O
an	O
example	O
program	O
that	O
uses	O
sesame	O
and	O
my	O
wrapper	O
library	O
for	O
sesame	O
.	O
the	O
source	O
code	O
for	O
this	O
example	O
is	O
in	O
the	O
ﬁle	O
examplesparql-	O
queries.java	O
.	O
this	O
example	O
class	O
implements	O
the	O
isparqlp	O
rocessresults	O
inter-	O
face	O
:	O
public	O
class	O
examplesparqlqueries	O
implements	O
isparqlprocessresults	O
{	O
and	O
does	O
this	O
by	O
deﬁning	O
the	O
method	O
:	O
public	O
void	O
processresult	O
(	O
list	O
<	O
string	O
>	O
data	O
)	O
{	O
system.out.print	O
(	O
``	O
next	O
result	O
:	O
``	O
)	O
;	O
for	O
(	O
string	O
s	O
:	O
data	O
)	O
system.out.print	O
(	O
``	O
|	O
''	O
+s+	O
''	O
|	O
''	O
+	O
``	O
\t	O
''	O
)	O
;	O
system.out.println	O
(	O
``	O
.	O
``	O
)	O
;	O
}	O
68	O
processresult	O
(	O
list	O
<	O
string	O
>	O
data	O
)	O
isparqlprocessresultsinterfaceloadrdf	O
(	O
string	O
rdf_file_path_name	O
)	O
close	O
(	O
)	O
dosparqlquery	O
(	O
string	O
sparql_query	O
,	O
isparqlprocessresults	O
handler	O
)	O
:	O
stringsaverepositoryasn3	O
(	O
string	O
output_file_path	O
)	O
triplestoresesamemanager	O
4.6	O
owl	O
:	O
the	O
web	O
ontology	O
language	O
that	O
simply	O
prints	O
out	O
the	O
subject	O
,	O
predicate	O
,	O
and	O
object	O
of	O
each	O
matched	O
triple	O
.	O
the	O
class	O
t	O
riplestoresesamem	O
anager	O
method	O
public	O
string	O
dosparqlquery	O
(	O
string	O
sparql_query	O
,	O
isparqlprocessresults	O
handler	O
)	O
{	O
calls	O
a	O
deﬁned	O
processresult	O
method	O
once	O
for	O
each	O
triple	O
that	O
matches	O
a	O
query	O
.	O
the	O
examplesparqlqueries	O
class	O
makes	O
several	O
sparql	O
queries	O
and	O
prints	O
the	O
results	O
.	O
these	O
queries	O
are	O
the	O
example	O
queries	O
from	O
the	O
last	O
section	O
.	O
here	O
is	O
an	O
example	O
query	O
with	O
the	O
program	O
output	O
:	O
triplestoresesamemanager	O
ts	O
=	O
new	O
triplestoresesamemanager	O
(	O
)	O
;	O
ts.loadrdf	O
(	O
``	O
test_data/news.n3	O
''	O
)	O
;	O
sparql_query	O
=	O
''	O
prefix	O
kb	O
:	O
<	O
http	O
:	O
//knowledgebooks.com/ontology	O
#	O
>	O
''	O
+	O
''	O
select	O
?	O
subject	O
``	O
+	O
''	O
where	O
{	O
?	O
subject	O
kb	O
:	O
containsstate	O
\	O
''	O
maryland\	O
''	O
.	O
}	O
''	O
;	O
ts.dosparqlquery	O
(	O
sparql_query	O
,	O
this	O
)	O
;	O
here	O
is	O
the	O
single	O
line	O
of	O
output	O
(	O
sesame	O
debug	O
printout	O
is	O
not	O
shown	O
and	O
the	O
long	O
line	O
is	O
split	O
into	O
two	O
lines	O
to	O
ﬁt	O
the	O
page	O
width	O
)	O
:	O
next	O
result	O
:	O
|http	O
:	O
//news.yahoo.com/s/nm/	O
\\	O
20080616/ts_nm/worldleaders_trust_dc_1	O
/|	O
other	O
queries	O
in	O
the	O
last	O
section	O
return	O
two	O
or	O
three	O
values	O
per	O
result	O
;	O
this	O
example	O
only	O
returns	O
the	O
subject	O
(	O
article	O
url	O
)	O
.	O
you	O
can	O
run	O
the	O
text	O
program	O
implemented	O
in	O
the	O
class	O
examplesparqlqueries	O
to	O
see	O
all	O
of	O
the	O
query	O
results	O
for	O
the	O
examples	O
in	O
the	O
last	O
section	O
.	O
there	O
is	O
a	O
lot	O
more	O
to	O
rdfs	O
than	O
what	O
i	O
have	O
covered	O
so	O
far	O
in	O
this	O
chapter	O
but	O
i	O
believe	O
you	O
have	O
a	O
sufﬁcient	O
introduction	O
in	O
order	O
to	O
use	O
the	O
example	O
programs	O
to	O
experiment	O
with	O
using	O
rdf	O
and	O
rdfs	O
to	O
deﬁne	O
data	O
and	O
use	O
sesame	O
in	O
an	O
imbedded	O
mode	O
in	O
your	O
java	O
applications	O
.	O
4.6	O
owl	O
:	O
the	O
web	O
ontology	O
language	O
we	O
have	O
already	O
seen	O
a	O
few	O
examples	O
of	O
using	O
rdfs	O
to	O
deﬁne	O
sub-properties	O
in	O
the	O
this	O
chapter	O
.	O
the	O
web	O
ontology	O
language	O
(	O
owl	O
)	O
extends	O
the	O
expressive	O
power	O
of	O
69	O
4	O
semantic	B
web	I
rdfs	O
.	O
we	O
will	O
not	O
cover	O
owl	O
programming	O
examples	O
in	O
this	O
book	O
but	O
this	O
section	O
will	O
provide	O
some	O
background	O
material	O
.	O
sesame	O
version	O
2.1	O
included	O
in	O
the	O
zip	O
ﬁle	O
for	O
this	O
book	O
does	O
not	O
support	O
owl	O
dl	O
reasoning	B
“	O
out	O
of	O
the	O
box.	O
”	O
when	O
i	O
need	O
to	O
use	O
owl	O
dl	O
reasoning	B
in	O
java	O
applications	O
i	O
use	O
one	O
or	O
more	O
of	O
the	O
following	O
:	O
•	O
protegeowlapis	O
–	O
compatible	O
with	O
the	O
protege	O
ontology	O
editor	O
•	O
pellet	O
–	O
dl	O
reasoner	O
•	O
owlim	O
–	O
owl	O
dl	O
reasoner	O
compatible	O
with	O
some	O
versions	O
of	O
sesame	O
•	O
jena	O
–	O
general	O
purpose	O
library	O
•	O
owlapi	O
–	O
a	O
simpler	O
api	O
using	O
many	O
other	O
libraries	O
owl	O
is	O
more	O
expressive	O
than	O
rdfs	O
in	O
that	O
it	O
supports	O
cardinality	O
,	O
richer	O
class	O
re-	O
lationships	O
,	O
and	O
descriptive	O
logic	B
(	O
dl	O
)	O
reasoning	B
.	O
owl	O
treats	O
the	O
idea	O
of	O
classes	O
very	O
differently	O
than	O
object	O
oriented	O
programming	O
languages	O
like	O
java	O
and	O
smalltalk	O
,	O
but	O
similar	O
to	O
the	O
way	O
powerloom	O
(	O
chapter	O
3	O
)	O
uses	O
concepts	O
(	O
powerloom	O
’	O
s	O
rough	O
equivalent	O
to	O
a	O
class	O
)	O
.	O
in	O
owl	O
instances	O
of	O
a	O
class	O
are	O
referred	O
to	O
as	O
individuals	O
and	O
class	O
membership	O
is	O
determined	O
by	O
a	O
set	O
of	O
properties	O
that	O
allow	O
a	O
dl	O
reasoner	O
to	O
infer	O
class	O
membership	O
of	O
an	O
individual	O
(	O
this	O
is	O
called	O
entailment	O
.	O
)	O
we	O
saw	O
an	O
example	O
of	O
expressing	O
transitive	O
relationships	O
when	O
we	O
were	O
using	O
pow-	O
erloom	O
in	O
section	O
3.3	O
where	O
we	O
deﬁned	O
a	O
powerloom	O
rule	O
to	O
express	O
that	O
the	O
rela-	O
tion	O
“	O
contains	O
”	O
is	O
transitive	O
.	O
we	O
will	O
now	O
look	O
at	O
a	O
similar	O
example	O
using	O
owl	O
.	O
we	O
have	O
been	O
using	O
the	O
rdf	O
ﬁle	O
news.n3	O
in	O
previous	O
examples	O
and	O
we	O
will	O
layer	O
new	O
examples	O
by	O
adding	O
new	O
triples	O
that	O
represent	O
rdf	O
,	O
rdfs	O
,	O
and	O
owl	O
.	O
we	O
saw	O
in	O
news.n3	O
the	O
deﬁnition	O
of	O
three	O
triples	O
using	O
rdfs	O
:	O
subpropertyof	O
properties	O
to	O
cre-	O
ate	O
a	O
more	O
general	O
kb	O
:	O
containsplace	O
property	O
:	O
kb	O
:	O
containscity	O
rdfs	O
:	O
subpropertyof	O
kb	O
:	O
containsplace	O
.	O
kb	O
:	O
containscountry	O
rdfs	O
:	O
subpropertyof	O
kb	O
:	O
containsplace	O
.	O
kb	O
:	O
containsstate	O
rdfs	O
:	O
subpropertyof	O
kb	O
:	O
containsplace	O
.	O
kb	O
:	O
containsplace	O
rdf	O
:	O
type	O
owl	O
:	O
transitiveproperty	O
.	O
kbplace	O
:	O
unitedstates	O
kb	O
:	O
containsstate	O
kbplace	O
:	O
illinois	O
.	O
kbplace	O
:	O
illinois	O
kb	O
:	O
containscity	O
kbplace	O
:	O
chicago	O
.	O
we	O
can	O
also	O
infer	O
that	O
:	O
kbplace	O
:	O
unitedstates	O
kb	O
:	O
containsplace	O
kbplace	O
:	O
chicago	O
.	O
70	O
4.7	O
knowledge	B
representation	I
and	O
rest	O
we	O
can	O
also	O
model	O
inverse	O
properties	O
in	O
owl	O
.	O
for	O
example	O
,	O
here	O
we	O
add	O
an	O
inverse	O
property	O
kb	O
:	O
containedin	O
,	O
adding	O
it	O
to	O
the	O
example	O
in	O
the	O
last	O
listing	O
:	O
kb	O
:	O
containedin	O
owl	O
:	O
inverseof	O
kb	O
:	O
containsplace	O
.	O
given	O
an	O
rdf	O
container	O
that	O
supported	O
extended	O
owl	O
dl	O
sparql	O
queries	O
,	O
we	O
can	O
now	O
execute	O
sparql	O
queries	O
matching	O
the	O
property	O
kb	O
:	O
containedin	O
and	O
“	O
match	O
”	O
triples	O
in	O
the	O
rdf	O
triple	O
store	O
that	O
have	O
never	O
been	O
asserted	O
.	O
owl	O
dl	O
is	O
a	O
very	O
large	O
subject	O
and	O
owl	O
is	O
an	O
even	O
larger	O
subject	O
.	O
from	O
reading	O
chapter	O
3	O
and	O
the	O
very	O
light	O
coverage	O
of	O
owl	O
in	O
this	O
section	O
,	O
you	O
should	O
understand	O
the	O
concept	O
of	O
class	O
membership	O
not	O
by	O
explicitly	O
stating	O
that	O
an	O
object	O
(	O
or	O
individ-	O
ual	O
)	O
is	O
a	O
member	O
of	O
a	O
class	O
,	O
but	O
rather	O
because	O
an	O
individual	O
has	O
properties	O
that	O
can	O
be	O
used	O
to	O
infer	O
class	O
membership	O
.	O
the	O
world	O
wide	O
web	O
consortium	O
has	O
deﬁned	O
three	O
versions	O
of	O
the	O
owl	O
language	O
that	O
are	O
in	O
increasing	O
order	O
of	O
complexity	O
:	O
owl	O
lite	O
,	O
owl	O
dl	O
,	O
and	O
owl	O
full	O
.	O
owl	O
dl	O
(	O
supports	O
description	O
logic	B
)	O
is	O
the	O
most	O
widely	O
used	O
(	O
and	O
recommended	O
)	O
version	O
of	O
owl	O
.	O
owl	O
full	O
is	O
not	O
computationally	O
decidable	O
since	O
it	O
supports	O
full	O
logic	B
,	O
multiple	O
class	O
inheritance	O
,	O
and	O
other	O
things	O
that	O
probably	O
make	O
it	O
computa-	O
tionally	O
intractable	O
for	O
all	O
but	O
small	O
problems	O
.	O
4.7	O
knowledge	B
representation	I
and	O
rest	O
a	O
theme	O
in	O
this	O
book	O
is	O
representing	O
knowledge	O
using	O
logic	B
,	O
expert	B
system	I
rules	O
,	O
relational	O
databases	O
(	O
supporting	O
at	O
the	O
physical	O
model	O
level	O
conceptual	O
models	O
like	O
entity	O
relation	O
)	O
,	O
and	O
in	O
ﬂexible	O
data	O
models	O
like	O
rdf	O
and	O
rdfs	O
(	O
supporting	O
higher	O
level	O
conceptual	O
models	O
in	O
owl	O
)	O
.	O
i	O
want	O
to	O
make	O
some	O
comments	O
about	O
the	O
rest	O
architectural	O
style	O
and	O
how	O
it	O
is	O
complementary	O
to	O
distributed	O
knowledge	B
representation	I
on	O
the	O
web	O
.	O
the	O
rest	O
model	O
implies	O
that	O
resource	O
providers	O
have	O
some	O
internal	O
model	O
for	O
the	O
storage	O
and	O
maintenance	O
of	O
data	O
but	O
use	O
a	O
possibly	O
different	O
representation	O
of	O
their	O
internal	O
data	O
model	O
to	O
transfer	O
their	O
internal	O
data	O
to	O
clients	O
.	O
i	O
would	O
argue	O
that	O
rdf	O
is	O
often	O
a	O
good	O
representation	O
for	O
resource	O
providers	O
to	O
use	O
for	O
transferring	O
data	O
in	O
their	O
internal	O
data	O
formats	O
to	O
rest	O
clients	O
because	O
of	O
its	O
ﬂexibility	O
in	O
describing	O
both	O
data	O
and	O
relations	O
between	O
data	O
.	O
rdf	O
is	O
inherently	O
a	O
rich	O
notation	O
because	O
rdfs	O
and	O
owl	O
are	O
themselves	O
expressed	O
as	O
rdf	O
data	O
.	O
i	O
expect	O
that	O
conventional	O
data	O
sources	O
like	O
relational	O
databases	O
and	O
conventional	O
data-rich	O
web	O
sites	O
will	O
beneﬁt	O
from	O
publishing	O
rest	O
style	O
interfaces	O
using	O
rdf	O
as	O
the	O
external	O
representation	O
of	O
data	O
.	O
we	O
are	O
already	O
seeing	O
interesting	O
and	O
useful	O
71	O
4	O
semantic	B
web	I
projects	O
that	O
utilize	O
a	O
data	B
source	I
to	O
publish	O
data	O
as	O
rdf	O
embedded	O
as	O
rdfa	O
(	O
an	O
xhtml	O
notation	O
for	O
embedding	O
rdf	O
in	O
xhtml	O
web	O
pages	O
)	O
and	O
i	O
see	O
this	O
as	O
a	O
growth	O
area	O
for	O
publishing	O
information	O
resources	O
that	O
are	O
useful	O
for	O
both	O
humans	O
and	O
software	O
agents	O
.	O
4.8	O
material	O
for	O
further	O
study	O
writing	O
semantic	B
web	I
applications	O
in	O
java	O
is	O
a	O
very	O
large	O
topic	O
,	O
worthy	O
of	O
an	O
entire	O
book	O
.	O
i	O
have	O
covered	O
in	O
this	O
chapter	O
what	O
for	O
my	O
work	O
have	O
been	O
the	O
most	O
useful	O
semantic	B
web	I
techniques	O
:	O
storing	O
and	O
querying	O
rdf	O
and	O
rdfs	O
for	O
a	O
speciﬁc	O
ap-	O
plication	O
.	O
we	O
will	O
see	O
in	O
chapter	O
10	O
some	O
useful	O
techniques	O
for	O
gathering	O
semantic	O
information	O
from	O
the	O
web	O
.	O
speciﬁcally	O
,	O
in	O
section	O
10.1	O
i	O
brieﬂy	O
talk	O
about	O
entering	O
semantic	O
data	O
from	O
the	O
open	O
calais	O
system	O
into	O
a	O
sesame	O
rdf	O
repository	O
.	O
i	O
have	O
already	O
mentioned	O
several	O
java	O
libraries	O
that	O
support	O
owl	O
descriptive	O
logic	B
reasoning	O
in	O
section	O
4.6.	O
when	O
the	O
expressive	O
power	O
of	O
rdf	O
and	O
rdfs	O
become	O
insufﬁcient	O
for	O
your	O
application	O
you	O
will	O
then	O
need	O
to	O
use	O
a	O
library	O
supporting	O
the	O
owl	O
language	O
and	O
owl	O
description	O
logic	B
reasoning	O
.	O
the	O
combination	O
of	O
rdf	O
and	O
rdfs	O
is	O
sufﬁcient	O
for	O
many	O
applications	O
and	O
using	O
this	O
simpler	O
technology	O
is	O
the	O
right	O
way	O
to	O
get	O
started	O
developing	O
semantic	B
web	I
applications	O
.	O
because	O
rdf	O
and	O
rdfs	O
(	O
with	O
very	O
few	O
owl	O
features	O
,	O
commonly	O
referred	O
to	O
as	O
rdfs-plus	O
)	O
are	O
easier	O
to	O
implement	O
and	O
have	O
a	O
smaller	O
learning	O
curve	O
,	O
i	O
believe	O
that	O
the	O
adoption	O
of	O
owl	O
dl	O
will	O
be	O
slow	O
.	O
i	O
concentrated	O
on	O
using	O
sesame	O
in	O
an	O
embedded	O
mode	O
in	O
java	O
applications	O
in	O
this	O
chapter	O
but	O
another	O
common	O
use	O
is	O
as	O
an	O
rdf	O
repository	O
web	O
service	O
.	O
in	O
either	O
case	O
,	O
the	O
basic	O
ideas	O
of	O
converting	O
data	O
to	O
rdf	O
,	O
storing	O
rdf	O
,	O
and	O
allowing	O
sparql	O
queries	O
are	O
the	O
same	O
.	O
72	O
5	O
expert	O
systems	O
we	O
will	O
be	O
using	O
the	O
drools	O
java	O
expert	B
system	I
language	O
and	O
libraries	O
in	O
this	O
chap-	O
ter	O
.	O
earlier	O
editions	O
of	O
this	O
book	O
used	O
the	O
jess	O
expert	B
system	I
tool	O
but	O
due	O
to	O
the	O
new	O
more	O
restrictive	O
jess	O
licensing	O
terms	O
i	O
decided	O
to	O
switch	O
to	O
drools	O
because	O
it	O
is	O
released	O
under	O
the	O
apache	O
2.0	O
license	O
.	O
the	O
primary	O
web	O
site	O
for	O
drools	O
is	O
www.jboss.org/drools	O
where	O
you	O
can	O
download	O
the	O
source	O
code	O
and	O
documentation	O
.	O
both	O
jess	O
and	O
drools	O
are	O
forward	B
chaining	I
inference	O
engines	O
that	O
use	O
the	O
rete	O
algo-	O
rithm	O
and	O
are	O
derived	O
from	O
charles	O
forgy	O
’	O
s	O
ops5	O
language	O
.	O
one	O
thing	O
to	O
keep	O
in	O
mind	O
whenever	O
you	O
are	O
building	O
a	O
system	O
based	O
on	O
the	O
rete	O
algorithm	O
is	O
that	O
rete	O
scales	O
very	O
well	O
to	O
large	O
numbers	O
of	O
rules	O
but	O
scales	O
at	O
o	O
(	O
n	O
2	O
)	O
where	O
n	O
is	O
the	O
num-	O
ber	O
of	O
facts	O
in	O
the	O
system	O
.	O
i	O
have	O
a	O
long	O
history	O
with	O
ops5	O
,	O
porting	O
it	O
to	O
xerox	O
lisp	O
machines	O
(	O
1982	O
)	O
and	O
the	O
apple	O
macintosh	O
(	O
1984	O
)	O
as	O
well	O
as	O
building	O
custom	O
ver-	O
sions	O
supporting	O
multiple	O
“	O
worlds	O
”	O
of	O
data	O
and	O
rule	O
spaces	O
.	O
one	O
thing	O
that	O
i	O
would	O
like	O
to	O
make	O
clear	O
:	O
drools	O
is	O
the	O
only	O
technology	O
that	O
i	O
am	O
covering	O
in	O
this	O
book	O
that	O
i	O
have	O
not	O
used	O
professionally	O
.	O
that	O
said	O
,	O
i	O
spent	O
some	O
effort	O
getting	O
up	O
to	O
speed	O
on	O
drools	O
as	O
a	O
replacement	O
for	O
jess	O
on	O
future	O
projects	O
.	O
while	O
there	O
is	O
some	O
interest	O
in	O
using	O
packages	O
like	O
drools	O
for	O
“	O
business	O
rules	O
”	O
to	O
capture	O
business	B
process	I
knowledge	I
,	O
often	O
as	O
embedded	O
components	O
in	O
large	O
sys-	O
tems	O
,	O
expert	O
systems	O
have	O
historically	O
been	O
built	O
to	O
approach	O
human	O
level	O
expertise	O
for	O
very	O
speciﬁc	O
tasks	O
like	O
conﬁguring	O
computer	O
systems	O
and	O
medical	O
diagnosis	O
.	O
the	O
examples	O
in	O
this	O
chapter	O
are	O
very	O
simple	O
and	O
are	O
intended	O
to	O
show	O
you	O
how	O
to	O
embed	O
drools	O
in	O
your	O
java	O
applications	O
and	O
to	O
show	O
you	O
a	O
few	O
tricks	O
for	O
using	O
forward	B
chaining	I
rule-based	O
systems	O
.	O
drools	O
is	O
a	O
domain	O
speciﬁc	O
language	O
(	O
dsl	O
)	O
that	O
attempts	O
to	O
provide	O
a	O
syntax	O
that	O
is	O
easier	O
to	O
use	O
than	O
a	O
general	O
purpose	O
pro-	O
gramming	O
language	O
.	O
i	O
do	O
not	O
usually	O
recommend	O
java	O
ides	O
(	O
a	O
personal	O
choice	O
!	O
)	O
but	O
if	O
you	O
already	O
use	O
eclipse	O
then	O
i	O
suggest	O
that	O
you	O
use	O
the	O
drools	O
plugins	O
for	O
eclipse	O
(	O
the	O
“	O
eclipse	O
drools	O
workbench	O
”	O
)	O
which	O
help	O
setting	O
up	O
projects	O
and	O
understand	O
the	O
drools	O
rule	O
language	O
syntax	O
.	O
the	O
eclipse	O
drools	O
workbench	O
can	O
automatically	O
generate	O
a	O
small	O
demo	O
which	O
i	O
will	O
go	O
over	O
in	O
some	O
detail	O
in	O
the	O
next	O
two	O
sections	O
.	O
i	O
then	O
design	O
and	O
implement	O
two	O
simple	O
example	O
rule	O
systems	O
for	O
solving	O
block	O
world	O
type	O
problems	O
and	O
for	O
answering	O
help	O
desk	O
questions	O
.	O
the	O
material	O
in	O
this	O
chapter	O
exclusively	O
covers	O
forward	B
chaining	I
production	O
systems	O
73	O
5	O
expert	O
systems	O
figure	O
5.1	O
:	O
using	O
drools	O
for	O
developing	O
rule-based	O
systems	O
and	O
then	O
deploying	O
them	O
.	O
(	O
also	O
called	O
“	O
expert	O
systems	O
”	O
)	O
.	O
forward	B
chaining	I
systems	O
start	O
with	O
a	O
set	O
of	O
known	O
facts	O
,	O
and	O
apply	O
rules	O
to	O
work	O
towards	O
solving	O
one	O
or	O
more	O
goals	O
.	O
an	O
alternative	O
approach	O
,	O
often	O
used	O
in	O
prolog	O
programs	O
,	O
is	O
to	O
use	O
backward	B
chaining	I
.	O
backward	B
chaining	I
systems	O
start	O
with	O
a	O
ﬁnal	O
goal	O
and	O
attempt	O
to	O
work	O
backwards	O
towards	O
currently	O
known	O
facts	O
.	O
the	O
phrase	O
,	O
expert	O
systems	O
,	O
was	O
almost	O
synonymous	O
with	O
artiﬁcial	O
intelligence	O
in	O
the	O
early	O
and	O
mid	O
1980s	O
.	O
the	O
application	O
of	O
expert	B
system	I
techniques	O
to	O
real	O
prob-	O
lems	O
,	O
like	O
conﬁguring	O
dec	O
vax	O
minicomputers	O
,	O
medical	O
diagnosis	O
,	O
and	O
evaluating	O
seismic	O
data	O
for	O
planning	O
oil	O
exploration	O
had	O
everyone	O
very	O
excited	O
.	O
unfortunately	O
,	O
expert	O
systems	O
were	O
over	O
hyped	O
and	O
there	O
was	O
an	O
eventual	O
backlash	O
that	O
affected	O
the	O
entire	O
ﬁeld	O
of	O
ai	O
.	O
still	O
,	O
the	O
knowledge	O
of	O
how	O
to	O
write	O
expert	O
systems	O
is	O
a	O
useful	O
skill	O
.	O
this	O
chapter	O
contains	O
a	O
tutorial	O
for	O
using	O
the	O
drools	O
system	O
and	O
also	O
shows	O
how	O
to	O
use	O
machine	B
learning	I
to	O
help	O
generate	O
rules	O
when	O
training	O
data	O
is	O
available	O
.	O
as	O
seen	O
in	O
figure	O
5.1	O
,	O
drools	O
development	O
is	O
interactive	O
:	O
you	O
will	O
work	O
in	O
an	O
en-	O
vironment	O
where	O
you	O
can	O
quickly	O
add	O
and	O
change	O
rules	O
and	O
re-run	O
test	O
cases	O
.	O
this	O
interactive	O
style	O
of	O
development	O
is	O
similar	O
to	O
using	O
powerloom	O
as	O
we	O
saw	O
in	O
chapter	O
3	O
.	O
74	O
droolsinferenceengineworking	O
memory	O
(	O
facts	O
)	O
rulesdeveloperinteractivedevelopment	O
(	O
eclipse	O
droolsworkbench	O
)	O
application	O
programsdroolsapi	O
5.1	O
production	O
systems	O
5.1	O
production	O
systems	O
i	O
like	O
to	O
refer	O
to	O
expert	O
systems	O
by	O
a	O
more	O
precise	O
name	O
:	O
production	O
systems	O
.	O
pro-	O
ductions	O
are	O
rules	O
for	O
transforming	O
state	O
.	O
for	O
example	O
,	O
given	O
the	O
three	O
production	B
rules	I
:	O
a	O
=	O
>	O
b	O
b	O
=	O
>	O
c	O
c	O
=	O
>	O
d	O
then	O
if	O
a	O
production	O
system	O
is	O
initialized	O
with	O
the	O
state	O
a	O
,	O
the	O
state	O
d	O
can	O
be	O
derived	O
by	O
applying	O
these	O
three	O
production	B
rules	I
in	O
order	O
.	O
the	O
form	O
of	O
these	O
production	B
rules	I
is	O
:	O
<	O
left-hand	O
side	O
>	O
=	O
>	O
<	O
right-hand	O
side	O
>	O
or	O
:	O
lhs	O
=	O
>	O
rhs	O
like	O
the	O
powerloom	O
reasoning	B
system	O
used	O
in	O
chapter	O
3	O
,	O
much	O
of	O
the	O
power	O
of	O
a	O
rule-based	O
system	O
comes	O
from	O
the	O
ability	O
to	O
use	O
variables	O
so	O
that	O
the	O
left-hand	O
side	O
(	O
lhs	O
)	O
patterns	O
can	O
match	O
a	O
variety	O
of	O
known	O
facts	O
(	O
called	O
working	O
memory	O
in	O
drools	O
)	O
.	O
the	O
values	O
of	O
these	O
variables	O
set	O
in	O
the	O
lhs	O
matching	O
process	O
are	O
substi-	O
tuted	O
for	O
the	O
variables	O
on	O
the	O
right-hand	O
side	O
(	O
rhs	O
)	O
patterns	O
.	O
production	O
rule	O
systems	O
are	O
much	O
less	O
expressive	O
than	O
description	O
logic	B
style	O
rea-	O
soners	O
like	O
powerloom	O
.	O
the	O
beneﬁts	O
of	O
production	O
rule	O
systems	O
is	O
that	O
they	O
should	O
have	O
better	O
runtime	O
efﬁciency	O
and	O
are	O
easier	O
to	O
use	O
–	O
a	O
smaller	O
learning	O
curve	O
.	O
good	O
advice	O
is	O
to	O
use	O
production	O
systems	O
when	O
they	O
are	O
adequate	O
,	O
and	O
if	O
not	O
,	O
use	O
a	O
more	O
expressive	O
knowledge	B
representation	I
and	O
reasoning	B
system	O
like	O
powerloom	O
.	O
5.2	O
the	O
drools	O
rules	O
language	O
the	O
basic	O
syntax	O
(	O
leaving	O
out	O
optional	O
components	O
)	O
of	O
a	O
drools	O
rule	O
is	O
:	O
rule	O
``	O
a	O
name	O
for	O
the	O
rule	O
''	O
when	O
lhs	O
75	O
5	O
expert	O
systems	O
then	O
rhs	O
end	O
what	O
might	O
sample	O
lhs	O
and	O
rhs	O
statements	O
look	O
like	O
?	O
drools	O
rules	O
reference	O
pojos	O
(	O
“	O
plain	O
old	O
java	O
objects	O
”	O
)	O
in	O
both	O
the	O
lhs	O
matching	O
expressions	O
and	O
rhs	O
actions	O
.	O
if	O
you	O
use	O
the	O
eclipse	O
drools	O
workbench	O
and	O
create	O
a	O
new	O
demo	O
project	O
,	O
the	O
workbench	O
will	O
automatically	O
create	O
for	O
you	O
:	O
•	O
sample.drl	O
–	O
a	O
sample	O
rule	O
ﬁle	O
.	O
•	O
com.sample.droolstest.java	O
–	O
deﬁnes	O
:	O
a	O
simple	O
java	O
pojo	O
class	O
m	O
essage	O
that	O
is	O
used	O
in	O
the	O
sample.drl	O
rule	O
ﬁle	O
,	O
a	O
utility	O
method	O
for	O
loading	O
rules	O
,	O
and	O
a	O
main	O
method	O
that	O
loads	O
rules	O
and	O
creates	O
an	O
instance	O
of	O
the	O
m	O
essage	O
class	O
that	O
“	O
ﬁres	O
”	O
the	O
ﬁrst	O
rule	O
in	O
sample.drl	O
.	O
even	O
if	O
you	O
decide	O
not	O
to	O
use	O
the	O
eclipse	O
drools	O
workbench	O
,	O
i	O
include	O
these	O
two	O
auto-generated	O
ﬁles	O
in	O
the	O
zip	O
ﬁle	O
for	O
this	O
book	O
and	O
we	O
will	O
use	O
these	O
ﬁles	O
to	O
intro-	O
duce	O
both	O
the	O
syntax	O
of	O
rues	O
and	O
using	O
rules	O
and	O
drools	O
in	O
java	O
applications	O
in	O
the	O
next	O
section	O
.	O
here	O
is	O
the	O
sample.drl	O
ﬁle	O
:	O
package	O
com.sample	O
import	O
com.sample.droolstest.message	O
;	O
rule	O
``	O
hello	O
world	O
''	O
when	O
m	O
:	O
message	O
(	O
status	O
==	O
message.hello	O
,	O
message	O
:	O
message	O
)	O
then	O
system.out.println	O
(	O
message	O
)	O
;	O
m.setmessage	O
(	O
``	O
goodbye	O
cruel	O
world	O
''	O
)	O
;	O
m.setstatus	O
(	O
message.goodbye	O
)	O
;	O
update	O
(	O
m	O
)	O
;	O
end	O
rule	O
``	O
goodbye	O
''	O
no-loop	O
true	O
when	O
m	O
:	O
message	O
(	O
status	O
==	O
message.goodbye	O
,	O
message	O
:	O
message	O
)	O
then	O
system.out.println	O
(	O
message	O
)	O
;	O
76	O
5.3	O
using	O
drools	O
in	O
java	O
applications	O
m.setmessage	O
(	O
message	O
)	O
;	O
end	O
this	O
example	O
rule	O
ﬁle	O
deﬁnes	O
which	O
java	O
package	O
it	O
has	O
visibility	O
in	O
;	O
we	O
will	O
see	O
in	O
the	O
next	O
section	O
that	O
the	O
java	O
code	O
that	O
deﬁnes	O
the	O
pojo	O
m	O
essage	O
class	O
and	O
code	O
that	O
uses	O
these	O
rules	O
will	O
be	O
in	O
the	O
same	O
java	O
package	O
.	O
this	O
class	O
has	O
private	O
data	O
(	O
with	O
public	O
accessor	O
methods	O
using	O
java	O
bean	O
protocol	O
)	O
for	O
attributes	O
“	O
status	O
”	O
and	O
“	O
message.	O
”	O
another	O
thing	O
that	O
might	O
surprise	O
you	O
in	O
this	O
example	O
is	O
the	O
direct	O
calls	O
to	O
the	O
static	O
java	O
method	O
system.out.println	O
:	O
this	O
is	O
a	O
hint	O
that	O
drools	O
will	O
end	O
up	O
compil-	O
ing	O
these	O
rules	O
into	O
java	O
byte	O
code	O
.	O
when	O
drools	O
sees	O
a	O
reference	O
to	O
the	O
class	O
m	O
essage	O
,	O
since	O
there	O
are	O
no	O
java	O
import	O
statements	O
in	O
this	O
example	O
rule	O
ﬁle	O
,	O
the	O
class	O
m	O
essage	O
must	O
be	O
in	O
the	O
package	O
com.sample	O
.	O
on	O
the	O
lhs	O
of	O
both	O
rules	O
,	O
any	O
instance	O
of	O
class	O
m	O
essage	O
that	O
matches	O
and	O
thus	O
allows	O
the	O
rule	O
to	O
“	O
ﬁre	O
”	O
sets	O
a	O
reference	O
to	O
the	O
matched	O
object	O
to	O
the	O
local	O
variable	O
m	O
that	O
can	O
then	O
be	O
used	O
on	O
the	O
rhs	O
of	O
the	O
rule	O
.	O
in	O
the	O
ﬁrst	O
rule	O
,	O
the	O
attribute	O
message	O
is	O
also	O
stored	O
in	O
a	O
local	O
variable	O
(	O
perhaps	O
confusingly	O
)	O
also	O
called	O
message	O
.	O
note	O
that	O
the	O
public	O
attribute	O
accessor	O
methods	O
like	O
setm	O
essage	O
are	O
used	O
to	O
change	O
the	O
state	O
of	O
a	O
matched	O
m	O
essage	O
object	O
.	O
we	O
will	O
see	O
later	O
that	O
the	O
ﬁrst	O
step	O
in	O
writing	O
a	O
drools	O
based	O
expert	B
system	I
is	O
mod-	O
eling	O
(	O
as	O
java	O
classes	O
)	O
the	O
data	O
required	O
to	O
represent	O
problem	O
states	O
.	O
after	O
you	O
have	O
deﬁned	O
these	O
pojo	O
classes	O
you	O
can	O
then	O
proceed	O
with	O
deﬁning	O
some	O
initial	O
test	O
cases	O
and	O
start	O
writing	O
rules	O
to	O
handle	O
the	O
test	O
cases	O
.	O
drools	O
development	O
of	O
non-	O
trivial	O
projects	O
will	O
involve	O
an	O
iterative	O
process	O
of	O
adding	O
new	O
test	O
cases	O
,	O
writing	O
new	O
rules	O
or	O
generalizing	O
previously	O
written	O
rules	O
,	O
and	O
making	O
sure	O
that	O
both	O
the	O
original	O
and	O
newer	O
test	O
cases	O
work	O
.	O
there	O
is	O
a	O
complete	O
reference	O
description	O
of	O
the	O
drools	O
rule	O
syntax	O
on	O
the	O
drools	O
documentation	O
wiki	O
.	O
the	O
material	O
in	O
this	O
chapter	O
is	O
tutorial	O
in	O
nature	O
:	O
new	O
features	O
of	O
the	O
rule	O
language	O
and	O
how	O
to	O
use	O
drools	O
will	O
be	O
introduced	O
as	O
needed	O
for	O
the	O
examples	O
.	O
5.3	O
using	O
drools	O
in	O
java	O
applications	O
we	O
looked	O
at	O
the	O
sample	O
rules	O
ﬁle	O
sample.drl	O
in	O
the	O
last	O
section	O
which	O
is	O
generated	O
automatically	O
when	O
creating	O
a	O
demo	O
project	O
with	O
the	O
eclipse	O
drools	O
workbench	O
.	O
we	O
will	O
use	O
the	O
other	O
generated	O
ﬁle	O
droolstest.java	O
as	O
an	O
illustrative	O
example	O
in	O
this	O
section	O
.	O
the	O
ﬁle	O
droolstest.java	O
is	O
almost	O
100	O
lines	O
long	O
so	O
i	O
will	O
list	O
it	O
in	O
small	O
fragments	O
followed	O
by	O
an	O
explanation	O
of	O
each	O
code	O
fragment	O
.	O
the	O
ﬁrst	O
thing	O
to	O
note	O
is	O
that	O
the	O
java	O
client	O
code	O
is	O
in	O
the	O
same	O
package	O
as	O
the	O
rules	O
ﬁle	O
:	O
77	O
5	O
expert	O
systems	O
package	O
com.sample	O
;	O
import	O
java.io.inputstreamreader	O
;	O
import	O
java.io.reader	O
;	O
import	O
org.drools.rulebase	O
;	O
import	O
org.drools.rulebasefactory	O
;	O
import	O
org.drools.workingmemory	O
;	O
import	O
org.drools.compiler.packagebuilder	O
;	O
import	O
org.drools.rule.package	O
;	O
this	O
main	O
function	O
is	O
an	O
example	O
showing	O
how	O
to	O
use	O
a	O
rule	O
package	O
deﬁned	O
in	O
a	O
rule	O
source	O
ﬁle	O
.	O
we	O
will	O
see	O
the	O
deﬁnition	O
of	O
the	O
utility	O
method	O
readrule	O
that	O
opens	O
a	O
rule	O
ﬁle	O
and	O
returns	O
an	O
instance	O
of	O
class	O
rulebase	O
shortly	O
.	O
after	O
creating	O
an	O
instance	O
of	O
rulebase	O
we	O
create	O
an	O
instance	O
of	O
the	O
m	O
essage	O
class	O
and	O
add	O
it	O
to	O
open	O
memory	O
:	O
public	O
class	O
droolstest	O
{	O
public	O
static	O
final	O
void	O
main	O
(	O
string	O
[	O
]	O
args	O
)	O
{	O
try	O
{	O
rulebase	O
rulebase	O
=	O
readrule	O
(	O
)	O
;	O
workingmemory	O
workingmemory	O
=	O
rulebase.newstatefulsession	O
(	O
)	O
;	O
message	O
message	O
=	O
new	O
message	O
(	O
)	O
;	O
message.setmessage	O
(	O
``	O
hello	O
world	O
''	O
)	O
;	O
message.setstatus	O
(	O
message.hello	O
)	O
;	O
workingmemory.insert	O
(	O
message	O
)	O
;	O
workingmemory.fireallrules	O
(	O
)	O
;	O
}	O
catch	O
(	O
throwable	O
t	O
)	O
{	O
t.printstacktrace	O
(	O
)	O
;	O
}	O
}	O
the	O
main	O
method	O
creates	O
a	O
new	O
rule	O
base	O
and	O
working	O
memory	O
.	O
working	O
memory	O
is	O
responsible	O
for	O
maintaining	O
the	O
“	O
facts	O
”	O
in	O
the	O
system	O
–	O
in	O
this	O
case	O
facts	O
are	O
plain	O
old	O
java	O
objects	O
(	O
pojos	O
)	O
that	O
are	O
maintained	O
in	O
a	O
collection	O
.	O
an	O
instance	O
of	O
class	O
m	O
essage	O
is	O
created	O
and	O
its	O
status	O
is	O
set	O
to	O
the	O
constant	O
value	O
m	O
essage.hello	O
.	O
we	O
saw	O
in	O
the	O
last	O
section	O
how	O
the	O
ﬁrst	O
example	O
rule	O
has	O
a	O
condition	O
that	O
allows	O
the	O
rule	O
to	O
“	O
ﬁre	O
”	O
if	O
there	O
is	O
any	O
instance	O
of	O
class	O
m	O
essage	O
that	O
has	O
its	O
status	O
attribute	O
set	O
to	O
this	O
value	O
.	O
the	O
method	O
f	O
ireallrules	O
will	O
keep	O
identifying	O
rules	O
that	O
are	O
eligible	O
to	O
ﬁre	O
,	O
choos-	O
ing	O
a	O
rule	O
from	O
this	O
active	O
set	O
using	O
algorithms	O
we	O
will	O
discuss	O
later	O
,	O
and	O
then	O
repeat-	O
78	O
5.3	O
using	O
drools	O
in	O
java	O
applications	O
ing	O
this	O
process	O
until	O
no	O
more	O
rules	O
are	O
eligible	O
to	O
ﬁre	O
.	O
there	O
are	O
other	O
f	O
ireallrules	O
methods	O
that	O
have	O
arguments	O
for	O
a	O
maximum	O
number	O
of	O
rules	O
to	O
ﬁre	O
and	O
a	O
ﬁlter	O
to	O
allow	O
only	O
some	O
eligible	O
rules	O
to	O
execute	O
.	O
/**	O
*	O
please	O
note	O
that	O
this	O
is	O
the	O
``	O
low	O
level	O
''	O
rule	O
*	O
assembly	O
api	O
.	O
*/	O
private	O
static	O
rulebase	O
readrule	O
(	O
)	O
throws	O
exception	O
{	O
//read	O
in	O
the	O
source	O
reader	O
source	O
=	O
new	O
inputstreamreader	O
(	O
droolstest.class	O
.	O
getresourceasstream	O
(	O
``	O
/sample.drl	O
''	O
)	O
)	O
;	O
//	O
optionally	O
read	O
in	O
the	O
dsl	O
if	O
you	O
are	O
using	O
one	O
:	O
//	O
reader	O
dsl	O
=	O
//	O
//	O
//	O
getresourceasstream	O
(	O
``	O
/mylang.dsl	O
''	O
)	O
)	O
;	O
new	O
inputstreamreader	O
(	O
droolstest.class	O
.	O
the	O
method	O
readrule	O
is	O
a	O
utility	O
for	O
reading	O
and	O
compiling	O
a	O
rule	O
ﬁle	O
that	O
was	O
generated	O
automatically	O
by	O
the	O
eclipse	O
drools	O
workbench	O
;	O
in	O
general	O
your	O
projects	O
will	O
have	O
one	O
or	O
more	O
rules	O
ﬁles	O
that	O
you	O
will	O
load	O
as	O
in	O
this	O
example	O
.	O
in	O
method	O
readrule	O
we	O
opened	O
an	O
input	O
stream	O
reader	O
on	O
the	O
source	O
code	O
for	O
the	O
example	O
drools	O
rule	O
ﬁle	O
sample.drl	O
.	O
drools	O
has	O
the	O
ability	O
to	O
modify	O
the	O
rule	O
syntax	O
to	O
create	O
domain	O
speciﬁc	O
languages	O
(	O
dsls	O
)	O
that	O
match	O
your	O
application	O
or	O
business	O
domain	O
.	O
this	O
can	O
be	O
very	O
useful	O
if	O
you	O
want	O
domain	O
experts	O
to	O
create	O
rules	O
since	O
they	O
can	O
“	O
use	O
their	O
own	O
language.	O
”	O
we	O
will	O
not	O
cover	O
custom	O
dsls	O
in	O
this	O
chapter	O
but	O
the	O
drools	O
documentation	O
covers	O
this	O
in	O
detail	O
.	O
here	O
is	O
the	O
rest	O
of	O
the	O
deﬁnition	O
of	O
method	O
readrule	O
:	O
//	O
use	O
package	O
builder	O
to	O
build	O
up	O
a	O
rule	O
package	O
:	O
packagebuilder	O
builder	O
=	O
new	O
packagebuilder	O
(	O
)	O
;	O
//	O
this	O
will	O
parse	O
and	O
compile	O
in	O
one	O
step	O
:	O
builder.addpackagefromdrl	O
(	O
source	O
)	O
;	O
//	O
use	O
the	O
following	O
instead	O
of	O
above	O
if	O
you	O
are	O
//	O
using	O
a	O
custom	O
dsl	O
:	O
//builder.addpackagefromdrl	O
(	O
source	O
,	O
dsl	O
)	O
;	O
79	O
5	O
expert	O
systems	O
//	O
get	O
the	O
compiled	O
package	O
(	O
which	O
is	O
serializable	O
)	O
package	O
pkg	O
=	O
builder.getpackage	O
(	O
)	O
;	O
//	O
add	O
the	O
package	O
to	O
a	O
rulebase	O
(	O
deploy	O
the	O
//	O
rule	O
package	O
)	O
.	O
rulebase	O
rulebase	O
=	O
rulebasefactory.newrulebase	O
(	O
)	O
;	O
rulebase.addpackage	O
(	O
pkg	O
)	O
;	O
return	O
rulebase	O
;	O
}	O
the	O
readrule	O
utility	O
method	O
can	O
be	O
copied	O
to	O
new	O
rule	O
projects	O
that	O
are	O
not	O
created	O
using	O
the	O
eclipse	O
drools	O
workbench	O
and	O
modiﬁed	O
as	O
appropriate	O
to	O
get	O
you	O
started	O
with	O
the	O
java	O
“	O
boilerplate	O
”	O
required	O
by	O
drools	O
.	O
this	O
implementation	O
uses	O
drools	O
defaults	O
,	O
the	O
most	O
important	O
being	O
the	O
“	O
conﬂict	O
resolution	O
strategy	O
”	O
that	O
defaults	O
to	O
ﬁrst	O
checking	O
the	O
most	O
recently	O
modiﬁed	O
working	O
memory	O
pojo	O
objects	O
to	O
see	O
which	O
rules	O
can	O
ﬁre	O
.	O
this	O
produces	O
a	O
depth	O
ﬁrst	O
search	O
behavior	O
.	O
we	O
will	O
modify	O
the	O
readrule	O
utility	O
method	O
later	O
in	O
section	O
5.4	O
when	O
we	O
will	O
need	O
to	O
change	O
this	O
default	O
drools	O
reasoning	B
behavior	O
from	O
depth	O
ﬁrst	O
to	O
breadth	O
ﬁrst	O
search	O
.	O
we	O
will	O
need	O
a	O
plain	O
old	O
java	O
object	O
(	O
pojo	O
)	O
class	O
to	O
represent	O
messages	O
in	O
the	O
example	O
rule	O
set	O
.	O
this	O
demo	O
class	O
was	O
generated	O
by	O
the	O
eclipse	O
drools	O
workbench	O
:	O
public	O
static	O
class	O
message	O
{	O
public	O
static	O
final	O
int	O
hello	O
=	O
0	O
;	O
public	O
static	O
final	O
int	O
goodbye	O
=	O
1	O
;	O
private	O
string	O
message	O
;	O
private	O
int	O
status	O
;	O
public	O
string	O
getmessage	O
(	O
)	O
{	O
return	O
this.message	O
;	O
}	O
public	O
void	O
setmessage	O
(	O
string	O
message	O
)	O
{	O
this.message	O
=	O
message	O
;	O
}	O
public	O
int	O
getstatus	O
(	O
)	O
{	O
return	O
this.status	O
;	O
}	O
public	O
void	O
setstatus	O
(	O
int	O
status	O
)	O
{	O
this.status	O
=	O
status	O
;	O
80	O
5.4	O
example	O
drools	O
expert	B
system	I
:	O
blocks	O
world	O
}	O
}	O
}	O
you	O
might	O
want	O
to	O
review	O
the	O
example	O
rules	O
using	O
this	O
pojo	O
message	O
class	O
in	O
sec-	O
tion	O
5.2.	O
here	O
is	O
the	O
sample	O
output	O
from	O
running	O
this	O
example	O
code	O
and	O
rule	O
set	O
:	O
hello	O
world	O
goodbye	O
cruel	O
world	O
a	O
simple	O
example	O
,	O
but	O
it	O
serves	O
to	O
introduce	O
you	O
the	O
drools	O
rule	O
syntax	O
and	O
required	O
java	O
code	O
.	O
this	O
is	O
also	O
a	O
good	O
example	O
to	O
understand	O
because	O
when	O
you	O
use	O
the	O
eclipse	O
drools	O
workbench	O
to	O
create	O
a	O
new	O
drools	O
rule	O
project	O
,	O
it	O
generates	O
this	O
example	O
automatically	O
as	O
a	O
template	O
for	O
you	O
to	O
modify	O
and	O
re-use	O
.	O
in	O
the	O
next	O
two	O
sections	O
i	O
will	O
develop	O
two	O
more	O
complicated	O
examples	O
:	O
solving	O
blocks	O
world	O
problems	O
and	O
supporting	O
a	O
help	O
desk	O
system	O
.	O
5.4	O
example	O
drools	O
expert	B
system	I
:	O
blocks	O
world	O
the	O
example	O
in	O
this	O
section	O
solved	O
simple	O
“	O
blocks	O
world	O
”	O
problems	O
;	O
see	O
figures	O
5.2	O
through	O
5.5	O
for	O
a	O
very	O
simple	O
example	O
problem	O
.	O
i	O
like	O
this	O
example	O
because	O
it	O
introduces	O
the	O
topic	O
of	O
“	O
conﬂict	O
resolution	O
”	O
and	O
(	O
un-	O
fortunately	O
)	O
shows	O
you	O
that	O
even	O
solving	O
simple	O
problems	O
with	O
rule-based	O
systems	O
can	O
be	O
difﬁcult	O
.	O
because	O
of	O
the	O
difﬁculty	O
of	O
developing	O
and	O
debugging	O
rule-based	O
systems	O
,	O
they	O
are	O
best	O
for	O
applications	O
that	O
have	O
both	O
high	O
business	O
value	O
and	O
offer	O
an	O
opportunity	O
to	O
encode	O
business	O
or	O
application	O
knowledge	O
of	O
experts	O
in	O
rules	O
.	O
so	O
,	O
the	O
example	O
in	O
the	O
next	O
section	O
is	O
a	O
more	O
real-life	O
example	O
of	O
good	O
application	O
of	O
expert	O
systems	O
,	O
but	O
you	O
will	O
learn	O
valuable	O
techniques	O
in	O
this	O
example	O
.	O
in	O
the	O
inter-	O
est	O
of	O
intellectual	O
honesty	O
,	O
i	O
should	O
say	O
that	O
general	O
blocks	O
world	O
problems	O
like	O
the	O
“	O
towers	O
of	O
hanoi	O
”	O
problem	O
and	O
block	O
world	O
problems	O
as	O
the	O
one	O
in	O
this	O
section	O
are	O
usually	O
easily	O
solved	O
using	O
breadth-ﬁrst	O
search	B
techniques	O
.	O
the	O
java	O
source	O
code	O
and	O
drools	O
rule	O
ﬁles	O
for	O
this	O
example	O
are	O
in	O
the	O
ﬁles	O
block-	O
world.drl	O
and	O
droolsbockworld.java	O
.	O
81	O
5	O
expert	O
systems	O
figure	O
5.2	O
:	O
initial	O
state	O
of	O
a	O
blocks	O
world	O
problem	O
with	O
three	O
blocks	O
stacked	O
on	O
top	O
of	O
each	O
other	O
.	O
the	O
goal	O
is	O
to	O
move	O
the	O
blocks	O
so	O
that	O
block	O
c	O
is	O
on	O
top	O
of	O
block	O
a.	O
figure	O
5.3	O
:	O
block	O
c	O
has	O
been	O
removed	O
from	O
block	O
b	O
and	O
placed	O
on	O
the	O
table	O
.	O
5.4.1	O
pojo	O
object	O
models	O
for	O
blocks	O
world	O
example	O
we	O
will	O
use	O
the	O
following	O
three	O
pojo	O
classes	O
(	O
deﬁned	O
in	O
the	O
ﬁle	O
droolsbock-	O
world.java	O
as	O
static	O
inner	O
classes	O
)	O
.	O
the	O
ﬁrst	O
pojo	O
class	O
block	O
represents	O
the	O
state	O
of	O
one	O
block	O
:	O
public	O
static	O
class	O
block	O
{	O
protected	O
string	O
name	O
;	O
protected	O
string	O
ontopof	O
;	O
protected	O
string	O
supporting	O
;	O
public	O
block	O
(	O
string	O
name	O
,	O
string	O
ontopof	O
,	O
string	O
supporting	O
)	O
{	O
this.name	O
=	O
name	O
;	O
this.ontopof	O
=	O
ontopof	O
;	O
this.supporting	O
=	O
supporting	O
;	O
}	O
public	O
string	O
tostring	O
(	O
)	O
{	O
return	O
``	O
[	O
block_	O
''	O
+	O
this.hashcode	O
(	O
)	O
+	O
``	O
``	O
+	O
name	O
+	O
``	O
on	O
top	O
of	O
:	O
``	O
+	O
ontopof	O
+	O
''	O
supporting	O
:	O
``	O
+	O
supporting+	O
''	O
]	O
''	O
;	O
}	O
public	O
string	O
getname	O
(	O
)	O
{	O
82	O
abcabc	O
5.4	O
example	O
drools	O
expert	B
system	I
:	O
blocks	O
world	O
return	O
this.name	O
;	O
}	O
public	O
void	O
setname	O
(	O
string	O
name	O
)	O
{	O
this.name	O
=	O
name	O
;	O
}	O
public	O
string	O
getontopof	O
(	O
)	O
{	O
return	O
this.ontopof	O
;	O
}	O
public	O
void	O
setontopof	O
(	O
string	O
ontopof	O
)	O
{	O
this.ontopof	O
=	O
ontopof	O
;	O
}	O
public	O
string	O
getsupporting	O
(	O
)	O
{	O
return	O
this.supporting	O
;	O
}	O
public	O
void	O
setsupporting	O
(	O
string	O
supporting	O
)	O
{	O
this.supporting	O
=	O
supporting	O
;	O
}	O
}	O
the	O
next	O
pojo	O
class	O
oldblockstate	O
is	O
used	O
to	O
represent	O
previous	O
states	O
of	O
blocks	O
as	O
they	O
are	O
being	O
moved	O
as	O
the	O
rules	O
in	O
this	O
example	O
“	O
ﬁre.	O
”	O
we	O
will	O
later	O
see	O
rules	O
that	O
will	O
not	O
put	O
a	O
block	O
into	O
a	O
state	O
that	O
it	O
previously	O
existed	O
in	O
:	O
public	O
static	O
class	O
oldblockstate	O
extends	O
block	O
{	O
public	O
oldblockstate	O
(	O
string	O
name	O
,	O
string	O
ontopof	O
,	O
string	O
supporting	O
)	O
{	O
super	O
(	O
name	O
,	O
ontopof	O
,	O
supporting	O
)	O
;	O
}	O
public	O
string	O
tostring	O
(	O
)	O
{	O
return	O
``	O
[	O
oldblockstate_	O
''	O
+	O
this.hashcode	O
(	O
)	O
+	O
''	O
``	O
+	O
name	O
+	O
``	O
on	O
top	O
of	O
:	O
``	O
+	O
ontopof	O
+	O
''	O
supporting	O
:	O
``	O
+	O
supporting+	O
''	O
]	O
''	O
;	O
}	O
}	O
the	O
next	O
pojo	O
class	O
goal	O
is	O
used	O
to	O
represent	O
a	O
goal	O
state	O
for	O
the	O
blocks	O
that	O
we	O
are	O
trying	O
to	O
reach	O
:	O
public	O
static	O
class	O
goal	O
{	O
83	O
5	O
expert	O
systems	O
figure	O
5.4	O
:	O
block	O
b	O
has	O
been	O
removed	O
from	O
block	O
a	O
and	O
placed	O
on	O
the	O
table	O
.	O
private	O
string	O
supportingblock	O
;	O
private	O
string	O
supportedblock	O
;	O
public	O
goal	O
(	O
string	O
supporting	O
,	O
string	O
supported	O
)	O
{	O
this.supportingblock	O
=	O
supporting	O
;	O
this.supportedblock	O
=	O
supported	O
;	O
}	O
public	O
string	O
tostring	O
(	O
)	O
{	O
return	O
``	O
[	O
goal_	O
''	O
+	O
this.hashcode	O
(	O
)	O
+	O
''	O
goal	O
:	O
supporting	O
block	O
:	O
``	O
+	O
supportingblock	O
+	O
''	O
and	O
supported	O
block	O
:	O
``	O
+	O
supportedblock	O
+	O
''	O
]	O
''	O
;	O
}	O
public	O
void	O
setsupportingblock	O
(	O
string	O
supportingblock	O
)	O
{	O
this.supportingblock	O
=	O
supportingblock	O
;	O
}	O
public	O
string	O
getsupportingblock	O
(	O
)	O
{	O
return	O
supportingblock	O
;	O
}	O
public	O
void	O
setsupportedblock	O
(	O
string	O
supportedblock	O
)	O
{	O
this.supportedblock	O
=	O
supportedblock	O
;	O
}	O
public	O
string	O
getsupportedblock	O
(	O
)	O
{	O
return	O
supportedblock	O
;	O
}	O
}	O
each	O
block	O
object	O
has	O
three	O
string	O
attributes	O
:	O
a	O
name	O
,	O
the	O
name	O
of	O
the	O
block	O
that	O
this	O
block	O
is	O
on	O
top	O
of	O
,	O
and	O
the	O
block	O
that	O
this	O
block	O
supports	O
(	O
is	O
under	O
)	O
.	O
we	O
will	O
also	O
deﬁne	O
a	O
block	O
instance	O
with	O
the	O
name	O
“	O
table.	O
”	O
we	O
need	O
the	O
pojo	O
class	O
oldblockstate	O
that	O
is	O
a	O
subclass	O
of	O
block	O
to	O
avoid	O
cycles	O
in	O
the	O
reasoning	B
process	O
.	O
84	O
abc	O
5.4	O
example	O
drools	O
expert	B
system	I
:	O
blocks	O
world	O
figure	O
5.5	O
:	O
the	O
goal	O
is	O
solved	O
by	O
placing	O
block	O
c	O
on	O
top	O
of	O
block	O
a	O
.	O
5.4.2	O
drools	O
rules	O
for	O
blocks	O
world	O
example	O
we	O
need	O
four	O
rules	O
for	O
this	O
example	O
and	O
they	O
are	O
listed	O
below	O
with	O
comments	O
as	O
appropriate	O
:	O
package	O
com.markwatson.examples.drool	O
import	O
com.markwatson.examples.drool.droolsblockworld	O
import	O
com.markwatson.examples.drool.droolsblockworld	O
.block	O
;	O
import	O
com.markwatson.examples.drool.droolsblockworld	O
.oldblockstate	O
;	O
.goal	O
;	O
we	O
place	O
the	O
rules	O
in	O
the	O
same	O
java	O
package	O
as	O
the	O
java	O
support	O
code	O
seen	O
in	O
the	O
next	O
section	O
and	O
the	O
pojo	O
model	O
classes	O
that	O
we	O
saw	O
in	O
the	O
last	O
section	O
.	O
the	O
ﬁrst	O
rule	O
has	O
no	O
preconditions	O
so	O
it	O
can	O
always	O
ﬁre	O
.	O
we	O
use	O
the	O
special	O
rule	O
condition	O
“	O
no-loop	O
true	O
”	O
to	O
let	O
the	O
drools	O
system	O
know	O
that	O
we	O
only	O
want	O
this	O
rule	O
to	O
ﬁre	O
one	O
time	O
.	O
this	O
rule	O
inserts	O
facts	O
into	O
working	O
memory	O
for	O
the	O
simple	O
problem	O
seen	O
in	O
figures	O
5.2	O
through	O
5.5	O
:	O
rule	O
``	O
startup	O
rule	O
''	O
no-loop	O
true	O
when	O
then	O
//insert	O
(	O
new	O
goal	O
(	O
``	O
c	O
''	O
,	O
``	O
b	O
''	O
)	O
)	O
;	O
//	O
test	O
1	O
insert	O
(	O
new	O
goal	O
(	O
``	O
c	O
''	O
,	O
``	O
a	O
''	O
)	O
)	O
;	O
//	O
test	O
2	O
//	O
block	O
(	O
string	O
name	O
,	O
string	O
ontopof	O
,	O
//	O
insert	O
(	O
new	O
block	O
(	O
``	O
a	O
''	O
,	O
``	O
table	O
''	O
,	O
``	O
b	O
''	O
)	O
)	O
;	O
insert	O
(	O
new	O
block	O
(	O
``	O
b	O
''	O
,	O
``	O
a	O
''	O
,	O
``	O
c	O
''	O
)	O
)	O
;	O
insert	O
(	O
new	O
block	O
(	O
``	O
c	O
''	O
,	O
``	O
b	O
''	O
,	O
``	O
''	O
)	O
)	O
;	O
insert	O
(	O
new	O
block	O
(	O
``	O
d	O
''	O
,	O
``	O
''	O
,	O
``	O
''	O
)	O
)	O
;	O
string	O
supporting	O
)	O
85	O
abc	O
5	O
expert	O
systems	O
insert	O
(	O
new	O
block	O
(	O
``	O
table	O
''	O
,	O
``	O
''	O
,	O
``	O
a	O
''	O
)	O
)	O
;	O
end	O
the	O
following	O
rule	O
looks	O
for	O
situations	O
where	O
it	O
is	O
possible	O
to	O
move	O
a	O
block	O
with	O
a	O
few	O
conditions	O
:	O
•	O
find	O
a	O
block	O
block	O
1	O
that	O
is	O
on	O
top	O
of	O
another	O
block	O
and	O
is	O
not	O
itself	O
supporting	O
any	O
other	O
blocks	O
•	O
find	O
a	O
second	O
block	O
block	O
2	O
that	O
is	O
not	O
block	O
1	O
and	O
is	O
not	O
itself	O
supporting	O
any	O
other	O
blocks	O
•	O
find	O
the	O
block	O
on	O
top	O
of	O
1	O
that	O
is	O
under	O
block	O
2	O
and	O
supporting	O
block	O
1	O
•	O
make	O
sure	O
that	O
no	O
previous	O
block	O
with	O
the	O
name	O
in	O
the	O
variable	O
block	O
2	O
has	O
already	O
been	O
on	O
top	O
of	O
block	O
on	O
top	O
of	O
2	O
and	O
supporting	O
block	O
1	O
if	O
these	O
conditions	O
are	O
met	O
,	O
we	O
can	O
remove	O
the	O
three	O
matching	O
facts	O
and	O
create	O
facts	O
for	O
the	O
new	O
block	O
positions	O
and	O
a	O
new	O
oldblockstate	O
fact	O
in	O
working	O
memory	O
.	O
note	O
that	O
the	O
fourth	O
lhs	O
matching	O
pattern	O
is	O
preﬁxed	O
with	O
“	O
not	O
”	O
so	O
this	O
matches	O
if	O
there	O
are	O
no	O
objects	O
in	O
working	O
memory	O
that	O
match	O
this	O
pattern	O
:	O
rule	O
``	O
set	O
block	O
on	O
:	O
move	O
block_1	O
to	O
block_2	O
''	O
when	O
fact1	O
:	O
block	O
(	O
block_1	O
:	O
name	O
,	O
on_top_of_1	O
:	O
ontopof	O
!	O
=	O
``	O
''	O
,	O
supporting	O
==	O
``	O
''	O
)	O
fact2	O
:	O
block	O
(	O
block_2	O
:	O
name	O
!	O
=	O
block_1	O
,	O
on_top_of_2	O
:	O
ontopof	O
!	O
=	O
``	O
''	O
,	O
supporting	O
==	O
``	O
''	O
)	O
fact3	O
:	O
block	O
(	O
name	O
==	O
on_top_of_1	O
,	O
on_top_of_3	O
:	O
ontopof	O
,	O
supporting	O
==	O
block_1	O
)	O
not	O
oldblockstate	O
(	O
name	O
==	O
block_2	O
,	O
ontopof	O
==	O
on_top_of_2	O
,	O
supporting	O
==	O
block_1	O
)	O
then	O
system.out.println	O
(	O
fact1	O
)	O
;	O
system.out.println	O
(	O
fact2	O
)	O
;	O
system.out.println	O
(	O
fact3	O
)	O
;	O
retract	O
(	O
fact1	O
)	O
;	O
retract	O
(	O
fact2	O
)	O
;	O
retract	O
(	O
fact3	O
)	O
;	O
insert	O
(	O
new	O
block	O
(	O
block_1	O
,	O
block_2	O
,	O
``	O
''	O
)	O
)	O
;	O
insert	O
(	O
new	O
block	O
(	O
block_2	O
,	O
on_top_of_2	O
,	O
86	O
5.4	O
example	O
drools	O
expert	B
system	I
:	O
blocks	O
world	O
insert	O
(	O
new	O
oldblockstate	O
(	O
block_2	O
,	O
block_1	O
)	O
)	O
;	O
on_top_of_2	O
,	O
``	O
''	O
)	O
)	O
;	O
insert	O
(	O
new	O
block	O
(	O
on_top_of_1	O
,	O
system.out.println	O
(	O
``	O
moving	O
``	O
+	O
block_1	O
+	O
on_top_of_3	O
,	O
``	O
''	O
)	O
)	O
;	O
''	O
from	O
``	O
+	O
on_top_of_1	O
+	O
''	O
to	O
``	O
+	O
block_2	O
)	O
;	O
end	O
the	O
next	O
rule	O
looks	O
for	O
opportunities	O
to	O
remove	O
block	O
1	O
from	O
block	O
2	O
if	O
no	O
other	O
block	O
is	O
sitting	O
on	O
top	O
of	O
block	O
1	O
(	O
that	O
is	O
,	O
block	O
1	O
is	O
clear	O
)	O
:	O
rule	O
``	O
clear	O
block	O
:	O
remove	O
block_1	O
from	O
block_2	O
''	O
when	O
fact1	O
:	O
block	O
(	O
block_1	O
:	O
name	O
!	O
=	O
``	O
table	O
''	O
,	O
on_top_of	O
:	O
ontopof	O
!	O
=	O
``	O
table	O
''	O
,	O
supporting	O
==	O
``	O
''	O
)	O
fact2	O
:	O
block	O
(	O
block_2	O
:	O
name	O
,	O
on_top_of_2	O
:	O
ontopof	O
,	O
supporting	O
==	O
block_1	O
)	O
then	O
system.out.println	O
(	O
fact1	O
)	O
;	O
system.out.println	O
(	O
fact2	O
)	O
;	O
retract	O
(	O
fact1	O
)	O
;	O
retract	O
(	O
fact2	O
)	O
;	O
insert	O
(	O
new	O
block	O
(	O
block_1	O
,	O
``	O
table	O
''	O
,	O
``	O
''	O
)	O
)	O
;	O
insert	O
(	O
new	O
block	O
(	O
block_2	O
,	O
on_top_of_2	O
,	O
``	O
''	O
)	O
)	O
;	O
insert	O
(	O
new	O
block	O
(	O
``	O
table	O
''	O
,	O
``	O
''	O
,	O
block_1	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
clearing	O
:	O
remove	O
``	O
+	O
block_1	O
+	O
``	O
from	O
``	O
+	O
on_top_of	O
+	O
``	O
to	O
table	O
''	O
)	O
;	O
end	O
the	O
next	O
rule	O
checks	O
to	O
see	O
if	O
the	O
current	O
goal	O
is	O
satisﬁed	O
in	O
which	O
case	O
it	O
halts	O
the	O
drools	O
engine	O
:	O
rule	O
``	O
halt	O
on	O
goal	O
achieved	O
''	O
salience	O
500	O
when	O
goal	O
(	O
b1	O
:	O
supportingblock	O
,	O
b2	O
:	O
supportedblock	O
)	O
block	O
(	O
name	O
==	O
b1	O
,	O
supporting	O
==	O
b2	O
)	O
then	O
87	O
5	O
expert	O
systems	O
system.out.println	O
(	O
``	O
done	O
!	O
``	O
)	O
;	O
drools.halt	O
(	O
)	O
;	O
end	O
the	O
java	O
code	O
in	O
the	O
next	O
section	O
can	O
load	O
and	O
run	O
these	O
example	O
rules	O
.	O
5.4.3	O
java	O
code	O
for	O
blocks	O
world	O
example	O
the	O
example	O
in	O
this	O
section	O
introduces	O
something	O
new	O
:	O
modifying	O
the	O
default	O
way	O
that	O
drools	O
chooses	O
which	O
rules	O
to	O
“	O
ﬁre	O
”	O
(	O
execute	O
)	O
when	O
more	O
than	O
one	O
rule	O
is	O
eli-	O
gible	O
to	O
ﬁre	O
.	O
this	O
is	O
referred	O
to	O
as	O
the	O
“	O
conﬂict	O
resolution	O
strategy	O
”	O
and	O
this	O
phrase	O
dates	O
back	O
to	O
the	O
original	O
ops5	O
production	O
system	O
.	O
drools	O
by	O
default	O
prefers	O
rules	O
that	O
are	O
instantiated	O
by	O
data	O
that	O
is	O
newer	O
in	O
working	O
memory	O
.	O
this	O
is	O
similar	O
to	O
depth	O
ﬁrst	O
search	O
.	O
in	O
the	O
“	O
blocks	O
world	O
”	O
example	O
in	O
this	O
section	O
we	O
will	O
need	O
to	O
change	O
the	O
conﬂict	O
resolution	O
strategy	O
to	O
process	O
rules	O
in	O
a	O
ﬁrst-in	O
,	O
ﬁrst-out	O
order	O
which	O
is	O
similar	O
to	O
a	O
breadth	O
ﬁrst	O
search	O
strategy	O
.	O
first	O
,	O
let	O
us	O
deﬁne	O
the	O
problem	O
that	O
we	O
want	O
to	O
solve	O
.	O
consider	O
labeled	O
blocks	O
sitting	O
on	O
a	O
table	O
as	O
seen	O
in	O
figures	O
5.2	O
through	O
5.5.	O
the	O
java	O
code	O
in	O
this	O
section	O
is	O
similar	O
to	O
what	O
we	O
already	O
saw	O
in	O
section	O
5.3	O
so	O
we	O
will	O
just	O
look	O
at	O
the	O
differences	O
here	O
.	O
to	O
start	O
with	O
,	O
in	O
the	O
utility	O
method	O
readrule	O
(	O
)	O
we	O
need	O
to	O
add	O
a	O
few	O
lines	O
of	O
code	O
to	O
conﬁgure	O
drools	O
to	O
use	O
a	O
breadth-ﬁrst	O
instead	O
of	O
a	O
depth-ﬁrst	O
reasoning	B
strategy	O
:	O
private	O
static	O
rulebase	O
readrule	O
(	O
)	O
throws	O
exception	O
{	O
reader	O
source	O
=	O
new	O
inputstreamreader	O
(	O
droolsblockworld.class.getresourceasstream	O
(	O
''	O
/blockworld.drl	O
''	O
)	O
)	O
;	O
packagebuilder	O
builder	O
=	O
new	O
packagebuilder	O
(	O
)	O
;	O
builder.addpackagefromdrl	O
(	O
source	O
)	O
;	O
package	O
pkg	O
=	O
builder.getpackage	O
(	O
)	O
;	O
//	O
change	O
the	O
default	O
conflict	O
resolution	O
strategy	O
:	O
rulebaseconfiguration	O
rbc	O
=	O
new	O
rulebaseconfiguration	O
(	O
)	O
;	O
rbc.setconflictresolver	O
(	O
new	O
fifoconflictresolver	O
(	O
)	O
)	O
;	O
rulebase	O
rulebase	O
=	O
rulebasefactory.newrulebase	O
(	O
rbc	O
)	O
;	O
rulebase.addpackage	O
(	O
pkg	O
)	O
;	O
88	O
5.4	O
example	O
drools	O
expert	B
system	I
:	O
blocks	O
world	O
return	O
rulebase	O
;	O
}	O
the	O
drools	O
class	O
f	O
if	O
oconf	O
lictresolver	O
is	O
not	O
so	O
well	O
named	O
,	O
but	O
a	O
ﬁrst-in	O
ﬁrst-	O
out	O
(	O
fifo	O
)	O
strategy	O
is	O
like	O
depth	O
ﬁrst	O
search	O
.	O
the	O
default	O
conﬂict	O
resolution	O
strategy	O
favors	O
rules	O
that	O
are	O
eligible	O
to	O
ﬁre	O
from	O
data	O
that	O
has	O
most	O
recently	O
changed	O
.	O
since	O
we	O
have	O
already	O
seen	O
the	O
deﬁnition	O
of	O
the	O
java	O
pojo	O
classes	O
used	O
in	O
the	O
rules	O
in	O
section	O
5.4.1	O
the	O
only	O
remaining	O
java	O
code	O
to	O
look	O
at	O
is	O
in	O
the	O
static	O
main	O
method	O
:	O
rulebase	O
rulebase	O
=	O
readrule	O
(	O
)	O
;	O
workingmemory	O
workingmemory	O
=	O
system.out.println	O
(	O
``	O
\ninitial	O
working	O
memory	O
:	O
\n\n	O
''	O
+	O
rulebase.newstatefulsession	O
(	O
)	O
;	O
workingmemory.tostring	O
(	O
)	O
)	O
;	O
//	O
just	O
fire	O
the	O
first	O
setup	O
rule	O
:	O
workingmemory.fireallrules	O
(	O
1	O
)	O
;	O
iterator	O
<	O
facthandle	O
>	O
iter	O
=	O
workingmemory.iteratefacthandles	O
(	O
)	O
;	O
while	O
(	O
iter.hasnext	O
(	O
)	O
)	O
{	O
system.out.println	O
(	O
iter.next	O
(	O
)	O
)	O
;	O
}	O
system.out.println	O
(	O
``	O
\n\n**	O
before	O
firing	O
rules	O
...	O
''	O
)	O
;	O
workingmemory.fireallrules	O
(	O
20	O
)	O
;	O
//	O
limit	O
20	O
cycles	O
system.out.println	O
(	O
``	O
\n\n**	O
after	O
firing	O
rules	O
.	O
``	O
)	O
;	O
system.out.println	O
(	O
``	O
\nfinal	O
working	O
memory	O
:	O
\n	O
''	O
+	O
workingmemory.tostring	O
(	O
)	O
)	O
;	O
iter	O
=	O
workingmemory.iteratefacthandles	O
(	O
)	O
;	O
while	O
(	O
iter.hasnext	O
(	O
)	O
)	O
{	O
system.out.println	O
(	O
iter.next	O
(	O
)	O
)	O
;	O
}	O
for	O
making	O
rule	O
debugging	O
easier	O
i	O
wanted	O
to	O
run	O
the	O
ﬁrst	O
“	O
start	O
up	O
”	O
rule	O
to	O
deﬁne	O
the	O
initial	O
problem	O
facts	O
in	O
working	O
memory	O
,	O
and	O
then	O
print	O
working	O
memory	O
.	O
that	O
is	O
why	O
i	O
called	O
workingm	O
emory.f	O
ireallrules	O
(	O
1	O
)	O
to	O
ask	O
the	O
drools	O
rule	O
engine	O
to	O
just	O
ﬁre	O
one	O
rule	O
.	O
in	O
the	O
last	O
example	O
we	O
called	O
workingm	O
emory.f	O
ireallrules	O
(	O
)	O
with	O
no	O
arguments	O
so	O
the	O
rule	O
engine	O
runs	O
forever	O
as	O
long	O
as	O
there	O
are	O
rules	O
eligible	O
to	O
ﬁre	O
.	O
after	O
printing	O
the	O
facts	O
in	O
working	O
memory	O
i	O
call	O
the	O
f	O
ireallrules	O
(	O
20	O
)	O
with	O
a	O
limit	O
of	O
20	O
rule	O
ﬁrings	O
because	O
blocks	O
world	O
problems	O
can	O
fail	O
to	O
terminate	O
(	O
at	O
least	O
the	O
simple	O
rules	O
that	O
i	O
have	O
written	O
for	O
this	O
example	O
often	O
failed	O
to	O
terminate	O
when	O
i	O
was	O
debugging	O
this	O
example	O
)	O
.	O
limiting	O
the	O
number	O
of	O
rule	O
ﬁrings	O
is	O
often	O
a	O
good	O
idea	O
.	O
the	O
output	O
from	O
this	O
example	O
with	O
debug	O
output	O
removed	O
is	O
:	O
clearing	O
:	O
remove	O
c	O
from	O
b	O
to	O
table	O
89	O
5	O
expert	O
systems	O
moving	O
b	O
from	O
a	O
to	O
c	O
clearing	O
:	O
remove	O
b	O
from	O
c	O
to	O
table	O
moving	O
a	O
from	O
table	O
to	O
c	O
moving	O
c	O
from	O
table	O
to	O
b	O
done	O
!	O
note	O
that	O
this	O
is	O
not	O
the	O
best	O
solution	O
since	O
it	O
has	O
unnecessary	O
steps	O
.	O
if	O
you	O
are	O
interested	O
,	O
here	O
is	O
the	O
output	O
with	O
debug	O
printout	O
showing	O
the	O
facts	O
that	O
enabled	O
each	O
rule	O
to	O
ﬁre	O
:	O
[	O
block_11475926	O
c	O
on	O
top	O
of	O
:	O
b	O
supporting	O
:	O
]	O
[	O
block_14268353	O
b	O
on	O
top	O
of	O
:	O
a	O
supporting	O
:	O
c	O
]	O
clearing	O
:	O
remove	O
c	O
from	O
b	O
to	O
table	O
[	O
block_3739389	O
b	O
on	O
top	O
of	O
:	O
a	O
supporting	O
:	O
]	O
[	O
block_15146334	O
c	O
on	O
top	O
of	O
:	O
table	O
supporting	O
:	O
]	O
[	O
block_2968039	O
a	O
on	O
top	O
of	O
:	O
table	O
supporting	O
:	O
b	O
]	O
moving	O
b	O
from	O
a	O
to	O
c	O
[	O
block_8039617	O
b	O
on	O
top	O
of	O
:	O
c	O
supporting	O
:	O
]	O
[	O
block_14928573	O
c	O
on	O
top	O
of	O
:	O
table	O
clearing	O
:	O
remove	O
b	O
from	O
c	O
to	O
table	O
[	O
block_15379373	O
a	O
on	O
top	O
of	O
:	O
table	O
[	O
oldblockstate_10920899	O
c	O
on	O
top	O
of	O
:	O
table	O
[	O
block_4482425	O
table	O
on	O
top	O
of	O
:	O
moving	O
a	O
from	O
table	O
to	O
c	O
[	O
block_13646336	O
c	O
on	O
top	O
of	O
:	O
table	O
[	O
block_11342677	O
b	O
on	O
top	O
of	O
:	O
table	O
[	O
block_6615024	O
table	O
on	O
top	O
of	O
:	O
moving	O
c	O
from	O
table	O
to	O
b	O
done	O
!	O
supporting	O
:	O
]	O
supporting	O
:	O
]	O
supporting	O
:	O
a	O
]	O
supporting	O
:	O
c	O
]	O
supporting	O
:	O
b	O
]	O
supporting	O
:	O
]	O
supporting	O
:	O
]	O
this	O
printout	O
does	O
not	O
show	O
the	O
printout	O
of	O
all	O
facts	O
before	O
and	O
after	O
running	O
this	O
example	O
.	O
5.5	O
example	O
drools	O
expert	B
system	I
:	O
help	O
desk	O
system	O
automating	O
help	O
desk	O
functions	O
can	O
improve	O
the	O
quality	O
of	O
customer	O
service	O
and	O
reduce	O
costs	O
.	O
help	O
desk	O
software	O
can	O
guide	O
human	O
call	O
operators	O
through	O
canned	O
explanations	O
that	O
can	O
be	O
thought	O
of	O
as	O
decision	O
trees	O
;	O
for	O
example	O
:	O
“	O
customer	O
re-	O
ports	O
that	O
their	O
refrigerator	O
is	O
not	O
running	O
–	O
>	O
ask	O
if	O
the	O
power	O
is	O
on	O
and	O
no	O
circuit	O
breakers	O
are	O
tripped	O
.	O
if	O
customer	O
reports	O
that	O
power	O
source	O
is	O
ok	O
–	O
>	O
ask	O
if	O
the	O
light	O
90	O
5.5	O
example	O
drools	O
expert	B
system	I
:	O
help	O
desk	O
system	O
is	O
on	O
inside	O
the	O
refrigerator	O
to	O
determine	O
if	O
just	O
the	O
compressor	O
motor	O
is	O
out	O
.	O
.	O
.	O
”	O
.	O
we	O
will	O
see	O
in	O
chapter	O
8	O
that	O
decision	O
trees	O
can	O
be	O
learned	O
from	O
training	O
data	O
.	O
one	O
method	O
of	O
implementing	O
a	O
decision	O
tree	O
approach	O
to	O
help	O
desk	O
support	O
would	O
be	O
to	O
capture	O
customer	O
interactions	O
by	O
skilled	O
support	O
staff	O
,	O
factor	O
operator	O
responses	O
into	O
standard	O
phrases	O
and	O
customer	O
comments	O
into	O
standard	O
questions	O
,	O
and	O
use	O
a	O
machine	B
learning	I
package	O
like	O
weka	O
to	O
learn	O
the	O
best	O
paths	O
through	O
questions	O
and	O
answers	O
.	O
we	O
will	O
take	O
a	O
different	O
approach	O
in	O
our	O
example	O
for	O
this	O
section	O
:	O
we	O
will	O
assume	O
that	O
an	O
expert	O
customer	O
service	O
representative	O
has	O
provided	O
us	O
with	O
use	O
cases	O
of	O
common	O
problems	O
,	O
what	O
customers	O
tend	O
to	O
ask	O
for	O
each	O
problem	O
,	O
and	O
the	O
responses	O
by	O
customer	O
service	O
representatives	O
.	O
we	O
will	O
develop	O
some	O
sample	O
drools	O
rules	O
to	O
encode	O
this	O
knowledge	O
.	O
this	O
approach	O
is	O
likely	O
to	O
be	O
more	O
difﬁcult	O
to	O
implement	O
than	O
a	O
decision	O
tree	O
system	O
but	O
has	O
the	O
potential	O
advantage	O
that	O
if	O
individual	O
rules	O
“	O
make	O
sense	O
”	O
in	O
general	O
they	O
may	O
end	O
up	O
being	O
useful	O
in	O
contexts	O
beyond	O
those	O
anticipated	O
by	O
rules	O
developers	O
.	O
with	O
this	O
greater	O
ﬂexibility	O
comes	O
a	O
potential	O
for	O
less	O
accuracy	O
.	O
we	O
will	O
start	O
in	O
the	O
next	O
section	O
by	O
developing	O
some	O
pojo	O
object	O
models	O
required	O
for	O
our	O
example	O
help	O
desk	O
expert	B
system	I
and	O
then	O
in	O
the	O
next	O
section	O
develop	O
a	O
few	O
example	O
rules	O
.	O
5.5.1	O
object	O
models	O
for	O
an	O
example	O
help	O
desk	O
we	O
will	O
use	O
a	O
single	O
java	O
pojo	O
class	O
for	O
this	O
example	O
.	O
we	O
want	O
a	O
problem	O
type	O
,	O
a	O
description	O
of	O
a	O
problem	O
,	O
and	O
a	O
suggestion	O
.	O
a	O
“	O
real	O
”	O
help	O
desk	O
system	O
might	O
use	O
additional	O
classes	O
for	O
intermediate	O
steps	O
in	O
diagnosing	O
problems	O
and	O
offering	O
advice	O
but	O
for	O
this	O
example	O
,	O
we	O
will	O
chain	O
“	O
problems	O
”	O
together	O
.	O
here	O
is	O
an	O
example	O
:	O
customer	O
:	O
my	O
refrigerator	O
is	O
not	O
running	O
.	O
service	O
:	O
i	O
want	O
to	O
know	O
if	O
the	O
power	O
is	O
on	O
.	O
is	O
the	O
light	O
on	O
inside	O
the	O
refrigerator	O
?	O
customer	O
:	O
no	O
.	O
service	O
:	O
please	O
check	O
your	O
circuit	O
breaker	O
,	O
i	O
will	O
wait	O
.	O
customer	O
:	O
all	O
my	O
circuit	O
breakers	O
looked	O
ok	O
and	O
everything	O
else	O
is	O
running	O
in	O
the	O
kitchen	O
.	O
service	O
i	O
will	O
schedule	O
a	O
service	O
call	O
for	O
you	O
.	O
we	O
will	O
not	O
develop	O
an	O
interactive	O
system	O
;	O
a	O
dialog	O
with	O
a	O
customer	O
is	O
assumed	O
to	O
be	O
converted	O
into	O
facts	O
in	O
working	O
memory	O
.	O
these	O
facts	O
will	O
be	O
represented	O
by	O
instances	O
of	O
the	O
class	O
p	O
roblem	O
.	O
the	O
expert	B
system	I
will	O
apply	O
the	O
rule	O
base	O
to	O
the	O
facts	O
in	O
working	O
memory	O
and	O
make	O
suggestions	O
.	O
here	O
is	O
the	O
java	O
class	O
p	O
roblem	O
that	O
is	O
deﬁned	O
as	O
an	O
inner	O
static	O
class	O
in	O
the	O
ﬁle	O
droolshelpdesk.java	O
:	O
91	O
5	O
expert	O
systems	O
public	O
static	O
class	O
problem	O
{	O
enums	O
as	O
match	O
types	O
so	O
i	O
use	O
static	O
integers	O
here	O
.	O
in	O
general	O
,	O
using	O
enums	O
is	O
much	O
better	O
.	O
//	O
note	O
:	O
drools	O
has	O
problems	O
dealing	O
with	O
java	O
5	O
//	O
//	O
//	O
final	O
public	O
static	O
int	O
none	O
=	O
0	O
;	O
//	O
appliance	O
types	O
:	O
final	O
public	O
static	O
int	O
refrigerator	O
=	O
101	O
;	O
final	O
public	O
static	O
int	O
microwave	O
=	O
102	O
;	O
final	O
public	O
static	O
int	O
tv	O
=	O
103	O
;	O
final	O
public	O
static	O
int	O
dvd	O
=	O
104	O
;	O
//	O
environmentaldata	O
possible	O
values	O
:	O
final	O
public	O
static	O
int	O
circuit_breaker_off	O
=	O
1002	O
;	O
final	O
public	O
static	O
int	O
lights_off_in_room	O
=	O
1003	O
;	O
//	O
problemtype	O
possible	O
values	O
:	O
final	O
public	O
static	O
int	O
not_running	O
=	O
2001	O
;	O
final	O
public	O
static	O
int	O
smoking	O
=	O
2002	O
;	O
final	O
public	O
static	O
int	O
on_fire	O
=	O
2003	O
;	O
final	O
public	O
static	O
int	O
makes_noise	O
=	O
2004	O
;	O
long	O
serviceid	O
=	O
0	O
;	O
//	O
unique	O
id	O
for	O
all	O
problems	O
//	O
dealing	O
with	O
customer	O
problem	O
int	O
appliancetype	O
=	O
none	O
;	O
int	O
problemtype	O
=	O
none	O
;	O
int	O
environmentaldata	O
=	O
none	O
;	O
public	O
problem	O
(	O
long	O
serviceid	O
,	O
int	O
type	O
)	O
{	O
this.serviceid	O
=	O
serviceid	O
;	O
this.appliancetype	O
=	O
type	O
;	O
}	O
public	O
string	O
tostring	O
(	O
)	O
{	O
return	O
``	O
[	O
problem	O
:	O
``	O
+	O
enumnames.get	O
(	O
appliancetype	O
)	O
+	O
''	O
problem	O
type	O
:	O
``	O
+	O
enumnames.get	O
(	O
problemtype	O
)	O
+	O
''	O
environmental	O
data	O
:	O
``	O
+	O
enumnames.get	O
(	O
environmentaldata	O
)	O
+	O
``	O
]	O
''	O
;	O
}	O
public	O
long	O
getserviceid	O
(	O
)	O
{	O
return	O
serviceid	O
;	O
}	O
public	O
int	O
getenvironmentaldata	O
(	O
)	O
{	O
return	O
environmentaldata	O
;	O
}	O
public	O
int	O
getproblemtype	O
(	O
)	O
{	O
return	O
problemtype	O
;	O
}	O
static	O
map	O
<	O
integer	O
,	O
string	O
>	O
enumnames	O
=	O
92	O
5.5	O
example	O
drools	O
expert	B
system	I
:	O
help	O
desk	O
system	O
new	O
hashmap	O
<	O
integer	O
,	O
string	O
>	O
(	O
)	O
;	O
static	O
{	O
enumnames.put	O
(	O
0	O
,	O
``	O
none	O
''	O
)	O
;	O
enumnames.put	O
(	O
1002	O
,	O
``	O
circuit_breaker_off	O
''	O
)	O
;	O
enumnames.put	O
(	O
1003	O
,	O
``	O
lights_off_in_room	O
''	O
)	O
;	O
enumnames.put	O
(	O
2001	O
,	O
``	O
not_running	O
''	O
)	O
;	O
enumnames.put	O
(	O
2002	O
,	O
``	O
smoking	O
''	O
)	O
;	O
enumnames.put	O
(	O
2003	O
,	O
``	O
on_fire	O
''	O
)	O
;	O
enumnames.put	O
(	O
2004	O
,	O
``	O
makes_noise	O
''	O
)	O
;	O
enumnames.put	O
(	O
101	O
,	O
``	O
refrigerator	O
''	O
)	O
;	O
enumnames.put	O
(	O
102	O
,	O
``	O
microwave	O
''	O
)	O
;	O
enumnames.put	O
(	O
103	O
,	O
``	O
tv	O
''	O
)	O
;	O
enumnames.put	O
(	O
104	O
,	O
``	O
dvd	O
''	O
)	O
;	O
}	O
}	O
it	O
is	O
unfortunate	O
that	O
the	O
current	O
version	O
of	O
drools	O
does	O
not	O
work	O
well	O
with	O
java	O
5	O
enums	O
–	O
the	O
p	O
roblem	O
class	O
would	O
have	O
been	O
about	O
half	O
as	O
many	O
lines	O
of	O
code	O
(	O
no	O
need	O
to	O
map	O
integers	O
to	O
meaningful	O
descriptions	O
for	O
tostring	O
(	O
)	O
)	O
and	O
the	O
example	O
would	O
also	O
be	O
more	O
type	O
safe	O
.	O
i	O
used	O
constant	O
values	O
like	O
refrigerator	O
and	O
running	O
to	O
represent	O
pos-	O
sible	O
values	O
for	O
the	O
member	O
class	O
attributes	O
like	O
appliancet	O
ype	O
,	O
problemt	O
ype	O
,	O
and	O
environmentaldata	O
.	O
there	O
is	O
obviously	O
a	O
tight	O
binding	O
from	O
the	O
java	O
pojo	O
classes	O
like	O
p	O
roblem	O
to	O
the	O
rules	O
that	O
use	O
these	O
classes	O
to	O
represent	O
objects	O
in	O
work-	O
ing	O
memory	O
.	O
we	O
will	O
see	O
a	O
few	O
example	O
help	O
desk	O
rules	O
in	O
the	O
next	O
section	O
.	O
5.5.2	O
drools	O
rules	O
for	O
an	O
example	O
help	O
desk	O
this	O
demo	O
help	O
desk	O
system	O
is	O
not	O
interactive	O
.	O
the	O
java	O
code	O
in	O
the	O
next	O
section	O
loads	O
the	O
rule	O
set	O
that	O
we	O
are	O
about	O
to	O
develop	O
and	O
then	O
programmatically	O
adds	O
test	O
facts	O
into	O
working	O
memory	O
that	O
simulate	O
two	O
help	O
desk	O
customer	O
service	O
issues	O
.	O
this	O
is	O
an	O
important	O
example	O
since	O
you	O
will	O
likely	O
want	O
to	O
add	O
data	O
directly	O
from	O
java	O
code	O
into	O
drools	O
working	O
memory	O
.	O
there	O
are	O
several	O
rules	O
deﬁned	O
in	O
the	O
example	O
ﬁle	O
helpdesk.drl	O
and	O
we	O
will	O
look	O
at	O
a	O
few	O
of	O
them	O
here	O
.	O
these	O
rules	O
are	O
intended	O
to	O
be	O
a	O
pedantic	O
example	O
of	O
both	O
how	O
to	O
match	O
attributes	O
in	O
java	O
pojo	O
classes	O
and	O
to	O
show	O
a	O
few	O
more	O
techniques	O
for	O
writing	O
drools	O
rules	O
.	O
i	O
used	O
to	O
use	O
the	O
lisp	O
based	O
ops5	O
to	O
develop	O
expert	O
systems	O
and	O
i	O
ﬁnd	O
the	O
combina-	O
tion	O
of	O
java	O
and	O
drools	O
is	O
certainly	O
“	O
less	O
agile	O
”	O
to	O
use	O
.	O
i	O
found	O
myself	O
writing	O
a	O
rule	O
,	O
then	O
editing	O
the	O
pojo	O
class	O
problem	O
to	O
add	O
constants	O
for	O
things	O
that	O
i	O
wanted	O
to	O
use	O
in	O
the	O
rule	O
.	O
with	O
more	O
experience	O
,	O
this	O
less	O
than	O
interactive	O
process	O
might	O
become	O
93	O
5	O
expert	O
systems	O
more	O
comfortable	O
for	O
me	O
.	O
as	O
in	O
the	O
blocks	O
world	O
example	O
,	O
we	O
want	O
to	O
place	O
the	O
rules	O
ﬁle	O
in	O
the	O
same	O
package	O
as	O
the	O
java	O
code	O
using	O
the	O
rules	O
ﬁle	O
and	O
import	O
any	O
pojo	O
classes	O
that	O
we	O
will	O
use	O
in	O
working	O
memory	O
:	O
package	O
com.markwatson.examples.drool	O
import	O
com.markwatson.examples.drool	O
.	O
droolshelpdesk.problem	O
;	O
the	O
ﬁrst	O
rule	O
sets	O
a	O
higher	O
than	O
default	O
rule	O
salience	O
so	O
it	O
will	O
ﬁre	O
before	O
any	O
rules	O
with	O
the	O
default	O
rule	O
salience	O
(	O
a	O
value	O
of	O
zero	O
)	O
.	O
this	O
rule	O
has	O
a	O
feature	O
that	O
we	O
have	O
not	O
seen	O
before	O
:	O
i	O
have	O
no	O
matching	O
expressions	O
in	O
the	O
“	O
when	O
”	O
clause	O
.	O
all	O
java	O
problem	O
instances	O
will	O
match	O
the	O
left-hand	O
side	O
of	O
this	O
rule	O
.	O
rule	O
``	O
print	O
all	O
problems	O
''	O
salience	O
100	O
when	O
p	O
:	O
problem	O
(	O
)	O
then	O
system.out.println	O
(	O
``	O
from	O
rule	O
’	O
print	O
all	O
problems	O
’	O
:	O
``	O
end	O
+	O
p	O
)	O
;	O
the	O
following	O
rule	O
matches	O
an	O
instance	O
of	O
the	O
class	O
p	O
roblem	O
in	O
working	O
memory	O
that	O
has	O
a	O
value	O
of	O
“	O
problem.circuit	O
breaker	O
off	O
”	O
for	O
the	O
vakue	O
of	O
attribute	O
environmentaldata	O
.	O
this	O
constant	O
has	O
the	O
integer	O
value	O
of	O
1002	O
but	O
is	O
is	O
obvi-	O
ously	O
more	O
clear	O
to	O
use	O
meaningful	O
constant	O
names	O
:	O
rule	O
``	O
reset	O
circuit	O
breaker	O
''	O
when	O
p1	O
:	O
problem	O
(	O
environmentaldata	O
==	O
then	O
system.out.println	O
(	O
``	O
reset	O
circuit	O
breaker	O
:	O
``	O
+	O
p1	O
)	O
;	O
problem.circuit_breaker_off	O
)	O
end	O
the	O
last	O
rule	O
could	O
perhaps	O
be	O
improved	O
by	O
having	O
it	O
only	O
ﬁre	O
if	O
any	O
appliance	O
was	O
not	O
currently	O
running	O
;	O
we	O
make	O
this	O
check	O
in	O
the	O
next	O
rule	O
.	O
notice	O
that	O
in	O
the	O
next	O
rule	O
we	O
are	O
matching	O
different	O
attributes	O
(	O
problemt	O
ype	O
and	O
environmentaldata	O
)	O
and	O
it	O
does	O
not	O
matter	O
if	O
these	O
attributes	O
match	O
in	O
a	O
single	O
working	O
memory	O
element	O
or	O
two	O
different	O
working	O
memory	O
elements	O
:	O
94	O
5.5	O
example	O
drools	O
expert	B
system	I
:	O
help	O
desk	O
system	O
rule	O
``	O
check	O
for	O
reset	O
circuit	O
breaker	O
''	O
when	O
p1	O
:	O
problem	O
(	O
problemtype	O
==	O
problem.not_running	O
)	O
problem	O
(	O
environmentaldata	O
==	O
problem.circuit_breaker_off	O
)	O
then	O
system.out.println	O
(	O
``	O
check	O
for	O
power	O
source	O
:	O
``	O
+	O
p1	O
+	O
''	O
.	O
the	O
unit	O
is	O
not	O
is	O
not	O
on	O
and	O
``	O
+	O
''	O
the	O
circuit	O
breaker	O
is	O
tripped	O
-	O
check	O
``	O
+	O
''	O
the	O
circuit	O
breaker	O
for	O
this	O
room	O
.	O
``	O
)	O
;	O
end	O
we	O
will	O
look	O
at	O
the	O
java	O
code	O
to	O
use	O
these	O
example	O
rules	O
in	O
the	O
next	O
section	O
.	O
5.5.3	O
java	O
code	O
for	O
an	O
example	O
help	O
desk	O
we	O
will	O
see	O
another	O
trick	O
for	O
using	O
drools	O
in	O
this	O
example	O
:	O
creating	O
working	O
memory	O
elements	O
(	O
i.e.	O
,	O
instances	O
of	O
the	O
problem	O
pojo	O
class	O
)	O
in	O
java	O
code	O
instead	O
of	O
in	O
a	O
“	O
startup	O
rule	O
”	O
as	O
we	O
did	O
for	O
the	O
blocks	O
world	O
example	O
.	O
the	O
code	O
in	O
this	O
section	O
is	O
also	O
in	O
the	O
droolshelpdesk.java	O
source	O
ﬁle	O
(	O
as	O
is	O
the	O
pojo	O
class	O
deﬁnition	O
seen	O
in	O
section	O
5.5.1	O
)	O
.	O
the	O
static	O
main	O
method	O
in	O
the	O
droolshelpdesk	O
class	O
is	O
very	O
similar	O
to	O
the	O
main	O
method	O
in	O
the	O
blocks	O
world	O
example	O
except	O
that	O
here	O
we	O
also	O
call	O
a	O
new	O
method	O
createt	O
estf	O
acts	O
:	O
public	O
static	O
final	O
void	O
main	O
(	O
string	O
[	O
]	O
args	O
)	O
throws	O
exception	O
{	O
//load	O
up	O
the	O
rulebase	O
rulebase	O
rulebase	O
=	O
readrule	O
(	O
)	O
;	O
workingmemory	O
workingmemory	O
=	O
rulebase.newstatefulsession	O
(	O
)	O
;	O
createtestfacts	O
(	O
workingmemory	O
)	O
;	O
..	O
same	O
as	O
the	O
blocks	O
world	O
example	O
..	O
}	O
we	O
already	O
looked	O
at	O
the	O
utility	O
method	O
readrule	O
in	O
section	O
5.4.3	O
so	O
we	O
will	O
just	O
look	O
at	O
the	O
new	O
method	O
createt	O
estf	O
acts	O
that	O
creates	O
two	O
instance	O
of	O
the	O
pojo	O
class	O
p	O
roblem	O
in	O
working	O
memory	O
:	O
private	O
static	O
void	O
95	O
5	O
expert	O
systems	O
createtestfacts	O
(	O
workingmemory	O
workingmemory	O
)	O
throws	O
exception	O
{	O
problem	O
p1	O
=	O
new	O
problem	O
(	O
101	O
,	O
problem.refrigerator	O
)	O
;	O
p1.problemtype	O
=	O
problem.not_running	O
;	O
p1.environmentaldata	O
=	O
problem.circuit_breaker_off	O
;	O
workingmemory.insert	O
(	O
p1	O
)	O
;	O
problem	O
p2	O
=	O
new	O
problem	O
(	O
101	O
,	O
problem.tv	O
)	O
;	O
p2.problemtype	O
=	O
problem.smoking	O
;	O
workingmemory.insert	O
(	O
p2	O
)	O
;	O
}	O
in	O
this	O
code	O
we	O
created	O
new	O
instances	O
of	O
the	O
class	O
p	O
roblem	O
and	O
set	O
desired	O
at-	O
tributes	O
.	O
we	O
then	O
use	O
the	O
w	O
orkingm	O
emory	O
method	O
insert	O
to	O
add	O
the	O
ojects	O
to	O
the	O
working	O
memory	O
collection	O
that	O
drools	O
maintains	O
.	O
the	O
output	O
when	O
running	O
this	O
example	O
is	O
(	O
reformatted	O
to	O
ﬁt	O
the	O
page	O
width	O
)	O
:	O
from	O
rule	O
’	O
print	O
all	O
problems	O
’	O
:	O
[	O
problem	O
:	O
tv	O
problem	O
type	O
:	O
smoking	O
environmental	O
data	O
:	O
none	O
]	O
from	O
rule	O
’	O
print	O
all	O
problems	O
’	O
:	O
[	O
problem	O
:	O
refrigerator	O
problem	O
type	O
:	O
not_running	O
environmental	O
data	O
:	O
circuit_breaker_off	O
]	O
unplug	O
appliance	O
to	O
prevent	O
fire	O
danger	O
:	O
[	O
problem	O
:	O
tv	O
problem	O
type	O
:	O
smoking	O
environmental	O
data	O
:	O
none	O
]	O
check	O
for	O
power	O
source	O
:	O
[	O
problem	O
:	O
refrigerator	O
problem	O
type	O
:	O
not_running	O
environmental	O
data	O
:	O
circuit_breaker_off	O
]	O
the	O
unit	O
is	O
not	O
is	O
not	O
on	O
and	O
the	O
circuit	O
breaker	O
is	O
tripped	O
-	O
check	O
the	O
circuit	O
breaker	O
for	O
this	O
room	O
.	O
96	O
5.6	O
notes	O
on	O
the	O
craft	O
of	O
building	O
expert	O
systems	O
5.6	O
notes	O
on	O
the	O
craft	O
of	O
building	O
expert	O
systems	O
it	O
may	O
seem	O
like	O
rule-based	O
expert	O
systems	O
have	O
a	O
lot	O
of	O
programming	O
overhead	O
;	O
that	O
is	O
,	O
it	O
will	O
seem	O
excessively	O
difﬁcult	O
to	O
solve	O
simple	O
problems	O
using	O
production	O
systems	O
.	O
however	O
,	O
for	O
encoding	O
large	O
ill-structured	O
problems	O
,	O
production	O
systems	O
provide	O
a	O
convenient	O
notation	O
for	O
collecting	O
together	O
what	O
would	O
otherwise	O
be	O
too	O
large	O
a	O
collection	O
of	O
unstructured	O
data	O
and	O
heuristic	O
rules	O
(	O
programming	O
expert	O
sys-	O
tems	O
in	O
ops5	O
:	O
an	O
introduction	O
to	O
rule-based	O
programming	O
,	O
brownston	O
et	O
al	O
.	O
1985	O
)	O
.	O
as	O
a	O
programming	O
technique	O
,	O
writing	O
rule-based	O
expert	O
systems	O
is	O
not	O
for	O
everyone	O
.	O
some	O
programmers	O
ﬁnd	O
rule-based	O
programming	O
to	O
be	O
cumbersome	O
,	O
while	O
others	O
ﬁnd	O
it	O
a	O
good	O
ﬁt	O
for	O
solving	O
some	O
types	O
of	O
problems	O
.	O
i	O
encourage	O
the	O
reader	O
to	O
have	O
some	O
fun	O
experimenting	O
with	O
drools	O
,	O
both	O
with	O
the	O
examples	O
in	O
this	O
chapter	O
,	O
and	O
the	O
many	O
examples	O
in	O
the	O
drools	O
distribution	O
package	O
and	O
documentation	O
.	O
before	O
starting	O
a	O
moderate	O
or	O
large	O
expert	B
system	I
project	O
,	O
there	O
are	O
several	O
steps	O
that	O
i	O
recommend	O
:	O
•	O
write	O
a	O
detailed	O
description	O
of	O
the	O
problem	O
to	O
be	O
solved	O
.	O
•	O
decide	O
what	O
structured	O
data	O
elements	O
best	O
describe	O
the	O
problem	O
space	O
.	O
•	O
try	O
to	O
break	O
down	O
the	O
problem	O
into	O
separate	O
modules	O
of	O
rules	O
;	O
if	O
possible	O
,	O
try	O
to	O
develop	O
and	O
test	O
these	O
smaller	O
modules	O
independently	O
,	O
preferably	O
one	O
source	O
ﬁle	O
per	O
module	O
.	O
•	O
plan	O
on	O
writing	O
speciﬁc	O
rules	O
that	O
test	O
parts	O
of	O
the	O
system	O
by	O
initializing	O
work-	O
ing	O
memory	O
for	O
speciﬁc	O
tests	O
for	O
the	O
various	O
modules	O
;	O
these	O
tests	O
will	O
be	O
very	O
important	O
when	O
testing	O
all	O
of	O
the	O
modules	O
together	O
because	O
tests	O
that	O
work	O
correctly	O
for	O
a	O
single	O
module	O
may	O
fail	O
when	O
all	O
modules	O
are	O
loaded	O
due	O
to	O
unexpected	O
rule	O
interactions	O
.	O
production	O
systems	O
model	O
fairly	O
accurately	O
the	O
stimulus-response	O
behavior	O
in	O
peo-	O
ple	O
.	O
the	O
left-hand	O
side	O
(	O
lhs	O
)	O
terms	O
represent	O
environmental	O
data	O
that	O
triggers	O
a	O
response	O
or	O
action	O
represented	O
by	O
the	O
right-hand	O
side	O
(	O
rhs	O
)	O
terms	O
in	O
production	B
rules	I
.	O
simple	O
stimulus-response	O
types	O
of	O
production	B
rules	I
might	O
be	O
adequate	O
for	O
modeling	O
simple	O
behaviors	O
,	O
but	O
our	O
goal	O
in	O
writing	O
expert	O
systems	O
is	O
to	O
encode	O
deep	O
knowledge	O
and	O
the	O
ability	O
to	O
make	O
complex	O
decisions	O
in	O
a	O
very	O
narrow	O
(	O
or	O
limited	O
)	O
problem	O
domain	O
.	O
in	O
order	O
to	O
model	O
complex	O
decision-making	O
abilities	O
,	O
we	O
also	O
of-	O
ten	O
need	O
to	O
add	O
higher-level	O
control	O
functionality	O
to	O
expert	O
systems	O
.	O
this	O
higher	O
level	O
,	O
or	O
meta	O
control	O
,	O
can	O
be	O
the	O
control	O
of	O
which	O
rule	O
modules	O
are	O
active	O
.	O
we	O
did	O
not	O
look	O
at	O
the	O
drools	O
apis	O
for	O
managing	O
modules	O
in	O
this	O
chapter	O
but	O
these	O
apis	O
are	O
covered	O
in	O
the	O
drools	O
documentation	O
.	O
hopefully	O
,	O
this	O
chapter	O
both	O
gave	O
you	O
a	O
quick-	O
start	O
for	O
experimenting	O
with	O
drools	O
and	O
enough	O
experience	O
to	O
know	O
if	O
a	O
rule-based	O
system	O
might	O
be	O
a	O
good	O
ﬁt	O
for	O
your	O
own	O
development	O
.	O
97	O
5	O
expert	O
systems	O
98	O
6	O
genetic	O
algorithms	O
genetic	O
algorithms	O
(	O
gas	O
)	O
are	O
computer	O
simulations	O
to	O
evolve	O
a	O
population	O
of	O
chro-	O
mosomes	O
that	O
contain	O
at	O
least	O
some	O
very	O
ﬁt	O
individuals	O
.	O
fitness	O
is	O
speciﬁed	O
by	O
a	O
ﬁtness	B
function	O
that	O
rates	O
each	O
individual	O
in	O
the	O
population	O
.	O
setting	O
up	O
a	O
ga	O
simulation	O
is	O
fairly	O
easy	O
:	O
we	O
need	O
to	O
represent	O
(	O
or	O
encode	O
)	O
the	O
state	O
of	O
a	O
system	O
in	O
a	O
chromosome	B
that	O
is	O
usually	O
implemented	O
as	O
a	O
set	O
of	O
bits	O
.	O
ga	O
is	O
basically	O
a	O
search	B
operation	O
:	O
searching	O
for	O
a	O
good	O
solution	O
to	O
a	O
problem	O
where	O
the	O
solution	O
is	O
a	O
very	O
ﬁt	O
chromosome	B
.	O
the	O
programming	O
technique	O
of	O
using	O
ga	O
is	O
useful	O
for	O
ai	O
systems	O
that	O
must	O
adapt	O
to	O
changing	O
conditions	O
because	O
“	O
re-programming	O
”	O
can	O
be	O
as	O
simple	O
as	O
deﬁning	O
a	O
new	O
ﬁtness	B
function	O
and	O
re-running	O
the	O
simulation	O
.	O
an	O
advantage	O
of	O
ga	O
is	O
that	O
the	O
search	B
process	O
will	O
not	O
often	O
“	O
get	O
stuck	O
”	O
in	O
local	O
minimum	O
because	O
the	O
genetic	O
crossover	O
process	O
produces	O
radically	O
different	O
chro-	O
mosomes	O
in	O
new	O
generations	O
while	O
occasional	O
mutations	O
(	O
ﬂipping	O
a	O
random	O
bit	O
in	O
a	O
chromosome	B
)	O
cause	O
small	O
changes	O
.	O
another	O
aspect	O
of	O
ga	O
is	O
supporting	O
the	O
evo-	O
lutionary	O
concept	O
of	O
“	O
survival	O
of	O
the	O
ﬁttest	O
”	O
:	O
by	O
using	O
the	O
ﬁtness	B
function	O
we	O
will	O
preferentially	O
“	O
breed	O
”	O
chromosomes	O
with	O
higher	O
ﬁtness	B
values	O
.	O
it	O
is	O
interesting	O
to	O
compare	O
how	O
gas	O
are	O
trained	O
with	O
how	O
we	O
train	O
neural	O
networks	O
(	O
chapter	O
7	O
)	O
.	O
we	O
need	O
to	O
manually	O
“	O
supervise	O
”	O
the	O
training	O
process	O
:	O
for	O
gas	O
we	O
need	O
to	O
supply	O
a	O
ﬁtness	B
function	O
and	O
for	O
the	O
two	O
neural	B
network	I
models	O
used	O
in	O
chapter	O
7	O
we	O
need	O
to	O
supply	O
training	O
data	O
with	O
desired	O
sample	O
outputs	O
for	O
sample	O
inputs	O
.	O
6.1	O
theory	O
gas	O
are	O
typically	O
used	O
to	O
search	B
very	O
large	O
and	O
possibly	O
very	O
high	O
dimensional	O
search	B
spaces	O
.	O
if	O
we	O
want	O
to	O
ﬁnd	O
a	O
solution	O
as	O
a	O
single	O
point	O
in	O
an	O
n	O
dimensional	O
space	O
where	O
a	O
ﬁtness	B
function	O
has	O
a	O
near	O
maximum	O
value	O
,	O
then	O
we	O
have	O
n	O
param-	O
eters	O
to	O
encode	O
in	O
each	O
chromosome	B
.	O
in	O
this	O
chapter	O
we	O
will	O
be	O
solving	O
a	O
simple	O
problem	O
that	O
is	O
one-dimensional	O
so	O
we	O
only	O
need	O
to	O
encode	O
a	O
single	O
number	O
(	O
a	O
ﬂoat-	O
ing	O
point	O
number	O
for	O
this	O
example	O
)	O
in	O
each	O
chromosome	B
.	O
using	O
a	O
ga	O
toolkit	O
,	O
like	O
the	O
one	O
developed	O
in	O
section	O
6.2	O
,	O
requires	O
two	O
problem-speciﬁc	O
customizations	O
:	O
•	O
characterize	O
the	O
search	B
space	O
by	O
a	O
set	O
of	O
parameters	O
that	O
can	O
be	O
encoded	O
in	O
a	O
chromosome	B
(	O
more	O
on	O
this	O
later	O
)	O
.	O
gas	O
work	O
with	O
the	O
coding	O
of	O
a	O
parameter	O
set	O
,	O
not	O
the	O
parameters	O
themselves	O
(	O
genetic	O
algorithms	O
in	O
search	B
,	O
optimiza-	O
99	O
6	O
genetic	O
algorithms	O
figure	O
6.1	O
:	O
the	O
test	O
function	O
evaluated	O
over	O
the	O
interval	O
[	O
0.0	O
,	O
10.0	O
]	O
.	O
the	O
maximum	O
value	O
of	O
0.56	O
occurs	O
at	O
x=3.8	O
tion	O
,	O
and	O
machine	B
learning	I
,	O
david	O
goldberg	O
,	O
1989	O
)	O
.	O
•	O
provide	O
a	O
numeric	O
ﬁtness	B
function	O
that	O
allows	O
us	O
to	O
rate	O
the	O
ﬁtness	B
of	O
each	O
chromosome	B
in	O
a	O
population	O
.	O
we	O
will	O
use	O
these	O
ﬁtness	B
values	O
to	O
determine	O
which	O
chromosomes	O
in	O
the	O
population	O
are	O
most	O
likely	O
to	O
survive	O
and	O
repro-	O
duce	O
using	O
genetic	O
crossover	O
and	O
mutation	B
operations	O
.	O
the	O
ga	O
toolkit	O
developed	O
in	O
this	O
chapter	O
treats	O
genes	O
as	O
a	O
single	O
bit	O
;	O
while	O
you	O
can	O
consider	O
a	O
gene	O
to	O
be	O
an	O
arbitrary	O
data	O
structure	O
,	O
the	O
approach	O
of	O
using	O
single	O
bit	O
genes	O
and	O
specifying	O
the	O
number	O
of	O
genes	O
(	O
or	O
bits	O
)	O
in	O
a	O
chromosome	B
is	O
very	O
ﬂexible	O
.	O
a	O
population	O
is	O
a	O
set	O
of	O
chromosomes	O
.	O
a	O
generation	O
is	O
deﬁned	O
as	O
one	O
reproductive	O
cycle	O
of	O
replacing	O
some	O
elements	O
of	O
the	O
chromosome	B
population	O
with	O
new	O
chromosomes	O
produced	O
by	O
using	O
a	O
genetic	O
crossover	O
operation	O
followed	O
by	O
optionally	O
mutating	O
a	O
few	O
chromosomes	O
in	O
the	O
population	O
.	O
we	O
will	O
describe	O
a	O
simple	O
example	O
problem	O
in	O
this	O
section	O
,	O
write	O
a	O
general	O
purpose	O
library	O
in	O
section	O
6.2	O
,	O
and	O
ﬁnish	O
the	O
chapter	O
in	O
section	O
6.3	O
by	O
solving	O
the	O
problem	O
posed	O
in	O
this	O
section	O
.	O
for	O
a	O
sample	O
problem	O
,	O
suppose	O
that	O
we	O
want	O
to	O
ﬁnd	O
the	O
maximum	O
value	O
of	O
the	O
function	O
f	O
with	O
one	O
independent	O
variable	O
x	O
in	O
equation	O
6.1	O
and	O
as	O
seen	O
in	O
figure	O
6.1	O
:	O
f	O
(	O
x	O
)	O
=	O
sin	O
(	O
x	O
)	O
∗	O
sin	O
(	O
0.4	O
∗	O
x	O
)	O
∗	O
sin	O
(	O
3	O
∗	O
x	O
)	O
(	O
6.1	O
)	O
the	O
problem	O
that	O
we	O
want	O
to	O
solve	O
is	O
ﬁnding	O
a	O
good	O
value	O
of	O
x	O
to	O
ﬁnd	O
a	O
near	O
to	O
possible	O
maximum	O
value	O
of	O
f	O
(	O
x	O
)	O
.	O
to	O
be	O
clear	O
:	O
we	O
encode	O
a	O
ﬂoating	O
point	O
number	O
100	O
6.2	O
java	O
library	O
for	O
genetic	O
algorithms	O
figure	O
6.2	O
:	O
crossover	B
operation	O
as	O
a	O
chromosome	B
made	O
up	O
of	O
a	O
speciﬁc	O
number	O
of	O
bits	O
so	O
any	O
chromosome	B
with	O
randomly	O
set	O
bits	O
will	O
represent	O
some	O
random	O
number	O
in	O
the	O
interval	O
[	O
0	O
,	O
10	O
]	O
.	O
the	O
ﬁtness	B
function	O
is	O
simply	O
the	O
function	O
in	O
equation	O
6.1.	O
figure	O
6.2	O
shows	O
an	O
example	O
of	O
a	O
crossover	B
operation	O
.	O
a	O
random	O
chromosome	B
bit	O
index	O
is	O
chosen	O
,	O
and	O
two	O
chromosomes	O
are	O
“	O
cut	O
”	O
at	O
this	O
this	O
index	O
and	O
swap	O
cut	O
parts	O
.	O
the	O
two	O
original	O
chromosomes	O
in	O
generationn	O
are	O
shown	O
on	O
the	O
left	O
of	O
the	O
ﬁgure	O
and	O
after	O
the	O
crossover	B
operation	O
they	O
produce	O
two	O
new	O
chromosomes	O
in	O
generationn+1	O
shown	O
on	O
the	O
right	O
of	O
the	O
ﬁgure	O
.	O
in	O
addition	O
to	O
using	O
crossover	B
operations	O
to	O
create	O
new	O
chromosomes	O
from	O
existing	O
chromosomes	O
,	O
we	O
will	O
also	O
use	O
genetic	O
mutation	O
:	O
randomly	O
ﬂipping	O
bits	O
in	O
chromo-	O
somes	O
.	O
a	O
ﬁtness	B
function	O
that	O
rates	O
the	O
ﬁtness	B
value	O
of	O
each	O
chromosome	B
allows	O
us	O
to	O
decide	O
which	O
chromosomes	O
to	O
discard	O
and	O
which	O
to	O
use	O
for	O
the	O
next	O
genera-	O
tion	O
:	O
we	O
will	O
use	O
the	O
most	O
ﬁt	O
chromosomes	O
in	O
the	O
population	O
for	O
producing	O
the	O
next	O
generation	O
using	O
crossover	B
and	O
mutation	B
.	O
we	O
will	O
implement	O
a	O
general	O
purpose	O
java	O
ga	O
library	O
in	O
the	O
next	O
section	O
and	O
then	O
solve	O
the	O
example	O
problem	O
posed	O
in	O
this	O
section	O
in	O
section	O
6.3	O
.	O
6.2	O
java	O
library	O
for	O
genetic	O
algorithms	O
the	O
full	O
implementation	O
of	O
the	O
ga	O
library	O
is	O
in	O
the	O
java	O
source	O
ﬁle	O
genetic.java	O
.	O
the	O
following	O
code	O
snippets	O
shows	O
the	O
method	O
signatures	O
deﬁning	O
the	O
public	O
api	O
for	O
the	O
library	O
;	O
note	O
that	O
there	O
are	O
two	O
constructors	O
,	O
the	O
ﬁrst	O
using	O
default	O
values	O
for	O
the	O
fraction	O
of	O
chromosomes	O
on	O
which	O
to	O
perform	O
crossover	B
and	O
mutation	B
operations	O
and	O
the	O
second	O
constructor	O
allows	O
setting	O
explicit	O
values	O
for	O
these	O
parameters	O
:	O
abstract	O
public	O
class	O
genetic	O
{	O
public	O
genetic	O
(	O
int	O
num_genes_per_chromosome	O
,	O
101	O
6	O
genetic	O
algorithms	O
public	O
genetic	O
(	O
int	O
num_genes_per_chromosome	O
,	O
int	O
num_chromosomes	O
)	O
int	O
num_chromosomes	O
,	O
float	O
crossover_fraction	O
,	O
float	O
mutation_fraction	O
)	O
the	O
method	O
sort	O
is	O
used	O
to	O
sort	O
the	O
population	O
of	O
chromosomes	O
in	O
most	O
ﬁt	O
ﬁrst	B
order	I
.	O
the	O
methods	O
getgene	O
and	O
setgene	O
are	O
used	O
to	O
fetch	O
and	O
change	O
the	O
value	O
of	O
any	O
gene	O
(	O
bit	O
)	O
in	O
any	O
chromosome	B
.	O
these	O
methods	O
are	O
protected	O
but	O
you	O
will	O
probably	O
not	O
need	O
to	O
override	O
them	O
in	O
derived	O
classes	O
.	O
protected	O
void	O
sort	O
(	O
)	O
protected	O
boolean	O
getgene	O
(	O
int	O
chromosome	B
,	O
int	O
gene	O
)	O
protected	O
void	O
setgene	O
(	O
int	O
chromosome	B
,	O
int	O
gene	O
,	O
int	O
value	O
)	O
protected	O
void	O
setgene	O
(	O
int	O
chromosome	B
,	O
int	O
gene	O
,	O
boolean	O
value	O
)	O
the	O
methods	O
evolve	O
,	O
docrossovers	O
,	O
dom	O
utations	O
,	O
and	O
doremoveduplicates	O
are	O
utilities	O
for	O
running	O
ga	O
simulations	O
.	O
these	O
methods	O
are	O
protected	O
but	O
you	O
will	O
probably	O
not	O
need	O
to	O
override	O
them	O
in	O
derived	O
classes	O
.	O
protected	O
void	O
evolve	O
(	O
)	O
protected	O
void	O
docrossovers	O
(	O
)	O
protected	O
void	O
domutations	O
(	O
)	O
protected	O
void	O
doremoveduplicates	O
(	O
)	O
when	O
you	O
subclass	O
class	O
genetic	O
you	O
must	O
implement	O
the	O
following	O
abstract	O
method	O
calcf	O
itness	O
that	O
will	O
determine	O
the	O
evolution	O
of	O
chromosomes	O
during	O
the	O
ga	O
sim-	O
ulation	O
.	O
//	O
implement	O
the	O
following	O
method	O
in	O
sub-classes	O
:	O
abstract	O
public	O
void	O
calcfitness	O
(	O
)	O
;	O
}	O
the	O
class	O
chromosome	B
represents	O
a	O
bit	O
set	O
with	O
a	O
speciﬁed	O
number	O
of	O
bits	O
and	O
a	O
ﬂoating	O
point	O
ﬁtness	B
value	O
.	O
102	O
6.2	O
java	O
library	O
for	O
genetic	O
algorithms	O
class	O
chromosome	B
{	O
private	O
chromosome	B
(	O
)	O
public	O
chromosome	B
(	O
int	O
num_genes	O
)	O
public	O
boolean	O
getbit	O
(	O
int	O
index	O
)	O
public	O
void	O
setbit	O
(	O
int	O
index	O
,	O
boolean	O
value	O
)	O
public	O
float	O
getfitness	O
(	O
)	O
public	O
void	O
setfitness	O
(	O
float	O
value	O
)	O
public	O
boolean	O
equals	O
(	O
chromosome	B
c	O
)	O
}	O
the	O
class	O
chromosomecomparator	O
implements	O
a	O
comparator	O
interface	O
and	O
is	O
application	O
speciﬁc	O
:	O
it	O
is	O
used	O
to	O
sort	O
a	O
population	O
in	O
“	O
best	O
ﬁrst	O
”	O
order	O
:	O
class	O
chromosomecomparator	O
implements	O
comparator	O
<	O
chromosome	B
>	O
{	O
public	O
int	O
compare	O
(	O
chromosome	B
o1	O
,	O
chromosome	B
o2	O
)	O
}	O
the	O
last	O
class	O
chromosomecomparator	O
is	O
used	O
when	O
using	O
the	O
java	O
collection	O
class	O
static	O
sort	O
method	O
.	O
the	O
class	O
genetic	O
is	O
an	O
abstract	O
class	O
:	O
you	O
must	O
subclass	O
it	O
and	O
implement	O
the	O
method	O
calcf	O
itness	O
that	O
uses	O
an	O
application	O
speciﬁc	O
ﬁtness	B
function	O
(	O
that	O
you	O
must	O
supply	O
)	O
to	O
set	O
a	O
ﬁtness	B
value	O
for	O
each	O
chromosome	B
.	O
this	O
ga	O
library	O
provides	O
the	O
following	O
behavior	O
:	O
•	O
generates	O
an	O
initial	O
random	O
population	O
with	O
a	O
speciﬁed	O
number	O
of	O
bits	O
(	O
or	O
genes	O
)	O
per	O
chromosome	B
and	O
a	O
speciﬁed	O
number	O
of	O
chromosomes	O
in	O
the	O
popu-	O
lation	O
•	O
ability	O
to	O
evaluate	O
each	O
chromosome	B
based	O
on	O
a	O
numeric	O
ﬁtness	B
function	O
•	O
ability	O
to	O
create	O
new	O
chromosomes	O
from	O
the	O
most	O
ﬁt	O
chromosomes	O
in	O
the	O
population	O
using	O
the	O
genetic	O
crossover	O
and	O
mutation	B
operations	O
there	O
are	O
two	O
class	O
constructors	O
for	O
genetic	O
set	O
up	O
a	O
new	O
ga	O
experiment	O
by	O
setting	O
the	O
number	O
of	O
genes	O
(	O
or	O
bits	O
)	O
per	O
chromosome	B
,	O
and	O
the	O
number	O
of	O
chromosomes	O
in	O
the	O
population	O
.	O
the	O
genetic	O
class	O
constructors	O
build	O
an	O
array	O
of	O
integers	O
roulettew	O
heel	O
which	O
is	O
used	O
to	O
weight	O
the	O
most	O
ﬁt	O
chromosomes	O
in	O
the	O
population	O
for	O
choosing	O
the	O
parents	O
103	O
6	O
genetic	O
algorithms	O
of	O
crossover	B
and	O
mutation	B
operations	O
.	O
when	O
a	O
chromosome	B
is	O
being	O
chosen	O
,	O
a	O
ran-	O
dom	O
integer	O
is	O
selected	O
to	O
be	O
used	O
as	O
an	O
index	O
into	O
the	O
roulettew	O
heel	O
array	O
;	O
the	O
values	O
in	O
the	O
array	O
are	O
all	O
integer	O
indices	O
into	O
the	O
chromosome	B
array	O
.	O
more	O
ﬁt	O
chro-	O
mosomes	O
are	O
heavily	O
weighted	O
in	O
favor	O
of	O
being	O
chosen	O
as	O
parents	O
for	O
the	O
crossover	B
operations	O
.	O
the	O
algorithm	O
for	O
the	O
crossover	B
operation	O
is	O
fairly	O
simple	O
;	O
here	O
is	O
the	O
implementation	O
:	O
public	O
void	O
docrossovers	O
(	O
)	O
{	O
int	O
num	O
=	O
(	O
int	O
)	O
(	O
numchromosomes	O
*	O
crossoverfraction	O
)	O
;	O
for	O
(	O
int	O
i	O
=	O
num	O
-	O
1	O
;	O
i	O
>	O
=	O
0	O
;	O
i	O
--	O
)	O
{	O
//	O
don	O
’	O
t	O
overwrite	O
the	O
``	O
best	O
''	O
chromosome	B
//	O
from	O
current	O
generation	O
:	O
int	O
c1	O
=	O
1	O
+	O
(	O
int	O
)	O
(	O
(	O
roulettewheelsize	O
-	O
1	O
)	O
*	O
math.random	O
(	O
)	O
*	O
0.9999f	O
)	O
;	O
int	O
c2	O
=	O
1	O
+	O
(	O
int	O
)	O
(	O
(	O
roulettewheelsize	O
-	O
1	O
)	O
*	O
math.random	O
(	O
)	O
*	O
0.9999f	O
)	O
;	O
c1	O
=	O
roulettewheel	O
[	O
c1	O
]	O
;	O
c2	O
=	O
roulettewheel	O
[	O
c2	O
]	O
;	O
if	O
(	O
c1	O
!	O
=	O
c2	O
)	O
{	O
int	O
locus	O
=	O
1+	O
(	O
int	O
)	O
(	O
(	O
numgenesperchromosome-2	O
)	O
*	O
math.random	O
(	O
)	O
)	O
;	O
for	O
(	O
int	O
g	O
=	O
0	O
;	O
g	O
<	O
numgenesperchromosome	O
;	O
g++	O
)	O
{	O
if	O
(	O
g	O
<	O
locus	O
)	O
{	O
setgene	O
(	O
i	O
,	O
g	O
,	O
getgene	O
(	O
c1	O
,	O
g	O
)	O
)	O
;	O
}	O
else	O
{	O
setgene	O
(	O
i	O
,	O
g	O
,	O
getgene	O
(	O
c2	O
,	O
g	O
)	O
)	O
;	O
}	O
}	O
}	O
}	O
}	O
the	O
method	O
dom	O
utations	O
is	O
similar	O
to	O
docrossovers	O
:	O
we	O
randomly	O
choose	O
chro-	O
mosomes	O
from	O
the	O
population	O
and	O
for	O
these	O
selected	O
chromosomes	O
we	O
randomly	O
“	O
ﬂip	O
”	O
the	O
value	O
of	O
one	O
gene	O
(	O
a	O
gene	O
is	O
a	O
bit	O
in	O
our	O
implementation	O
)	O
:	O
public	O
void	O
domutations	O
(	O
)	O
{	O
int	O
num	O
=	O
(	O
int	O
)	O
(	O
numchromosomes	O
*	O
mutationfraction	O
)	O
;	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
num	O
;	O
i++	O
)	O
{	O
//	O
don	O
’	O
t	O
overwrite	O
the	O
``	O
best	O
''	O
chromosome	B
//	O
from	O
current	O
generation	O
:	O
int	O
c	O
=	O
1	O
+	O
(	O
int	O
)	O
(	O
(	O
numchromosomes	O
-	O
1	O
)	O
*	O
math.random	O
(	O
)	O
*	O
0.99	O
)	O
;	O
104	O
6.3	O
finding	O
the	O
maximum	O
value	O
of	O
a	O
function	O
int	O
g	O
=	O
(	O
int	O
)	O
(	O
numgenesperchromosome	O
*	O
math.random	O
(	O
)	O
*	O
0.99	O
)	O
;	O
setgene	O
(	O
c	O
,	O
g	O
,	O
!	O
getgene	O
(	O
c	O
,	O
g	O
)	O
)	O
;	O
}	O
}	O
we	O
developed	O
a	O
general	O
purpose	O
library	O
in	O
this	O
section	O
for	O
simulating	O
populations	O
of	O
chromosomes	O
that	O
can	O
evolve	O
to	O
a	O
more	O
“	O
ﬁt	O
”	O
population	O
given	O
a	O
ﬁtness	B
function	O
that	O
ranks	O
individual	O
chromosomes	O
in	O
order	O
of	O
ﬁtness	B
.	O
in	O
section	O
6.3	O
we	O
will	O
develop	O
an	O
example	O
ga	O
application	O
by	O
deﬁning	O
the	O
size	O
of	O
a	O
population	O
and	O
the	O
ﬁtness	B
function	O
deﬁned	O
by	O
equation	O
6.1	O
.	O
6.3	O
finding	O
the	O
maximum	O
value	O
of	O
a	O
function	O
we	O
will	O
use	O
the	O
java	O
library	O
in	O
the	O
last	O
section	O
to	O
develop	O
an	O
example	O
application	O
to	O
ﬁnd	O
the	O
maximum	O
of	O
the	O
function	O
seen	O
in	O
figure	O
6.1	O
which	O
shows	O
a	O
plot	O
of	O
equation	O
6.1	O
plotted	O
in	O
the	O
interval	O
[	O
0	O
,	O
10	O
]	O
.	O
while	O
we	O
could	O
ﬁnd	O
the	O
maximum	O
value	O
of	O
this	O
function	O
by	O
using	O
newton	O
’	O
s	O
method	O
(	O
or	O
even	O
a	O
simple	O
brute	O
force	O
search	B
over	O
the	O
range	O
of	O
the	O
independent	O
variable	O
x	O
)	O
,	O
the	O
ga	O
method	O
scales	O
very	O
well	O
to	O
similar	O
problems	O
of	O
higher	O
dimensionality	O
.	O
the	O
ga	O
also	O
helps	O
us	O
to	O
not	O
ﬁnd	O
just	O
locally	O
optimum	O
solutions	O
.	O
in	O
this	O
example	O
we	O
are	O
working	O
in	O
one	O
dimension	O
so	O
we	O
only	O
need	O
to	O
encode	O
a	O
single	O
variable	O
in	O
a	O
chromo-	O
some	O
.	O
as	O
an	O
example	O
of	O
a	O
higher	O
dimensional	O
system	O
,	O
we	O
might	O
have	O
products	O
of	O
sine	O
waves	O
using	O
20	O
independent	O
variables	O
x1	O
,	O
x2	O
,	O
..x20	O
.	O
still	O
,	O
the	O
one-dimensional	O
case	O
seen	O
in	O
figure	O
6.1	O
is	O
a	O
good	O
example	O
for	O
showing	O
you	O
how	O
to	O
set	O
up	O
a	O
ga	O
simulation	O
.	O
our	O
ﬁrst	O
task	O
is	O
to	O
characterize	O
the	O
search	B
space	O
as	O
one	O
or	O
more	O
parameters	O
.	O
in	O
general	O
when	O
we	O
write	O
ga	O
applications	O
we	O
might	O
need	O
to	O
encode	O
several	O
parameters	O
in	O
a	O
single	O
chromosome	B
.	O
for	O
example	O
,	O
if	O
a	O
ﬁtness	B
function	O
has	O
three	O
arguments	O
we	O
would	O
encode	O
three	O
numbers	O
in	O
a	O
singe	O
chromosome	B
.	O
in	O
this	O
example	O
problem	O
,	O
we	O
have	O
only	O
one	O
parameter	O
,	O
the	O
independent	O
variable	O
x.	O
we	O
will	O
encode	O
the	O
parameter	O
x	O
using	O
ten	O
bits	O
(	O
so	O
we	O
have	O
ten	O
1-bit	O
genes	O
per	O
chromosome	B
)	O
.	O
a	O
good	O
starting	O
place	O
is	O
writing	O
utility	O
method	O
for	O
converting	O
the	O
10-bit	O
representation	O
to	O
a	O
ﬂoating-point	O
number	O
in	O
the	O
range	O
[	O
0.0	O
,	O
10.0	O
]	O
:	O
float	O
genetofloat	O
(	O
int	O
chromosomeindex	O
)	O
{	O
int	O
base	O
=	O
1	O
;	O
float	O
x	O
=	O
0	O
;	O
for	O
(	O
int	O
j=0	O
;	O
j	O
<	O
numgenesperchromosome	O
;	O
j++	O
)	O
{	O
if	O
(	O
getgene	O
(	O
chromosomeindex	O
,	O
j	O
)	O
)	O
{	O
105	O
6	O
genetic	O
algorithms	O
x	O
+=	O
base	O
;	O
}	O
base	O
*=	O
2	O
;	O
}	O
after	O
summing	O
up	O
all	O
on	O
bits	O
times	O
their	O
base2	O
value	O
,	O
we	O
need	O
to	O
normalize	O
what	O
is	O
an	O
integer	O
in	O
the	O
range	O
of	O
[	O
0,1023	O
]	O
to	O
a	O
ﬂoating	O
point	O
number	O
in	O
the	O
approximate	O
range	O
of	O
[	O
0	O
,	O
10	O
]	O
:	O
x	O
/=	O
102.4f	O
;	O
return	O
x	O
;	O
}	O
note	O
that	O
we	O
do	O
not	O
need	O
the	O
reverse	O
method	O
!	O
we	O
use	O
the	O
ga	O
library	O
from	O
section	O
6.2	O
to	O
create	O
a	O
population	O
of	O
10-bit	O
chromosomes	O
;	O
in	O
order	O
to	O
evaluate	O
the	O
ﬁtness	B
of	O
each	O
chromosome	B
in	O
a	O
population	O
,	O
we	O
only	O
have	O
to	O
convert	O
the	O
10-bit	O
represen-	O
tation	O
to	O
a	O
ﬂoating-point	O
number	O
for	O
evaluation	O
using	O
the	O
following	O
ﬁtness	B
function	O
(	O
equation	O
6.1	O
)	O
:	O
private	O
float	O
fitness	O
(	O
float	O
x	O
)	O
{	O
return	O
(	O
float	O
)	O
(	O
math.sin	O
(	O
x	O
)	O
*	O
math.sin	O
(	O
0.4f	O
*	O
x	O
)	O
*	O
math.sin	O
(	O
3.0f	O
*	O
x	O
)	O
)	O
;	O
}	O
table	O
6.1	O
shows	O
some	O
sample	O
random	O
chromosomes	O
and	O
the	O
ﬂoating	O
point	O
numbers	O
that	O
they	O
encode	O
.	O
the	O
ﬁrst	O
column	O
shows	O
the	O
gene	O
indices	O
where	O
the	O
bit	O
is	O
“	O
on	O
,	O
”	O
the	O
second	O
column	O
shows	O
the	O
chromosomes	O
as	O
an	O
integer	O
number	O
represented	O
in	O
binary	O
notation	O
,	O
and	O
the	O
third	O
column	O
shows	O
the	O
ﬂoating	O
point	O
number	O
that	O
the	O
chromosome	B
encodes	O
.	O
the	O
center	O
column	O
in	O
table	O
6.1	O
shows	O
the	O
bits	O
in	O
order	O
where	O
index	O
0	O
is	O
the	O
left-most	O
bit	O
,	O
and	O
index	O
9	O
if	O
the	O
right-most	O
bit	O
;	O
this	O
is	O
the	O
reverse	O
of	O
the	O
normal	O
order	O
for	O
encoding	O
integers	O
but	O
the	O
ga	O
does	O
not	O
care	O
:	O
it	O
works	O
with	O
any	O
encoding	O
we	O
use	O
.	O
once	O
again	O
,	O
gas	O
work	O
with	O
encodings	O
.	O
“	O
on	O
bits	O
”	O
in	O
chromosome	B
as	O
binary	O
2	O
,	O
5	O
,	O
7	O
,	O
8	O
,	O
9	O
0	O
,	O
1	O
,	O
3	O
,	O
5	O
,	O
6	O
0	O
,	O
3	O
,	O
5	O
,	O
6	O
,	O
7	O
,	O
8	O
0010010111	O
1101011000	O
1001011110	O
number	O
encoded	O
9.1015625	O
1.0449219	O
4.7753906	O
table	O
6.1	O
:	O
random	O
chromosomes	O
and	O
the	O
ﬂoating	O
point	O
numbers	O
that	O
they	O
encode	O
using	O
methods	O
genet	O
of	O
loat	O
and	O
f	O
itness	O
we	O
now	O
implement	O
the	O
abstract	O
method	O
calcf	O
itness	O
from	O
our	O
ga	O
library	O
class	O
genetic	O
so	O
the	O
derived	O
class	O
t	O
estgenetic	O
106	O
6.3	O
finding	O
the	O
maximum	O
value	O
of	O
a	O
function	O
is	O
not	O
abstract	O
.	O
this	O
method	O
has	O
the	O
responsibility	O
for	O
calculating	O
and	O
setting	O
the	O
ﬁtness	B
value	O
for	O
every	O
chromosome	B
stored	O
in	O
an	O
instance	O
of	O
class	O
genetic	O
:	O
public	O
void	O
calcfitness	O
(	O
)	O
{	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
numchromosomes	O
;	O
i++	O
)	O
{	O
float	O
x	O
=	O
genetofloat	O
(	O
i	O
)	O
;	O
chromosomes.get	O
(	O
i	O
)	O
.setfitness	O
(	O
fitness	O
(	O
x	O
)	O
)	O
;	O
}	O
}	O
while	O
it	O
was	O
useful	O
to	O
make	O
this	O
example	O
more	O
clear	O
with	O
a	O
separate	O
genet	O
of	O
loat	O
method	O
,	O
it	O
would	O
have	O
also	O
been	O
reasonable	O
to	O
simply	O
place	O
the	O
formula	O
in	O
the	O
method	O
f	O
itness	O
in	O
the	O
implementation	O
of	O
the	O
abstract	O
(	O
in	O
the	O
base	O
class	O
)	O
method	O
calcf	O
itness	O
.	O
in	O
any	O
case	O
we	O
are	O
done	O
with	O
coding	O
this	O
example	O
:	O
you	O
can	O
compile	O
the	O
two	O
example	O
java	O
ﬁles	O
genetic.java	O
and	O
testgenetic.java	O
,	O
and	O
run	O
the	O
t	O
estgenetic	O
class	O
to	O
verify	O
that	O
the	O
example	O
program	O
quickly	O
ﬁnds	O
a	O
near	O
maximum	O
value	O
for	O
this	O
function	O
.	O
you	O
can	O
try	O
setting	O
different	O
numbers	O
of	O
chromosomes	O
in	O
the	O
population	O
and	O
try	O
setting	O
non-default	O
crossover	B
rates	O
of	O
0.85	O
and	O
a	O
mutation	B
rates	O
of	O
0.3.	O
we	O
will	O
look	O
at	O
a	O
run	O
with	O
a	O
small	O
number	O
of	O
chromosomes	O
in	O
the	O
population	O
created	O
with	O
:	O
genetic_experiment	O
=	O
new	O
mygenetic	O
(	O
10	O
,	O
20	O
,	O
0.85f	O
,	O
0.3f	O
)	O
;	O
int	O
num_cycles	O
=	O
500	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
num_cycles	O
;	O
i++	O
)	O
{	O
genetic_experiment.evolve	O
(	O
)	O
;	O
if	O
(	O
(	O
i	O
%	O
(	O
num_cycles/5	O
)	O
)	O
==0	O
||	O
i==	O
(	O
num_cycles-1	O
)	O
)	O
{	O
system.out.println	O
(	O
``	O
generation	O
``	O
+	O
i	O
)	O
;	O
genetic_experiment.print	O
(	O
)	O
;	O
}	O
}	O
in	O
this	O
experiment	O
85	O
%	O
of	O
chromosomes	O
will	O
be	O
“	O
sliced	O
and	O
diced	O
”	O
with	O
a	O
crossover	B
operation	O
and	O
30	O
%	O
will	O
have	O
one	O
of	O
their	O
genes	O
changed	O
.	O
we	O
speciﬁed	O
10	O
bits	O
per	O
chromosome	B
and	O
a	O
population	O
size	O
of	O
20	O
chromosomes	O
.	O
in	O
this	O
example	O
,	O
i	O
have	O
run	O
500	O
evolutionary	O
cycles	O
.	O
after	O
you	O
determine	O
a	O
ﬁtness	B
function	O
to	O
use	O
,	O
you	O
will	O
probably	O
need	O
to	O
experiment	O
with	O
the	O
size	O
of	O
the	O
population	O
and	O
the	O
crossover	B
and	O
mutation	B
rates	O
.	O
since	O
the	O
simulation	O
uses	O
random	O
numbers	O
(	O
and	O
is	O
thus	O
non-	O
deterministic	O
)	O
,	O
you	O
can	O
get	O
different	O
results	O
by	O
simply	O
rerunning	O
the	O
simulation	O
.	O
here	O
is	O
example	O
program	O
output	O
(	O
with	O
much	O
of	O
the	O
output	O
removed	O
for	O
brevity	O
)	O
:	O
count	O
of	O
slots	O
in	O
roulette	O
wheel=55	O
107	O
6	O
genetic	O
algorithms	O
generation	O
0	O
fitness	O
for	O
chromosome	B
0	O
is	O
0.505	O
,	O
occurs	O
at	O
x=7.960	O
fitness	O
for	O
chromosome	B
1	O
is	O
0.461	O
,	O
occurs	O
at	O
x=3.945	O
fitness	O
for	O
chromosome	B
2	O
is	O
0.374	O
,	O
occurs	O
at	O
x=7.211	O
fitness	O
for	O
chromosome	B
3	O
is	O
0.304	O
,	O
occurs	O
at	O
x=3.929	O
fitness	O
for	O
chromosome	B
4	O
is	O
0.231	O
,	O
occurs	O
at	O
x=5.375	O
...	O
fitness	O
for	O
chromosome	B
18	O
is	O
-0.282	O
occurs	O
at	O
x=1.265	O
fitness	O
for	O
chromosome	B
19	O
is	O
-0.495	O
,	O
occurs	O
at	O
x=5.281	O
average	O
fitness=0.090	O
and	O
best	O
fitness	O
for	O
this	O
generation:0.505	O
...	O
generation	O
499	O
fitness	O
for	O
chromosome	B
0	O
is	O
0.561	O
,	O
occurs	O
at	O
x=3.812	O
fitness	O
for	O
chromosome	B
1	O
is	O
0.559	O
,	O
occurs	O
at	O
x=3.703	O
...	O
this	O
example	O
is	O
simple	O
but	O
is	O
intended	O
to	O
be	O
show	O
you	O
how	O
to	O
encode	O
parameters	O
for	O
a	O
problem	O
where	O
you	O
want	O
to	O
search	B
for	O
values	O
to	O
maximize	O
a	O
ﬁtness	B
function	O
that	O
you	O
specify	O
.	O
using	O
the	O
library	O
developed	O
in	O
this	O
chapter	O
you	O
should	O
be	O
able	O
to	O
set	O
up	O
and	O
run	O
a	O
ga	O
simulation	O
for	O
your	O
own	O
applications	O
.	O
108	O
7	O
neural	O
networks	O
neural	O
networks	O
can	O
be	O
used	O
to	O
efﬁciently	O
solve	O
many	O
problems	O
that	O
are	O
intractable	O
or	O
difﬁcult	O
using	O
other	O
ai	O
programming	O
techniques	O
.	O
i	O
spent	O
almost	O
two	O
years	O
on	O
a	O
darpa	O
neural	B
network	I
tools	O
advisory	O
panel	O
,	O
wrote	O
the	O
ﬁrst	O
version	O
of	O
the	O
ansim	O
neural	B
network	I
product	O
,	O
and	O
have	O
used	O
neural	O
networks	O
for	O
a	O
wide	O
range	O
of	O
applica-	O
tion	O
problems	O
(	O
radar	O
interpretation	O
,	O
bomb	O
detection	O
,	O
and	O
as	O
controllers	O
in	O
computer	O
games	O
)	O
.	O
mastering	O
the	O
use	O
of	O
simulated	O
neural	O
networks	O
will	O
allow	O
you	O
to	O
solve	O
many	O
types	O
of	O
problems	O
that	O
are	O
very	O
difﬁcult	O
to	O
solve	O
using	O
other	O
methods	O
.	O
although	O
most	O
of	O
this	O
book	O
is	O
intended	O
to	O
provide	O
practical	O
advice	O
(	O
with	O
some	O
the-	O
oretical	O
background	O
)	O
on	O
using	O
ai	O
programming	O
techniques	O
,	O
i	O
can	O
not	O
imagine	O
being	O
interested	O
in	O
practical	O
ai	O
programming	O
without	O
also	O
wanting	O
to	O
think	O
about	O
the	O
phi-	O
losophy	O
and	O
mechanics	O
of	O
how	O
the	O
human	O
mind	O
works	O
.	O
i	O
hope	O
that	O
my	O
readers	O
share	O
this	O
interest	O
.	O
in	O
this	O
book	O
,	O
we	O
have	O
examined	O
techniques	O
for	O
focused	O
problem	O
solving	O
,	O
concentrat-	O
ing	O
on	O
performing	O
one	O
task	O
at	O
a	O
time	O
.	O
however	O
,	O
the	O
physical	O
structure	O
and	O
dynamics	O
of	O
the	O
human	O
brain	O
is	O
inherently	O
parallel	O
and	O
distributed	O
[	O
parallel	O
distributed	O
pro-	O
cessing	O
:	O
explorations	O
in	O
the	O
microstructure	O
of	O
cognition	O
,	O
rumelhart	O
,	O
mcclelland	O
,	O
etc	O
.	O
1986	O
]	O
.	O
we	O
are	O
experts	O
at	O
doing	O
many	O
things	O
at	O
once	O
.	O
for	O
example	O
,	O
i	O
simul-	O
taneously	O
can	O
walk	O
,	O
talk	O
with	O
my	O
wife	O
,	O
keep	O
our	O
puppy	O
out	O
of	O
cactus	O
,	O
and	O
enjoy	O
the	O
scenery	O
behind	O
our	O
house	O
in	O
sedona	O
,	O
arizona	O
.	O
ai	O
software	O
systems	O
struggle	O
to	O
perform	O
even	O
narrowly	O
deﬁned	O
tasks	O
well	O
,	O
so	O
how	O
is	O
it	O
that	O
we	O
are	O
able	O
to	O
simulta-	O
neously	O
perform	O
several	O
complex	O
tasks	O
?	O
there	O
is	O
no	O
clear	O
or	O
certain	O
answer	O
to	O
this	O
question	O
at	O
this	O
time	O
,	O
but	O
certainly	O
the	O
distributed	O
neural	O
architecture	O
of	O
our	O
brains	O
is	O
a	O
requirement	O
for	O
our	O
abilities	O
.	O
unfortunately	O
,	O
artiﬁcial	O
neural	B
network	I
simulations	O
do	O
not	O
currently	O
address	O
“	O
multi-tasking	O
”	O
(	O
other	O
techniques	O
that	O
do	O
address	O
this	O
issue	O
are	O
multi-agent	O
systems	O
with	O
some	O
form	O
or	O
mediation	O
between	O
agents	O
)	O
.	O
also	O
interesting	O
is	O
the	O
distinction	O
between	O
instinctual	O
behavior	O
and	O
learned	O
behavior	O
.	O
our	O
knowledge	O
of	O
gas	O
from	O
chapter	O
6	O
provides	O
a	O
clue	O
to	O
how	O
the	O
brains	O
of	O
espe-	O
cially	O
lower	O
order	O
animals	O
can	O
be	O
hardwired	O
to	O
provide	O
efﬁcient	O
instinctual	O
behavior	O
under	O
the	O
pressures	O
of	O
evolutionary	O
forces	O
(	O
i.e.	O
,	O
likely	O
survival	O
of	O
more	O
ﬁt	O
individ-	O
uals	O
)	O
.	O
this	O
works	O
by	O
using	O
genetic	O
algorithms	O
to	O
design	O
speciﬁc	O
neural	O
wiring	O
.	O
i	O
have	O
used	O
genetic	O
algorithms	O
to	O
evolve	O
recurrent	O
neural	O
networks	O
for	O
control	O
ap-	O
plications	O
.	O
this	O
work	O
only	O
had	O
partial	O
success	O
but	O
did	O
convince	O
me	O
that	O
biological	O
genetic	O
pressure	O
is	O
probably	O
adequate	O
to	O
“	O
pre-wire	O
”	O
some	O
forms	O
of	O
behavior	O
in	O
nat-	O
ural	O
(	O
biological	O
)	O
neural	O
networks	O
.	O
109	O
7	O
neural	O
networks	O
figure	O
7.1	O
:	O
physical	O
structure	O
of	O
a	O
neuron	B
while	O
we	O
will	O
study	O
supervised	O
learning	O
techniques	O
in	O
this	O
chapter	O
,	O
it	O
is	O
possible	O
to	O
evolve	O
both	O
structure	O
and	O
attributes	O
of	O
neural	O
networks	O
using	O
other	O
types	O
of	O
neural	B
network	I
models	O
like	O
adaptive	O
resonance	O
theory	O
(	O
art	O
)	O
to	O
autonomously	O
learn	O
to	O
classify	O
learning	O
examples	O
without	O
intervention	O
.	O
we	O
will	O
start	O
this	O
chapter	O
by	O
discussing	O
human	O
neuron	B
cells	O
and	O
which	O
features	O
of	O
real	O
neurons	O
that	O
we	O
will	O
model	O
.	O
unfortunately	O
,	O
we	O
do	O
not	O
yet	O
understand	O
all	O
of	O
the	O
biochemical	O
processes	O
that	O
occur	O
in	O
neurons	O
,	O
but	O
there	O
are	O
fairly	O
accurate	O
models	O
available	O
(	O
web	O
search	B
“	O
neuron	B
biochemical	O
”	O
)	O
.	O
neurons	O
are	O
surrounded	O
by	O
thin	O
hair-	O
like	O
structures	O
called	O
dendrites	O
which	O
serve	O
to	O
accept	O
activation	O
from	O
other	O
neurons	O
.	O
neurons	O
sum	O
up	O
activation	O
from	O
their	O
dendrites	O
and	O
each	O
neuron	B
has	O
a	O
threshold	O
value	O
;	O
if	O
the	O
activation	O
summed	O
over	O
all	O
incoming	O
dendrites	O
exceeds	O
this	O
threshold	O
,	O
then	O
the	O
neuron	B
ﬁres	O
,	O
spreading	O
its	O
activation	O
to	O
other	O
neurons	O
.	O
dendrites	O
are	O
very	O
localized	O
around	O
a	O
neuron	B
.	O
output	O
from	O
a	O
neuron	B
is	O
carried	O
by	O
an	O
axon	O
,	O
which	O
is	O
thicker	O
than	O
dendrites	O
and	O
potentially	O
much	O
longer	O
than	O
dendrites	O
in	O
order	O
to	O
affect	O
remote	O
neurons	O
.	O
figure	O
7.1	O
shows	O
the	O
physical	O
structure	O
of	O
a	O
neuron	B
;	O
in	O
general	O
,	O
the	O
neuron	B
’	O
s	O
axon	O
would	O
be	O
much	O
longer	O
than	O
is	O
seen	O
in	O
figure	O
7.1.	O
the	O
axon	O
terminal	O
buttons	O
transfer	O
activation	O
to	O
the	O
dendrites	O
of	O
neurons	O
that	O
are	O
close	O
to	O
the	O
individual	O
button	O
.	O
an	O
individual	O
neuron	B
is	O
connected	O
to	O
up	O
to	O
ten	O
thousand	O
other	O
neurons	O
in	O
this	O
way	O
.	O
the	O
activation	O
absorbed	O
through	O
dendrites	O
is	O
summed	O
together	O
,	O
but	O
the	O
ﬁring	O
of	O
a	O
neuron	B
only	O
occurs	O
when	O
a	O
threshold	O
is	O
passed	O
.	O
7.1	O
hopﬁeld	O
neural	O
networks	O
hopﬁeld	O
neural	O
networks	O
implement	O
associative	O
(	O
or	O
content	O
addressable	O
)	O
memory	O
.	O
a	O
hopﬁeld	O
network	O
is	O
trained	O
using	O
a	O
set	O
of	O
patterns	O
.	O
after	O
training	O
,	O
the	O
network	O
can	O
be	O
shown	O
a	O
pattern	O
similar	O
to	O
one	O
of	O
the	O
training	O
inputs	O
and	O
it	O
will	O
hopefully	O
associate	O
the	O
“	O
noisy	O
”	O
pattern	O
with	O
the	O
correct	O
input	O
pattern	O
.	O
hopﬁeld	O
networks	O
are	O
110	O
7.2	O
java	O
classes	O
for	O
hopﬁeld	O
neural	O
networks	O
very	O
different	O
than	O
back	B
propagation	I
networks	O
(	O
covered	O
later	O
in	O
section	O
7.4	O
)	O
because	O
the	O
training	O
data	O
only	O
contains	O
input	O
examples	O
unlike	O
back	B
propagation	I
networks	O
that	O
are	O
trained	O
to	O
associate	O
desired	O
output	O
patterns	O
with	O
input	O
patterns	O
.	O
internally	O
,	O
the	O
operation	O
of	O
hopﬁeld	O
neural	O
networks	O
is	O
very	O
different	O
than	O
back	B
propagation	I
networks	O
.	O
we	O
use	O
hopﬁeld	O
neural	O
networks	O
to	O
introduce	O
the	O
subject	O
of	O
neural	O
nets	O
because	O
they	O
are	O
very	O
easy	O
to	O
simulate	O
with	O
a	O
program	O
,	O
and	O
they	O
can	O
also	O
be	O
very	O
useful	O
in	O
practical	O
applications	O
.	O
the	O
inputs	O
to	O
hopﬁeld	O
networks	O
can	O
be	O
any	O
dimensionality	O
.	O
hopﬁeld	O
networks	O
are	O
often	O
shown	O
as	O
having	O
a	O
two-dimensional	O
input	O
ﬁeld	O
and	O
are	O
demonstrated	O
recogniz-	O
ing	O
characters	O
,	O
pictures	O
of	O
faces	O
,	O
etc	O
.	O
however	O
,	O
we	O
will	O
lose	O
no	O
generality	O
by	O
imple-	O
menting	O
a	O
hopﬁeld	O
neural	B
network	I
toolkit	O
with	O
one-dimensional	O
inputs	O
because	O
a	O
two-dimensional	O
image	O
can	O
be	O
represented	O
by	O
an	O
equivalent	O
one-dimensional	O
array	O
.	O
how	O
do	O
hopﬁeld	O
networks	O
work	O
?	O
a	O
simple	O
analogy	O
will	O
help	O
.	O
the	O
trained	O
connec-	O
tion	O
weights	O
in	O
a	O
neural	B
network	I
represent	O
a	O
high	O
dimensional	O
space	O
.	O
this	O
space	O
is	O
folded	O
and	O
convoluted	O
with	O
local	O
minima	O
representing	O
areas	O
around	O
training	O
input	O
patterns	O
.	O
for	O
a	O
moment	O
,	O
visualize	O
this	O
very	O
high	O
dimensional	O
space	O
as	O
just	O
being	O
the	O
three	O
dimensional	O
space	O
inside	O
a	O
room	O
.	O
the	O
ﬂoor	O
of	O
this	O
room	O
is	O
a	O
convoluted	O
and	O
curved	O
surface	O
.	O
if	O
you	O
pick	O
up	O
a	O
basketball	O
and	O
bounce	O
it	O
around	O
the	O
room	O
,	O
it	O
will	O
settle	O
at	O
a	O
low	O
point	O
in	O
this	O
curved	O
and	O
convoluted	O
ﬂoor	O
.	O
now	O
,	O
consider	O
that	O
the	O
space	O
of	O
input	O
values	O
is	O
a	O
two-dimensional	O
grid	O
a	O
foot	O
above	O
the	O
ﬂoor	O
.	O
for	O
any	O
new	O
input	O
,	O
that	O
is	O
equivalent	O
to	O
a	O
point	O
deﬁned	O
in	O
horizontal	O
coordinates	O
;	O
if	O
we	O
drop	O
our	O
basketball	O
from	O
a	O
position	O
above	O
an	O
input	O
grid	O
point	O
,	O
the	O
basketball	O
will	O
tend	O
to	O
roll	O
down	O
hill	O
into	O
local	O
gravitational	O
minima	O
.	O
the	O
shape	O
of	O
the	O
curved	O
and	O
convoluted	O
ﬂoor	O
is	O
a	O
calculated	O
function	O
of	O
a	O
set	O
of	O
training	O
input	O
vectors	O
.	O
after	O
the	O
“	O
ﬂoor	O
has	O
been	O
trained	O
”	O
with	O
a	O
set	O
of	O
input	O
vectors	O
,	O
then	O
the	O
operation	O
of	O
dropping	O
the	O
basket-	O
ball	O
from	O
an	O
input	O
grid	O
point	O
is	O
equivalent	O
to	O
mapping	O
a	O
new	O
input	O
into	O
the	O
training	O
example	O
that	O
is	O
closest	O
to	O
this	O
new	O
input	O
using	O
a	O
neural	B
network	I
.	O
a	O
common	O
technique	O
in	O
training	O
and	O
using	O
neural	O
networks	O
is	O
to	O
add	O
noise	O
to	O
training	O
data	O
and	O
weights	O
.	O
in	O
the	O
basketball	O
analogy	O
,	O
this	O
is	O
equivalent	O
to	O
“	O
shaking	O
the	O
room	O
”	O
so	O
that	O
the	O
basketball	O
ﬁnds	O
a	O
good	O
minima	O
to	O
settle	O
into	O
,	O
and	O
not	O
a	O
non-optimal	O
local	O
minima	O
.	O
we	O
use	O
this	O
technique	O
later	O
when	O
implementing	O
back	B
propagation	I
networks	O
.	O
the	O
weights	O
of	O
back	B
propagation	I
networks	O
are	O
also	O
best	O
visualized	O
as	O
deﬁning	O
a	O
very	O
high	O
dimensional	O
space	O
with	O
a	O
manifold	O
that	O
is	O
very	O
convoluted	O
near	O
areas	O
of	O
local	O
minima	O
.	O
these	O
local	O
minima	O
are	O
centered	O
near	O
the	O
coordinates	O
deﬁned	O
by	O
each	O
input	O
vector	O
.	O
7.2	O
java	O
classes	O
for	O
hopﬁeld	O
neural	O
networks	O
the	O
hopﬁeld	O
neural	B
network	I
model	O
is	O
deﬁned	O
in	O
the	O
ﬁle	O
hopﬁeld.java	O
.	O
since	O
this	O
ﬁle	O
only	O
contains	O
about	O
65	O
lines	O
of	O
code	O
,	O
we	O
will	O
look	O
at	O
the	O
code	O
and	O
discuss	O
the	O
111	O
7	O
neural	O
networks	O
algorithms	O
for	O
storing	O
and	O
recall	O
of	O
patterns	O
at	O
the	O
same	O
time	O
.	O
in	O
a	O
hopﬁeld	O
neural	B
network	I
simulation	O
,	O
every	O
neuron	B
is	O
connected	O
to	O
every	O
other	O
neuron	B
.	O
consider	O
a	O
pair	O
of	O
neurons	O
indexed	O
by	O
i	O
and	O
j.	O
there	O
is	O
a	O
weight	O
wi	O
,	O
j	O
between	O
these	O
neurons	O
that	O
corresponds	O
in	O
the	O
code	O
to	O
the	O
array	O
element	O
weight	O
[	O
i	O
,	O
j	O
]	O
.	O
we	O
can	O
deﬁne	O
energy	O
between	O
the	O
associations	O
of	O
these	O
two	O
neurons	O
as	O
:	O
energy	O
[	O
i	O
,	O
j	O
]	O
=	O
−weight	O
[	O
i	O
,	O
j	O
]	O
∗	O
activation	O
[	O
i	O
]	O
∗	O
activation	O
[	O
j	O
]	O
in	O
the	O
hopﬁeld	O
neural	B
network	I
simulator	O
,	O
we	O
store	O
activations	O
(	O
i.e.	O
,	O
the	O
input	O
values	O
)	O
as	O
ﬂoating	O
point	O
numbers	O
that	O
get	O
clamped	O
in	O
value	O
to	O
-1	O
(	O
for	O
off	O
)	O
or	O
+1	O
(	O
for	O
on	O
)	O
.	O
in	O
the	O
energy	O
equation	O
,	O
we	O
consider	O
an	O
activation	O
that	O
is	O
not	O
clamped	O
to	O
a	O
value	O
of	O
one	O
to	O
be	O
zero	O
.	O
this	O
energy	O
is	O
like	O
“	O
gravitational	O
energy	O
potential	O
”	O
using	O
a	O
basketball	O
court	O
analogy	O
:	O
think	O
of	O
a	O
basketball	O
court	O
with	O
an	O
overlaid	O
2d	O
grid	O
,	O
different	O
grid	O
cells	O
on	O
the	O
ﬂoor	O
are	O
at	O
different	O
heights	O
(	O
representing	O
energy	O
levels	O
)	O
and	O
as	O
you	O
throw	O
a	O
basketball	O
on	O
the	O
court	O
,	O
the	O
ball	O
naturally	O
bounces	O
around	O
and	O
ﬁnally	O
stops	O
in	O
a	O
location	O
near	O
to	O
the	O
place	O
you	O
threw	O
the	O
ball	O
,	O
in	O
a	O
low	O
grid	O
cell	O
in	O
the	O
ﬂoor	O
–	O
that	O
is	O
,	O
it	O
settles	O
in	O
a	O
locally	O
low	O
energy	O
level	O
.	O
hopﬁeld	O
networks	O
function	O
in	O
much	O
the	O
same	O
way	O
:	O
when	O
shown	O
a	O
pattern	O
,	O
the	O
network	O
attempts	O
to	O
settle	O
in	O
a	O
local	O
minimum	O
energy	O
point	O
as	O
deﬁned	O
by	O
a	O
previously	O
seen	O
training	O
example	O
.	O
when	O
training	O
a	O
network	O
with	O
a	O
new	O
input	O
,	O
we	O
are	O
looking	O
for	O
a	O
low	O
energy	O
point	O
near	O
the	O
new	O
input	O
vector	O
.	O
the	O
total	O
energy	O
is	O
a	O
sum	O
of	O
the	O
above	O
equation	O
over	O
all	O
(	O
i	O
,	O
j	O
)	O
.	O
the	O
class	O
constructor	O
allocates	O
storage	O
for	O
input	O
values	O
,	O
temporary	O
storage	O
,	O
and	O
a	O
two-dimensional	O
array	O
to	O
store	O
weights	O
:	O
public	O
hopfield	O
(	O
int	O
numinputs	O
)	O
{	O
this.numinputs	O
=	O
numinputs	O
;	O
weights	O
=	O
new	O
float	O
[	O
numinputs	O
]	O
[	O
numinputs	O
]	O
;	O
inputcells	O
=	O
new	O
float	O
[	O
numinputs	O
]	O
;	O
tempstorage	O
=	O
new	O
float	O
[	O
numinputs	O
]	O
;	O
}	O
remember	O
that	O
this	O
model	O
is	O
general	O
purpose	O
:	O
multi-dimensional	O
inputs	O
can	O
be	O
con-	O
verted	O
to	O
an	O
equivalent	O
one-dimensional	O
array	O
.	O
the	O
method	O
addt	O
rainingdata	O
is	O
used	O
to	O
store	O
an	O
input	O
data	O
array	O
for	O
later	O
training	O
.	O
all	O
input	O
values	O
get	O
clamped	O
to	O
an	O
“	O
off	O
”	O
or	O
“	O
on	O
”	O
value	O
by	O
the	O
utility	O
method	O
adjustinput	O
.	O
the	O
utility	O
method	O
truncate	O
truncates	O
ﬂoating-point	O
values	O
to	O
an	O
integer	O
value	O
.	O
the	O
utility	O
method	O
deltaenergy	O
has	O
one	O
argument	O
:	O
an	O
index	O
into	O
the	O
input	O
vector	O
.	O
the	O
class	O
variable	O
tempstorage	O
is	O
set	O
during	O
training	O
to	O
be	O
the	O
sum	O
of	O
a	O
row	O
of	O
trained	O
weights	O
.	O
so	O
,	O
the	O
method	O
deltaenergy	O
returns	O
a	O
measure	O
of	O
the	O
energy	O
difference	O
between	O
the	O
input	O
vector	O
in	O
the	O
current	O
input	O
cells	O
and	O
the	O
training	O
input	O
examples	O
:	O
private	O
float	O
deltaenergy	O
(	O
int	O
index	O
)	O
{	O
112	O
7.2	O
java	O
classes	O
for	O
hopﬁeld	O
neural	O
networks	O
float	O
temp	O
=	O
0.0f	O
;	O
for	O
(	O
int	O
j=0	O
;	O
j	O
<	O
numinputs	O
;	O
j++	O
)	O
{	O
temp	O
+=	O
weights	O
[	O
index	O
]	O
[	O
j	O
]	O
*	O
inputcells	O
[	O
j	O
]	O
;	O
}	O
return	O
2.0f	O
*	O
temp	O
-	O
tempstorage	O
[	O
index	O
]	O
;	O
}	O
the	O
method	O
train	O
is	O
used	O
to	O
set	O
the	O
two-dimensional	O
weight	O
array	O
and	O
the	O
one-	O
dimensional	O
tempstorage	O
array	O
in	O
which	O
each	O
element	O
is	O
the	O
sum	O
of	O
the	O
corre-	O
sponding	O
row	O
in	O
the	O
two-dimensional	O
weight	O
array	O
:	O
public	O
void	O
train	O
(	O
)	O
{	O
for	O
(	O
int	O
j=1	O
;	O
j	O
<	O
numinputs	O
;	O
j++	O
)	O
{	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
j	O
;	O
i++	O
)	O
{	O
for	O
(	O
int	O
n=0	O
;	O
n	O
<	O
trainingdata.size	O
(	O
)	O
;	O
n++	O
)	O
{	O
float	O
[	O
]	O
data	O
=	O
(	O
float	O
[	O
]	O
)	O
trainingdata.elementat	O
(	O
n	O
)	O
;	O
float	O
temp1	O
=	O
adjustinput	O
(	O
data	O
[	O
i	O
]	O
)	O
*	O
adjustinput	O
(	O
data	O
[	O
j	O
]	O
)	O
;	O
weights	O
[	O
j	O
]	O
[	O
i	O
]	O
)	O
;	O
float	O
temp	O
=	O
truncate	O
(	O
temp1	O
+	O
weights	O
[	O
i	O
]	O
[	O
j	O
]	O
=	O
weights	O
[	O
j	O
]	O
[	O
i	O
]	O
=	O
temp	O
;	O
}	O
}	O
}	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
numinputs	O
;	O
i++	O
)	O
{	O
tempstorage	O
[	O
i	O
]	O
=	O
0.0f	O
;	O
for	O
(	O
int	O
j=0	O
;	O
j	O
<	O
i	O
;	O
j++	O
)	O
{	O
tempstorage	O
[	O
i	O
]	O
+=	O
weights	O
[	O
i	O
]	O
[	O
j	O
]	O
;	O
}	O
}	O
}	O
once	O
the	O
arrays	O
weight	O
and	O
tempstorage	O
are	O
deﬁned	O
,	O
it	O
is	O
simple	O
to	O
recall	O
an	O
original	O
input	O
pattern	O
from	O
a	O
similar	O
test	O
pattern	O
:	O
public	O
float	O
[	O
]	O
recall	O
(	O
float	O
[	O
]	O
pattern	O
,	O
int	O
numiterations	O
)	O
{	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
numinputs	O
;	O
i++	O
)	O
{	O
inputcells	O
[	O
i	O
]	O
=	O
pattern	O
[	O
i	O
]	O
;	O
}	O
for	O
(	O
int	O
ii	O
=	O
0	O
;	O
ii	O
<	O
numiterations	O
;	O
ii++	O
)	O
{	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
numinputs	O
;	O
i++	O
)	O
{	O
if	O
(	O
deltaenergy	O
(	O
i	O
)	O
>	O
0.0f	O
)	O
{	O
113	O
7	O
neural	O
networks	O
inputcells	O
[	O
i	O
]	O
=	O
1.0f	O
;	O
}	O
else	O
{	O
inputcells	O
[	O
i	O
]	O
=	O
0.0f	O
;	O
}	O
}	O
}	O
return	O
inputcells	O
;	O
}	O
7.3	O
testing	O
the	O
hopﬁeld	O
neural	B
network	I
class	O
the	O
test	O
program	O
for	O
the	O
hopﬁeld	O
neural	B
network	I
class	O
is	O
t	O
est	O
hopf	O
ield	O
.	O
this	O
test	O
program	O
deﬁned	O
three	O
test	O
input	O
patterns	O
,	O
each	O
with	O
ten	O
values	O
:	O
static	O
float	O
[	O
]	O
data	O
[	O
]	O
=	O
{	O
{	O
1	O
,	O
1	O
,	O
1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
}	O
,	O
{	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
1	O
,	O
1	O
,	O
1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
}	O
,	O
{	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
-1	O
,	O
1	O
,	O
1	O
,	O
1	O
}	O
}	O
;	O
the	O
following	O
code	O
fragment	O
shows	O
how	O
to	O
create	O
a	O
new	O
instance	O
of	O
the	O
hopf	O
ield	O
class	O
and	O
train	O
it	O
to	O
recognize	O
these	O
three	O
test	O
input	O
patterns	O
:	O
test	O
=	O
new	O
hopfield	O
(	O
10	O
)	O
;	O
test.addtrainingdata	O
(	O
data	O
[	O
0	O
]	O
)	O
;	O
test.addtrainingdata	O
(	O
data	O
[	O
1	O
]	O
)	O
;	O
test.addtrainingdata	O
(	O
data	O
[	O
2	O
]	O
)	O
;	O
test.train	O
(	O
)	O
;	O
the	O
static	O
method	O
helper	O
is	O
used	O
to	O
slightly	O
scramble	O
an	O
input	O
pattern	O
,	O
then	O
test	O
the	O
training	O
hopﬁeld	O
neural	B
network	I
to	O
see	O
if	O
the	O
original	O
pattern	O
is	O
re-created	O
:	O
helper	O
(	O
test	O
,	O
``	O
pattern	O
0	O
''	O
,	O
data	O
[	O
0	O
]	O
)	O
;	O
helper	O
(	O
test	O
,	O
``	O
pattern	O
1	O
''	O
,	O
data	O
[	O
1	O
]	O
)	O
;	O
helper	O
(	O
test	O
,	O
``	O
pattern	O
2	O
''	O
,	O
data	O
[	O
2	O
]	O
)	O
;	O
the	O
following	O
listing	O
shows	O
an	O
implementation	O
of	O
the	O
method	O
helper	O
(	O
the	O
called	O
method	O
pp	O
simply	O
formats	O
a	O
ﬂoating	O
point	O
number	O
for	O
printing	O
by	O
clamping	O
it	O
to	O
zero	O
or	O
one	O
)	O
.	O
this	O
version	O
of	O
the	O
code	O
randomly	O
ﬂips	O
one	O
test	O
bit	O
and	O
we	O
will	O
see	O
that	O
the	O
trained	O
hopﬁeld	O
network	O
almost	O
always	O
correctly	O
recognizes	O
the	O
original	O
114	O
7.3	O
testing	O
the	O
hopﬁeld	O
neural	B
network	I
class	O
pattern	O
.	O
the	O
version	O
of	O
method	O
helper	O
included	O
in	O
the	O
zip	O
ﬁle	O
for	O
this	O
book	O
is	O
slightly	O
different	O
in	O
that	O
two	O
bits	O
are	O
randomly	O
ﬂipped	O
(	O
we	O
will	O
later	O
look	O
at	O
sample	O
output	O
with	O
both	O
one	O
and	O
two	O
bits	O
randomly	O
ﬂipped	O
)	O
.	O
private	O
static	O
void	O
helper	O
(	O
hopfield	O
test	O
,	O
string	O
s	O
,	O
float	O
[	O
]	O
test_data	O
)	O
{	O
float	O
[	O
]	O
dd	O
=	O
new	O
float	O
[	O
10	O
]	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
10	O
;	O
i++	O
)	O
{	O
dd	O
[	O
i	O
]	O
=	O
test_data	O
[	O
i	O
]	O
;	O
}	O
int	O
index	O
=	O
(	O
int	O
)	O
(	O
9.0f	O
*	O
(	O
float	O
)	O
math.random	O
(	O
)	O
)	O
;	O
if	O
(	O
dd	O
[	O
index	O
]	O
<	O
0.0f	O
)	O
dd	O
[	O
index	O
]	O
=	O
else	O
float	O
[	O
]	O
rr	O
=	O
test.recall	O
(	O
dd	O
,	O
5	O
)	O
;	O
system.out.print	O
(	O
s+	O
''	O
\noriginal	O
data	O
:	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
10	O
;	O
i++	O
)	O
1.0f	O
;	O
dd	O
[	O
index	O
]	O
=	O
-1.0f	O
;	O
''	O
)	O
;	O
system.out.print	O
(	O
pp	O
(	O
test_data	O
[	O
i	O
]	O
)	O
+	O
``	O
``	O
)	O
;	O
''	O
)	O
;	O
system.out.print	O
(	O
``	O
\nrandomized	O
data	O
:	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
10	O
;	O
i++	O
)	O
system.out.print	O
(	O
pp	O
(	O
dd	O
[	O
i	O
]	O
)	O
+	O
``	O
``	O
)	O
;	O
system.out.print	O
(	O
``	O
\nrecognized	O
pattern	O
:	O
``	O
)	O
;	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
10	O
;	O
i++	O
)	O
system.out.print	O
(	O
pp	O
(	O
rr	O
[	O
i	O
]	O
)	O
+	O
``	O
``	O
)	O
;	O
system.out.println	O
(	O
)	O
;	O
}	O
the	O
following	O
listing	O
shows	O
how	O
to	O
run	O
the	O
program	O
,	O
and	O
lists	O
the	O
example	O
output	O
:	O
java	O
test_hopfield	O
pattern	O
0	O
1	O
1	O
1	O
0	O
0	O
0	O
0	O
0	O
0	O
0	O
original	O
data	O
:	O
randomized	O
data	O
:	O
1	O
1	O
1	O
0	O
0	O
0	O
1	O
0	O
0	O
0	O
recognized	O
pattern	O
:	O
1	O
1	O
1	O
0	O
0	O
0	O
0	O
0	O
0	O
0	O
pattern	O
1	O
0	O
0	O
0	O
1	O
1	O
1	O
0	O
0	O
0	O
0	O
original	O
data	O
:	O
randomized	O
data	O
:	O
1	O
0	O
0	O
1	O
1	O
1	O
0	O
0	O
0	O
0	O
recognized	O
pattern	O
:	O
0	O
0	O
0	O
1	O
1	O
1	O
0	O
0	O
0	O
0	O
pattern	O
2	O
0	O
0	O
0	O
0	O
0	O
0	O
0	O
1	O
1	O
1	O
original	O
data	O
:	O
randomized	O
data	O
:	O
0	O
0	O
0	O
1	O
0	O
0	O
0	O
1	O
1	O
1	O
recognized	O
pattern	O
:	O
0	O
0	O
0	O
0	O
0	O
0	O
0	O
1	O
1	O
1	O
in	O
this	O
listing	O
we	O
see	O
that	O
the	O
three	O
sample	O
training	O
patterns	O
in	O
t	O
est	O
hopf	O
ield.java	O
are	O
re-created	O
after	O
scrambling	O
the	O
data	O
by	O
changing	O
one	O
randomly	O
chosen	O
value	O
to	O
115	O
7	O
neural	O
networks	O
its	O
opposite	O
value	O
.	O
when	O
you	O
run	O
the	O
test	O
program	O
several	O
times	O
you	O
will	O
see	O
occa-	O
sional	O
errors	O
when	O
one	O
random	O
bit	O
is	O
ﬂipped	O
and	O
you	O
will	O
see	O
errors	O
occur	O
more	O
often	O
with	O
two	O
bits	O
ﬂipped	O
.	O
here	O
is	O
an	O
example	O
with	O
two	O
bits	O
ﬂipped	O
per	O
test	O
:	O
the	O
ﬁrst	O
pat-	O
tern	O
is	O
incorrectly	O
reconstructed	O
and	O
the	O
second	O
and	O
third	O
patterns	O
are	O
reconstructed	O
correctly	O
:	O
pattern	O
0	O
1	O
1	O
1	O
0	O
0	O
0	O
0	O
0	O
0	O
0	O
original	O
data	O
:	O
randomized	O
data	O
:	O
0	O
1	O
1	O
0	O
1	O
0	O
0	O
0	O
0	O
0	O
recognized	O
pattern	O
:	O
1	O
1	O
1	O
1	O
1	O
1	O
1	O
0	O
0	O
0	O
pattern	O
1	O
0	O
0	O
0	O
1	O
1	O
1	O
0	O
0	O
0	O
0	O
original	O
data	O
:	O
randomized	O
data	O
:	O
0	O
0	O
0	O
1	O
1	O
1	O
1	O
0	O
1	O
0	O
recognized	O
pattern	O
:	O
0	O
0	O
0	O
1	O
1	O
1	O
0	O
0	O
0	O
0	O
pattern	O
2	O
0	O
0	O
0	O
0	O
0	O
0	O
0	O
1	O
1	O
1	O
original	O
data	O
:	O
randomized	O
data	O
:	O
0	O
0	O
0	O
0	O
0	O
0	O
1	O
1	O
0	O
1	O
recognized	O
pattern	O
:	O
0	O
0	O
0	O
0	O
0	O
0	O
0	O
1	O
1	O
1	O
7.4	O
back	B
propagation	I
neural	O
networks	O
the	O
next	O
neural	B
network	I
model	O
that	O
we	O
will	O
use	O
is	O
called	O
back	B
propagation	I
,	O
also	O
known	O
as	O
back-prop	O
and	O
delta	O
rule	O
learning	O
.	O
in	O
this	O
model	O
,	O
neurons	O
are	O
organized	O
into	O
data	O
structures	O
that	O
we	O
call	O
layers	O
.	O
figure	O
7.2	O
shows	O
a	O
simple	O
neural	B
network	I
with	O
two	O
layers	O
;	O
this	O
network	O
is	O
shown	O
in	O
two	O
different	O
views	O
:	O
just	O
the	O
neurons	O
organized	O
as	O
two	O
one-dimensional	O
arrays	O
,	O
and	O
as	O
two	O
one-dimensional	O
arrays	O
with	O
the	O
connections	O
between	O
the	O
neurons	O
.	O
in	O
our	O
model	O
,	O
there	O
is	O
a	O
connection	O
between	O
two	O
neurons	O
that	O
is	O
characterized	O
by	O
a	O
single	O
ﬂoating-point	O
number	O
that	O
we	O
will	O
call	O
the	O
connection	O
’	O
s	O
weight	O
.	O
a	O
weight	O
wi	O
,	O
j	O
connects	O
input	O
neuron	B
i	O
to	O
output	O
neuron	B
j.	O
in	O
the	O
back	B
propagation	I
model	O
,	O
we	O
always	O
assume	O
that	O
a	O
neuron	B
is	O
connected	O
to	O
every	O
neuron	B
in	O
the	O
previous	O
layer	O
.	O
the	O
key	O
thing	O
is	O
to	O
be	O
able	O
to	O
train	O
a	O
back-prop	O
neural	B
network	I
.	O
training	O
is	O
per-	O
formed	O
by	O
calculating	O
sets	O
of	O
weights	O
for	O
connecting	O
each	O
layer	O
.	O
as	O
we	O
will	O
see	O
,	O
we	O
will	O
train	O
networks	O
by	O
applying	O
input	O
values	O
to	O
the	O
input	O
layer	O
,	O
allowing	O
these	O
values	O
to	O
propagate	O
through	O
the	O
network	O
using	O
the	O
current	O
weight	O
values	O
,	O
and	O
calculating	O
the	O
errors	O
between	O
desired	O
output	O
values	O
and	O
the	O
output	O
values	O
from	O
propagation	O
of	O
input	O
values	O
through	O
the	O
network	O
.	O
initially	O
,	O
weights	O
are	O
set	O
to	O
small	O
random	O
values	O
.	O
you	O
will	O
get	O
a	O
general	O
idea	O
for	O
how	O
this	O
is	O
done	O
in	O
this	O
section	O
and	O
then	O
we	O
will	O
look	O
at	O
java	O
implementation	O
code	O
in	O
section	O
7.5.	O
in	O
figure	O
7.2	O
,	O
we	O
only	O
have	O
two	O
neuron	B
layers	O
,	O
one	O
for	O
the	O
input	O
neurons	O
and	O
one	O
for	O
the	O
output	O
neurons	O
.	O
networks	O
with	O
no	O
hidden	O
layers	O
are	O
not	O
usually	O
useful	O
–	O
i	O
116	O
7.4	O
back	B
propagation	I
neural	O
networks	O
figure	O
7.2	O
:	O
two	O
views	O
of	O
the	O
same	O
two-layer	O
neural	B
network	I
;	O
the	O
view	O
on	O
the	O
right	O
shows	O
the	O
connection	O
weights	O
between	O
the	O
input	O
and	O
output	O
layers	O
as	O
a	O
two-dimensional	O
array	O
.	O
am	O
using	O
the	O
network	O
in	O
figure	O
7.2	O
just	O
to	O
demonstrate	O
layer	O
to	O
layer	O
connections	O
through	O
a	O
weights	O
array	O
.	O
to	O
calculate	O
the	O
activation	O
of	O
the	O
ﬁrst	O
output	O
neuron	B
o1	O
,	O
we	O
evaluate	O
the	O
sum	O
of	O
the	O
products	O
of	O
the	O
input	O
neurons	O
times	O
the	O
appropriate	O
weight	O
values	O
;	O
this	O
sum	O
is	O
input	O
to	O
a	O
sigmoid	O
activation	O
function	O
(	O
see	O
figure	O
7.3	O
)	O
and	O
the	O
result	O
is	O
the	O
new	O
activation	O
value	O
for	O
o1	O
.	O
here	O
is	O
the	O
formula	O
for	O
the	O
simple	O
network	O
in	O
figure	O
7.2	O
:	O
o1	O
=	O
sigmoid	O
(	O
i1	O
∗	O
w	O
[	O
1	O
,	O
1	O
]	O
+	O
i2	O
∗	O
w	O
[	O
2	O
,	O
1	O
]	O
)	O
o2	O
=	O
sigmoid	O
(	O
i2	O
∗	O
w	O
[	O
1	O
,	O
2	O
]	O
+	O
i2	O
∗	O
w	O
[	O
2	O
,	O
2	O
]	O
)	O
figure	O
7.3	O
shows	O
a	O
plot	O
of	O
the	O
sigmoid	O
function	O
and	O
the	O
derivative	O
of	O
the	O
sigmoid	O
function	O
(	O
sigmoidp	O
)	O
.	O
we	O
will	O
use	O
the	O
derivative	O
of	O
the	O
sigmoid	O
function	O
when	O
training	O
a	O
neural	B
network	I
(	O
with	O
at	O
least	O
one	O
hidden	O
neuron	B
layer	O
)	O
with	O
classiﬁed	O
data	O
examples	O
.	O
a	O
neural	B
network	I
like	O
the	O
one	O
seen	O
in	O
figure	O
7.2	O
is	O
trained	O
by	O
using	O
a	O
set	O
of	O
training	O
data	O
.	O
for	O
back	B
propagation	I
networks	O
,	O
training	O
data	O
consists	O
of	O
matched	O
sets	O
of	O
input	O
with	O
matching	O
desired	O
output	O
values	O
.	O
we	O
want	O
to	O
train	O
a	O
network	O
to	O
not	O
only	O
produce	O
the	O
same	O
outputs	O
for	O
training	O
data	O
inputs	O
as	O
appear	O
in	O
the	O
training	O
data	O
,	O
but	O
also	O
to	O
generalize	O
its	O
pattern	O
matching	O
ability	O
based	O
on	O
the	O
training	O
data	O
to	O
be	O
able	O
to	O
match	O
test	O
patterns	O
that	O
are	O
similar	O
to	O
training	O
input	O
patterns	O
.	O
a	O
key	O
here	O
is	O
to	O
balance	O
the	O
size	O
of	O
the	O
network	O
against	O
how	O
much	O
information	O
it	O
must	O
hold	O
.	O
a	O
common	O
mistake	O
when	O
using	O
back-prop	O
networks	O
is	O
to	O
use	O
too	O
large	O
a	O
network	O
:	O
a	O
network	O
that	O
contains	O
too	O
many	O
neurons	O
and	O
connections	O
will	O
simply	O
memorize	O
the	O
training	O
117	O
input	O
1input	O
2output	O
1output	O
2input	O
1input	O
2w1,1w2,1w1,2w2,2output	O
1output	O
2w1,1w1,2w2,2w2,1input	O
neuron	B
layerinput	O
neuron	B
layeroutput	O
neuron	B
layeroutputneuron	O
layer	O
7	O
neural	O
networks	O
figure	O
7.3	O
:	O
sigmoid	O
and	O
derivative	O
of	O
the	O
sigmoid	O
(	O
sigmoidp	O
)	O
functions	O
.	O
this	O
plot	O
was	O
produced	O
by	O
the	O
ﬁle	O
src-neural-networks/graph.java	O
.	O
examples	O
,	O
including	O
any	O
noise	O
in	O
the	O
training	O
data	O
.	O
however	O
,	O
if	O
we	O
use	O
a	O
smaller	O
number	O
of	O
neurons	O
with	O
a	O
very	O
large	O
number	O
of	O
training	O
data	O
examples	O
,	O
then	O
we	O
force	O
the	O
network	O
to	O
generalize	O
,	O
ignoring	O
noise	O
in	O
the	O
training	O
data	O
and	O
learning	O
to	O
recognize	O
important	O
traits	O
in	O
input	O
data	O
while	O
ignoring	O
statistical	O
noise	O
.	O
how	O
do	O
we	O
train	O
a	O
back	B
propagation	I
neural	O
network	O
given	O
that	O
we	O
have	O
a	O
good	O
training	O
data	O
set	O
?	O
the	O
algorithm	O
is	O
quite	O
easy	O
;	O
we	O
will	O
now	O
walk	O
through	O
the	O
simple	O
case	O
of	O
a	O
two-layer	O
network	O
like	O
the	O
one	O
in	O
figure	O
7.2	O
,	O
and	O
later	O
in	O
section	O
7.5	O
we	O
will	O
review	O
the	O
algorithm	O
in	O
more	O
detail	O
when	O
we	O
have	O
either	O
one	O
or	O
two	O
hidden	O
neuron	B
layers	O
between	O
the	O
input	O
and	O
output	O
layers	O
.	O
in	O
order	O
to	O
train	O
the	O
network	O
in	O
figure	O
7.2	O
,	O
we	O
repeat	O
the	O
following	O
learning	O
cycle	O
several	O
times	O
:	O
1.	O
zero	O
out	O
temporary	O
arrays	O
for	O
holding	O
the	O
error	O
at	O
each	O
neuron	B
.	O
the	O
error	O
,	O
starting	O
at	O
the	O
output	O
layer	O
,	O
is	O
the	O
difference	O
between	O
the	O
output	O
value	O
for	O
a	O
speciﬁc	O
output	O
layer	O
neuron	B
and	O
the	O
calculated	O
value	O
from	O
setting	O
the	O
input	O
layer	O
neuron	B
’	O
s	O
activation	O
values	O
to	O
the	O
input	O
values	O
in	O
the	O
current	O
training	O
ex-	O
ample	O
,	O
and	O
letting	O
activation	O
spread	O
through	O
the	O
network	O
.	O
2.	O
update	O
the	O
weight	O
wi	O
,	O
j	O
(	O
where	O
i	O
is	O
the	O
index	O
of	O
an	O
input	O
neuron	B
,	O
and	O
j	O
is	O
the	O
index	O
of	O
an	O
output	O
neuron	B
)	O
using	O
the	O
formula	O
wi	O
,	O
j+	O
=	O
learning	O
rate	O
∗	O
output	O
errorj∗ii	O
(	O
learning	O
rate	O
is	O
a	O
tunable	O
parameter	O
)	O
and	O
output	O
errorj	O
was	O
calculated	O
in	O
step	O
1	O
,	O
and	O
ii	O
is	O
the	O
activation	O
of	O
input	O
neuron	B
at	O
index	O
i.	O
this	O
process	O
is	O
continued	O
to	O
either	O
a	O
maximum	O
number	O
of	O
learning	O
cycles	O
or	O
until	O
the	O
calculated	O
output	O
errors	O
get	O
very	O
small	O
.	O
we	O
will	O
see	O
later	O
that	O
the	O
algorithm	O
is	O
similar	O
but	O
slightly	O
more	O
complicated	O
,	O
when	O
we	O
have	O
hidden	O
neuron	B
layers	O
;	O
the	O
difference	O
is	O
that	O
we	O
will	O
“	O
back	O
propagate	O
”	O
output	O
errors	O
to	O
the	O
hidden	O
layers	O
in	O
order	O
to	O
estimate	O
errors	O
for	O
hidden	O
neurons	O
.	O
we	O
will	O
cover	O
more	O
on	O
this	O
later	O
.	O
this	O
type	O
of	O
neural	O
118	O
7.5	O
a	O
java	O
class	O
library	O
for	O
back	B
propagation	I
figure	O
7.4	O
:	O
capabilities	O
of	O
zero	O
,	O
one	O
,	O
and	O
two	O
hidden	O
neuron	B
layer	O
neural	O
networks	O
.	O
the	O
grayed	O
areas	O
depict	O
one	O
of	O
two	O
possible	O
output	O
values	O
based	O
on	O
two	O
input	O
neuron	B
activation	O
values	O
.	O
note	O
that	O
this	O
is	O
a	O
two-dimensional	O
case	O
for	O
visualization	O
purposes	O
;	O
if	O
a	O
network	O
had	O
ten	O
input	O
neurons	O
instead	O
of	O
two	O
,	O
then	O
these	O
plots	O
would	O
have	O
to	O
be	O
ten-dimensional	O
instead	O
of	O
two-	O
dimensional	O
.	O
network	O
is	O
too	O
simple	O
to	O
solve	O
very	O
many	O
interesting	O
problems	O
,	O
and	O
in	O
practical	O
applications	O
we	O
almost	O
always	O
use	O
either	O
one	O
additional	O
hidden	O
neuron	B
layer	O
or	O
two	O
additional	O
hidden	O
neuron	B
layers	O
.	O
figure	O
7.4	O
shows	O
the	O
types	O
of	O
problems	O
that	O
can	O
be	O
solved	O
by	O
zero	O
hidden	O
layer	O
,	O
one	O
hidden	O
layer	O
,	O
and	O
two	O
hidden	O
layer	O
networks	O
.	O
7.5	O
a	O
java	O
class	O
library	O
for	O
back	B
propagation	I
the	O
back	B
propagation	I
neural	O
network	O
library	O
used	O
in	O
this	O
chapter	O
was	O
written	O
to	O
be	O
easily	O
understood	O
and	O
is	O
useful	O
for	O
many	O
problems	O
.	O
however	O
,	O
one	O
thing	O
that	O
is	O
not	O
in	O
the	O
implementation	O
in	O
this	O
section	O
(	O
it	O
is	O
added	O
in	O
section	O
7.6	O
)	O
is	O
something	O
usually	O
called	O
“	O
momentum	O
”	O
to	O
speed	O
up	O
the	O
training	O
process	O
at	O
a	O
cost	O
of	O
doubling	O
the	O
storage	O
requirements	O
for	O
weights	O
.	O
adding	O
a	O
“	O
momentum	O
”	O
term	O
not	O
only	O
makes	O
learning	O
faster	O
but	O
also	O
increases	O
the	O
chances	O
of	O
sucessfully	O
learning	O
more	O
difﬁcult	O
problems	O
.	O
we	O
will	O
concentrate	O
in	O
this	O
section	O
on	O
implementing	O
a	O
back-prop	O
learning	O
algorithm	O
that	O
works	O
for	O
both	O
one	O
and	O
two	O
hidden	O
layer	O
networks	O
.	O
as	O
we	O
saw	O
in	O
figure	O
7.4	O
a	O
network	O
with	O
two	O
hidden	O
layers	O
is	O
capable	O
of	O
arbitrary	O
mappings	O
of	O
input	O
to	O
output	O
values	O
so	O
there	O
is	O
no	O
theoretical	O
reason	O
that	O
i	O
know	O
of	O
for	O
using	O
networks	O
with	O
three	O
hidden	O
layers	O
.	O
the	O
source	O
directory	O
src-neural-networks	O
contains	O
example	O
programs	O
for	O
both	O
back	O
119	O
7	O
neural	O
networks	O
figure	O
7.5	O
:	O
example	O
backpropagation	O
neural	B
network	I
with	O
one	O
hidden	O
layer	O
.	O
figure	O
7.6	O
:	O
example	O
backpropagation	O
neural	B
network	I
with	O
two	O
hidden	O
layers	O
.	O
120	O
7.5	O
a	O
java	O
class	O
library	O
for	O
back	B
propagation	I
propagation	O
neural	O
networks	O
and	O
hopﬁeld	O
neural	O
networks	O
which	O
we	O
saw	O
at	O
the	O
beginning	O
of	O
this	O
chapter	O
.	O
the	O
relevant	O
ﬁles	O
for	O
the	O
back	B
propagation	I
examples	O
are	O
:	O
•	O
neural	O
1h.java	O
–	O
contains	O
a	O
class	O
for	O
simulating	O
a	O
neural	B
network	I
with	O
one	O
hidden	O
neuron	B
layer	O
•	O
test	O
1h.java	O
–	O
a	O
text-based	O
test	O
program	O
for	O
the	O
class	O
neural	O
1h	O
•	O
guitest	O
1h.java	O
–	O
a	O
gui-based	O
test	O
program	O
for	O
the	O
class	O
neural	O
1h	O
•	O
neural	O
2h.java	O
–	O
contains	O
a	O
class	O
for	O
simulating	O
a	O
neural	B
network	I
with	O
two	O
hidden	O
neuron	B
layers	O
•	O
neural	O
2h	O
momentum.java	O
–	O
contains	O
a	O
class	O
for	O
simulating	O
a	O
neural	B
network	I
with	O
two	O
hidden	O
neuron	B
layers	O
and	O
implements	O
momentum	O
learning	O
(	O
imple-	O
mented	O
in	O
section	O
7.6	O
)	O
•	O
test	O
2h.java	O
–	O
a	O
text-based	O
test	O
program	O
for	O
the	O
class	O
neural	O
2h	O
•	O
guitest	O
2h.java	O
–	O
a	O
gui-based	O
test	O
program	O
for	O
the	O
class	O
neural	O
2h	O
•	O
guitest	O
2h	O
momentum.java	O
–	O
a	O
gui-based	O
test	O
program	O
for	O
the	O
class	O
neu-	O
ral	O
2h	O
momentum	O
that	O
uses	O
momentum	O
learning	O
(	O
implemented	O
in	O
section	O
7.6	O
)	O
•	O
plot1dpanel	O
–	O
a	O
java	O
jfc	O
graphics	O
panel	O
for	O
the	O
values	O
of	O
a	O
one-dimensional	O
array	O
of	O
ﬂoating	O
point	O
values	O
•	O
plot2dpanel	O
–	O
a	O
java	O
jfc	O
graphics	O
panel	O
for	O
the	O
values	O
of	O
a	O
two-dimensional	O
array	O
of	O
ﬂoating	O
point	O
values	O
the	O
gui	O
ﬁles	O
are	O
for	O
demonstration	O
purposes	O
only	O
,	O
and	O
we	O
will	O
not	O
discuss	O
the	O
code	O
for	O
these	O
classes	O
;	O
if	O
you	O
are	O
interested	O
in	O
the	O
demo	O
graphics	O
code	O
and	O
do	O
not	O
know	O
jfc	O
java	O
programming	O
,	O
there	O
are	O
a	O
few	O
good	O
jfc	O
tutorials	O
at	O
the	O
web	O
site	O
java.sun.com	O
.	O
it	O
is	O
common	O
to	O
implement	O
back-prop	O
libraries	O
to	O
handle	O
either	O
zero	O
,	O
one	O
,	O
or	O
two	O
hidden	O
layers	O
in	O
the	O
same	O
code	O
base	O
.	O
at	O
the	O
risk	O
of	O
having	O
to	O
repeat	O
similar	O
code	O
in	O
two	O
different	O
classes	O
,	O
i	O
decided	O
to	O
make	O
the	O
n	O
eural	O
1h	O
and	O
n	O
eural	O
2h	O
classes	O
distinct	O
.	O
i	O
think	O
that	O
this	O
makes	O
the	O
code	O
a	O
little	O
easier	O
for	O
you	O
to	O
understand	O
.	O
as	O
a	O
practical	O
point	O
,	O
you	O
will	O
almost	O
always	O
start	O
solving	O
a	O
neural	B
network	I
problem	O
using	O
only	O
one	O
hidden	O
layer	O
and	O
only	O
progress	O
to	O
trying	O
two	O
hidden	O
layers	O
if	O
you	O
can	O
not	O
train	O
a	O
one	O
hidden	O
layer	O
network	O
to	O
solve	O
the	O
problem	O
at-hand	O
with	O
sufﬁciently	O
small	O
error	O
when	O
tested	O
with	O
data	O
that	O
is	O
different	O
than	O
the	O
original	O
training	O
data	O
.	O
one	O
hidden	O
layer	O
networks	O
require	O
less	O
storage	O
space	O
and	O
run	O
faster	O
in	O
simulation	O
than	O
two	O
hidden	O
layer	O
networks	O
.	O
in	O
this	O
section	O
we	O
will	O
only	O
look	O
at	O
the	O
implementation	O
of	O
the	O
class	O
n	O
eural	O
2h	O
121	O
7	O
neural	O
networks	O
(	O
class	O
n	O
eural	O
1h	O
is	O
simpler	O
and	O
when	O
you	O
understand	O
how	O
n	O
eural	O
2h	O
works	O
,	O
the	O
simpler	O
class	O
is	O
easy	O
to	O
understand	O
also	O
)	O
.	O
this	O
class	O
implements	O
the	O
serializable	O
interface	O
and	O
contains	O
a	O
utility	O
method	O
save	O
to	O
write	O
a	O
trained	O
network	O
to	O
a	O
disk	O
ﬁle	O
:	O
class	O
neural_2h	O
implements	O
serializable	O
{	O
there	O
is	O
a	O
static	O
factory	O
method	O
that	O
reads	O
a	O
saved	O
network	O
ﬁle	O
from	O
disk	O
and	O
builds	O
an	O
instance	O
of	O
n	O
eural	O
2h	O
and	O
there	O
is	O
a	O
class	O
constructor	O
that	O
builds	O
a	O
new	O
un-	O
trained	O
network	O
in	O
memory	O
,	O
given	O
the	O
number	O
of	O
neurons	O
in	O
each	O
layer	O
:	O
public	O
static	O
neural_2h	O
factory	O
(	O
string	O
serialized_file_name	O
)	O
public	O
neural_2h	O
(	O
int	O
num_in	O
,	O
int	O
num_hidden1	O
,	O
int	O
num_hidden2	O
,	O
int	O
num_output	O
)	O
an	O
instance	O
of	O
n	O
eural	O
2h	O
contains	O
training	O
data	O
as	O
transient	O
data	O
that	O
is	O
not	O
saved	O
by	O
method	O
save	O
.	O
transient	O
protected	O
arraylist	O
inputtraining	O
=	O
new	O
vector	O
(	O
)	O
;	O
transient	O
protected	O
arraylist	O
outputtraining	O
=	O
new	O
vector	O
(	O
)	O
;	O
i	O
want	O
the	O
training	O
examples	O
to	O
be	O
native	O
ﬂoat	O
arrays	O
so	O
i	O
used	O
generic	O
arraylist	O
containers	O
.	O
you	O
will	O
usually	O
need	O
to	O
experiment	O
with	O
training	O
parameters	O
in	O
or-	O
der	O
to	O
solve	O
difﬁcult	O
problems	O
.	O
the	O
learning	O
rate	O
not	O
only	O
controls	O
how	O
large	O
the	O
weight	O
corrections	O
we	O
make	O
each	O
learning	O
cycle	O
but	O
this	O
parameter	O
also	O
affects	O
whether	O
we	O
can	O
break	O
out	O
of	O
local	O
minimum	O
.	O
other	O
parameters	O
that	O
affect	O
learn-	O
ing	O
are	O
the	O
ranges	O
of	O
initial	O
random	O
weight	O
values	O
that	O
are	O
hardwired	O
in	O
the	O
method	O
randomizew	O
eights	O
(	O
)	O
and	O
the	O
small	O
random	O
values	O
that	O
we	O
add	O
to	O
weights	O
during	O
the	O
training	O
cycles	O
;	O
these	O
values	O
are	O
set	O
in	O
in	O
slightlyrandomizew	O
eights	O
(	O
)	O
.	O
i	O
usually	O
only	O
need	O
to	O
adjust	O
the	O
learning	O
rate	O
when	O
training	O
back-prop	O
networks	O
:	O
public	O
float	O
training_rate	O
=	O
0.5f	O
;	O
i	O
often	O
decrease	O
the	O
learning	O
rate	O
during	O
training	O
–	O
that	O
is	O
,	O
i	O
start	O
with	O
a	O
large	O
learn-	O
ing	O
rate	O
and	O
gradually	O
reduce	O
it	O
during	O
training	O
.	O
the	O
calculation	O
for	O
output	O
neu-	O
ron	O
values	O
given	O
a	O
set	O
of	O
inputs	O
and	O
the	O
current	O
weight	O
values	O
is	O
simple	O
.	O
i	O
placed	O
the	O
code	O
for	O
calculating	O
a	O
forward	O
pass	O
through	O
the	O
network	O
in	O
a	O
separate	O
method	O
f	O
orwardp	O
ass	O
(	O
)	O
because	O
it	O
is	O
also	O
used	O
later	O
in	O
the	O
method	O
training	O
:	O
122	O
7.5	O
a	O
java	O
class	O
library	O
for	O
back	B
propagation	I
public	O
float	O
[	O
]	O
recall	O
(	O
float	O
[	O
]	O
in	O
)	O
{	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
numinputs	O
;	O
i++	O
)	O
inputs	O
[	O
i	O
]	O
=	O
in	O
[	O
i	O
]	O
;	O
forwardpass	O
(	O
)	O
;	O
float	O
[	O
]	O
ret	O
=	O
new	O
float	O
[	O
numoutputs	O
]	O
;	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
numoutputs	O
;	O
i++	O
)	O
ret	O
[	O
i	O
]	O
=	O
outputs	O
[	O
i	O
]	O
;	O
return	O
ret	O
;	O
}	O
public	O
void	O
forwardpass	O
(	O
)	O
{	O
for	O
(	O
int	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden1	O
;	O
h++	O
)	O
{	O
hidden1	O
[	O
h	O
]	O
=	O
0.0f	O
;	O
}	O
for	O
(	O
int	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden2	O
;	O
h++	O
)	O
{	O
hidden2	O
[	O
h	O
]	O
=	O
0.0f	O
;	O
}	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
numinputs	O
;	O
i++	O
)	O
{	O
for	O
(	O
int	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden1	O
;	O
h++	O
)	O
{	O
hidden1	O
[	O
h	O
]	O
+=	O
inputs	O
[	O
i	O
]	O
*	O
w1	O
[	O
i	O
]	O
[	O
h	O
]	O
;	O
}	O
}	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
numhidden1	O
;	O
i++	O
)	O
{	O
for	O
(	O
int	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden2	O
;	O
h++	O
)	O
{	O
hidden2	O
[	O
h	O
]	O
+=	O
hidden1	O
[	O
i	O
]	O
*	O
w2	O
[	O
i	O
]	O
[	O
h	O
]	O
;	O
}	O
}	O
for	O
(	O
int	O
o	O
=	O
0	O
;	O
o	O
<	O
numoutputs	O
;	O
o++	O
)	O
outputs	O
[	O
o	O
]	O
=	O
0.0f	O
;	O
for	O
(	O
int	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden2	O
;	O
h++	O
)	O
{	O
for	O
(	O
int	O
o	O
=	O
0	O
;	O
o	O
<	O
numoutputs	O
;	O
o++	O
)	O
{	O
outputs	O
[	O
o	O
]	O
+=	O
sigmoid	O
(	O
hidden2	O
[	O
h	O
]	O
)	O
*	O
w3	O
[	O
h	O
]	O
[	O
o	O
]	O
;	O
}	O
}	O
}	O
while	O
the	O
code	O
for	O
recall	O
and	O
f	O
orwardp	O
ass	O
is	O
almost	O
trivial	O
,	O
the	O
training	O
code	O
in	O
method	O
train	O
is	O
more	O
complex	O
and	O
we	O
will	O
go	O
through	O
it	O
in	O
some	O
detail	O
.	O
before	O
we	O
get	O
to	O
the	O
code	O
,	O
i	O
want	O
to	O
mention	O
that	O
there	O
are	O
two	O
primary	O
techniques	O
for	O
training	O
back-prop	O
networks	O
.	O
the	O
technique	O
that	O
i	O
use	O
is	O
to	O
update	O
the	O
weight	O
arrays	O
after	O
each	O
individual	O
training	O
example	O
.	O
the	O
other	O
technique	O
is	O
to	O
sum	O
all	O
output	O
errors	O
123	O
7	O
neural	O
networks	O
over	O
the	O
entire	O
training	O
set	O
(	O
or	O
part	O
of	O
the	O
training	O
set	O
)	O
and	O
then	O
calculate	O
weight	O
updates	O
.	O
in	O
the	O
following	O
discussion	O
,	O
i	O
am	O
going	O
to	O
weave	O
my	O
comments	O
on	O
the	O
code	O
into	O
the	O
listing	O
.	O
the	O
private	O
member	O
variable	O
current	O
example	O
is	O
used	O
to	O
cycle	O
through	O
the	O
training	O
examples	O
:	O
one	O
training	O
example	O
is	O
processed	O
each	O
time	O
that	O
the	O
train	O
method	O
is	O
called	O
:	O
private	O
int	O
current_example	O
=	O
0	O
;	O
public	O
float	O
train	O
(	O
arraylist	O
ins	O
,	O
arraylist	O
v_outs	O
)	O
{	O
before	O
starting	O
a	O
training	O
cycle	O
for	O
one	O
example	O
,	O
we	O
zero	O
out	O
the	O
arrays	O
used	O
to	O
hold	O
the	O
output	O
layer	O
errors	O
and	O
the	O
errors	O
that	O
are	O
back	O
propagated	O
to	O
the	O
hidden	O
layers	O
.	O
we	O
also	O
need	O
to	O
copy	O
the	O
training	O
example	O
input	O
values	O
and	O
output	O
values	O
:	O
int	O
i	O
,	O
h	O
,	O
o	O
;	O
float	O
error	O
=	O
0.0f	O
;	O
int	O
num_cases	O
=	O
ins.size	O
(	O
)	O
;	O
//for	O
(	O
int	O
example=0	O
;	O
example	O
<	O
num_cases	O
;	O
example++	O
)	O
{	O
//	O
zero	O
out	O
error	O
arrays	O
:	O
for	O
(	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden1	O
;	O
h++	O
)	O
hidden1_errors	O
[	O
h	O
]	O
=	O
0.0f	O
;	O
for	O
(	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden2	O
;	O
h++	O
)	O
hidden2_errors	O
[	O
h	O
]	O
=	O
0.0f	O
;	O
for	O
(	O
o	O
=	O
0	O
;	O
o	O
<	O
numoutputs	O
;	O
o++	O
)	O
output_errors	O
[	O
o	O
]	O
=	O
0.0f	O
;	O
//	O
copy	O
the	O
input	O
values	O
:	O
for	O
(	O
i	O
=	O
0	O
;	O
i	O
<	O
numinputs	O
;	O
i++	O
)	O
{	O
inputs	O
[	O
i	O
]	O
=	O
(	O
(	O
float	O
[	O
]	O
)	O
ins.get	O
(	O
current_example	O
)	O
)	O
[	O
i	O
]	O
;	O
}	O
//	O
copy	O
the	O
output	O
values	O
:	O
float	O
[	O
]	O
outs	O
=	O
(	O
float	O
[	O
]	O
)	O
v_outs.get	O
(	O
current_example	O
)	O
;	O
we	O
need	O
to	O
propagate	O
the	O
training	O
example	O
input	O
values	O
through	O
the	O
hidden	O
layers	O
to	O
the	O
output	O
layers	O
.	O
we	O
use	O
the	O
current	O
values	O
of	O
the	O
weights	O
:	O
forwardpass	O
(	O
)	O
;	O
after	O
propagating	O
the	O
input	O
values	O
to	O
the	O
output	O
layer	O
,	O
we	O
need	O
to	O
calculate	O
the	O
output	O
error	O
for	O
each	O
output	O
neuron	B
.	O
this	O
error	O
is	O
the	O
difference	O
between	O
the	O
desired	O
output	O
and	O
the	O
calculated	O
output	O
;	O
this	O
difference	O
is	O
multiplied	O
by	O
the	O
value	O
of	O
the	O
calculated	O
124	O
7.5	O
a	O
java	O
class	O
library	O
for	O
back	B
propagation	I
output	O
neuron	B
value	O
that	O
is	O
ﬁrst	O
modiﬁed	O
by	O
the	O
sigmoid	O
function	O
that	O
we	O
saw	O
in	O
figure	O
7.3.	O
the	O
sigmoid	O
function	O
is	O
to	O
clamp	O
the	O
calculated	O
output	O
value	O
to	O
a	O
reasonable	O
range	O
.	O
for	O
(	O
o	O
=	O
0	O
;	O
o	O
<	O
numoutputs	O
;	O
o++	O
)	O
{	O
output_errors	O
[	O
o	O
]	O
=	O
(	O
outs	O
[	O
o	O
]	O
-	O
outputs	O
[	O
o	O
]	O
)	O
*	O
sigmoidp	O
(	O
outputs	O
[	O
o	O
]	O
)	O
;	O
}	O
the	O
errors	O
for	O
the	O
neuron	B
activation	O
values	O
in	O
the	O
second	O
hidden	O
layer	O
(	O
the	O
hidden	O
layer	O
connected	O
to	O
the	O
output	O
layer	O
)	O
are	O
estimated	O
by	O
summing	O
for	O
each	O
hidden	O
neu-	O
ron	O
its	O
contribution	O
to	O
the	O
errors	O
of	O
the	O
output	O
layer	O
neurons	O
.	O
the	O
thing	O
to	O
notice	O
is	O
that	O
if	O
the	O
connection	O
weight	O
value	O
between	O
hidden	O
neuron	B
h	O
and	O
output	O
neuron	B
o	O
is	O
large	O
,	O
then	O
hidden	O
neuron	B
h	O
is	O
contributing	O
more	O
to	O
the	O
error	O
of	O
output	O
neuron	B
o	O
than	O
other	O
neurons	O
with	O
smaller	O
connecting	O
weight	O
values	O
:	O
for	O
(	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden2	O
;	O
h++	O
)	O
{	O
hidden2_errors	O
[	O
h	O
]	O
=	O
0.0f	O
;	O
for	O
(	O
o	O
=	O
0	O
;	O
o	O
<	O
numoutputs	O
;	O
o++	O
)	O
{	O
hidden2_errors	O
[	O
h	O
]	O
+=	O
output_errors	O
[	O
o	O
]	O
*	O
w3	O
[	O
h	O
]	O
[	O
o	O
]	O
;	O
}	O
}	O
we	O
estimate	O
the	O
errors	O
in	O
activation	O
energy	O
for	O
the	O
ﬁrst	O
hidden	O
layer	O
neurons	O
by	O
using	O
the	O
estimated	O
errors	O
for	O
the	O
second	O
hidden	O
layers	O
that	O
we	O
calculated	O
in	O
the	O
last	O
code	O
snippet	O
:	O
for	O
(	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden1	O
;	O
h++	O
)	O
{	O
hidden1_errors	O
[	O
h	O
]	O
=	O
0.0f	O
;	O
for	O
(	O
o	O
=	O
0	O
;	O
o	O
<	O
numhidden2	O
;	O
o++	O
)	O
{	O
hidden1_errors	O
[	O
h	O
]	O
+=	O
hidden2_errors	O
[	O
o	O
]	O
*	O
w2	O
[	O
h	O
]	O
[	O
o	O
]	O
;	O
}	O
}	O
after	O
we	O
have	O
scaled	O
estimates	O
for	O
the	O
activation	O
energy	O
errors	O
for	O
both	O
hidden	O
lay-	O
ers	O
we	O
then	O
want	O
to	O
scale	O
the	O
error	O
estimates	O
using	O
the	O
derivative	O
of	O
the	O
sigmoid	O
function	O
’	O
s	O
value	O
of	O
each	O
hidden	O
neuron	B
’	O
s	O
activation	O
energy	O
:	O
125	O
7	O
neural	O
networks	O
for	O
(	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden2	O
;	O
h++	O
)	O
{	O
hidden2_errors	O
[	O
h	O
]	O
=	O
hidden2_errors	O
[	O
h	O
]	O
*	O
sigmoidp	O
(	O
hidden2	O
[	O
h	O
]	O
)	O
;	O
}	O
for	O
(	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden1	O
;	O
h++	O
)	O
{	O
hidden1_errors	O
[	O
h	O
]	O
=	O
hidden1_errors	O
[	O
h	O
]	O
*	O
sigmoidp	O
(	O
hidden1	O
[	O
h	O
]	O
)	O
;	O
}	O
now	O
that	O
we	O
have	O
estimates	O
for	O
the	O
hidden	O
layer	O
neuron	B
errors	O
,	O
we	O
update	O
the	O
weights	O
connecting	O
to	O
the	O
output	O
layer	O
and	O
each	O
hidden	O
layer	O
by	O
adding	O
the	O
product	O
of	O
the	O
current	O
learning	O
rate	O
,	O
the	O
estimated	O
error	O
of	O
each	O
weight	O
’	O
s	O
target	O
neuron	B
,	O
and	O
the	O
value	O
of	O
the	O
weight	O
’	O
s	O
source	O
neuron	B
:	O
//	O
update	O
the	O
hidden2	O
to	O
output	O
weights	O
:	O
for	O
(	O
o	O
=	O
0	O
;	O
o	O
<	O
numoutputs	O
;	O
o++	O
)	O
{	O
for	O
(	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden2	O
;	O
h++	O
)	O
{	O
w3	O
[	O
h	O
]	O
[	O
o	O
]	O
+=	O
training_rate	O
*	O
output_errors	O
[	O
o	O
]	O
*	O
hidden2	O
[	O
h	O
]	O
;	O
w3	O
[	O
h	O
]	O
[	O
o	O
]	O
=	O
clampweight	O
(	O
w3	O
[	O
h	O
]	O
[	O
o	O
]	O
)	O
;	O
}	O
}	O
//	O
update	O
the	O
hidden1	O
to	O
hidden2	O
weights	O
:	O
for	O
(	O
o	O
=	O
0	O
;	O
o	O
<	O
numhidden2	O
;	O
o++	O
)	O
{	O
for	O
(	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden1	O
;	O
h++	O
)	O
{	O
w2	O
[	O
h	O
]	O
[	O
o	O
]	O
+=	O
training_rate	O
*	O
hidden2_errors	O
[	O
o	O
]	O
*	O
hidden1	O
[	O
h	O
]	O
;	O
w2	O
[	O
h	O
]	O
[	O
o	O
]	O
=	O
clampweight	O
(	O
w2	O
[	O
h	O
]	O
[	O
o	O
]	O
)	O
;	O
}	O
}	O
//	O
update	O
the	O
input	O
to	O
hidden1	O
weights	O
:	O
for	O
(	O
h	O
=	O
0	O
;	O
h	O
<	O
numhidden1	O
;	O
h++	O
)	O
{	O
for	O
(	O
i	O
=	O
0	O
;	O
i	O
<	O
numinputs	O
;	O
i++	O
)	O
{	O
w1	O
[	O
i	O
]	O
[	O
h	O
]	O
+=	O
training_rate	O
*	O
hidden1_errors	O
[	O
h	O
]	O
*	O
inputs	O
[	O
i	O
]	O
;	O
w1	O
[	O
i	O
]	O
[	O
h	O
]	O
=	O
clampweight	O
(	O
w1	O
[	O
i	O
]	O
[	O
h	O
]	O
)	O
;	O
}	O
}	O
for	O
(	O
o	O
=	O
0	O
;	O
o	O
<	O
numoutputs	O
;	O
o++	O
)	O
{	O
error	O
+=	O
math.abs	O
(	O
outs	O
[	O
o	O
]	O
-	O
outputs	O
[	O
o	O
]	O
)	O
;	O
}	O
the	O
last	O
step	O
in	O
this	O
code	O
snippet	O
was	O
to	O
calculate	O
an	O
average	O
error	O
over	O
all	O
output	O
neurons	O
for	O
this	O
training	O
example	O
.	O
this	O
is	O
important	O
so	O
that	O
we	O
can	O
track	O
the	O
training	O
126	O
7.6	O
adding	O
momentum	O
to	O
speed	O
up	O
back-prop	O
training	O
status	O
in	O
real	O
time	O
.	O
for	O
very	O
long	O
running	O
back-prop	O
training	O
experiments	O
i	O
like	O
to	O
be	O
able	O
to	O
see	O
this	O
error	O
graphed	O
in	O
real	O
time	O
to	O
help	O
decide	O
when	O
to	O
stop	O
a	O
training	O
run	O
.	O
this	O
allows	O
me	O
to	O
experiment	O
with	O
the	O
learning	O
rate	O
initial	O
value	O
and	O
see	O
how	O
fast	O
it	O
decays	O
.	O
the	O
last	O
thing	O
that	O
method	O
train	O
needs	O
to	O
do	O
is	O
to	O
update	O
the	O
training	O
example	O
counter	O
so	O
that	O
the	O
next	O
example	O
is	O
used	O
the	O
next	O
time	O
that	O
train	O
is	O
called	O
:	O
current_example++	O
;	O
if	O
(	O
current_example	O
>	O
=	O
num_cases	O
)	O
current_example	O
=	O
0	O
;	O
return	O
error	O
;	O
}	O
you	O
can	O
look	O
at	O
the	O
implementation	O
of	O
the	O
swing	O
gui	O
test	O
class	O
gu	O
t	O
est	O
2h	O
to	O
see	O
how	O
i	O
decrease	O
the	O
training	O
rate	O
during	O
training	O
.	O
i	O
also	O
monitor	O
the	O
summed	O
error	O
rate	O
over	O
all	O
output	O
neurons	O
and	O
occasionally	O
randomize	O
the	O
weights	O
if	O
the	O
network	O
is	O
not	O
converging	O
to	O
a	O
solution	O
to	O
the	O
current	O
problem	O
.	O
7.6	O
adding	O
momentum	O
to	O
speed	O
up	O
back-prop	O
training	O
we	O
did	O
not	O
use	O
a	O
momentum	O
term	O
in	O
the	O
java	O
code	O
in	O
section	O
7.5.	O
for	O
difﬁcult	O
to	O
train	O
problems	O
,	O
adding	O
a	O
momentum	O
term	O
can	O
drastically	O
reduce	O
the	O
training	O
time	O
at	O
a	O
cost	O
of	O
doubling	O
the	O
weight	O
storage	O
requirements	O
.	O
to	O
implement	O
momentum	O
,	O
we	O
remember	O
how	O
much	O
each	O
weight	O
was	O
changed	O
in	O
the	O
previous	O
learning	O
cycle	O
and	O
make	O
the	O
weight	O
change	O
larger	O
if	O
the	O
current	O
change	O
in	O
“	O
direction	O
”	O
is	O
the	O
same	O
as	O
the	O
last	O
learning	O
cycle	O
.	O
for	O
example	O
,	O
if	O
the	O
change	O
to	O
weight	O
wi	O
,	O
j	O
had	O
a	O
large	O
positive	O
value	O
in	O
the	O
last	O
learning	O
cycle	O
and	O
the	O
calculated	O
weight	O
change	O
for	O
wi	O
,	O
j	O
is	O
also	O
a	O
large	O
positive	O
value	O
in	O
the	O
current	O
learning	O
cycle	O
,	O
then	O
make	O
the	O
current	O
weight	O
change	O
even	O
larger	O
.	O
adding	O
a	O
“	O
momentum	O
”	O
term	O
not	O
only	O
makes	O
learning	O
faster	O
but	O
also	O
increases	O
the	O
chances	O
of	O
sucessfully	O
learning	O
more	O
difﬁcult	O
problems	O
.	O
i	O
modiﬁed	O
two	O
of	O
the	O
classes	O
from	O
section	O
7.5	O
to	O
use	O
momentum	O
:	O
•	O
neural	O
2h	O
momentum.java	O
–	O
training	O
and	O
recall	O
for	O
two	O
hidden	O
layer	O
back-	O
prop	O
networks	O
.	O
the	O
constructor	O
has	O
an	O
extra	O
argument	O
“	O
alpha	O
”	O
that	O
is	O
a	O
scaling	O
factor	O
for	O
how	O
much	O
of	O
the	O
previous	O
cycle	O
’	O
s	O
weight	O
change	O
to	O
add	O
to	O
the	O
new	O
calculated	O
delta	O
weight	O
values	O
.	O
•	O
guitest	O
2h	O
momentum.java	O
–	O
a	O
gui	O
test	O
application	O
that	O
tests	O
the	O
new	O
class	O
n	O
eural	O
2h	O
momentum	O
.	O
the	O
code	O
for	O
class	O
n	O
eural	O
2h	O
momentum	O
is	O
similar	O
to	O
the	O
code	O
for	O
n	O
eural	O
2h	O
that	O
we	O
saw	O
in	O
the	O
last	O
section	O
so	O
here	O
we	O
will	O
just	O
look	O
at	O
the	O
differences	O
.	O
the	O
127	O
7	O
neural	O
networks	O
class	O
constructor	O
now	O
takes	O
another	O
parameter	O
alpha	O
that	O
determines	O
how	O
strong	O
the	O
momentum	O
correction	O
is	O
when	O
we	O
modify	O
weight	O
values	O
:	O
//	O
momentum	O
scaling	O
term	O
that	O
is	O
applied	O
//	O
to	O
last	O
delta	O
weight	O
:	O
private	O
float	O
alpha	O
=	O
0f	O
;	O
while	O
this	O
alpha	O
term	O
is	O
used	O
three	O
times	O
in	O
the	O
training	O
code	O
,	O
it	O
sufﬁces	O
to	O
just	O
look	O
at	O
one	O
of	O
these	O
uses	O
in	O
detail	O
.	O
when	O
we	O
allocated	O
the	O
three	O
weight	O
arrays	O
w	O
1	O
,	O
w	O
2	O
,	O
and	O
w	O
3	O
we	O
also	O
now	O
allocate	O
three	O
additional	O
arrays	O
of	O
corresponding	O
same	O
size	O
:	O
w	O
1	O
last	O
delta	O
,	O
w	O
2	O
last	O
delta	O
,	O
and	O
w	O
3	O
last	O
delta	O
.	O
these	O
three	O
new	O
arrays	O
are	O
used	O
to	O
store	O
the	O
weight	O
changes	O
for	O
use	O
in	O
the	O
next	O
training	O
cycle	O
.	O
here	O
is	O
the	O
original	O
code	O
to	O
update	O
w	O
3	O
from	O
the	O
last	O
section	O
:	O
w3	O
[	O
h	O
]	O
[	O
o	O
]	O
+=	O
training_rate	O
*	O
output_errors	O
[	O
o	O
]	O
*	O
hidden2	O
[	O
h	O
]	O
;	O
the	O
following	O
code	O
snippet	O
shows	O
the	O
additions	O
required	O
to	O
use	O
momentum	O
:	O
w3	O
[	O
h	O
]	O
[	O
o	O
]	O
+=	O
training_rate	O
*	O
output_errors	O
[	O
o	O
]	O
*	O
hidden2	O
[	O
h	O
]	O
+	O
//	O
apply	O
the	O
momentum	O
term	O
:	O
alpha	O
*	O
w3_last_delta	O
[	O
h	O
]	O
[	O
o	O
]	O
;	O
w3_last_delta	O
[	O
h	O
]	O
[	O
o	O
]	O
=	O
training_rate	O
*	O
output_errors	O
[	O
o	O
]	O
*	O
hidden2	O
[	O
h	O
]	O
;	O
i	O
mentioned	O
in	O
the	O
last	O
section	O
that	O
there	O
are	O
two	O
techniques	O
for	O
training	O
back-prop	O
networks	O
:	O
updating	O
the	O
weights	O
after	O
processing	O
each	O
training	O
example	O
or	O
waiting	O
to	O
update	O
weights	O
until	O
all	O
training	O
examples	O
are	O
processed	O
.	O
i	O
always	O
use	O
the	O
ﬁrst	O
method	O
when	O
i	O
don	O
’	O
t	O
use	O
momentum	O
.	O
in	O
many	O
cases	O
it	O
is	O
best	O
to	O
use	O
the	O
second	O
method	O
when	O
using	O
momentum	O
.	O
128	O
8	O
machine	B
learning	I
with	O
weka	O
weka	O
is	O
a	O
standard	O
java	O
tool	O
for	O
performing	O
both	O
machine	B
learning	I
experiments	O
and	O
for	O
embedding	O
trained	O
models	O
in	O
java	O
applications	O
.	O
i	O
have	O
used	O
weka	O
since	O
1999	O
and	O
it	O
is	O
usually	O
my	O
tool	O
of	O
choice	O
on	O
machine	B
learning	I
projects	O
that	O
are	O
com-	O
patible	O
with	O
weka	O
’	O
s	O
use	O
of	O
the	O
gpl	O
license	O
.	O
in	O
addition	O
to	O
the	O
material	O
in	O
this	O
chapter	O
you	O
should	O
visit	O
the	O
primary	O
weka	O
web	O
site	O
www.cs.waikato.ac.nz/ml/weka	O
for	O
more	O
examples	O
and	O
tutorials	O
.	O
good	O
online	O
documentation	O
can	O
also	O
be	O
found	O
at	O
weka.sourceforge.net/wekadoc	O
.	O
weka	O
can	O
be	O
run	O
both	O
as	O
a	O
gui	O
application	O
and	O
for	O
using	O
a	O
command	O
line	O
interface	O
for	O
running	O
experiments	O
.	O
while	O
the	O
techniques	O
of	O
machine	B
learning	I
have	O
many	O
practical	O
applications	O
the	O
example	O
used	O
in	O
this	O
chapter	O
is	O
simple	O
and	O
is	O
mostly	O
intended	O
to	O
show	O
you	O
the	O
techniques	O
for	O
running	O
weka	O
and	O
techniques	O
for	O
embedding	O
weka	O
in	O
your	O
java	O
applications	O
.	O
full	O
documentation	O
of	O
the	O
many	O
machine	B
learning	I
algorithms	O
is	O
outside	O
the	O
scope	O
of	O
this	O
chapter	O
.	O
in	O
addition	O
to	O
data	O
cleansing	O
and	O
preprocessing	O
utilities	O
(	O
ﬁlters	O
for	O
data	O
normaliza-	O
tion	O
,	O
resampling	O
,	O
transformations	O
,	O
etc	O
.	O
)	O
weka	O
supports	O
most	O
machine-learning	O
tech-	O
niques	O
for	O
automatically	O
calculating	O
classiﬁcation	O
systems	O
.	O
i	O
have	O
used	O
the	O
following	O
weka	O
learning	O
modules	O
in	O
my	O
own	O
work	O
:	O
•	O
nave	O
bayes	O
–	O
uses	O
bayes	O
’	O
s	O
rule	O
for	O
probability	O
of	O
a	O
hypothesis	O
given	O
evidence	O
.	O
•	O
instance-based	O
learner	O
–	O
stores	O
all	O
training	O
examples	O
and	O
use	O
.	O
•	O
c4.5	O
–	O
a	O
learning	O
scheme	O
by	O
j	O
ross	O
quinlan	O
that	O
calculates	O
decision	O
trees	O
from	O
training	O
data	O
.	O
we	O
will	O
use	O
the	O
j48	O
algorithm	O
in	O
this	O
chapter	O
.	O
weka	O
can	O
be	O
used	O
for	O
both	O
unsupervised	O
and	O
supervised	O
learning	O
.	O
an	O
example	O
of	O
unsupervised	O
learning	O
is	O
processing	O
a	O
set	O
of	O
unlabeled	O
data	O
and	O
automatically	O
clus-	O
tering	O
the	O
data	O
into	O
smaller	O
sets	O
containing	O
similar	O
items	O
.	O
we	O
will	O
use	O
supervised	O
learning	O
as	O
the	O
example	O
in	O
this	O
chapter	O
:	O
data	O
on	O
daily	O
stock	O
prices	O
is	O
labeled	O
as	O
buy	O
,	O
sell	O
,	O
or	O
hold	O
.	O
we	O
will	O
use	O
the	O
j48	O
algorithm	O
to	O
automatically	O
build	O
a	O
decision	O
tree	O
for	O
deciding	O
on	O
how	O
to	O
process	O
a	O
stock	O
,	O
given	O
its	O
cost	O
data	O
.	O
this	O
example	O
is	O
simplistic	O
and	O
should	O
not	O
be	O
used	O
to	O
actually	O
trade	O
stocks	O
.	O
it	O
is	O
also	O
possible	O
to	O
induce	O
rules	O
from	O
training	O
data	O
that	O
are	O
equivalent	O
to	O
decision	O
trees	O
for	O
the	O
same	O
training	O
data	O
.	O
the	O
learned	O
model	O
uses	O
linear	O
combinations	O
of	O
attribute	O
values	O
for	O
classiﬁcation	O
.	O
we	O
are	O
going	O
to	O
use	O
a	O
simple	O
example	O
to	O
learn	O
how	O
to	O
use	O
weka	O
interactively	O
and	O
129	O
8	O
machine	B
learning	I
with	O
weka	O
embedded	O
in	O
applications	O
in	O
the	O
next	O
two	O
sections	O
.	O
weka	O
uses	O
a	O
data	O
ﬁle	O
format	O
call	O
arff	O
.	O
the	O
following	O
listing	O
shows	O
the	O
sample	O
arff	O
input	O
ﬁle	O
that	O
we	O
will	O
use	O
in	O
the	O
next	O
two	O
sections	O
:	O
@	O
relation	O
stock	O
@	O
attribute	O
percent_change_since_open	O
real	O
@	O
attribute	O
percent_change_from_day_low	O
real	O
@	O
attribute	O
percent_change_from_day_high	O
real	O
@	O
attribute	O
action	O
{	O
buy	O
,	O
sell	O
,	O
hold	O
}	O
@	O
data	O
-0.2,0.1	O
,	O
-0.22	O
,	O
hold	O
-2.2,0.0	O
,	O
-2.5	O
,	O
sell	O
0.2,0.21	O
,	O
-0.01	O
,	O
buy	O
-0.22,0.12	O
,	O
-0.25	O
,	O
hold	O
-2.0,0.0	O
,	O
-2.1	O
,	O
sell	O
0.28,0.26	O
,	O
-0.04	O
,	O
buy	O
-0.12,0.08	O
,	O
-0.14	O
,	O
hold	O
-2.6,0.1	O
,	O
-2.6	O
,	O
sell	O
0.24,0.25	O
,	O
-0.03	O
,	O
buy	O
here	O
the	O
concept	O
of	O
a	O
relation	O
is	O
similar	O
to	O
a	O
relation	O
in	O
powerloom	O
as	O
we	O
saw	O
in	O
chapter	O
3	O
:	O
a	O
relation	O
has	O
a	O
name	O
and	O
a	O
list	O
of	O
attributes	O
,	O
each	O
with	O
an	O
allowed	O
data	O
type	O
.	O
here	O
the	O
relation	O
name	O
is	O
“	O
stock	O
”	O
and	O
we	O
have	O
three	O
attributes	O
that	O
have	O
ﬂoating	O
point	O
(	O
numerical	O
)	O
values	O
and	O
a	O
fourth	O
attribute	O
that	O
has	O
an	O
enumeration	O
of	O
discrete	O
allowed	O
values	O
.	O
the	O
@	O
data	O
section	O
deﬁnes	O
data	O
for	O
initializing	O
nine	O
stock	O
relations	O
.	O
8.1	O
using	O
weka	O
’	O
s	O
interactive	O
gui	O
application	O
the	O
weka	O
jar	O
ﬁle	O
is	O
included	O
with	O
the	O
zip	O
ﬁle	O
for	O
this	O
book	O
.	O
to	O
run	O
the	O
weka	O
gui	O
application	O
,	O
change	O
directory	O
to	O
test	O
data	O
and	O
type	O
:	O
java	O
-cp	O
../lib	O
-jar	O
../lib/weka.jar	O
once	O
you	O
have	O
loaded	O
(	O
and	O
possibly	O
browsed	O
)	O
the	O
data	O
as	O
seen	O
in	O
figure	O
8.1	O
you	O
can	O
then	O
select	O
the	O
classiﬁer	O
tab	O
,	O
and	O
using	O
the	O
“	O
choose	O
”	O
classiﬁer	O
option	O
,	O
ﬁnd	O
j48	O
under	O
the	O
trees	O
submenu	O
,	O
and	O
click	O
the	O
“	O
start	O
”	O
button	O
.	O
the	O
results	O
can	O
be	O
seen	O
in	O
figure	O
8.2	O
.	O
130	O
8.1	O
using	O
weka	O
’	O
s	O
interactive	O
gui	O
application	O
figure	O
8.1	O
:	O
running	O
the	O
weka	O
data	O
explorer	O
figure	O
8.2	O
:	O
running	O
the	O
weka	O
data	O
explorer	O
131	O
8	O
machine	B
learning	I
with	O
weka	O
the	O
decision	O
tree	O
is	O
displayed	O
in	O
the	O
“	O
classiﬁer	O
output	O
”	O
window	O
pane	O
.	O
we	O
will	O
run	O
this	O
same	O
problem	O
from	O
the	O
command	O
line	O
in	O
the	O
next	O
section	O
and	O
then	O
discuss	O
the	O
generated	O
decision	O
tree	O
seen	O
in	O
the	O
lower	O
right	O
panel	O
of	O
the	O
gui	O
display	O
seen	O
in	O
figure	O
8.2	O
.	O
8.2	O
interactive	O
command	O
line	O
use	O
of	O
weka	O
we	O
will	O
run	O
the	O
same	O
problem	O
as	O
in	O
the	O
previous	O
section	O
and	O
discuss	O
the	O
sections	O
of	O
the	O
output	O
report	O
:	O
java	O
-cp	O
../lib/weka.jar	O
\\	O
weka.classifiers.trees.j48	O
-t	O
\\	O
stock\_training_data.arff	O
-x	O
2	O
j48	O
pruned	O
tree	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
--	O
percent_change_from_day_low	O
<	O
=	O
0.12	O
percent_change_since_open	O
<	O
=	O
-2	O
:	O
sell	O
(	O
3.0	O
)	O
|	O
|	O
percent_change_since_open	O
>	O
-2	O
:	O
hold	O
(	O
3.0	O
)	O
percent_change_from_day_low	O
>	O
0.12	O
:	O
buy	O
(	O
3.0	O
)	O
number	O
of	O
leaves	O
:	O
3	O
size	O
of	O
the	O
tree	O
:	O
5	O
the	O
generated	O
decision	O
tree	O
can	O
be	O
described	O
in	O
english	O
as	O
“	O
if	O
the	O
percent	O
change	O
of	O
a	O
stock	O
from	O
the	O
day	O
low	O
is	O
less	O
than	O
or	O
equal	O
to	O
0.12	O
then	O
if	O
the	O
percent	O
change	O
since	O
the	O
open	O
is	O
less	O
than	O
-2	O
then	O
sell	O
the	O
stock	O
,	O
otherwise	O
keep	O
it	O
.	O
if	O
the	O
percent	O
change	O
from	O
the	O
day	O
low	O
is	O
greater	O
than	O
0.12	O
then	O
purchase	O
more	O
shares.	O
”	O
time	O
taken	O
to	O
build	O
model	O
:	O
0.01	O
seconds	O
time	O
taken	O
to	O
test	O
model	O
on	O
training	O
data	O
:	O
0	O
seconds	O
===	O
error	O
on	O
training	O
data	O
===	O
correctly	O
classified	O
instances	O
9	O
incorrectly	O
classified	O
instances	O
0	O
1	O
kappa	O
statistic	O
0	O
mean	O
absolute	O
error	O
root	O
mean	O
squared	O
error	O
0	O
100	O
0	O
%	O
%	O
132	O
8.2	O
interactive	O
command	O
line	O
use	O
of	O
weka	O
relative	O
absolute	O
error	O
root	O
relative	O
squared	O
error	O
total	O
number	O
of	O
instances	O
0	O
%	O
0	O
%	O
9	O
this	O
output	O
shows	O
results	O
for	O
testing	O
on	O
the	O
original	O
training	O
data	O
so	O
the	O
classiﬁcation	O
is	O
perfect	O
.	O
in	O
practice	O
,	O
you	O
will	O
test	O
on	O
separate	O
data	O
sets	O
.	O
===	O
confusion	O
matrix	O
===	O
<	O
--	O
classified	O
as	O
a	O
b	O
c	O
3	O
0	O
0	O
|	O
a	O
=	O
buy	O
0	O
3	O
0	O
|	O
b	O
=	O
sell	O
0	O
0	O
3	O
|	O
c	O
=	O
hold	O
the	O
confusion	O
matrix	O
shows	O
the	O
prediction	O
(	O
columns	O
)	O
for	O
each	O
data	O
sample	O
(	O
rows	O
)	O
.	O
here	O
we	O
see	O
the	O
original	O
data	O
(	O
three	O
buy	O
,	O
three	O
sell	O
,	O
and	O
three	O
hold	O
samples	O
)	O
.	O
the	O
following	O
output	O
shows	O
random	O
sampling	O
testing	O
:	O
===	O
stratified	O
cross-validation	O
===	O
correctly	O
classified	O
instances	O
incorrectly	O
classified	O
instances	O
kappa	O
statistic	O
mean	O
absolute	O
error	O
root	O
mean	O
squared	O
error	O
relative	O
absolute	O
error	O
root	O
relative	O
squared	O
error	O
total	O
number	O
of	O
instances	O
4	O
5	O
0.1667	O
0.3457	O
0.4513	O
75.5299	O
%	O
92.2222	O
%	O
9	O
44.4444	O
%	O
55.5556	O
%	O
with	O
random	O
sampling	O
,	O
we	O
see	O
in	O
the	O
confusion	O
matrix	O
that	O
the	O
three	O
buy	O
recom-	O
mendations	O
are	O
still	O
perfect	O
,	O
but	O
that	O
both	O
of	O
the	O
sell	O
recommendations	O
are	O
wrong	O
(	O
with	O
one	O
buy	O
and	O
two	O
holds	O
)	O
and	O
that	O
two	O
of	O
what	O
should	O
have	O
been	O
hold	O
recom-	O
mendations	O
are	O
buy	O
recommendations	O
.	O
===	O
confusion	O
matrix	O
===	O
<	O
--	O
classified	O
as	O
a	O
b	O
c	O
3	O
0	O
0	O
|	O
a	O
=	O
buy	O
1	O
0	O
2	O
|	O
b	O
=	O
sell	O
2	O
0	O
1	O
|	O
c	O
=	O
hold	O
133	O
8	O
machine	B
learning	I
with	O
weka	O
8.3	O
embedding	O
weka	O
in	O
a	O
java	O
application	O
the	O
example	O
in	O
this	O
section	O
is	O
partially	O
derived	O
from	O
documentation	O
at	O
the	O
web	O
site	O
http	O
:	O
//weka.sourceforge.net/wiki	O
.	O
this	O
example	O
loads	O
the	O
training	O
arff	O
data	O
ﬁle	O
seen	O
at	O
the	O
beginning	O
of	O
this	O
chapter	O
and	O
loads	O
a	O
similar	O
arff	O
ﬁle	O
for	O
testing	O
that	O
is	O
equivalent	O
to	O
the	O
original	O
training	O
ﬁle	O
except	O
that	O
small	O
random	O
changes	O
have	O
been	O
made	O
to	O
the	O
numeric	O
attribute	O
values	O
in	O
all	O
samples	O
.	O
a	O
decision	O
tree	O
model	O
is	O
trained	O
and	O
tested	O
on	O
the	O
new	O
test	O
arff	O
data	O
.	O
import	O
weka.classifiers.meta.filteredclassifier	O
;	O
import	O
weka.classifiers.trees.j48	O
;	O
import	O
weka.core.instances	O
;	O
import	O
weka.filters.unsupervised.attribute.remove	O
;	O
import	O
java.io.bufferedreader	O
;	O
import	O
java.io.filenotfoundexception	O
;	O
import	O
java.io.filereader	O
;	O
import	O
java.io.ioexception	O
;	O
public	O
class	O
wekastocks	O
{	O
public	O
static	O
void	O
main	O
(	O
string	O
[	O
]	O
args	O
)	O
throws	O
exception	O
{	O
we	O
start	O
by	O
creating	O
a	O
new	O
training	O
instance	O
by	O
supplying	O
a	O
reader	O
for	O
the	O
stock	O
training	O
arff	O
ﬁle	O
and	O
setting	O
the	O
number	O
of	O
attributes	O
to	O
use	O
:	O
instances	O
training_data	O
=	O
new	O
instances	O
(	O
new	O
bufferedreader	O
(	O
new	O
filereader	O
(	O
''	O
test_data/stock_training_data.arff	O
''	O
)	O
)	O
)	O
;	O
training_data.setclassindex	O
(	O
training_data.numattributes	O
(	O
)	O
-	O
1	O
)	O
;	O
we	O
want	O
to	O
test	O
with	O
separate	O
data	O
so	O
we	O
open	O
a	O
separate	O
examples	O
arff	O
ﬁle	O
to	O
test	O
against	O
:	O
instances	O
testing_data	O
=	O
new	O
instances	O
(	O
new	O
bufferedreader	O
(	O
new	O
filereader	O
(	O
''	O
test_data/stock_testing_data.arff	O
''	O
)	O
)	O
)	O
;	O
testing_data.setclassindex	O
(	O
training_data.numattributes	O
(	O
)	O
-	O
1	O
)	O
;	O
134	O
8.3	O
embedding	O
weka	O
in	O
a	O
java	O
application	O
the	O
method	O
tosummarystring	O
prints	O
a	O
summary	O
of	O
a	O
set	O
of	O
training	O
or	O
testing	O
instances	O
.	O
string	O
summary	O
=	O
training_data.tosummarystring	O
(	O
)	O
;	O
int	O
number_samples	O
=	O
training_data.numinstances	O
(	O
)	O
;	O
int	O
number_attributes_per_sample	O
=	O
training_data.numattributes	O
(	O
)	O
;	O
system.out.println	O
(	O
''	O
number	O
of	O
attributes	O
in	O
model	O
=	O
``	O
+	O
number_attributes_per_sample	O
)	O
;	O
system.out.println	O
(	O
''	O
number	O
of	O
samples	O
=	O
``	O
+	O
number_samples	O
)	O
;	O
system.out.println	O
(	O
``	O
summary	O
:	O
``	O
+	O
summary	O
)	O
;	O
system.out.println	O
(	O
)	O
;	O
now	O
we	O
create	O
a	O
new	O
classiﬁer	O
(	O
a	O
j48	O
classiﬁer	O
in	O
this	O
case	O
)	O
and	O
we	O
see	O
how	O
to	O
optionally	O
ﬁlter	O
(	O
remove	O
)	O
samples	O
.	O
we	O
build	O
a	O
classiﬁer	O
using	O
the	O
training	O
data	O
and	O
then	O
test	O
it	O
using	O
the	O
separate	O
test	O
data	O
set	O
:	O
//	O
a	O
classifier	O
for	O
decision	O
trees	O
:	O
j48	O
j48	O
=	O
new	O
j48	O
(	O
)	O
;	O
//	O
filter	O
for	O
removing	O
samples	O
:	O
remove	O
rm	O
=	O
new	O
remove	O
(	O
)	O
;	O
//	O
remove	O
first	O
attribute	O
rm.setattributeindices	O
(	O
``	O
1	O
''	O
)	O
;	O
//	O
filtered	O
classifier	O
filteredclassifier	O
fc	O
=	O
new	O
filteredclassifier	O
(	O
)	O
;	O
fc.setfilter	O
(	O
rm	O
)	O
;	O
fc.setclassifier	O
(	O
j48	O
)	O
;	O
//	O
train	O
using	O
stock_training_data.arff	O
:	O
fc.buildclassifier	O
(	O
training_data	O
)	O
;	O
//	O
test	O
using	O
stock_testing_data.arff	O
:	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
testing_data.numinstances	O
(	O
)	O
;	O
i++	O
)	O
{	O
double	O
pred	O
=	O
fc.classifyinstance	O
(	O
testing_data	O
.	O
instance	O
(	O
i	O
)	O
)	O
;	O
system.out.print	O
(	O
``	O
given	O
value	O
:	O
``	O
+	O
testing_data.classattribute	O
(	O
)	O
.	O
value	O
(	O
(	O
int	O
)	O
testing_data.instance	O
(	O
i	O
)	O
.	O
classvalue	O
(	O
)	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
.	O
predicted	O
value	O
:	O
``	O
+	O
135	O
8	O
machine	B
learning	I
with	O
weka	O
testing_data.classattribute	O
(	O
)	O
.value	O
(	O
(	O
int	O
)	O
pred	O
)	O
)	O
;	O
}	O
}	O
}	O
this	O
example	O
program	O
produces	O
the	O
following	O
output	O
(	O
some	O
output	O
not	O
shown	O
due	O
to	O
page	O
width	O
limits	O
)	O
:	O
number	O
of	O
attributes	O
in	O
model	O
=	O
4	O
number	O
of	O
samples	O
=	O
9	O
summary	O
:	O
relation	O
name	O
:	O
stock	O
num	O
instances	O
:	O
9	O
num	O
attributes	O
:	O
4	O
name	O
type	O
1	O
percent_change_since_open	O
num	O
2	O
percent_change_from_day_l	O
num	O
3	O
percent_change_from_day_h	O
num	O
4	O
action	O
nom	O
0	O
%	O
0	O
%	O
0	O
%	O
nom	O
100	O
%	O
int	O
real	O
11	O
%	O
89	O
%	O
78	O
%	O
22	O
%	O
0	O
%	O
100	O
%	O
0	O
%	O
0	O
%	O
...	O
...	O
...	O
...	O
...	O
given	O
value	O
:	O
hold	O
.	O
predicted	O
value	O
:	O
hold	O
given	O
value	O
:	O
sell	O
.	O
predicted	O
value	O
:	O
sell	O
given	O
value	O
:	O
buy	O
.	O
predicted	O
value	O
:	O
buy	O
given	O
value	O
:	O
hold	O
.	O
predicted	O
value	O
:	O
buy	O
given	O
value	O
:	O
sell	O
.	O
predicted	O
value	O
:	O
sell	O
given	O
value	O
:	O
buy	O
.	O
predicted	O
value	O
:	O
buy	O
given	O
value	O
:	O
hold	O
.	O
predicted	O
value	O
:	O
hold	O
given	O
value	O
:	O
sell	O
.	O
predicted	O
value	O
:	O
buy	O
given	O
value	O
:	O
buy	O
.	O
predicted	O
value	O
:	O
buy	O
8.4	O
suggestions	O
for	O
further	O
study	O
weka	O
is	O
well	O
documented	O
in	O
the	O
book	O
data	O
mining	O
:	O
practical	O
machine	B
learning	I
tools	O
and	O
techniques	O
,	O
second	O
edition	O
[	O
ian	O
h.	O
witten	O
(	O
author	O
)	O
,	O
eibe	O
frank	O
.	O
2005	O
]	O
.	O
additional	O
documentation	O
can	O
be	O
found	O
at	O
weka.sourceforge.net/wiki/index.php	O
.	O
136	O
9	O
statistical	O
natural	O
language	O
processing	O
we	O
will	O
cover	O
a	O
wide	O
variety	O
of	O
techniques	O
for	O
processing	O
text	O
in	O
this	O
chapter	O
.	O
the	O
part	O
of	O
speech	O
tagger	O
,	O
text	O
categorization	O
,	O
clustering	O
,	O
spelling	B
,	O
and	O
entity	O
extraction	O
examples	O
are	O
all	O
derived	O
from	O
either	O
my	O
open	O
source	O
projects	O
or	O
my	O
commercial	O
projects	O
.	O
i	O
wrote	O
the	O
markov	O
model	O
example	O
code	O
for	O
an	O
earlier	O
edition	O
of	O
this	O
book	O
.	O
i	O
am	O
not	O
offering	O
you	O
a	O
very	O
formal	O
view	O
of	O
statistical	O
natural	O
language	O
processing	O
in	O
this	O
chapter	O
;	O
rather	O
,	O
i	O
collected	O
java	O
code	O
that	O
i	O
have	O
been	O
using	O
for	O
years	O
on	O
various	O
projects	O
and	O
simpliﬁed	O
it	O
to	O
(	O
hopefully	O
)	O
make	O
it	O
easier	O
for	O
you	O
to	O
understand	O
and	O
modify	O
for	O
your	O
own	O
use	O
.	O
the	O
web	O
site	O
http	O
:	O
//nlp.stanford.edu/links/statnlp.html	O
is	O
an	O
excellent	O
resource	O
for	O
both	O
papers	O
when	O
you	O
need	O
more	O
theory	O
and	O
additional	O
software	O
for	O
statistical	O
natural	O
language	O
processing	O
.	O
for	O
python	O
programmers	O
i	O
can	O
recommend	O
the	O
statistical	O
nlp	O
toolkit	O
nltk	O
(	O
nltk.sourceforge.net	O
)	O
that	O
includes	O
an	O
online	O
book	O
and	O
is	O
licensed	O
using	O
the	O
gpl	O
.	O
9.1	O
tokenizing	O
,	O
stemming	O
,	O
and	O
part	O
of	O
speech	O
tagging	B
text	O
tokenizing	O
text	O
is	O
the	O
process	O
of	O
splitting	O
a	O
string	O
containing	O
text	O
into	O
individual	O
tokens	O
.	O
stemming	O
is	O
the	O
reduction	O
of	O
words	O
to	O
abbreviated	O
word	O
roots	O
that	O
allow	O
for	O
easy	O
comparison	O
for	O
equality	O
of	O
similar	O
words	O
.	O
tagging	B
is	O
identifying	O
what	O
part	O
of	O
speech	O
each	O
word	O
is	O
in	O
input	O
text	O
.	O
tagging	B
is	O
complicated	O
by	O
many	O
words	O
having	O
different	O
parts	O
of	O
speech	O
depending	O
on	O
context	O
(	O
examples	O
:	O
“	O
bank	O
the	O
air-	O
plane	O
,	O
”	O
“	O
the	O
river	O
bank	O
,	O
”	O
etc	O
.	O
)	O
you	O
can	O
ﬁnd	O
the	O
code	O
in	O
this	O
section	O
in	O
the	O
code	O
zip	O
ﬁle	O
for	O
this	O
book	O
in	O
the	O
ﬁles	O
src/com/knowledgebooks/nlp/fasttag/fasttag.java	O
and	O
src/com/knowledgebooks/nlp/util/tokenizer.java	O
.	O
the	O
required	O
data	O
ﬁles	O
are	O
in	O
the	O
directory	O
test	O
data	O
in	O
the	O
ﬁles	O
lexicon.txt	O
(	O
for	O
processing	O
english	O
text	O
)	O
and	O
lex-	O
icon	O
medpost.txt	O
(	O
for	O
processing	O
medical	O
text	O
)	O
.	O
the	O
fasttag	O
project	O
can	O
also	O
be	O
found	O
on	O
my	O
open	O
source	O
web	O
page	O
:	O
http	O
:	O
//www.markwatson.com/opensource	O
we	O
will	O
also	O
look	O
at	O
a	O
public	O
domain	O
word	O
stemmer	O
that	O
i	O
frequently	O
use	O
in	O
this	O
137	O
9	O
statistical	O
natural	O
language	O
processing	O
section	O
.	O
before	O
we	O
can	O
process	O
any	O
text	O
we	O
need	O
to	O
break	O
text	O
into	O
individual	O
tokens	O
.	O
tokens	O
can	O
be	O
words	O
,	O
numbers	O
and	O
punctuation	O
symbols	O
.	O
the	O
class	O
t	O
okenizer	O
has	O
two	O
static	O
methods	O
,	O
both	O
take	O
an	O
input	O
string	O
to	O
tokenize	B
and	O
return	O
a	O
list	O
of	O
token	O
strings	O
.	O
the	O
second	O
method	O
has	O
an	O
extra	O
argument	O
to	O
specify	O
the	O
maximum	O
number	O
of	O
tokens	O
that	O
you	O
want	O
returned	O
:	O
static	O
public	O
list	O
<	O
string	O
>	O
wordstolist	O
(	O
string	O
s	O
)	O
static	O
public	O
list	O
<	O
string	O
>	O
wordstolist	O
(	O
string	O
s	O
,	O
int	O
maxr	O
)	O
the	O
following	O
listing	O
shows	O
a	O
fragment	O
of	O
example	O
code	O
using	O
this	O
class	O
with	O
the	O
output	O
:	O
string	O
text	O
=	O
''	O
the	O
ball	O
,	O
rolling	O
quickly	O
,	O
went	O
down	O
the	O
hill	O
.	O
``	O
;	O
list	O
<	O
string	O
>	O
tokens	O
=	O
tokenizer.wordstolist	O
(	O
text	O
)	O
;	O
system.out.println	O
(	O
text	O
)	O
;	O
for	O
(	O
string	O
token	O
:	O
tokens	O
)	O
system.out.print	O
(	O
``	O
\	O
''	O
''	O
+token+	O
''	O
\	O
''	O
``	O
)	O
;	O
system.out.println	O
(	O
)	O
;	O
this	O
code	O
fragment	O
produces	O
the	O
following	O
output	O
:	O
the	O
ball	O
,	O
rolling	O
quickly	O
,	O
went	O
down	O
the	O
hill	O
.	O
``	O
the	O
''	O
``	O
ball	O
''	O
``	O
,	O
''	O
``	O
rolling	O
''	O
``	O
quickly	O
''	O
``	O
,	O
''	O
``	O
went	O
''	O
''	O
down	O
''	O
``	O
the	O
''	O
``	O
hill	O
''	O
``	O
.	O
''	O
for	O
many	O
applications	O
,	O
it	O
is	O
better	O
to	O
“	O
stem	O
”	O
word	O
tokens	O
to	O
simplify	O
comparison	O
of	O
similar	O
words	O
.	O
for	O
example	O
“	O
run	O
,	O
”	O
“	O
runs	O
,	O
”	O
and	O
“	O
running	O
”	O
all	O
stem	O
to	O
“	O
run.	O
”	O
the	O
stemmer	O
that	O
we	O
will	O
use	O
,	O
which	O
i	O
believe	O
to	O
be	O
in	O
the	O
public	O
domain	O
,	O
is	O
in	O
the	O
ﬁle	O
src/public	O
domain/stemmer.java	O
.	O
there	O
are	O
two	O
convenient	O
apis	O
deﬁned	O
at	O
the	O
end	O
of	O
the	O
class	O
,	O
one	O
to	O
stem	O
a	O
string	O
of	O
multiple	O
words	O
and	O
one	O
to	O
stem	O
a	O
single	O
word	O
token	O
:	O
public	O
list	O
<	O
string	O
>	O
stemstring	O
(	O
string	O
str	O
)	O
public	O
string	O
stemoneword	O
(	O
string	O
word	O
)	O
we	O
will	O
use	O
both	O
the	O
f	O
astt	O
ag	O
and	O
stemmer	O
classes	O
often	O
in	O
the	O
remainder	O
of	O
this	O
chapter	O
.	O
138	O
9.1	O
tokenizing	O
,	O
stemming	O
,	O
and	O
part	O
of	O
speech	O
tagging	B
text	O
the	O
fasttag	O
project	O
resulted	O
from	O
my	O
using	O
the	O
excellent	O
tagger	O
written	O
by	O
eric	O
brill	O
while	O
he	O
was	O
at	O
the	O
university	O
of	O
pennsylvania	O
.	O
he	O
used	O
machine	B
learning	I
techniques	O
to	O
learn	O
transition	O
rules	O
for	O
tagging	B
text	O
using	O
manually	O
tagged	O
text	O
as	O
training	O
examples	O
.	O
in	O
reading	O
through	O
his	O
doctoral	O
thesis	O
i	O
noticed	O
that	O
there	O
were	O
a	O
few	O
transition	O
rules	O
that	O
covered	O
most	O
of	O
the	O
cases	O
and	O
i	O
implemented	O
a	O
simple	O
“	O
fast	O
tagger	O
”	O
in	O
common	O
lisp	O
,	O
ruby	O
,	O
scheme	O
and	O
java	O
.	O
the	O
java	O
version	O
is	O
in	O
the	O
ﬁle	O
src/com/knowledgebooks/nlp/fasttag/fasttag.java	O
.	O
the	O
ﬁle	O
src/com/knowledgebooks/nlp/fasttag/readme.txt	O
contains	O
information	O
on	O
where	O
to	O
obtain	O
eric	O
brill	O
’	O
s	O
original	O
tagging	B
system	O
and	O
also	O
deﬁnes	O
the	O
tags	O
for	O
both	O
his	O
english	O
language	O
lexicon	O
and	O
the	O
medpost	O
lexicon	O
.	O
table	O
9.1	O
shows	O
the	O
most	O
commonly	O
used	O
tags	O
(	O
see	O
the	O
readme.txt	O
ﬁle	O
for	O
a	O
complete	O
description	O
)	O
.	O
tag	O
nn	O
nns	O
nnp	O
nnps	O
cc	O
cd	O
dt	O
in	O
jj	O
jjr	O
jjs	O
pp	O
rb	O
rbr	O
rp	O
vb	O
vbn	O
vbg	O
vbz	O
wp	O
wdt	O
description	O
singular	O
noun	O
plural	O
noun	O
singular	O
proper	O
noun	O
plural	O
proper	O
noun	O
conjunction	O
cardinal	O
number	O
determiner	O
preposition	O
adjective	O
comparative	O
adjective	O
superlative	O
adjective	O
proper	O
pronoun	O
adverb	O
comparative	O
adverb	O
particle	O
verb	O
past	O
participle	O
verb	O
gerund	O
verb	O
present	O
verb	O
wh*	O
pronoun	O
wh*	O
determiner	O
examples	O
dog	O
dogs	O
california	O
watsons	O
and	O
,	O
but	O
,	O
or	O
one	O
,	O
two	O
the	O
,	O
some	O
of	O
,	O
in	O
,	O
by	O
large	O
,	O
small	O
,	O
green	O
bigger	O
biggest	O
i	O
,	O
he	O
,	O
you	O
slowly	O
slowest	O
up	O
,	O
off	O
eat	O
eaten	O
eating	O
eats	O
who	O
,	O
what	O
which	O
,	O
that	O
table	O
9.1	O
:	O
most	O
commonly	O
used	O
part	O
of	O
speech	O
tags	O
brill	O
’	O
s	O
system	O
worked	O
by	O
processing	O
manually	O
tagged	O
text	O
and	O
then	O
creating	O
a	O
list	O
of	O
words	O
followed	O
by	O
the	O
tags	O
found	O
for	O
each	O
word	O
.	O
here	O
are	O
a	O
few	O
random	O
lines	O
selected	O
from	O
the	O
test	O
data/lexicon.txt	O
ﬁle	O
:	O
arco	O
nnp	O
arctic	O
nnp	O
jj	O
fair	O
jj	O
nn	O
rb	O
139	O
9	O
statistical	O
natural	O
language	O
processing	O
here	O
“	O
arco	O
”	O
is	O
a	O
proper	O
noun	O
because	O
it	O
is	O
the	O
name	O
of	O
a	O
corporation	O
.	O
the	O
word	O
“	O
arctic	O
”	O
can	O
be	O
either	O
a	O
proper	O
noun	O
or	O
an	O
adjective	O
;	O
it	O
is	O
used	O
most	O
frequently	O
as	O
a	O
proper	O
noun	O
so	O
the	O
tag	O
“	O
nnp	O
”	O
is	O
listed	O
before	O
“	O
jj.	O
”	O
the	O
word	O
“	O
fair	O
”	O
can	O
be	O
an	O
adjective	O
,	O
singular	O
noun	O
,	O
or	O
an	O
adverb	O
.	O
the	O
class	O
t	O
agger	O
reads	O
the	O
ﬁle	O
lexicon	O
either	O
as	O
a	O
resource	O
stream	O
(	O
if	O
,	O
for	O
example	O
,	O
you	O
put	O
lexicon.txt	O
in	O
the	O
same	O
jar	O
ﬁle	O
as	O
the	O
compiled	O
t	O
agger	O
and	O
t	O
okenizer	O
class	O
ﬁles	O
)	O
or	O
as	O
a	O
local	O
ﬁle	O
.	O
each	O
line	O
in	O
the	O
lexicon.txt	O
ﬁle	O
is	O
passed	O
through	O
the	O
utility	O
method	O
parseline	O
that	O
processes	O
an	O
input	O
string	O
using	O
the	O
ﬁrst	O
token	O
in	O
the	O
line	O
as	O
a	O
hash	O
key	O
and	O
places	O
the	O
remaining	O
tokens	O
in	O
an	O
array	O
that	O
is	O
the	O
hash	O
value	O
.	O
so	O
,	O
we	O
would	O
process	O
the	O
line	O
“	O
fair	O
jj	O
nn	O
rb	O
”	O
as	O
a	O
hash	O
key	O
of	O
“	O
fair	O
”	O
and	O
the	O
hash	O
value	O
would	O
be	O
the	O
array	O
of	O
strings	O
(	O
only	O
the	O
ﬁrst	O
value	O
is	O
currently	O
used	O
but	O
i	O
keep	O
the	O
other	O
values	O
for	O
future	O
use	O
)	O
:	O
[	O
``	O
jj	O
''	O
,	O
``	O
nn	O
''	O
,	O
``	O
rb	O
''	O
]	O
when	O
the	O
tagger	O
is	O
processing	O
a	O
list	O
of	O
word	O
tokens	O
,	O
it	O
looks	O
each	O
token	O
up	O
in	O
the	O
hash	O
table	O
and	O
stores	O
the	O
ﬁrst	O
possible	O
tag	O
type	O
for	O
the	O
word	O
.	O
in	O
our	O
example	O
,	O
the	O
word	O
“	O
fair	O
”	O
would	O
be	O
assigned	O
(	O
possibly	O
temporarily	O
)	O
the	O
tag	O
“	O
jj.	O
”	O
we	O
now	O
have	O
a	O
list	O
of	O
word	O
tokens	O
and	O
an	O
associated	O
list	O
of	O
possible	O
tag	O
types	O
.	O
we	O
now	O
loop	O
through	O
all	O
of	O
the	O
word	O
tokens	O
applying	O
eight	O
transition	O
rules	O
that	O
eric	O
brill	O
’	O
s	O
system	O
learned	O
.	O
we	O
will	O
look	O
at	O
the	O
ﬁrst	O
rule	O
in	O
some	O
detail	O
;	O
i	O
is	O
the	O
loop	O
variable	O
in	O
the	O
range	O
[	O
0	O
,	O
number	O
of	O
word	O
tokens	O
-	O
1	O
]	O
and	O
word	O
is	O
the	O
current	O
word	O
at	O
index	O
i	O
:	O
rule	O
1	O
:	O
dt	O
,	O
{	O
vbd	O
|	O
vbp	O
}	O
--	O
>	O
dt	O
,	O
nn	O
//	O
if	O
(	O
i	O
>	O
0	O
&	O
&	O
ret.get	O
(	O
i	O
-	O
1	O
)	O
.equals	O
(	O
``	O
dt	O
''	O
)	O
)	O
{	O
if	O
(	O
word.equals	O
(	O
``	O
vbd	O
''	O
)	O
||	O
word.equals	O
(	O
``	O
vbp	O
''	O
)	O
||	O
word.equals	O
(	O
``	O
vb	O
''	O
)	O
)	O
{	O
ret.set	O
(	O
i	O
,	O
``	O
nn	O
''	O
)	O
;	O
}	O
}	O
in	O
english	O
,	O
this	O
rule	O
states	O
that	O
if	O
a	O
determiner	O
(	O
dt	O
)	O
at	O
word	O
token	O
index	O
i	O
−	O
1	O
is	O
fol-	O
lowed	O
by	O
either	O
a	O
past	O
tense	O
verb	O
(	O
vbd	O
)	O
or	O
a	O
present	O
tense	O
verb	O
(	O
vbp	O
)	O
then	O
replace	O
the	O
tag	O
type	O
at	O
index	O
i	O
with	O
“	O
nn.	O
”	O
i	O
list	O
the	O
remaining	O
seven	O
rules	O
in	O
a	O
short	O
syntax	O
here	O
and	O
you	O
can	O
look	O
at	O
the	O
java	O
source	O
code	O
to	O
see	O
how	O
they	O
are	O
implemented	O
:	O
rule	O
2	O
:	O
convert	O
a	O
noun	O
to	O
a	O
number	O
(	O
cd	O
)	O
if	O
``	O
.	O
''	O
appears	O
in	O
the	O
word	O
rule	O
3	O
:	O
convert	O
a	O
noun	O
to	O
a	O
past	O
participle	O
if	O
140	O
9.2	O
named	B
entity	I
extraction	I
from	O
text	O
words.get	O
(	O
i	O
)	O
ends	O
with	O
``	O
ed	O
''	O
rule	O
4	O
:	O
convert	O
any	O
type	O
to	O
adverb	O
if	O
it	O
ends	O
in	O
``	O
ly	O
''	O
rule	O
5	O
:	O
convert	O
a	O
common	O
noun	O
(	O
nn	O
or	O
nns	O
)	O
to	O
an	O
adjective	O
if	O
it	O
ends	O
with	O
``	O
al	O
''	O
rule	O
6	O
:	O
convert	O
a	O
noun	O
to	O
a	O
verb	O
if	O
the	O
preceding	O
work	O
is	O
``	O
would	O
''	O
rule	O
7	O
:	O
if	O
a	O
word	O
has	O
been	O
categorized	O
as	O
a	O
common	O
anoun	O
nd	O
it	O
ends	O
with	O
``	O
s	O
''	O
,	O
then	O
set	O
its	O
type	O
to	O
plural	O
common	O
noun	O
(	O
nns	O
)	O
rule	O
8	O
:	O
convert	O
a	O
common	O
noun	O
to	O
a	O
present	O
participle	O
verb	O
(	O
i.e.	O
,	O
a	O
gerund	O
)	O
my	O
fasttag	O
tagger	O
is	O
not	O
quite	O
as	O
accurate	O
as	O
brill	O
’	O
s	O
original	O
tagger	O
so	O
you	O
might	O
want	O
to	O
use	O
his	O
system	O
written	O
in	O
c	O
but	O
which	O
can	O
be	O
executed	O
from	O
java	O
as	O
an	O
external	O
process	O
or	O
with	O
a	O
jni	O
interface	O
.	O
in	O
the	O
next	O
section	O
we	O
will	O
use	O
the	O
tokenizer	O
,	O
stemmer	O
,	O
and	O
tagger	O
from	O
this	O
section	O
to	O
develop	O
a	O
system	O
for	O
identifying	O
named	O
entities	O
in	O
text	O
.	O
9.2	O
named	B
entity	I
extraction	I
from	O
text	O
in	O
this	O
section	O
we	O
will	O
look	O
at	O
identifying	O
names	O
of	O
people	O
and	O
places	O
in	O
text	O
.	O
this	O
can	O
be	O
useful	O
for	O
automatically	O
tagging	B
news	O
articles	O
with	O
the	O
people	O
and	O
place	O
names	O
that	O
occur	O
in	O
the	O
articles	O
.	O
the	O
“	O
secret	O
sauce	O
”	O
for	O
identifying	O
names	O
and	O
places	O
in	O
text	O
is	O
the	O
data	O
in	O
the	O
ﬁle	O
test	O
data/propername.ser	O
–	O
a	O
serialized	O
java	O
data	O
ﬁle	O
con-	O
taining	O
hash	O
tables	O
for	O
human	O
and	O
place	O
names	O
.	O
this	O
data	O
is	O
read	O
in	O
the	O
constructor	O
for	O
the	O
class	O
n	O
ames	O
;	O
it	O
is	O
worthwhile	O
looking	O
at	O
the	O
code	O
if	O
you	O
have	O
not	O
used	O
the	O
java	O
serialization	O
apis	O
before	O
:	O
objectinputstream	O
p	O
=	O
new	O
objectinputstream	O
(	O
ins	O
)	O
;	O
hashtable	O
lastnamehash	O
=	O
(	O
hashtable	O
)	O
p.readobject	O
(	O
)	O
;	O
hashtable	O
firstnamehash	O
=	O
(	O
hashtable	O
)	O
p.readobject	O
(	O
)	O
;	O
hashtable	O
placenamehash	O
=	O
(	O
hashtable	O
)	O
p.readobject	O
(	O
)	O
;	O
hashtable	O
prefixhash	O
=	O
(	O
hashtable	O
)	O
p.readobject	O
(	O
)	O
;	O
if	O
you	O
want	O
to	O
see	O
these	O
data	O
values	O
,	O
use	O
code	O
like	O
while	O
(	O
keyse.hasmoreelements	O
(	O
)	O
)	O
{	O
object	O
key	O
=	O
keyse.nextelement	O
(	O
)	O
;	O
system.out.println	O
(	O
key	O
+	O
``	O
:	O
``	O
+	O
placenamehash.get	O
(	O
key	O
)	O
)	O
;	O
}	O
141	O
9	O
statistical	O
natural	O
language	O
processing	O
to	O
see	O
data	O
values	O
like	O
the	O
following	O
:	O
mauritius	O
:	O
country	O
port-vila	O
:	O
country_capital	O
hutchinson	O
:	O
us_city	O
mississippi	O
:	O
us_state	O
lithuania	O
:	O
country	O
before	O
we	O
look	O
at	O
the	O
entity	O
extraction	O
code	O
and	O
how	O
it	O
works	O
,	O
we	O
will	O
ﬁrst	O
look	O
at	O
an	O
example	O
of	O
using	O
the	O
main	O
apis	O
for	O
the	O
n	O
ames	O
class	O
.	O
the	O
following	O
example	O
uses	O
the	O
methods	O
isp	O
lacen	O
ame	O
,	O
ishumann	O
ame	O
,	O
and	O
getp	O
ropern	O
ames	O
:	O
system.out.println	O
(	O
``	O
los	O
angeles	O
:	O
``	O
+	O
names.isplacename	O
(	O
``	O
los	O
angeles	O
''	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
president	O
bush	O
:	O
``	O
+	O
names.ishumanname	O
(	O
``	O
president	O
bush	O
''	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
president	O
george	O
bush	O
:	O
``	O
+	O
names.ishumanname	O
(	O
``	O
president	O
george	O
bush	O
''	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
president	O
george	O
w.	O
bush	O
:	O
``	O
+	O
names.ishumanname	O
(	O
``	O
president	O
george	O
w.	O
bush	O
''	O
)	O
)	O
;	O
scoredlist	O
[	O
]	O
ret	O
=	O
names.getpropernames	O
(	O
''	O
george	O
bush	O
played	O
golf	O
.	O
president	O
\	O
george	O
w.	O
bush	O
went	O
to	O
london	O
england	O
,	O
\	O
and	O
mexico	O
to	O
see	O
mary	O
smith	O
in	O
moscow	O
.	O
president	O
bush	O
will	O
return	O
home	O
monday	O
.	O
``	O
)	O
;	O
\	O
\	O
system.out.println	O
(	O
``	O
human	O
names	O
:	O
``	O
+	O
system.out.println	O
(	O
``	O
place	O
names	O
:	O
``	O
+	O
ret	O
[	O
1	O
]	O
.getvaluesasstring	O
(	O
)	O
)	O
;	O
ret	O
[	O
0	O
]	O
.getvaluesasstring	O
(	O
)	O
)	O
;	O
the	O
output	O
from	O
running	O
this	O
example	O
is	O
:	O
los	O
angeles	O
:	O
true	O
president	O
bush	O
:	O
true	O
president	O
george	O
bush	O
:	O
true	O
president	O
george	O
w.	O
bush	O
:	O
true	O
*	O
place	O
name	O
:	O
london	O
,	O
placenamehash.get	O
(	O
name	O
)	O
:	O
country_capital	O
*	O
place	O
name	O
:	O
mexico	O
,	O
placenamehash.get	O
(	O
name	O
)	O
:	O
country_capital	O
*	O
place	O
name	O
:	O
moscow	O
,	O
142	O
9.2	O
named	B
entity	I
extraction	I
from	O
text	O
placenamehash.get	O
(	O
name	O
)	O
:	O
country_capital	O
human	O
names	O
:	O
george	O
bush:1	O
,	O
president	O
george	O
w	O
.	O
bush:1	O
,	O
mary	O
smith:1	O
,	O
president	O
bush:1	O
place	O
names	O
:	O
london:1	O
,	O
mexico:1	O
,	O
moscow:1	O
the	O
complete	O
implementation	O
that	O
you	O
can	O
read	O
through	O
in	O
the	O
source	O
ﬁle	O
extract-	O
names.java	O
is	O
reasonably	O
simple	O
.	O
the	O
methods	O
ishumann	O
ame	O
and	O
isp	O
lacen	O
ame	O
simply	O
look	O
up	O
a	O
string	O
in	O
either	O
of	O
the	O
human	O
or	O
place	O
name	O
hash	O
tables	O
.	O
for	O
testing	O
a	O
single	O
word	O
this	O
is	O
very	O
easy	O
;	O
for	O
example	O
:	O
public	O
boolean	O
isplacename	O
(	O
string	O
name	O
)	O
{	O
return	O
placenamehash.get	O
(	O
name	O
)	O
!	O
=	O
null	O
;	O
}	O
the	O
versions	O
of	O
these	O
apis	O
that	O
handle	O
names	O
containing	O
multiple	O
words	O
are	O
just	O
a	O
little	O
more	O
complicated	O
;	O
we	O
need	O
to	O
construct	O
a	O
string	O
from	O
the	O
words	O
between	O
the	O
starting	O
and	O
ending	O
indices	O
and	O
test	O
to	O
see	O
if	O
this	O
new	O
string	O
value	O
is	O
a	O
valid	O
key	O
in	O
the	O
human	O
names	O
or	O
place	O
names	O
hash	O
tables	O
.	O
here	O
is	O
the	O
code	O
for	O
ﬁnding	O
multi-word	O
place	O
names	O
:	O
public	O
boolean	O
isplacename	O
(	O
list	O
<	O
string	O
>	O
words	O
,	O
if	O
(	O
(	O
startindex	O
+	O
numwords	O
)	O
>	O
words.size	O
(	O
)	O
)	O
{	O
int	O
startindex	O
,	O
int	O
numwords	O
)	O
{	O
return	O
false	O
;	O
}	O
if	O
(	O
numwords	O
==	O
1	O
)	O
{	O
return	O
isplacename	O
(	O
words.get	O
(	O
startindex	O
)	O
)	O
;	O
}	O
string	O
s	O
=	O
``	O
''	O
;	O
for	O
(	O
int	O
i=startindex	O
;	O
i	O
<	O
(	O
startindex	O
+	O
numwords	O
)	O
;	O
i++	O
)	O
{	O
if	O
(	O
i	O
<	O
(	O
startindex	O
+	O
numwords	O
-	O
1	O
)	O
)	O
{	O
s	O
=	O
s	O
+	O
words.get	O
(	O
startindex	O
)	O
+	O
``	O
``	O
;	O
}	O
else	O
{	O
s	O
=	O
s	O
+	O
words.get	O
(	O
startindex	O
)	O
;	O
}	O
}	O
return	O
isplacename	O
(	O
s	O
)	O
;	O
}	O
143	O
9	O
statistical	O
natural	O
language	O
processing	O
this	O
same	O
scheme	O
is	O
used	O
to	O
test	O
for	O
multi-word	O
human	O
names	O
.	O
the	O
top-level	O
utility	O
method	O
getp	O
ropern	O
ames	O
is	O
used	O
to	O
ﬁnd	O
human	O
and	O
place	O
names	O
in	O
text	O
.	O
the	O
code	O
in	O
getp	O
ropern	O
ames	O
is	O
intentionally	O
easy	O
to	O
understand	O
but	O
not	O
very	O
efﬁcient	O
because	O
of	O
all	O
of	O
the	O
temporary	O
test	O
strings	O
that	O
need	O
to	O
be	O
constructed	O
.	O
9.3	O
using	O
the	O
wordnet	O
linguistic	O
database	O
the	O
home	O
page	O
for	O
the	O
wordnet	O
project	O
is	O
http	O
:	O
//wordnet.princeton.edu	O
and	O
you	O
will	O
need	O
to	O
download	O
version	O
3.0	O
and	O
install	O
it	O
on	O
your	O
computer	O
to	O
use	O
the	O
example	O
programs	O
in	O
this	O
section	O
and	O
in	O
chapter	O
10.	O
as	O
you	O
can	O
see	O
on	O
the	O
wordnet	O
web	O
site	O
,	O
there	O
are	O
several	O
java	O
libraries	O
for	O
accessing	O
the	O
wordnet	O
data	O
ﬁles	O
;	O
we	O
will	O
use	O
the	O
jaws	O
library	O
written	O
by	O
brett	O
spell	O
as	O
a	O
student	O
project	O
at	O
the	O
southern	O
methodist	O
university	O
.	O
i	O
include	O
brett	O
’	O
s	O
library	O
and	O
the	O
example	O
programs	O
for	O
this	O
section	O
in	O
the	O
directory	O
src-jaws-wordnet	O
in	O
the	O
zip	O
ﬁle	O
for	O
this	O
book	O
.	O
9.3.1	O
tutorial	O
on	O
wordnet	O
the	O
wordnet	O
lexical	O
database	O
is	O
an	O
ongoing	O
research	O
project	O
that	O
includes	O
many	O
man	O
years	O
of	O
effort	O
by	O
professional	O
linguists	O
.	O
my	O
own	O
use	O
of	O
wordnet	O
over	O
the	O
last	O
ten	O
years	O
has	O
been	O
simple	O
,	O
mainly	O
using	O
the	O
database	O
to	O
determine	O
synonyms	O
(	O
called	O
synsets	O
in	O
wordnet	O
)	O
and	O
looking	O
at	O
the	O
possible	O
parts	O
of	O
speech	O
of	O
words	O
.	O
for	O
reference	O
(	O
as	O
taken	O
from	O
the	O
wikipedia	O
article	O
on	O
wordnet	O
)	O
,	O
here	O
is	O
a	O
small	O
subset	O
of	O
the	O
type	O
of	O
relationships	O
contained	O
in	O
wordnet	O
for	O
verbs	O
shown	O
by	O
examples	O
(	O
taken	O
from	O
the	O
wikipedia	O
article	O
)	O
:	O
hypernym	O
travel	O
(	O
less	O
general	O
)	O
is	O
an	O
hypernym	O
of	O
movement	O
(	O
more	O
general	O
)	O
entailment	O
to	O
sleep	O
is	O
entailed	O
by	O
to	O
snore	O
because	O
you	O
must	O
be	O
asleep	O
to	O
snore	O
here	O
are	O
a	O
few	O
of	O
the	O
relations	O
supported	O
for	O
nouns	O
:	O
hypernyms	O
canine	O
is	O
a	O
hypernym	O
of	O
dog	O
since	O
every	O
dog	O
is	O
of	O
type	O
canine	O
hyponyms	O
dog	O
(	O
less	O
general	O
)	O
is	O
a	O
hyponym	O
of	O
canine	O
(	O
more	O
general	O
)	O
holonym	O
building	O
is	O
a	O
holonym	O
of	O
window	O
because	O
a	O
window	O
is	O
part	O
of	O
a	O
building	O
meronym	O
window	O
is	O
a	O
meronym	O
of	O
building	O
because	O
a	O
window	O
is	O
part	O
of	O
a	O
building	O
some	O
of	O
the	O
related	O
information	O
maintained	O
for	O
adjectives	O
is	O
:	O
related	O
nouns	O
similar	O
to	O
144	O
9.3	O
using	O
the	O
wordnet	O
linguistic	O
database	O
i	O
ﬁnd	O
the	O
wordnet	O
book	O
(	O
wordnet	O
:	O
an	O
electronic	O
lexical	O
database	O
(	O
language	O
,	O
speech	O
,	O
and	O
communication	O
)	O
by	O
christiane	O
fellbaum	O
,	O
1998	O
)	O
to	O
be	O
a	O
detailed	O
refer-	O
ence	O
for	O
wordnet	O
but	O
there	O
have	O
been	O
several	O
new	O
releases	O
of	O
wordnet	O
since	O
the	O
book	O
was	O
published	O
.	O
the	O
wordnet	O
site	O
and	O
the	O
wikipedia	O
article	O
on	O
wordnet	O
are	O
also	O
good	O
sources	O
of	O
information	O
if	O
you	O
decide	O
to	O
make	O
wordnet	O
part	O
of	O
your	O
toolkit	O
:	O
http	O
:	O
//wordnet.princeton.edu/	O
http	O
:	O
//en.wikipedia.org/wiki/wordnet	O
we	O
will	O
brett	O
’	O
s	O
open	O
source	O
java	O
wordnet	O
utility	O
library	O
in	O
the	O
next	O
section	O
to	O
ex-	O
periment	O
with	O
wordnet	O
.	O
there	O
are	O
also	O
good	O
open	O
source	O
client	O
applications	O
for	O
browsing	O
the	O
wordnet	O
lexical	O
database	O
that	O
are	O
linked	O
on	O
the	O
wordnet	O
web	O
site	O
.	O
9.3.2	O
example	O
use	O
of	O
the	O
jaws	O
wordnet	O
library	O
assuming	O
that	O
you	O
have	O
downloaded	O
and	O
installed	O
wordnet	O
on	O
your	O
computer	O
,	O
if	O
you	O
look	O
at	O
the	O
data	O
ﬁles	O
themselves	O
you	O
will	O
notice	O
that	O
the	O
data	O
is	O
divided	O
into	O
index	O
and	O
data	O
ﬁles	O
for	O
different	O
data	O
types	O
.	O
the	O
jaws	O
library	O
(	O
and	O
other	O
wordnet	O
client	O
libraries	O
for	O
many	O
programming	O
languages	O
)	O
provides	O
a	O
useful	O
view	O
and	O
convenient	O
access	O
to	O
the	O
wordnet	O
data	O
.	O
you	O
will	O
need	O
to	O
deﬁne	O
a	O
java	O
property	O
for	O
the	O
location	O
of	O
the	O
raw	O
wordnet	O
data	O
ﬁles	O
in	O
order	O
to	O
use	O
jaws	O
;	O
on	O
my	O
system	O
i	O
set	O
:	O
wordnet.database.dir=/users/markw/temp/wordnet3/dict	O
the	O
example	O
class	O
w	O
ordn	O
ett	O
est	O
ﬁnds	O
the	O
different	O
word	O
senses	O
for	O
a	O
given	O
word	O
and	O
prints	O
this	O
data	O
to	O
standard	O
output	O
.	O
we	O
will	O
tweak	O
this	O
code	O
slightly	O
in	O
the	O
next	O
section	O
where	O
we	O
will	O
be	O
combining	O
wordnet	O
with	O
a	O
part	O
of	O
speech	O
tagger	O
in	O
another	O
example	O
program	O
.	O
accessing	O
wordnet	O
data	O
using	O
brett	O
’	O
s	O
library	O
is	O
easy	O
,	O
so	O
we	O
will	O
spend	O
more	O
time	O
actually	O
looking	O
at	O
the	O
wordnet	O
data	O
itself	O
.	O
here	O
is	O
a	O
sample	O
program	O
that	O
shows	O
how	O
to	O
use	O
the	O
apis	O
.	O
the	O
class	O
constructor	O
makes	O
a	O
connection	O
to	O
the	O
wordnet	O
data	O
ﬁles	O
for	O
reuse	O
:	O
public	O
class	O
wordnettest	O
{	O
public	O
wordnettest	O
(	O
)	O
{	O
database	O
=	O
wordnetdatabase.getfileinstance	O
(	O
)	O
;	O
}	O
here	O
i	O
wrap	O
a	O
jaws	O
utility	O
method	O
to	O
return	O
lists	O
of	O
synsets	O
instead	O
of	O
raw	O
java	O
arrays	O
:	O
145	O
9	O
statistical	O
natural	O
language	O
processing	O
public	O
list	O
<	O
synset	O
>	O
getsynsets	O
(	O
string	O
word	O
)	O
{	O
return	O
arrays.aslist	O
(	O
database.getsynsets	O
(	O
word	O
)	O
)	O
;	O
}	O
public	O
static	O
void	O
main	O
(	O
string	O
[	O
]	O
args	O
)	O
{	O
the	O
constant	O
p	O
ropertyn	O
ames.dat	O
abase	O
direct	O
ory	O
is	O
equal	O
to	O
“	O
word-	O
net.database.dir.	O
”	O
it	O
is	O
a	O
good	O
idea	O
to	O
make	O
sure	O
that	O
you	O
have	O
this	O
java	O
property	O
set	O
;	O
if	O
the	O
value	O
prints	O
as	O
null	O
,	O
then	O
either	O
ﬁx	O
the	O
way	O
you	O
set	O
java	O
properties	O
,	O
or	O
just	O
set	O
it	O
explicitly	O
:	O
system.setproperty	O
(	O
propertynames.database_directory	O
,	O
''	O
/users/markw/temp/wordnet3/dict	O
''	O
)	O
;	O
wordnettest	O
tester	O
=	O
new	O
wordnettest	O
(	O
)	O
;	O
string	O
word	O
=	O
``	O
bank	O
''	O
;	O
list	O
<	O
synset	O
>	O
synset_list	O
=	O
tester.getsynsets	O
(	O
word	O
)	O
;	O
system.out.println	O
(	O
``	O
\n\n**	O
process	O
word	O
:	O
``	O
+	O
word	O
)	O
;	O
for	O
(	O
synset	O
synset	O
:	O
synset_list	O
)	O
{	O
system.out.println	O
(	O
``	O
\nsynset	O
type	O
:	O
''	O
+	O
synset_types	O
[	O
synset.gettype	O
(	O
)	O
.getcode	O
(	O
)	O
]	O
)	O
;	O
system.out.println	O
(	O
``	O
definition	O
:	O
``	O
+	O
synset.getdefinition	O
(	O
)	O
)	O
;	O
//	O
word	O
forms	O
are	O
synonyms	O
:	O
for	O
(	O
string	O
wordform	O
:	O
synset.getwordforms	O
(	O
)	O
)	O
{	O
if	O
(	O
!	O
wordform.equals	O
(	O
word	O
)	O
)	O
{	O
system.out.println	O
(	O
``	O
synonym	O
:	O
''	O
+	O
wordform	O
)	O
;	O
antonyms	O
are	O
the	O
opposites	O
to	O
synonyms	O
.	O
notice	O
that	O
antonyms	O
are	O
speciﬁc	O
to	O
indi-	O
vidual	O
senses	O
for	O
a	O
word	O
.	O
this	O
is	O
why	O
i	O
have	O
the	O
following	O
code	O
to	O
display	O
antonyms	O
inside	O
the	O
loop	O
over	O
word	O
forms	O
for	O
each	O
word	O
sense	O
for	O
“	O
bank	O
”	O
:	O
//	O
antonyms	O
mean	O
the	O
opposite	O
:	O
for	O
(	O
wordsense	O
antonym	O
:	O
synset.getantonyms	O
(	O
wordform	O
)	O
)	O
{	O
for	O
(	O
string	O
opposite	O
:	O
antonym.getsynset	O
(	O
)	O
.getwordforms	O
(	O
)	O
)	O
{	O
system.out.println	O
(	O
''	O
wordform+	O
''	O
)	O
:	O
``	O
+	O
opposite	O
)	O
;	O
antonym	O
(	O
of	O
``	O
+	O
}	O
}	O
}	O
}	O
146	O
9.3	O
using	O
the	O
wordnet	O
linguistic	O
database	O
system.out.println	O
(	O
``	O
\n	O
''	O
)	O
;	O
}	O
}	O
private	O
wordnetdatabase	O
database	O
;	O
private	O
final	O
static	O
string	O
[	O
]	O
synset_types	O
=	O
{	O
``	O
''	O
,	O
``	O
noun	O
''	O
,	O
``	O
verb	O
''	O
}	O
;	O
}	O
using	O
this	O
example	O
program	O
,	O
we	O
can	O
see	O
the	O
word	O
“	O
bank	O
”	O
has	O
18	O
different	O
“	O
senses	O
,	O
”	O
10	O
noun	O
,	O
and	O
8	O
verb	O
senses	O
:	O
**	O
process	O
word	O
:	O
bank	O
synset	O
type	O
:	O
noun	O
definition	O
:	O
sloping	O
land	O
(	O
especially	O
the	O
slope	O
synset	O
type	O
:	O
beside	O
a	O
body	O
of	O
water	O
)	O
noun	O
definition	O
:	O
a	O
financial	O
institution	O
that	O
accepts	O
deposits	O
and	O
channels	O
the	O
money	O
into	O
lending	O
activities	O
depository	O
financial	O
institution	O
banking	O
concern	O
banking	O
company	O
noun	O
synonym	O
:	O
synonym	O
:	O
synonym	O
:	O
synset	O
type	O
:	O
definition	O
:	O
a	O
long	O
ridge	O
or	O
pile	O
synset	O
type	O
:	O
noun	O
definition	O
:	O
an	O
arrangement	O
of	O
similar	O
objects	O
synset	O
type	O
:	O
in	O
a	O
row	O
or	O
in	O
tiers	O
noun	O
definition	O
:	O
a	O
supply	O
or	O
stock	O
held	O
in	O
reserve	O
synset	O
type	O
:	O
for	O
future	O
use	O
(	O
especially	O
in	O
emergencies	O
)	O
noun	O
definition	O
:	O
the	O
funds	O
held	O
by	O
a	O
gambling	O
house	O
synset	O
type	O
:	O
or	O
the	O
dealer	O
in	O
some	O
gambling	O
games	O
noun	O
definition	O
:	O
a	O
slope	O
in	O
the	O
turn	O
of	O
a	O
road	O
or	O
synonym	O
:	O
synonym	O
:	O
synset	O
type	O
:	O
track	O
;	O
the	O
outside	O
is	O
higher	O
than	O
the	O
inside	O
in	O
order	O
to	O
reduce	O
the	O
effects	O
of	O
centrifugal	O
force	O
cant	O
camber	O
noun	O
definition	O
:	O
a	O
container	O
(	O
usually	O
with	O
a	O
slot	O
147	O
9	O
statistical	O
natural	O
language	O
processing	O
synonym	O
:	O
synonym	O
:	O
synonym	O
:	O
synset	O
type	O
:	O
in	O
the	O
top	O
)	O
for	O
keeping	O
money	O
at	O
home	O
savings	O
bank	O
coin	O
bank	O
money	O
box	O
noun	O
definition	O
:	O
a	O
building	O
in	O
which	O
the	O
business	O
synonym	O
:	O
synset	O
type	O
:	O
of	O
banking	O
transacted	O
bank	O
building	O
noun	O
definition	O
:	O
a	O
flight	O
maneuver	O
;	O
aircraft	O
synset	O
type	O
:	O
tips	O
laterally	O
about	O
its	O
longitudinal	O
axis	O
(	O
especially	O
in	O
turning	O
)	O
verb	O
definition	O
:	O
tip	O
laterally	O
synset	O
type	O
:	O
verb	O
definition	O
:	O
enclose	O
with	O
a	O
bank	O
synset	O
type	O
:	O
verb	O
definition	O
:	O
do	O
business	O
with	O
a	O
bank	O
or	O
synset	O
type	O
:	O
keep	O
an	O
account	O
at	O
a	O
bank	O
verb	O
definition	O
:	O
act	O
as	O
the	O
banker	O
in	O
a	O
game	O
synset	O
type	O
:	O
or	O
in	O
gambling	O
verb	O
definition	O
:	O
be	O
in	O
the	O
banking	O
business	O
synset	O
type	O
:	O
verb	O
definition	O
:	O
put	O
into	O
a	O
bank	O
account	O
synonym	O
:	O
deposit	O
antonym	O
(	O
of	O
deposit	O
)	O
:	O
withdraw	O
antonym	O
(	O
of	O
deposit	O
)	O
:	O
draw	O
antonym	O
(	O
of	O
deposit	O
)	O
:	O
take	O
out	O
antonym	O
(	O
of	O
deposit	O
)	O
:	O
draw	O
off	O
synset	O
type	O
:	O
verb	O
definition	O
:	O
cover	O
with	O
ashes	O
so	O
to	O
control	O
synset	O
type	O
:	O
the	O
rate	O
of	O
burning	O
verb	O
definition	O
:	O
have	O
confidence	O
or	O
faith	O
in	O
synonym	O
:	O
trust	O
antonym	O
(	O
of	O
trust	O
)	O
:	O
distrust	O
antonym	O
(	O
of	O
trust	O
)	O
:	O
mistrust	O
antonym	O
(	O
of	O
trust	O
)	O
:	O
suspect	O
antonym	O
(	O
of	O
trust	O
)	O
:	O
distrust	O
antonym	O
(	O
of	O
trust	O
)	O
:	O
mistrust	O
antonym	O
(	O
of	O
trust	O
)	O
:	O
suspect	O
148	O
9.3	O
using	O
the	O
wordnet	O
linguistic	O
database	O
synonym	O
:	O
synonym	O
:	O
swear	O
rely	O
wordnet	O
provides	O
a	O
rich	O
linguistic	O
database	O
for	O
human	O
linguists	O
but	O
although	O
i	O
have	O
been	O
using	O
wordnet	O
since	O
1999	O
,	O
i	O
do	O
not	O
often	O
use	O
it	O
in	O
automated	O
systems	O
.	O
i	O
tend	O
to	O
use	O
it	O
for	O
manual	O
reference	O
and	O
sometimes	O
for	O
simple	O
tasks	O
like	O
augmenting	O
a	O
list	O
of	O
terms	O
with	O
synonyms	O
.	O
in	O
the	O
next	O
two	O
sub-sections	O
i	O
suggest	O
two	O
possible	O
projects	O
both	O
involving	O
use	O
of	O
synsets	O
(	O
synonyms	O
)	O
.	O
i	O
have	O
used	O
both	O
of	O
these	O
suggested	O
ideas	O
in	O
my	O
own	O
projects	O
with	O
some	O
success	O
.	O
9.3.3	O
suggested	O
project	O
:	O
using	O
a	O
part	O
of	O
speech	O
tagger	O
to	O
use	O
the	O
correct	O
wordnet	O
synonyms	O
we	O
saw	O
in	O
section	O
9.3	O
that	O
wordnet	O
will	O
give	O
us	O
both	O
synonyms	O
and	O
antonyms	O
(	O
opposite	O
meaning	O
)	O
of	O
words	O
.	O
the	O
problem	O
is	O
that	O
we	O
can	O
only	O
get	O
words	O
with	O
similar	O
and	O
opposite	O
meanings	O
for	O
speciﬁc	O
“	O
senses	O
”	O
of	O
a	O
word	O
.	O
using	O
the	O
example	O
in	O
section	O
9.3	O
,	O
synonyms	O
of	O
the	O
word	O
“	O
bank	O
”	O
in	O
the	O
sense	O
of	O
a	O
verb	O
meaning	O
“	O
have	O
conﬁdence	O
or	O
faith	O
in	O
”	O
are	O
:	O
•	O
trust	O
•	O
swear	O
•	O
rely	O
while	O
synonyms	O
for	O
“	O
bank	O
”	O
in	O
the	O
sense	O
of	O
a	O
noun	O
meaning	O
“	O
a	O
ﬁnancial	O
institution	O
that	O
accepts	O
deposits	O
and	O
channels	O
the	O
money	O
into	O
lending	O
activities	O
”	O
are	O
:	O
•	O
depository	O
ﬁnancial	O
institution	O
•	O
banking	O
concern	O
•	O
banking	O
company	O
so	O
,	O
it	O
does	O
not	O
make	O
too	O
much	O
sense	O
to	O
try	O
to	O
maintain	O
a	O
data	O
map	O
of	O
synonyms	O
for	O
a	O
given	O
word	O
.	O
it	O
does	O
make	O
some	O
sense	O
to	O
try	O
to	O
use	O
some	O
information	O
about	O
the	O
context	O
of	O
a	O
word	O
.	O
we	O
can	O
do	O
this	O
with	O
some	O
degree	O
of	O
accuracy	O
by	O
using	O
the	O
part	O
of	O
speech	O
tagger	O
from	O
section	O
9.1	O
to	O
at	O
least	O
determine	O
that	O
a	O
word	O
in	O
a	O
sentence	O
is	O
a	O
noun	O
or	O
a	O
verb	O
,	O
and	O
thus	O
limit	O
the	O
mapping	O
of	O
possible	O
synonyms	O
for	O
the	O
word	O
in	O
its	O
current	O
context	O
.	O
149	O
9	O
statistical	O
natural	O
language	O
processing	O
9.3.4	O
suggested	O
project	O
:	O
using	O
wordnet	O
synonyms	O
to	O
improve	O
document	O
clustering	O
another	O
suggestion	O
for	O
a	O
wordnet-based	O
project	O
is	O
to	O
use	O
the	O
tagger	O
to	O
identify	O
the	O
probable	O
part	O
of	O
speech	O
for	O
each	O
word	O
in	O
all	O
text	O
documents	O
that	O
you	O
want	O
to	O
cluster	O
,	O
and	O
augment	O
the	O
documents	O
with	O
sysnset	O
(	O
synonym	O
)	O
data	O
.	O
you	O
can	O
then	O
cluster	O
the	O
documents	O
similarly	O
to	O
how	O
we	O
will	O
calculate	O
document	O
similarity	O
in	O
section	O
9.5	O
.	O
9.4	O
automatically	O
assigning	O
tags	O
to	O
text	O
by	O
tagging	B
i	O
mean	O
assigning	O
zero	O
or	O
more	O
categories	O
like	O
“	O
politics	O
”	O
,	O
“	O
economy	O
”	O
,	O
etc	O
.	O
to	O
text	O
based	O
on	O
the	O
words	O
contained	O
in	O
the	O
text	O
.	O
while	O
the	O
code	O
for	O
doing	O
this	O
is	O
simple	O
there	O
is	O
usually	O
much	O
work	O
to	O
do	O
to	O
build	O
a	O
word	O
count	O
database	O
for	O
different	O
classiﬁcations	O
.	O
i	O
have	O
been	O
working	O
on	O
commercial	O
products	O
for	O
automatic	O
tagging	B
and	O
semantic	O
ex-	O
traction	O
for	O
about	O
ten	O
years	O
(	O
see	O
www.knowledgebooks.com	O
if	O
you	O
are	O
interested	O
)	O
.	O
in	O
this	O
section	O
i	O
will	O
show	O
you	O
some	O
simple	O
techniques	O
for	O
automatically	O
assigning	O
tags	O
or	O
categories	O
to	O
text	O
using	O
some	O
code	O
snippets	O
from	O
my	O
own	O
commercial	O
prod-	O
uct	O
.	O
we	O
will	O
use	O
a	O
set	O
of	O
tags	O
for	O
which	O
i	O
have	O
collected	O
word	O
frequency	O
statistics	O
.	O
for	O
example	O
,	O
a	O
tag	O
of	O
“	O
java	O
”	O
might	O
be	O
associated	O
with	O
the	O
use	O
of	O
the	O
words	O
“	O
java	O
,	O
”	O
“	O
jvm	O
,	O
”	O
“	O
sun	O
,	O
”	O
etc	O
.	O
you	O
can	O
ﬁnd	O
my	O
pre-trained	O
tag	O
data	O
in	O
the	O
ﬁle	O
:	O
test_data/classification_tags.xml	O
the	O
java	O
source	O
code	O
for	O
the	O
class	O
autot	O
agger	O
is	O
in	O
the	O
ﬁle	O
:	O
src-statistical-nlp/	O
com/knowledgebooks/nlp/autotagger.java	O
the	O
autot	O
agger	O
class	O
uses	O
a	O
few	O
data	O
structures	O
to	O
keep	O
track	O
of	O
both	O
the	O
names	O
of	O
tags	O
and	O
the	O
word	O
count	O
statistics	O
for	O
words	O
associated	O
with	O
each	O
tag	O
name	O
.	O
i	O
use	O
a	O
temporary	O
hash	O
table	O
for	O
processing	O
the	O
xml	O
input	O
data	O
:	O
private	O
static	O
hashtable	O
<	O
string	O
,	O
hashtable	O
<	O
string	O
,	O
float	O
>	O
>	O
tagclasses	O
;	O
the	O
names	O
of	O
tags	O
used	O
are	O
deﬁned	O
in	O
the	O
xml	O
tag	O
data	O
ﬁle	O
:	O
change	O
this	O
ﬁle	O
,	O
and	O
you	O
alter	O
both	O
the	O
tags	O
and	O
behavior	O
of	O
this	O
utility	O
class	O
.	O
here	O
is	O
a	O
snippet	O
of	O
data	O
150	O
9.4	O
automatically	O
assigning	O
tags	O
to	O
text	O
deﬁned	O
in	O
the	O
xml	O
tag	O
data	O
ﬁle	O
describing	O
some	O
words	O
(	O
and	O
their	O
scores	O
)	O
associated	O
with	O
the	O
tag	O
“	O
religion	O
buddhism	O
”	O
:	O
<	O
tags	O
>	O
<	O
topic	O
name=	O
''	O
religion_buddhism	O
''	O
>	O
<	O
term	O
name=	O
''	O
buddhism	O
''	O
score=	O
''	O
52	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
buddhist	O
''	O
score=	O
''	O
50	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
mind	O
''	O
score=	O
''	O
50	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
medit	O
''	O
score=	O
''	O
41	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
buddha	O
''	O
score=	O
''	O
37	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
practic	O
''	O
score=	O
''	O
31	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
teach	O
''	O
score=	O
''	O
15	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
path	O
''	O
score=	O
''	O
14	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
mantra	O
''	O
score=	O
''	O
14	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
thought	O
''	O
score=	O
''	O
14	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
school	O
''	O
score=	O
''	O
13	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
zen	O
''	O
score=	O
''	O
13	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
mahayana	O
''	O
score=	O
''	O
13	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
suffer	O
''	O
score=	O
''	O
12	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
dharma	O
''	O
score=	O
''	O
12	O
''	O
/	O
>	O
<	O
term	O
name=	O
''	O
tibetan	O
''	O
score=	O
''	O
11	O
''	O
/	O
>	O
.	O
.	O
.	O
<	O
/topic	O
>	O
.	O
.	O
.	O
<	O
/tags	O
>	O
notice	O
that	O
the	O
term	O
names	O
are	O
stemmed	O
words	O
and	O
all	O
lower	O
case	O
.	O
there	O
are	O
28	O
tags	O
deﬁned	O
in	O
the	O
input	O
xml	O
ﬁle	O
included	O
in	O
the	O
zip	O
ﬁle	O
for	O
this	O
book	O
.	O
for	O
data	O
access	O
,	O
i	O
also	O
maintain	O
an	O
array	O
of	O
tag	O
names	O
and	O
an	O
associated	O
list	O
of	O
the	O
word	O
frequency	O
hash	O
tables	O
for	O
each	O
tag	O
name	O
:	O
private	O
static	O
string	O
[	O
]	O
tagclassnames	O
;	O
private	O
static	O
list	O
<	O
hashtable	O
<	O
string	O
,	O
float	O
>	O
>	O
hashes	O
=	O
new	O
arraylist	O
<	O
hashtable	O
<	O
string	O
,	O
float	O
>	O
>	O
(	O
)	O
;	O
the	O
xml	O
data	O
is	O
read	O
and	O
these	O
data	O
structures	O
are	O
ﬁlled	O
during	O
static	O
class	O
load	O
time	O
so	O
creating	O
multiple	O
instances	O
of	O
the	O
class	O
autot	O
agger	O
has	O
no	O
performance	O
penalty	O
in	O
either	O
memory	O
use	O
or	O
processing	O
time	O
.	O
except	O
for	O
an	O
empty	O
default	O
class	O
constructor	O
,	O
there	O
is	O
only	O
one	O
public	O
api	O
for	O
this	O
class	O
,	O
the	O
method	O
gett	O
ags	O
:	O
public	O
list	O
<	O
namevalue	O
<	O
string	O
,	O
float	O
>	O
>	O
gettags	O
(	O
string	O
text	O
)	O
{	O
151	O
9	O
statistical	O
natural	O
language	O
processing	O
the	O
utility	O
class	O
n	O
amev	O
alue	O
is	O
deﬁned	O
in	O
the	O
ﬁle	O
:	O
src-statistical-nlp/	O
com/knowledgebooks/nlp/util/namevalue.java	O
to	O
determine	O
the	O
tags	O
for	O
input	O
text	O
,	O
we	O
keep	O
a	O
running	O
score	O
for	O
each	O
deﬁned	O
tag	O
type	O
.	O
i	O
use	O
the	O
internal	O
class	O
sf	O
triple	O
to	O
hold	O
triple	O
values	O
of	O
word	O
,	O
score	O
,	O
and	O
tag	O
index	O
.	O
i	O
choose	O
the	O
tags	O
with	O
the	O
highest	O
scores	O
as	O
the	O
automatically	O
assigned	O
tags	O
for	O
the	O
input	O
text	O
.	O
scores	O
for	O
each	O
tag	O
are	O
calculated	O
by	O
taking	O
each	O
word	O
in	O
the	O
input	O
text	O
,	O
stemming	O
it	O
,	O
and	O
if	O
the	O
stem	O
is	O
in	O
the	O
word	O
frequency	O
hash	O
table	O
for	O
the	O
tag	O
then	O
add	O
the	O
score	O
value	O
in	O
the	O
hash	O
table	O
to	O
the	O
running	O
sum	O
for	O
the	O
tag	O
.	O
you	O
can	O
refer	O
to	O
the	O
autotagger.java	O
source	O
code	O
for	O
details	O
.	O
here	O
is	O
an	O
example	O
use	O
of	O
class	O
autot	O
agger	O
:	O
autotagger	O
test	O
=	O
new	O
autotagger	O
(	O
)	O
;	O
string	O
s	O
=	O
``	O
the	O
president	O
went	O
to	O
congress	O
to	O
argue	O
for	O
his	O
tax	O
bill	O
before	O
leaving	O
on	O
a	O
vacation	O
to	O
las	O
vegas	O
to	O
see	O
some	O
shows	O
and	O
gamble	O
.	O
``	O
;	O
list	O
<	O
namevalue	O
<	O
string	O
,	O
float	O
>	O
>	O
results	O
=	O
for	O
(	O
namevalue	O
<	O
string	O
,	O
float	O
>	O
result	O
:	O
results	O
)	O
{	O
system.out.println	O
(	O
result	O
)	O
;	O
test.gettags	O
(	O
s	O
)	O
;	O
}	O
the	O
output	O
looks	O
like	O
:	O
[	O
namevalue	O
:	O
news_economy	O
:	O
1.0	O
]	O
[	O
namevalue	O
:	O
news_politics	O
:	O
0.84	O
]	O
9.5	O
text	B
clustering	I
the	O
text	B
clustering	I
system	O
that	O
i	O
have	O
written	O
for	O
my	O
own	O
projects	O
,	O
in	O
simpliﬁed	O
form	O
,	O
will	O
be	O
used	O
in	O
the	O
section	O
.	O
it	O
is	O
inherently	O
inefﬁcient	O
when	O
clustering	O
a	O
large	O
number	O
of	O
text	O
documents	O
because	O
i	O
perform	O
signiﬁcant	O
semantic	O
processing	O
on	O
each	O
text	O
document	O
and	O
then	O
compare	O
all	O
combinations	O
of	O
documents	O
.	O
the	O
runtime	O
performance	O
is	O
o	O
(	O
n	O
2	O
)	O
where	O
n	O
is	O
the	O
number	O
of	O
text	O
documents	O
.	O
if	O
you	O
need	O
to	O
cluster	O
or	O
compare	O
a	O
very	O
large	O
number	O
of	O
documents	O
you	O
will	O
probably	O
want	O
to	O
use	O
a	O
k-mean	O
clustering	O
algorithm	O
(	O
search	B
for	O
“	O
k-mean	O
clustering	O
java	O
”	O
for	O
some	O
open	O
source	O
projects	O
)	O
.	O
152	O
9.5	O
text	B
clustering	I
i	O
use	O
a	O
few	O
different	O
algorithms	O
to	O
rate	O
the	O
similarity	O
of	O
any	O
two	O
text	O
documents	O
and	O
i	O
will	O
combine	O
these	O
depending	O
on	O
the	O
requirements	O
of	O
the	O
project	O
that	O
i	O
am	O
working	O
on	O
:	O
1.	O
calculate	O
the	O
intersection	O
of	O
common	O
words	O
in	O
the	O
two	O
documents	O
.	O
2.	O
calculate	O
the	O
intersection	O
of	O
common	O
word	O
stems	O
in	O
the	O
two	O
documents	O
.	O
3.	O
calculate	O
the	O
intersection	O
of	O
tags	O
assigned	O
to	O
the	O
two	O
documents	O
.	O
4.	O
calculate	O
the	O
intersection	O
of	O
human	O
and	O
place	O
names	O
in	O
the	O
two	O
documents	O
.	O
in	O
this	O
section	O
we	O
will	O
implement	O
the	O
second	O
option	O
:	O
calculate	O
the	O
intersection	O
of	O
word	O
stems	O
in	O
two	O
documents	O
.	O
without	O
showing	O
the	O
package	O
and	O
import	O
state-	O
ments	O
,	O
it	O
takes	O
just	O
a	O
few	O
lines	O
of	O
code	O
to	O
implement	O
this	O
algorithm	O
when	O
we	O
use	O
the	O
stemmer	O
class	O
.	O
the	O
following	O
listing	O
shows	O
the	O
implementation	O
of	O
class	O
comparabledocument	O
with	O
comments	O
.	O
we	O
start	O
by	O
deﬁning	O
constructors	O
for	O
documents	O
deﬁned	O
by	O
a	O
f	O
ile	O
object	O
and	O
a	O
string	O
object	O
:	O
public	O
class	O
comparabledocument	O
{	O
//	O
disable	O
default	O
constructor	O
calls	O
:	O
private	O
comparabledocument	O
(	O
)	O
{	O
}	O
public	O
comparabledocument	O
(	O
file	O
document	O
)	O
throws	O
filenotfoundexception	O
{	O
this	O
(	O
new	O
scanner	O
(	O
document	O
)	O
.	O
usedelimiter	O
(	O
``	O
\\z	O
''	O
)	O
.next	O
(	O
)	O
)	O
;	O
}	O
public	O
comparabledocument	O
(	O
string	O
text	O
)	O
{	O
list	O
<	O
string	O
>	O
stems	O
=	O
new	O
stemmer	O
(	O
)	O
.stemstring	O
(	O
text	O
)	O
;	O
for	O
(	O
string	O
stem	O
:	O
stems	O
)	O
{	O
stem_count++	O
;	O
if	O
(	O
stemcountmap.containskey	O
(	O
stem	O
)	O
)	O
{	O
integer	O
count	O
=	O
stemcountmap.get	O
(	O
stem	O
)	O
;	O
stemcountmap.put	O
(	O
stem	O
,	O
1	O
+	O
count	O
)	O
;	O
}	O
else	O
{	O
stemcountmap.put	O
(	O
stem	O
,	O
1	O
)	O
;	O
}	O
}	O
}	O
in	O
the	O
last	O
constructor	O
,	O
i	O
simply	O
create	O
a	O
count	O
of	O
how	O
many	O
times	O
each	O
stem	O
occurs	O
in	O
the	O
document	O
.	O
153	O
9	O
statistical	O
natural	O
language	O
processing	O
the	O
public	O
api	O
allows	O
us	O
to	O
get	O
the	O
stem	O
count	O
hash	O
table	O
,	O
the	O
number	O
of	O
stems	O
in	O
the	O
original	O
document	O
,	O
and	O
a	O
numeric	O
comparison	O
value	O
for	O
comparing	O
this	O
document	O
with	O
another	O
(	O
this	O
is	O
the	O
ﬁrst	O
version	O
–	O
we	O
will	O
add	O
an	O
improvement	O
later	O
)	O
:	O
public	O
map	O
<	O
string	O
,	O
integer	O
>	O
getstemmap	O
(	O
)	O
{	O
return	O
stemcountmap	O
;	O
}	O
public	O
int	O
getstemcount	O
(	O
)	O
{	O
return	O
stem_count	O
;	O
}	O
public	O
float	O
compareto	O
(	O
comparabledocument	O
otherdocument	O
)	O
{	O
long	O
count	O
=	O
0	O
;	O
map	O
<	O
string	O
,	O
integer	O
>	O
map2	O
=	O
otherdocument.getstemmap	O
(	O
)	O
;	O
iterator	O
iter	O
=	O
stemcountmap.keyset	O
(	O
)	O
.iterator	O
(	O
)	O
;	O
while	O
(	O
iter.hasnext	O
(	O
)	O
)	O
{	O
object	O
key	O
=	O
iter.next	O
(	O
)	O
;	O
integer	O
count1	O
=	O
stemcountmap.get	O
(	O
key	O
)	O
;	O
integer	O
count2	O
=	O
map2.get	O
(	O
key	O
)	O
;	O
if	O
(	O
count1	O
!	O
=null	O
&	O
&	O
count2	O
!	O
=null	O
)	O
{	O
count	O
+=	O
count1	O
*	O
count2	O
;	O
}	O
}	O
return	O
(	O
float	O
)	O
math.sqrt	O
(	O
(	O
(	O
float	O
)	O
(	O
count*count	O
)	O
/	O
(	O
double	O
)	O
(	O
stem_count	O
*	O
otherdocument.getstemcount	O
(	O
)	O
)	O
)	O
)	O
/	O
2f	O
;	O
}	O
private	O
map	O
<	O
string	O
,	O
integer	O
>	O
stemcountmap	O
=	O
new	O
hashmap	O
<	O
string	O
,	O
integer	O
>	O
(	O
)	O
;	O
private	O
int	O
stem_count	O
=	O
0	O
;	O
}	O
i	O
normalize	O
the	O
return	O
value	O
for	O
the	O
method	O
comparet	O
o	O
to	O
return	O
a	O
value	O
of	O
1.0	O
if	O
compared	O
documents	O
are	O
identical	O
(	O
after	O
stemming	O
)	O
and	O
0.0	O
if	O
they	O
contain	O
no	O
common	O
stems	O
.	O
there	O
are	O
four	O
test	O
text	O
documents	O
in	O
the	O
test	O
data	O
directory	O
and	O
the	O
following	O
test	O
code	O
compares	O
various	O
combinations	O
.	O
note	O
that	O
i	O
am	O
careful	O
to	O
test	O
the	O
case	O
of	O
comparing	O
identical	O
documents	O
:	O
comparabledocument	O
news1	O
=	O
new	O
comparabledocument	O
(	O
``	O
testdata/news_1.txt	O
''	O
)	O
;	O
comparabledocument	O
news2	O
=	O
154	O
9.5	O
text	B
clustering	I
new	O
comparabledocument	O
(	O
``	O
testdata/news_2.txt	O
''	O
)	O
;	O
comparabledocument	O
econ1	O
=	O
new	O
comparabledocument	O
(	O
``	O
testdata/economy_1.txt	O
''	O
)	O
;	O
comparabledocument	O
econ2	O
=	O
new	O
comparabledocument	O
(	O
``	O
testdata/economy_2.txt	O
''	O
)	O
;	O
system.out.println	O
(	O
``	O
news	O
1	O
-	O
news1	O
:	O
``	O
+	O
news1.compareto	O
(	O
news1	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
news	O
1	O
-	O
news2	O
:	O
``	O
+	O
system.out.println	O
(	O
``	O
news	O
2	O
-	O
news2	O
:	O
``	O
+	O
news1.compareto	O
(	O
news2	O
)	O
)	O
;	O
news2.compareto	O
(	O
news2	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
news	O
1	O
-	O
econ1	O
:	O
``	O
+	O
news1.compareto	O
(	O
econ1	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
econ	O
1	O
-	O
econ1	O
:	O
``	O
+	O
econ1.compareto	O
(	O
econ1	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
news	O
1	O
-	O
econ2	O
:	O
``	O
+	O
news1.compareto	O
(	O
econ2	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
econ	O
1	O
-	O
econ2	O
:	O
``	O
+	O
econ1.compareto	O
(	O
econ2	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
econ	O
2	O
-	O
econ2	O
:	O
``	O
+	O
econ2.compareto	O
(	O
econ2	O
)	O
)	O
;	O
the	O
following	O
listing	O
shows	O
output	O
that	O
indicates	O
mediocre	O
results	O
;	O
we	O
will	O
soon	O
make	O
an	O
improvement	O
that	O
makes	O
the	O
results	O
better	O
.	O
the	O
output	O
for	O
this	O
test	O
code	O
is	O
:	O
news	O
1	O
-	O
news1	O
:	O
1.0	O
news	O
1	O
-	O
news2	O
:	O
0.4457711	O
news	O
2	O
-	O
news2	O
:	O
1.0	O
news	O
1	O
-	O
econ1	O
:	O
0.3649214	O
econ	O
1	O
-	O
econ1	O
:	O
1.0	O
news	O
1	O
-	O
econ2	O
:	O
0.32748842	O
econ	O
1	O
-	O
econ2	O
:	O
0.42922822	O
econ	O
2	O
-	O
econ2	O
:	O
1.0	O
there	O
is	O
not	O
as	O
much	O
differentiation	O
in	O
comparison	O
scores	O
between	O
political	O
news	O
stories	O
and	O
economic	O
news	O
stories	O
.	O
what	O
is	O
up	O
here	O
?	O
the	O
problem	O
is	O
that	O
i	O
did	O
not	O
remove	O
common	O
words	O
(	O
and	O
therefore	O
common	O
word	O
stems	O
)	O
when	O
creating	O
stem	O
counts	O
for	O
each	O
document	O
.	O
i	O
wrote	O
a	O
utility	O
class	O
n	O
oisew	O
ords	O
for	O
identifying	O
both	O
common	O
words	O
and	O
their	O
stems	O
;	O
you	O
can	O
see	O
the	O
implementation	O
in	O
the	O
ﬁle	O
noise-	O
words.java	O
.	O
removing	O
noise	O
words	O
improves	O
the	O
comparison	O
results	O
(	O
i	O
added	O
a	O
few	O
tests	O
since	O
the	O
last	O
printout	O
)	O
:	O
news	O
1	O
-	O
news1	O
:	O
1.0	O
155	O
9	O
statistical	O
natural	O
language	O
processing	O
news	O
1	O
-	O
news2	O
:	O
0.1681978	O
news	O
1	O
-	O
econ1	O
:	O
0.04279895	O
news	O
1	O
-	O
econ2	O
:	O
0.034234844	O
econ	O
1	O
-	O
econ2	O
:	O
0.26178515	O
news	O
2	O
-	O
econ2	O
:	O
0.106673114	O
econ	O
1	O
-	O
econ2	O
:	O
0.26178515	O
much	O
better	O
results	O
!	O
the	O
api	O
for	O
com.knowledgebooks.nlp.util.noisewords	O
is	O
:	O
public	O
static	O
boolean	O
checkfor	O
(	O
string	O
stem	O
)	O
you	O
can	O
add	O
additional	O
noise	O
words	O
to	O
the	O
data	O
section	O
in	O
the	O
ﬁle	O
noisewords.java	O
,	O
depending	O
on	O
your	O
application	O
.	O
9.6	O
spelling	B
correction	O
automating	O
spelling	B
correction	O
is	O
a	O
task	O
that	O
you	O
may	O
use	O
for	O
many	O
types	O
of	O
projects	O
.	O
this	O
includes	O
both	O
programs	O
that	O
involve	O
users	O
entering	O
text	O
that	O
will	O
be	O
automati-	O
cally	O
processed	O
with	O
no	O
further	O
interaction	O
with	O
the	O
user	O
and	O
for	O
programs	O
that	O
keep	O
the	O
user	O
“	O
in	O
the	O
loop	O
”	O
by	O
offering	O
them	O
possible	O
spelling	B
choices	O
that	O
they	O
can	O
se-	O
lect	O
.	O
i	O
have	O
used	O
ﬁve	O
different	O
approaches	O
in	O
my	O
own	O
work	O
for	O
automating	O
spelling	B
correction	O
and	O
getting	O
spelling	B
suggestions	O
:	O
•	O
an	O
old	O
project	O
of	O
mine	O
(	O
overly	O
complex	O
,	O
but	O
with	O
good	O
accuracy	O
)	O
•	O
embedding	O
the	O
gnu	O
aspell	O
utility	O
•	O
use	O
the	O
lgpl	O
licensed	O
jazzy	O
spelling	B
checker	O
(	O
a	O
port	O
of	O
the	O
gnu	O
aspell	O
spelling	B
system	O
to	O
java	O
)	O
•	O
using	O
peter	O
norvig	O
’	O
s	O
statistical	O
spelling	O
correction	O
algorithm	O
•	O
using	O
norvig	O
’	O
s	O
algorithm	O
,	O
adding	O
word	O
pair	O
statistics	O
we	O
will	O
use	O
the	O
last	O
three	O
options	O
in	O
the	O
next	O
sections	O
9.6.1	O
,	O
9.6.2	O
and	O
in	O
section	O
9.6.3	O
where	O
we	O
will	O
extend	O
norvig	O
’	O
s	O
algorithm	O
by	O
also	O
using	O
word	O
pair	O
statistics	O
.	O
this	O
last	O
approach	O
is	O
computationally	O
expensive	O
and	O
is	O
best	O
used	O
in	O
applications	O
with	O
a	O
highly	O
specialized	O
domain	O
of	O
discourse	O
(	O
e.g.	O
,	O
systems	O
dealing	O
just	O
with	O
boats	O
,	O
sports	O
,	O
etc.	O
)	O
.	O
section	O
9.6.3	O
also	O
provides	O
a	O
good	O
lead	O
in	O
to	O
section	O
9.7	O
dealing	O
with	O
a	O
similar	O
but	O
more	O
general	O
technique	O
covered	O
later	O
in	O
this	O
chapter	O
:	O
markov	O
models	O
.	O
156	O
9.6	O
spelling	B
correction	O
9.6.1	O
gnu	O
aspell	O
library	O
and	O
jazzy	O
the	O
gnu	O
aspell	O
system	O
is	O
a	O
hybrid	O
system	O
combining	O
letter	O
substitution	O
and	O
ad-	O
dition	O
(	O
which	O
we	O
will	O
implement	O
as	O
a	O
short	O
example	O
program	O
in	O
section	O
9.6.2	O
)	O
,	O
the	O
soundex	O
algorithm	O
,	O
and	O
dynamic	O
programming	O
.	O
i	O
consider	O
aspell	O
to	O
be	O
a	O
best	O
of	O
breed	O
spelling	B
utility	O
and	O
i	O
use	O
it	O
fairly	O
frequently	O
with	O
scripting	O
languages	O
like	O
ruby	O
where	O
it	O
is	O
simple	O
to	O
“	O
shell	O
out	O
”	O
and	O
run	O
external	O
programs	O
.	O
you	O
can	O
also	O
“	O
shell	O
out	O
”	O
external	O
commands	O
to	O
new	O
processes	O
in	O
java	O
but	O
there	O
is	O
no	O
need	O
to	O
do	O
this	O
if	O
we	O
use	O
the	O
lgpled	O
jazzy	O
library	O
that	O
is	O
similar	O
to	O
aspell	O
and	O
written	O
in	O
pure	O
java	O
.	O
for	O
the	O
sake	O
of	O
completeness	O
,	O
here	O
is	O
a	O
simple	O
example	O
of	O
how	O
you	O
would	O
use	O
aspell	O
as	O
an	O
external	O
program	O
;	O
ﬁrst	O
,	O
we	O
will	O
run	O
aspell	O
on	O
in	O
a	O
command	O
shell	O
(	O
not	O
all	O
output	O
is	O
shown	O
)	O
:	O
markw	O
$	O
echo	O
``	O
ths	O
doog	O
''	O
|	O
/usr/local/bin/aspell	O
@	O
(	O
#	O
)	O
international	O
ispell	O
(	O
but	O
really	O
aspell	O
0.60.5	O
)	O
&	O
ths	O
22	O
0	O
:	O
th	O
’	O
s	O
,	O
this	O
,	O
thus	O
,	O
th	O
,	O
\ldots	O
&	O
doog	O
6	O
4	O
:	O
dog	O
,	O
doug	O
,	O
dong	O
,	O
door	O
,	O
\ldots	O
-a	O
list	O
this	O
output	O
is	O
easy	O
enough	O
to	O
parse	O
;	O
here	O
is	O
an	O
example	O
in	O
ruby	O
(	O
python	O
,	O
perl	O
,	O
or	O
java	O
would	O
be	O
similar	O
)	O
:	O
def	O
aspell	O
text	O
s	O
=	O
‘	O
echo	O
``	O
#	O
{	O
text	O
}	O
''	O
|	O
/usr/local/bin/aspell	O
-a	O
list	O
‘	O
s	O
=	O
s.split	O
(	O
``	O
\n	O
''	O
)	O
s.shift	O
results	O
=	O
[	O
]	O
s.each	O
{	O
|line|	O
tokens	O
=	O
line.split	O
(	O
``	O
,	O
''	O
)	O
header	O
=	O
tokens	O
[	O
0	O
]	O
.gsub	O
(	O
’	O
:	O
’	O
,	O
’	O
’	O
)	O
.split	O
(	O
’	O
’	O
)	O
tokens	O
[	O
0	O
]	O
=	O
header	O
[	O
4	O
]	O
results	O
<	O
<	O
[	O
header	O
[	O
1	O
]	O
,	O
header	O
[	O
3	O
]	O
,	O
tokens.collect	O
{	O
|tt|	O
tt.strip	O
}	O
]	O
if	O
header	O
[	O
1	O
]	O
}	O
results	O
end	O
i	O
include	O
the	O
source	O
code	O
to	O
the	O
lgpled	O
jazzy	O
library	O
and	O
a	O
test	O
class	O
in	O
the	O
di-	O
rectory	O
src-spelling-jazzy	O
.	O
the	O
jazzy	O
library	O
source	O
code	O
is	O
in	O
the	O
sub-directory	O
com/swabunga	O
.	O
we	O
will	O
spend	O
no	O
time	O
looking	O
at	O
the	O
implementation	O
of	O
the	O
jazzy	O
library	O
:	O
this	O
short	O
section	O
is	O
simply	O
meant	O
to	O
get	O
you	O
started	O
quickly	O
using	O
jazzy	O
.	O
here	O
is	O
the	O
test	O
code	O
from	O
the	O
ﬁle	O
spellingjazzytester.java	O
:	O
157	O
9	O
statistical	O
natural	O
language	O
processing	O
file	O
dict	O
=	O
new	O
file	O
(	O
``	O
test_data/dictionary/english.0	O
''	O
)	O
;	O
spellchecker	O
checker	O
=	O
new	O
spellchecker	O
(	O
new	O
spelldictionaryhashmap	O
(	O
dict	O
)	O
)	O
;	O
int	O
threshold	O
=	O
10	O
;	O
//	O
computational	O
cost	O
threshold	O
system.out.println	O
(	O
checker.getsuggestions	O
(	O
``	O
runnng	O
''	O
,	O
system.out.println	O
(	O
checker.getsuggestions	O
(	O
``	O
season	O
''	O
,	O
system.out.println	O
(	O
checker.getsuggestions	O
(	O
''	O
advantagius	O
''	O
,	O
threshold	O
)	O
)	O
;	O
threshold	O
)	O
)	O
;	O
threshold	O
)	O
)	O
;	O
the	O
method	O
getsuggestions	O
returns	O
an	O
arraylist	O
of	O
spelling	B
suggestions	O
.	O
this	O
example	O
code	O
produces	O
the	O
following	O
output	O
:	O
[	O
running	O
]	O
[	O
season	O
,	O
seasons	O
,	O
reason	O
]	O
[	O
advantageous	O
,	O
advantages	O
]	O
the	O
ﬁle	O
test	O
data/dictionary/english.0	O
contains	O
an	O
alphabetically	O
ordered	O
list	O
of	O
words	O
,	O
one	O
per	O
line	O
.	O
you	O
may	O
want	O
to	O
add	O
words	O
appropriate	O
for	O
the	O
type	O
of	O
text	O
that	O
your	O
applications	O
use	O
.	O
for	O
example	O
,	O
if	O
you	O
were	O
adding	O
spelling	B
correction	O
to	O
a	O
web	O
site	O
for	O
selling	O
sailboats	O
then	O
you	O
would	O
want	O
to	O
insert	O
manufacturer	O
and	O
product	O
names	O
to	O
this	O
word	O
list	O
in	O
the	O
correct	O
alphabetical	O
order	O
.	O
the	O
title	O
of	O
this	O
book	O
contains	O
the	O
word	O
“	O
practical	O
,	O
”	O
so	O
i	O
feel	O
ﬁne	O
about	O
showing	O
you	O
how	O
to	O
use	O
a	O
useful	O
open	O
source	O
package	O
like	O
jazzy	O
without	O
digging	O
into	O
its	O
implementation	O
or	O
apsell	O
’	O
s	O
implementation	O
.	O
the	O
next	O
section	O
contains	O
the	O
imple-	O
mentation	O
of	O
a	O
simple	O
algorithm	O
and	O
we	O
will	O
study	O
its	O
implementation	O
some	O
detail	O
.	O
9.6.2	O
peter	O
norvig	O
’	O
s	O
spelling	B
algorithm	O
peter	O
norvig	O
designed	O
and	O
implemented	O
a	O
spelling	B
corrector	O
in	O
about	O
20	O
lines	O
of	O
python	O
code	O
.	O
i	O
will	O
implement	O
his	O
algorithm	O
in	O
java	O
in	O
this	O
section	O
and	O
in	O
section	O
9.6.3	O
i	O
will	O
extend	O
my	O
implementation	O
to	O
also	O
use	O
word	O
pair	O
statistics	O
.	O
the	O
class	O
spellingsuggestions	O
uses	O
static	O
data	O
to	O
create	O
an	O
in-memory	O
spelling	B
dictionary	O
.	O
this	O
initialization	O
will	O
be	O
done	O
at	O
class	O
load	O
time	O
so	O
creating	O
instances	O
of	O
this	O
class	O
will	O
be	O
inexpensive	O
.	O
here	O
is	O
the	O
static	O
initialization	O
code	O
with	O
error	O
handling	O
removed	O
for	O
brevity	O
:	O
private	O
static	O
map	O
<	O
string	O
,	O
integer	O
>	O
wordcounts	O
=	O
158	O
9.6	O
spelling	B
correction	O
new	O
hashmap	O
<	O
string	O
,	O
integer	O
>	O
(	O
)	O
;	O
static	O
{	O
//	O
use	O
peter	O
norvig	O
’	O
s	O
training	O
file	O
big.txt	O
:	O
//	O
http	O
:	O
//www.norvig.com/spell-correct.html	O
fileinputstream	O
fstream	O
=	O
new	O
fileinputstream	O
(	O
``	O
/tmp/big.txt	O
''	O
)	O
;	O
datainputstream	O
in	O
=	O
new	O
datainputstream	O
(	O
fstream	O
)	O
;	O
bufferedreader	O
br	O
=	O
new	O
bufferedreader	O
(	O
new	O
inputstreamreader	O
(	O
in	O
)	O
)	O
;	O
string	O
line	O
;	O
while	O
(	O
(	O
line	O
=	O
br.readline	O
(	O
)	O
)	O
!	O
=	O
null	O
)	O
{	O
list	O
<	O
string	O
>	O
words	O
=	O
tokenizer.wordstolist	O
(	O
line	O
)	O
;	O
for	O
(	O
string	O
word	O
:	O
words	O
)	O
{	O
if	O
(	O
wordcounts.containskey	O
(	O
word	O
)	O
)	O
{	O
integer	O
count	O
=	O
wordcounts.get	O
(	O
word	O
)	O
;	O
wordcounts.put	O
(	O
word	O
,	O
count	O
+	O
1	O
)	O
;	O
}	O
else	O
{	O
wordcounts.put	O
(	O
word	O
,	O
1	O
)	O
;	O
}	O
}	O
}	O
in.close	O
(	O
)	O
;	O
}	O
the	O
class	O
has	O
two	O
static	O
methods	O
that	O
implement	O
the	O
algorithm	O
.	O
the	O
ﬁrst	O
method	O
edits	O
seen	O
in	O
the	O
following	O
listing	O
is	O
private	O
and	O
returns	O
a	O
list	O
of	O
permutations	O
for	O
a	O
string	O
containing	O
a	O
word	O
.	O
permutations	O
are	O
created	O
by	O
removing	O
characters	O
,	O
by	O
reversing	O
the	O
order	O
of	O
two	O
adjacent	O
characters	O
,	O
by	O
replacing	O
single	O
characters	O
with	O
all	O
other	O
characters	O
,	O
and	O
by	O
adding	O
all	O
possible	O
letters	O
to	O
each	O
space	O
between	O
characters	O
in	O
the	O
word	O
:	O
private	O
static	O
list	O
<	O
string	O
>	O
edits	O
(	O
string	O
word	O
)	O
{	O
int	O
wordl	O
=	O
word.length	O
(	O
)	O
,	O
wordlm1	O
=	O
wordl	O
-	O
1	O
;	O
list	O
<	O
string	O
>	O
possible	O
=	O
new	O
arraylist	O
<	O
string	O
>	O
(	O
)	O
;	O
//	O
drop	O
a	O
character	O
:	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
wordl	O
;	O
++i	O
)	O
{	O
possible.add	O
(	O
word.substring	O
(	O
0	O
,	O
i	O
)	O
+	O
word.substring	O
(	O
i+1	O
)	O
)	O
;	O
}	O
//	O
reverse	O
order	O
of	O
2	O
characters	O
:	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
wordlm1	O
;	O
++i	O
)	O
{	O
possible.add	O
(	O
word.substring	O
(	O
0	O
,	O
i	O
)	O
+	O
word.substring	O
(	O
i+1	O
,	O
i+2	O
)	O
+	O
word.substring	O
(	O
i	O
,	O
i+1	O
)	O
+	O
159	O
9	O
statistical	O
natural	O
language	O
processing	O
word.substring	O
(	O
i+2	O
)	O
)	O
;	O
}	O
//	O
replace	O
a	O
character	O
in	O
each	O
location	O
in	O
the	O
word	O
:	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
wordl	O
;	O
++i	O
)	O
{	O
for	O
(	O
char	O
ch=	O
’	O
a	O
’	O
;	O
ch	O
<	O
=	O
’	O
z	O
’	O
;	O
++ch	O
)	O
{	O
possible.add	O
(	O
word.substring	O
(	O
0	O
,	O
i	O
)	O
+	O
ch	O
+	O
word.substring	O
(	O
i+1	O
)	O
)	O
;	O
}	O
}	O
//	O
add	O
in	O
a	O
character	O
in	O
each	O
location	O
in	O
the	O
word	O
:	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
=	O
wordl	O
;	O
++i	O
)	O
{	O
for	O
(	O
char	O
ch=	O
’	O
a	O
’	O
;	O
ch	O
<	O
=	O
’	O
z	O
’	O
;	O
++ch	O
)	O
{	O
possible.add	O
(	O
word.substring	O
(	O
0	O
,	O
i	O
)	O
+	O
ch	O
+	O
word.substring	O
(	O
i	O
)	O
)	O
;	O
}	O
}	O
return	O
possible	O
;	O
}	O
here	O
is	O
a	O
sample	O
test	O
case	O
for	O
the	O
method	O
edits	O
where	O
we	O
call	O
it	O
with	O
the	O
word	O
“	O
cat	O
”	O
and	O
get	O
a	O
list	O
of	O
187	O
permutations	O
:	O
[	O
at	O
,	O
ct	O
,	O
ca	O
,	O
act	O
,	O
cta	O
,	O
aat	O
,	O
bat	O
,	O
cat	O
,	O
..	O
,	O
fat	O
,	O
..	O
,	O
cct	O
,	O
cdt	O
,	O
cet	O
,	O
..	O
,	O
caty	O
,	O
catz	O
]	O
the	O
public	O
static	O
method	O
correct	O
has	O
four	O
possible	O
return	O
values	O
:	O
•	O
if	O
the	O
word	O
is	O
in	O
the	O
spelling	B
hash	O
table	O
,	O
simply	O
return	O
the	O
word	O
.	O
•	O
generate	O
a	O
permutation	O
list	O
of	O
the	O
input	O
word	O
using	O
the	O
method	O
edits	O
.	O
build	O
a	O
hash	O
table	O
candidates	O
from	O
the	O
permutation	O
list	O
with	O
keys	O
being	O
the	O
word	O
count	O
in	O
the	O
main	O
hashtable	O
wordcounts	O
with	O
values	O
of	O
the	O
words	O
in	O
the	O
permutation	O
list	O
.	O
if	O
the	O
hash	O
table	O
candidates	O
is	O
not	O
empty	O
then	O
return	O
the	O
permutation	O
with	O
the	O
best	O
key	O
(	O
word	O
count	O
)	O
value	O
.	O
•	O
for	O
each	O
new	O
word	O
in	O
the	O
permutation	O
list	O
,	O
call	O
the	O
method	O
edits	O
with	O
the	O
word	O
,	O
creating	O
a	O
new	O
candidates	O
hash	O
table	O
with	O
permutations	O
of	O
permuta-	O
tions	O
.	O
if	O
candidates	O
is	O
not	O
empty	O
then	O
return	O
the	O
word	O
with	O
the	O
highest	O
score	O
.	O
•	O
return	O
the	O
value	O
of	O
the	O
original	O
word	O
(	O
no	O
suggestions	O
)	O
.	O
public	O
static	O
string	O
correct	O
(	O
string	O
word	O
)	O
{	O
if	O
(	O
wordcounts.containskey	O
(	O
word	O
)	O
)	O
return	O
word	O
;	O
list	O
<	O
string	O
>	O
list	O
=	O
edits	O
(	O
word	O
)	O
;	O
160	O
9.6	O
spelling	B
correction	O
/**	O
*	O
candidate	O
hash	O
has	O
word	O
counts	O
as	O
keys	O
,	O
*	O
word	O
as	O
value	O
:	O
*/	O
hashmap	O
<	O
integer	O
,	O
string	O
>	O
candidates	O
=	O
new	O
hashmap	O
<	O
integer	O
,	O
string	O
>	O
(	O
)	O
;	O
for	O
(	O
string	O
testword	O
:	O
list	O
)	O
{	O
if	O
(	O
wordcounts.containskey	O
(	O
testword	O
)	O
)	O
{	O
candidates.put	O
(	O
wordcounts.get	O
(	O
testword	O
)	O
,	O
testword	O
)	O
;	O
}	O
}	O
/**	O
*	O
if	O
candidates	O
is	O
not	O
empty	O
,	O
then	O
return	O
*	O
the	O
word	O
with	O
the	O
largest	O
key	O
(	O
word	O
*	O
count	O
)	O
value	O
:	O
*/	O
if	O
(	O
candidates.size	O
(	O
)	O
>	O
0	O
)	O
{	O
return	O
candidates.get	O
(	O
collections.max	O
(	O
candidates.keyset	O
(	O
)	O
)	O
)	O
;	O
}	O
/**	O
*	O
if	O
the	O
edits	O
method	O
does	O
not	O
provide	O
a	O
*	O
candidate	O
word	O
that	O
matches	O
then	O
we	O
will	O
*	O
call	O
edits	O
again	O
with	O
each	O
previous	O
*	O
permutation	O
words	O
.	O
*	O
*	O
note	O
:	O
this	O
case	O
occurs	O
only	O
about	O
20	O
%	O
*	O
*	O
*/	O
candidates.clear	O
(	O
)	O
;	O
for	O
(	O
string	O
editwords	O
:	O
list	O
)	O
{	O
of	O
the	O
time	O
and	O
obviously	O
increases	O
the	O
runtime	O
of	O
method	O
correct	O
.	O
for	O
(	O
string	O
wrd	O
:	O
edits	O
(	O
editwords	O
)	O
)	O
{	O
if	O
(	O
wordcounts.containskey	O
(	O
wrd	O
)	O
)	O
{	O
candidates.put	O
(	O
wordcounts.get	O
(	O
wrd	O
)	O
,	O
wrd	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
candidates.size	O
(	O
)	O
>	O
0	O
)	O
{	O
return	O
candidates.get	O
(	O
collections.max	O
(	O
candidates.keyset	O
(	O
)	O
)	O
)	O
;	O
}	O
return	O
word	O
;	O
}	O
161	O
9	O
statistical	O
natural	O
language	O
processing	O
although	O
peter	O
norvig	O
’	O
s	O
spelling	B
algorithm	O
is	O
much	O
simpler	O
than	O
the	O
algorithm	O
used	O
in	O
aspell	O
it	O
works	O
well	O
.	O
i	O
have	O
used	O
norvig	O
’	O
s	O
spelling	B
algorithm	O
for	O
one	O
customer	O
project	O
that	O
had	O
a	O
small	O
speciﬁc	O
vocabulary	O
instead	O
of	O
using	O
aspell	O
.	O
we	O
will	O
extend	O
norvig	O
’	O
s	O
spelling	B
algorithm	O
in	O
the	O
next	O
section	O
to	O
also	O
take	O
advantage	O
of	O
word	O
pair	O
statistics	O
.	O
9.6.3	O
extending	O
the	O
norvig	O
algorithm	O
by	O
using	O
word	O
pair	O
statistics	O
it	O
is	O
possible	O
to	O
use	O
statistics	O
for	O
which	O
words	O
commonly	O
appear	O
together	O
to	O
improve	O
spelling	B
suggestions	O
.	O
in	O
my	O
experience	O
this	O
is	O
only	O
worthwhile	O
when	O
applications	O
have	O
two	O
traits	O
:	O
1.	O
the	O
vocabulary	O
for	O
the	O
application	O
is	O
specialized	O
.	O
for	O
example	O
,	O
a	O
social	O
net-	O
working	O
site	O
for	O
people	O
interested	O
in	O
boating	O
might	O
want	O
a	O
more	O
accurate	O
spelling	B
system	O
than	O
one	O
that	O
has	O
to	O
handle	O
more	O
general	O
english	O
text	O
.	O
in	O
this	O
example	O
,	O
common	O
word	O
pairs	O
might	O
be	O
multi-word	O
boat	O
and	O
manufac-	O
turer	O
names	O
,	O
boating	O
locations	O
,	O
etc	O
.	O
2.	O
there	O
is	O
a	O
very	O
large	O
amount	O
of	O
text	O
in	O
this	O
limited	O
subject	O
area	O
to	O
use	O
for	O
training	O
.	O
this	O
is	O
because	O
there	O
will	O
be	O
many	O
more	O
combinations	O
of	O
word	O
pairs	O
than	O
words	O
and	O
a	O
very	O
large	O
training	O
set	O
helps	O
to	O
determine	O
which	O
pairs	O
are	O
most	O
common	O
,	O
rather	O
than	O
just	O
coincidental	O
.	O
we	O
will	O
proceed	O
in	O
a	O
similar	O
fashion	O
to	O
the	O
implementation	O
in	O
the	O
last	O
section	O
but	O
we	O
will	O
also	O
keep	O
an	O
additional	O
hash	O
table	O
containing	O
counts	O
for	O
word	O
pairs	O
.	O
since	O
there	O
will	O
be	O
many	O
more	O
word	O
pair	O
combinations	O
than	O
single	O
words	O
,	O
you	O
should	O
expect	O
both	O
the	O
memory	O
requirements	O
and	O
cpu	O
time	O
for	O
training	O
to	O
be	O
much	O
larger	O
.	O
for	O
one	O
project	O
,	O
there	O
was	O
so	O
much	O
training	O
data	O
that	O
i	O
ended	O
up	O
having	O
to	O
use	O
disk-	O
based	O
hash	O
tables	O
to	O
store	O
word	O
pair	O
counts	O
.	O
to	O
make	O
this	O
training	O
process	O
take	O
less	O
training	O
time	O
and	O
less	O
memory	O
to	O
hold	O
the	O
large	O
word	O
combination	O
hash	O
table	O
,	O
we	O
will	O
edit	O
the	O
input	O
ﬁle	O
big.txt	O
from	O
the	O
last	O
section	O
deleting	O
the	O
1200	O
lines	O
that	O
contain	O
random	O
words	O
added	O
to	O
the	O
end	O
of	O
the	O
project	O
gutenberg	O
texts	O
.	O
furthermore	O
,	O
we	O
will	O
experiment	O
with	O
an	O
even	O
smaller	O
version	O
of	O
this	O
ﬁle	O
(	O
renamed	O
small.txt	O
)	O
that	O
is	O
about	O
ten	O
percent	O
of	O
the	O
size	O
of	O
the	O
original	O
training	O
ﬁle	O
.	O
because	O
we	O
are	O
using	O
a	O
smaller	O
training	O
set	O
we	O
should	O
expect	O
marginal	O
results	O
.	O
for	O
your	O
own	O
projects	O
you	O
should	O
use	O
as	O
much	O
data	O
as	O
possible	O
.	O
in	O
principle	O
,	O
when	O
we	O
collect	O
a	O
word	O
pair	O
hash	O
table	O
where	O
the	O
hash	O
values	O
are	O
the	O
number	O
of	O
times	O
a	O
word	O
pair	O
occurs	O
in	O
the	O
training	O
test	O
,	O
we	O
would	O
want	O
to	O
be	O
sure	O
that	O
we	O
do	O
not	O
collect	O
word	O
pairs	O
across	O
sentence	O
boundaries	O
and	O
separate	O
phrases	O
occurring	O
inside	O
of	O
parenthesis	O
,	O
etc	O
.	O
for	O
example	O
consider	O
the	O
following	O
text	O
frag-	O
ment	O
:	O
162	O
9.6	O
spelling	B
correction	O
he	O
went	O
to	O
paris	O
.	O
the	O
weather	O
was	O
warm	O
.	O
optimally	O
,	O
we	O
would	O
not	O
want	O
to	O
collect	O
statistics	O
on	O
word	O
(	O
or	O
token	O
)	O
pairs	O
like	O
“	O
paris	O
.	O
”	O
or	O
“	O
paris	O
the	O
”	O
that	O
include	O
the	O
ﬁnal	O
period	O
in	O
a	O
sentence	O
or	O
span	O
a	O
sentence	O
.	O
in	O
a	O
practical	O
sense	O
,	O
since	O
we	O
will	O
be	O
discarding	O
seldom	O
occurring	O
word	O
pairs	O
,	O
it	O
does	O
not	O
matter	O
too	O
much	O
so	O
in	O
our	O
example	O
we	O
will	O
collect	O
all	O
tokenized	O
word	O
pairs	O
at	O
the	O
same	O
time	O
that	O
we	O
collect	O
single	O
word	O
frequency	O
statistics	O
:	O
pattern	O
p	O
=	O
pattern.compile	O
(	O
``	O
[	O
,	O
.	O
(	O
)	O
’	O
\	O
''	O
;	O
:	O
\\s	O
]	O
+	O
''	O
)	O
;	O
scanner	O
scanner	O
=	O
new	O
scanner	O
(	O
new	O
file	O
(	O
``	O
/tmp/small.txt	O
''	O
)	O
)	O
;	O
scanner.usedelimiter	O
(	O
p	O
)	O
;	O
string	O
last	O
=	O
``	O
ahjhjhdsgh	O
''	O
;	O
while	O
(	O
scanner.hasnext	O
(	O
)	O
)	O
{	O
string	O
word	O
=	O
scanner.next	O
(	O
)	O
;	O
if	O
(	O
wordcounts.containskey	O
(	O
word	O
)	O
)	O
{	O
integer	O
count	O
=	O
wordcounts.get	O
(	O
word	O
)	O
;	O
wordcounts.put	O
(	O
word	O
,	O
count	O
+	O
1	O
)	O
;	O
}	O
else	O
{	O
wordcounts.put	O
(	O
word	O
,	O
1	O
)	O
;	O
}	O
string	O
pair	O
=	O
last	O
+	O
``	O
``	O
+	O
word	O
;	O
if	O
(	O
wordpaircounts.containskey	O
(	O
pair	O
)	O
)	O
{	O
integer	O
count	O
=	O
wordpaircounts.get	O
(	O
pair	O
)	O
;	O
wordpaircounts.put	O
(	O
pair	O
,	O
count	O
+	O
1	O
)	O
;	O
}	O
else	O
{	O
wordpaircounts.put	O
(	O
pair	O
,	O
1	O
)	O
;	O
}	O
last	O
=	O
word	O
;	O
}	O
scanner.close	O
(	O
)	O
;	O
for	O
the	O
ﬁrst	O
page	O
of	O
text	O
in	O
the	O
test	O
ﬁle	O
,	O
if	O
we	O
print	O
out	O
word	O
pairs	O
that	O
occur	O
at	O
least	O
two	O
times	O
using	O
this	O
code	O
:	O
for	O
(	O
string	O
pair	O
:	O
wordpaircounts.keyset	O
(	O
)	O
)	O
{	O
if	O
(	O
wordpaircounts.get	O
(	O
pair	O
)	O
>	O
1	O
)	O
{	O
system.out.println	O
(	O
pair	O
+	O
``	O
:	O
``	O
+	O
wordpaircounts.get	O
(	O
pair	O
)	O
)	O
;	O
}	O
}	O
then	O
we	O
get	O
this	O
output	O
:	O
163	O
9	O
statistical	O
natural	O
language	O
processing	O
arthur	O
conan	O
:	O
3	O
by	O
sir	O
:	O
2	O
of	O
sherlock	O
:	O
2	O
project	O
gutenberg	O
:	O
5	O
how	O
to	O
:	O
2	O
the	O
adventures	O
:	O
2	O
sherlock	O
holmes	O
:	O
2	O
sir	O
arthur	O
:	O
3	O
adventures	O
of	O
:	O
2	O
information	O
about	O
:	O
2	O
conan	O
doyle	O
:	O
3	O
the	O
words	O
“	O
conan	O
”	O
and	O
“	O
doyle	O
”	O
tend	O
to	O
appear	O
together	O
frequently	O
.	O
if	O
we	O
want	O
to	O
suggest	O
spelling	B
corrections	O
for	O
“	O
the	O
author	O
conan	O
doyyle	O
wrote	O
”	O
it	O
seems	O
intuitive	O
that	O
we	O
can	O
prefer	O
the	O
correction	O
“	O
doyle	O
”	O
since	O
if	O
we	O
take	O
the	O
possible	O
list	O
of	O
correc-	O
tions	O
for	O
“	O
doyyle	O
”	O
and	O
combine	O
each	O
with	O
the	O
preceding	O
word	O
“	O
conan	O
”	O
in	O
the	O
text	O
,	O
then	O
we	O
notice	O
that	O
the	O
hash	O
table	O
wordp	O
aircounts	O
has	O
a	O
relatively	O
high	O
count	O
for	O
the	O
key	O
“	O
conan	O
doyle	O
”	O
that	O
is	O
a	O
single	O
string	O
containing	O
a	O
word	O
pair	O
.	O
in	O
theory	O
this	O
may	O
look	O
like	O
a	O
good	O
approach	O
,	O
but	O
there	O
are	O
a	O
few	O
things	O
that	O
keep	O
this	O
technique	O
from	O
being	O
generally	O
practical	O
:	O
•	O
it	O
is	O
computationally	O
expensive	O
to	O
train	O
the	O
system	O
for	O
large	O
training	O
text	O
.	O
•	O
it	O
is	O
more	O
expensive	O
computationally	O
to	O
perform	O
spelling	B
suggestions	O
.	O
•	O
the	O
results	O
are	O
not	O
likely	O
to	O
be	O
much	O
better	O
than	O
the	O
single	O
word	O
approach	O
unless	O
the	O
text	O
is	O
in	O
one	O
narrow	O
domain	O
and	O
you	O
have	O
a	O
lot	O
of	O
training	O
text	O
.	O
in	O
the	O
example	O
of	O
misspelling	O
doyyle	O
,	O
calling	O
the	O
method	O
edits	O
:	O
edits	O
(	O
``	O
doyyle	O
''	O
)	O
returns	O
a	O
list	O
with	O
349	O
elements	O
.	O
the	O
method	O
edits	O
is	O
identical	O
to	O
the	O
one	O
word	O
spelling	B
corrector	O
in	O
the	O
last	O
section	O
.	O
i	O
changed	O
the	O
method	O
correct	O
by	O
adding	O
an	O
argument	O
for	O
the	O
previous	O
word	O
,	O
fac-	O
toring	O
in	O
statistics	O
from	O
the	O
word	O
pair	O
count	O
hash	O
table	O
,	O
and	O
for	O
this	O
example	O
by	O
not	O
calculating	O
“	O
edits	O
of	O
edits	O
”	O
as	O
we	O
did	O
in	O
the	O
last	O
section	O
.	O
here	O
is	O
the	O
modiﬁed	O
code	O
:	O
public	O
string	O
correct	O
(	O
string	O
word	O
,	O
if	O
(	O
wordcounts.containskey	O
(	O
word	O
)	O
)	O
return	O
word	O
;	O
list	O
<	O
string	O
>	O
list	O
=	O
edits	O
(	O
word	O
)	O
;	O
string	O
previous_word	O
)	O
{	O
164	O
9.6	O
spelling	B
correction	O
//	O
candidate	O
hash	O
has	O
as	O
word	O
counts	O
//	O
as	O
keys	O
,	O
word	O
as	O
value	O
:	O
hashmap	O
<	O
integer	O
,	O
string	O
>	O
candidates	O
=	O
for	O
(	O
string	O
testword	O
:	O
list	O
)	O
{	O
new	O
hashmap	O
<	O
integer	O
,	O
string	O
>	O
(	O
)	O
;	O
//	O
look	O
for	O
word	O
pairs	O
with	O
testword	O
in	O
the	O
//	O
second	O
position	O
:	O
string	O
word_pair	O
=	O
previous_word	O
+	O
``	O
``	O
+	O
testword	O
;	O
int	O
count_from_1_word	O
=	O
0	O
;	O
int	O
count_from_word_pairs	O
=	O
0	O
;	O
if	O
(	O
wordcounts.containskey	O
(	O
testword	O
)	O
)	O
{	O
count_from_1_word	O
+=	O
wordcounts.get	O
(	O
testword	O
)	O
;	O
candidates.put	O
(	O
wordcounts.get	O
(	O
testword	O
)	O
,	O
testword	O
)	O
;	O
}	O
if	O
(	O
wordpaircounts.containskey	O
(	O
word_pair	O
)	O
)	O
{	O
count_from_word_pairs	O
+=	O
wordpaircounts.get	O
(	O
word_pair	O
)	O
;	O
}	O
//	O
look	O
for	O
word	O
pairs	O
with	O
testword	O
in	O
the	O
//	O
first	O
position	O
:	O
word_pair	O
=	O
testword	O
+	O
``	O
``	O
+	O
previous_word	O
;	O
if	O
(	O
wordpaircounts.containskey	O
(	O
word_pair	O
)	O
)	O
{	O
count_from_word_pairs	O
+=	O
wordpaircounts.get	O
(	O
word_pair	O
)	O
;	O
}	O
int	O
sum	O
=	O
count_from_1_word	O
+	O
count_from_word_pairs	O
;	O
if	O
(	O
sum	O
>	O
0	O
)	O
{	O
candidates.put	O
(	O
sum	O
,	O
testword	O
)	O
;	O
}	O
}	O
/**	O
*	O
if	O
candidates	O
is	O
not	O
empty	O
,	O
then	O
return	O
the	O
*	O
word	O
with	O
the	O
largest	O
key	O
(	O
word	O
count	O
)	O
value	O
:	O
*/	O
if	O
(	O
candidates.size	O
(	O
)	O
>	O
0	O
)	O
{	O
return	O
candidates.get	O
(	O
collections.max	O
(	O
candidates.keyset	O
(	O
)	O
)	O
)	O
;	O
}	O
return	O
word	O
;	O
}	O
165	O
9	O
statistical	O
natural	O
language	O
processing	O
using	O
word	O
pair	O
statistics	O
can	O
be	O
a	O
good	O
technique	O
if	O
you	O
need	O
to	O
build	O
an	O
automated	O
spelling	B
corrector	O
that	O
only	O
needs	O
to	O
work	O
on	O
text	O
in	O
one	O
subject	O
area	O
.	O
you	O
will	O
need	O
a	O
lot	O
of	O
training	O
text	O
in	O
your	O
subject	O
area	O
and	O
be	O
prepared	O
for	O
extra	O
work	O
performing	O
the	O
training	O
:	O
as	O
i	O
mentioned	O
before	O
,	O
for	O
one	O
customer	O
project	O
i	O
could	O
not	O
ﬁt	O
the	O
word	O
pair	O
hash	O
table	O
in	O
memory	O
(	O
on	O
the	O
server	O
that	O
i	O
had	O
to	O
use	O
)	O
so	O
i	O
had	O
to	O
use	O
a	O
disk-based	O
hash	O
table	O
–	O
the	O
training	O
run	O
took	O
a	O
long	O
while	O
.	O
another	O
good	O
alternative	O
for	O
building	O
systems	O
for	O
handling	O
text	O
in	O
one	O
subject	O
area	O
is	O
to	O
augment	O
a	O
standard	O
spelling	B
library	O
like	O
aspell	O
or	O
jazzy	O
with	O
custom	O
word	O
dictionaries	O
.	O
9.7	O
hidden	O
markov	O
models	O
we	O
used	O
a	O
set	O
of	O
rules	O
in	O
section	O
9.1	O
to	O
assign	O
parts	O
of	O
speech	O
tags	O
to	O
words	O
in	O
english	O
text	O
.	O
the	O
rules	O
that	O
we	O
used	O
were	O
a	O
subset	O
of	O
the	O
automatically	O
generated	O
rules	O
that	O
eric	O
brill	O
’	O
s	O
machine	B
learning	I
thesis	O
project	O
produced	O
.	O
his	O
thesis	O
work	O
used	O
markov	O
modeling	O
to	O
calculate	O
the	O
most	O
likely	O
tag	O
of	O
words	O
,	O
given	O
precceding	O
words	O
.	O
he	O
then	O
generated	O
rules	O
for	O
taging	O
–	O
some	O
of	O
which	O
we	O
saw	O
in	O
section	O
9.1	O
where	O
we	O
saw	O
brill	O
’	O
s	O
published	O
results	O
of	O
the	O
most	O
useful	O
learned	O
rules	O
made	O
writing	O
a	O
fast	O
tagger	O
relatively	O
easy	O
.	O
in	O
this	O
section	O
we	O
will	O
use	O
word-use	O
statistics	O
to	O
assign	O
word	O
type	O
tags	O
to	O
each	O
word	O
in	O
input	O
text	O
.	O
we	O
will	O
look	O
in	O
some	O
detail	O
at	O
one	O
of	O
the	O
most	O
popular	O
approaches	O
to	O
tagging	B
text	O
:	O
building	O
hidden	O
markov	O
models	O
(	O
hmm	O
)	O
and	O
then	O
evaluating	O
these	O
models	O
against	O
input	O
text	O
to	O
assign	O
word	O
use	O
(	O
or	O
part	O
of	O
speech	O
)	O
tags	O
to	O
words	O
.	O
a	O
complete	O
coverage	O
of	O
the	O
commonly	O
used	O
techniques	O
for	O
training	O
and	O
using	O
hmm	O
is	O
beyond	O
the	O
scope	O
of	O
this	O
section	O
.	O
a	O
full	O
reference	O
for	O
these	O
training	O
techniques	O
is	O
foundations	O
of	O
statistical	O
natural	O
language	O
processing	O
[	O
manning	O
,	O
schutze	O
,	O
1999	O
]	O
.	O
we	O
will	O
discuss	O
the	O
training	O
algorithms	O
and	O
sample	O
java	O
code	O
that	O
implements	O
hmm	O
.	O
the	O
example	O
in	O
this	O
chapter	O
is	O
purposely	O
pedantic	O
:	O
the	O
example	O
code	O
is	O
intended	O
to	O
be	O
easy	O
to	O
understand	O
and	O
experiment	O
with	O
.	O
in	O
hidden	O
markov	O
models	O
(	O
hmm	O
)	O
,	O
we	O
speak	O
of	O
an	O
observable	O
sequence	O
of	O
events	O
that	O
moves	O
a	O
system	O
through	O
a	O
series	O
of	O
states	O
.	O
we	O
attempt	O
to	O
assign	O
transition	O
prob-	O
abilities	O
based	O
on	O
the	O
recent	O
history	O
of	O
states	O
of	O
the	O
system	O
(	O
or	O
,	O
the	O
last	O
few	O
events	O
)	O
.	O
in	O
this	O
example	O
,	O
we	O
want	O
to	O
develop	O
an	O
hmm	O
that	O
attempts	O
to	O
assign	O
part	O
of	O
speech	O
tags	O
to	O
english	O
text	O
.	O
to	O
train	O
an	O
hmm	O
,	O
we	O
will	O
assume	O
that	O
we	O
have	O
a	O
large	O
set	O
of	O
training	O
data	O
that	O
is	O
a	O
sequence	O
of	O
words	O
and	O
a	O
parallel	O
sequence	O
of	O
manually	O
assigned	O
part	O
of	O
speech	O
tags	O
.	O
we	O
will	O
see	O
an	O
example	O
of	O
this	O
marked	O
up	O
training	O
text	O
that	O
looks	O
like	O
“	O
john/nnp	O
chased/vb	O
the/dt	O
dog/nn	O
”	O
later	O
in	O
this	O
section	O
.	O
for	O
developing	O
a	O
sample	O
java	O
program	O
to	O
learn	O
how	O
to	O
train	O
a	O
hmm	O
,	O
we	O
assume	O
that	O
we	O
have	O
two	O
java	O
lists	O
words	O
and	O
tags	O
that	O
are	O
of	O
the	O
same	O
length	O
.	O
so	O
,	O
we	O
will	O
have	O
one	O
list	O
of	O
words	O
like	O
[	O
“	O
john	O
”	O
,	O
“	O
chased	O
”	O
,	O
“	O
the	O
”	O
,	O
“	O
dog	O
”	O
]	O
and	O
an	O
associated	O
list	O
of	O
part	O
166	O
9.7	O
hidden	O
markov	O
models	O
of	O
speech	O
tags	O
like	O
[	O
“	O
nnp	O
”	O
,	O
“	O
vb	O
”	O
,	O
“	O
dt	O
”	O
,	O
“	O
nn	O
”	O
]	O
.	O
once	O
the	O
hmm	O
is	O
trained	O
,	O
we	O
will	O
write	O
another	O
method	O
test	O
model	O
that	O
takes	O
as	O
input	O
a	O
java	O
vector	O
of	O
words	O
and	O
returns	O
a	O
java	O
vector	O
of	O
calculated	O
part	O
of	O
speech	O
tags	O
.	O
we	O
now	O
describe	O
the	O
assumptions	O
made	O
for	O
markov	O
models	O
and	O
hidden	O
markov	O
models	O
using	O
this	O
part	O
of	O
speech	O
tagging	B
problem	O
.	O
first	O
,	O
assume	O
that	O
the	O
desired	O
part	O
of	O
speech	O
tags	O
are	O
an	O
observable	O
sequence	O
like	O
:	O
t	O
[	O
1	O
]	O
,	O
t	O
[	O
2	O
]	O
,	O
t	O
[	O
3	O
]	O
,	O
...	O
,	O
t	O
[	O
n	O
]	O
and	O
the	O
original	O
word	O
sequence	O
is	O
:	O
w	O
[	O
1	O
]	O
,	O
w	O
[	O
2	O
]	O
,	O
w	O
[	O
3	O
]	O
,	O
...	O
,	O
w	O
[	O
n	O
]	O
we	O
will	O
also	O
assume	O
that	O
the	O
probability	O
of	O
tag	O
t	O
[	O
m	O
]	O
having	O
a	O
speciﬁc	O
value	O
is	O
only	O
a	O
function	O
of	O
:	O
t	O
[	O
m	O
−	O
1	O
]	O
and	O
:	O
w	O
[	O
m	O
]	O
andw	O
[	O
m	O
−	O
1	O
]	O
here	O
we	O
are	O
only	O
using	O
the	O
last	O
state	O
:	O
in	O
some	O
applications	O
,	O
instead	O
of	O
using	O
the	O
last	O
observed	O
state	O
,	O
we	O
might	O
use	O
the	O
last	O
two	O
states	O
,	O
greatly	O
increasing	O
the	O
resources	O
(	O
cpu	O
time	O
and	O
memory	O
)	O
required	O
for	O
training	O
.	O
for	O
our	O
example	O
,	O
we	O
will	O
assume	O
that	O
we	O
have	O
a	O
ﬁnite	O
lexicon	O
of	O
words	O
.	O
we	O
will	O
use	O
a	O
hash	O
table	O
that	O
uses	O
the	O
words	O
in	O
the	O
lexicon	O
as	O
keys	O
and	O
the	O
values	O
are	O
the	O
possible	O
parts	O
of	O
speech	O
.	O
for	O
example	O
,	O
assuming	O
the	O
lexicon	O
hash	O
table	O
is	O
named	O
lexicon	O
,	O
we	O
use	O
the	O
notation	O
:	O
lexicon	O
[	O
“	O
a-word	O
”	O
]	O
-	O
>	O
list	O
of	O
possible	O
tags	O
table	O
9.2	O
shows	O
some	O
of	O
the	O
possible	O
tags	O
used	O
in	O
our	O
example	O
system	O
.	O
tag	O
name	O
part	O
of	O
speech	O
vb	O
nn	O
adj	O
adv	O
in	O
nnp	O
verb	O
noun	O
adjective	O
adverb	O
preposition	O
noun	O
table	O
9.2	O
:	O
sample	O
part	O
of	O
speech	O
tags	O
167	O
9	O
statistical	O
natural	O
language	O
processing	O
as	O
an	O
example	O
,	O
we	O
might	O
have	O
a	O
lexicon	O
entry	O
:	O
lexicon	O
[	O
“	O
bank	O
”	O
]	O
-	O
>	O
nn	O
,	O
vb	O
where	O
the	O
work	O
“	O
bank	O
”	O
could	O
be	O
a	O
noun	O
(	O
“	O
i	O
went	O
to	O
the	O
bank	O
”	O
)	O
or	O
a	O
verb	O
(	O
“	O
to	O
turn	O
,	O
bank	O
the	O
airplane	O
”	O
)	O
.	O
in	O
the	O
example	O
program	O
,	O
i	O
use	O
a	O
hash	O
table	O
to	O
hold	O
the	O
lexicon	O
in	O
the	O
ﬁle	O
markov.java	O
:	O
map	O
<	O
string	O
,	O
list	O
<	O
string	O
>	O
>	O
lexicon	O
=	O
new	O
hashtable	O
<	O
string	O
,	O
list	O
<	O
string	O
>	O
>	O
(	O
)	O
;	O
another	O
hash	O
table	O
keeps	O
a	O
count	O
of	O
how	O
frequently	O
each	O
tag	O
is	O
used	O
:	O
map	O
<	O
string	O
,	O
integer	O
>	O
tags	O
=	O
new	O
hashtable	O
<	O
string	O
,	O
integer	O
>	O
(	O
)	O
;	O
map	O
<	O
string	O
,	O
integer	O
>	O
words	O
=	O
new	O
hashtable	O
<	O
string	O
,	O
integer	O
>	O
(	O
)	O
;	O
as	O
you	O
will	O
see	O
in	O
tables	O
9.3	O
,	O
9.4	O
,	O
and	O
9.5	O
we	O
will	O
be	O
operating	O
on	O
2d	O
arrays	O
where	O
in	O
the	O
ﬁrst	O
two	O
tables	O
the	O
rows	O
and	O
columns	O
represent	O
unique	O
tag	O
names	O
and	O
in	O
the	O
last	O
table	O
the	O
columns	O
represent	O
unique	O
words	O
and	O
the	O
columns	O
represent	O
unique	O
tag	O
names	O
.	O
we	O
use	O
the	O
following	O
data	O
structures	O
to	O
keep	O
a	O
list	O
of	O
unique	O
tags	O
and	O
words	O
(	O
a	O
hash	O
table	O
will	O
not	O
work	O
since	O
we	O
need	O
an	O
ordered	O
sequence	O
)	O
:	O
list	O
<	O
string	O
>	O
uniquetags	O
=	O
new	O
arraylist	O
<	O
string	O
>	O
(	O
)	O
;	O
list	O
<	O
string	O
>	O
uniquewords	O
=	O
new	O
arraylist	O
<	O
string	O
>	O
(	O
)	O
;	O
we	O
will	O
look	O
at	O
the	O
training	O
algorithm	O
and	O
implementation	O
in	O
the	O
next	O
section	O
.	O
9.7.1	O
training	O
hidden	O
markov	O
models	O
we	O
will	O
be	O
using	O
code	O
in	O
the	O
ﬁle	O
markov.java	O
and	O
i	O
will	O
show	O
snippets	O
of	O
this	O
ﬁle	O
with	O
comments	O
in	O
this	O
section	O
.	O
you	O
can	O
refer	O
to	O
the	O
source	O
code	O
for	O
the	O
complete	O
implementation	O
.	O
there	O
are	O
four	O
main	O
methods	O
in	O
the	O
class	O
m	O
arkov	O
:	O
•	O
build	O
words	O
and	O
tags	O
(	O
)	O
•	O
print	O
statistics	O
(	O
)	O
•	O
train	O
model	O
•	O
test	O
model	O
168	O
9.7	O
hidden	O
markov	O
models	O
jj	O
0.0	O
jj	O
0.0	O
in	O
0.0	O
vb	O
vbn	O
0.0	O
0.0	O
to	O
0.0	O
nnp	O
0.0	O
prp	O
nn	O
0.0	O
rb	O
0.0	O
vbg	O
0.0	O
dt	O
1.0	O
in	O
0.0	O
0.0	O
3.0	O
0.0	O
0.0	O
1.0	O
0.0	O
3.0	O
0.0	O
0.0	O
0.0	O
vb	O
0.0	O
0.0	O
0.0	O
0.0	O
2.0	O
16.0	O
2.0	O
5.0	O
0.0	O
0.0	O
1.0	O
vbn	O
to	O
nnp	O
prp	O
nn	O
1.0	O
0.0	O
2.0	O
0.0	O
0.0	O
1.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
1.0	O
1.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
25.0	O
0.0	O
0.0	O
3.0	O
0.0	O
0.0	O
0.0	O
0.0	O
2.0	O
0.0	O
0.0	O
0.0	O
0.0	O
1.0	O
3.0	O
1.0	O
1.0	O
0.0	O
0.0	O
0.0	O
1.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
1.0	O
0.0	O
0.0	O
rb	O
1.0	O
0.0	O
1.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
vbg	O
dt	O
0.0	O
0.0	O
4.0	O
0.0	O
0.0	O
14.0	O
0.0	O
0.0	O
2.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
0.0	O
1.0	O
0.0	O
0.0	O
0.0	O
table	O
9.3	O
:	O
transition	O
counts	O
from	O
the	O
ﬁrst	O
tag	O
(	O
shown	O
in	O
row	O
)	O
to	O
the	O
second	O
tag	O
(	O
shown	O
in	O
column	O
)	O
.	O
we	O
see	O
that	O
the	O
transition	O
from	O
nnp	O
to	O
vb	O
is	O
common	O
.	O
in	O
order	O
to	O
train	O
a	O
markov	O
model	O
to	O
tag	O
parts	O
of	O
speech	O
,	O
we	O
start	O
by	O
building	O
a	O
two-	O
dimensional	O
array	O
using	O
the	O
method	O
build	O
words	O
and	O
tags	O
that	O
uses	O
the	O
following	O
2d	O
array	O
to	O
count	O
transitions	O
;	O
part	O
of	O
this	O
array	O
was	O
seen	O
in	O
figure	O
9.3	O
:	O
tagt	O
ot	O
agt	O
ransitioncount	O
[	O
uniquet	O
agcount	O
]	O
[	O
uniquet	O
agcount	O
]	O
where	O
the	O
ﬁrst	O
index	O
is	O
the	O
index	O
of	O
tagn	O
and	O
the	O
second	O
index	O
is	O
the	O
index	O
of	O
tagn+1	O
.	O
we	O
will	O
see	O
later	O
how	O
to	O
calculate	O
the	O
values	O
in	O
this	O
array	O
and	O
then	O
how	O
the	O
values	O
in	O
this	O
two-dimensional	O
array	O
will	O
be	O
used	O
to	O
calculate	O
the	O
probabilities	O
of	O
transition-	O
ing	O
from	O
one	O
tag	O
to	O
another	O
.	O
first	O
however	O
,	O
we	O
simply	O
use	O
this	O
array	O
for	O
counting	O
transitions	O
between	O
pairs	O
of	O
tags	O
.	O
the	O
purpose	O
of	O
the	O
training	O
process	O
is	O
to	O
ﬁll	O
this	O
array	O
with	O
values	O
based	O
on	O
the	O
hand-tagged	O
training	O
ﬁle	O
:	O
training	O
data/markov/tagged	O
text.txt	O
that	O
looks	O
like	O
this	O
:	O
john/nnp	O
chased/vb	O
the/dt	O
dog/nn	O
down/rp	O
the/dt	O
street/nn	O
./	O
.	O
i/prp	O
saw/vb	O
john/nnp	O
dog/vb	O
mary/nnp	O
and/cc	O
later/rb	O
mary/nnp	O
throw/vb	O
the/dt	O
ball/nn	O
to/to	O
john/nnp	O
on/in	O
the/dt	O
street/nn	O
./	O
.	O
the	O
method	O
build	O
words	O
and	O
tags	O
parses	O
this	O
text	O
ﬁle	O
and	O
ﬁlls	O
the	O
uniquet	O
ags	O
and	O
uniquew	O
ords	O
collections	O
.	O
the	O
method	O
train	O
model	O
starts	O
by	O
ﬁlling	O
the	O
tag	O
to	O
tag	O
transition	O
count	O
array	O
(	O
see	O
table	O
9.3	O
)	O
:	O
169	O
9	O
statistical	O
natural	O
language	O
processing	O
tagt	O
ot	O
agt	O
ransitioncount	O
[	O
]	O
[	O
]	O
the	O
element	O
tagt	O
ot	O
agt	O
ransitioncount	O
[	O
indext	O
ag0	O
]	O
[	O
indext	O
ag1	O
]	O
is	O
incremented	O
whenever	O
we	O
ﬁnd	O
a	O
transition	O
of	O
tagn	O
to	O
tagn+1	O
in	O
the	O
input	O
training	O
text	O
.	O
the	O
exam-	O
ple	O
program	O
writes	O
a	O
spreadsheet	O
style	O
csv	O
ﬁle	O
for	O
this	O
and	O
other	O
two-dimensional	O
arrays	O
that	O
are	O
useful	O
for	O
viewing	O
intermediate	O
training	O
results	O
in	O
any	O
spreadsheet	O
program	O
.	O
we	O
normalized	O
the	O
data	O
seen	O
in	O
table	O
9.3	O
by	O
dividing	O
each	O
element	O
by	O
the	O
count	O
of	O
the	O
total	O
number	O
of	O
tags	O
.	O
this	O
normalized	O
data	O
can	O
be	O
seen	O
in	O
table	O
9.4.	O
the	O
code	O
for	O
this	O
ﬁrst	O
step	O
is	O
:	O
//	O
start	O
by	O
filling	O
in	O
the	O
tag	O
to	O
tag	O
transition	O
//	O
count	O
matrix	O
:	O
tagtotagtransitioncount	O
=	O
new	O
float	O
[	O
uniquetagcount	O
]	O
[	O
uniquetagcount	O
]	O
;	O
p	O
(	O
``	O
tagcount=	O
''	O
+tagcount	O
)	O
;	O
p	O
(	O
``	O
uniquetagcount=	O
''	O
+uniquetagcount	O
)	O
;	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
uniquetagcount	O
;	O
i++	O
)	O
{	O
for	O
(	O
int	O
j	O
=	O
0	O
;	O
j	O
<	O
uniquetagcount	O
;	O
j++	O
)	O
{	O
tagtotagtransitioncount	O
[	O
i	O
]	O
[	O
j	O
]	O
=	O
0	O
;	O
}	O
}	O
string	O
tag1	O
=	O
(	O
string	O
)	O
taglist.get	O
(	O
0	O
)	O
;	O
int	O
index1	O
=	O
uniquetags.indexof	O
(	O
tag1	O
)	O
;	O
//	O
inefficient	O
int	O
index0	O
;	O
for	O
(	O
int	O
i	O
=	O
0	O
,	O
size1	O
=	O
wordlist.size	O
(	O
)	O
-	O
1	O
;	O
i	O
<	O
size1	O
;	O
i++	O
)	O
{	O
index0	O
=	O
index1	O
;	O
tag1	O
=	O
(	O
string	O
)	O
taglist.get	O
(	O
i	O
+	O
1	O
)	O
;	O
index1	O
=	O
uniquetags.indexof	O
(	O
tag1	O
)	O
;	O
tagtotagtransitioncount	O
[	O
index0	O
]	O
[	O
index1	O
]	O
++	O
;	O
//	O
inefficient	O
}	O
writecsvfile	O
(	O
uniquetags	O
,	O
uniquetags	O
,	O
tagtotagtransitioncount	O
,	O
``	O
tag_to_tag	O
''	O
)	O
;	O
note	O
that	O
all	O
calls	O
to	O
the	O
utility	O
method	O
w	O
ritecsv	O
f	O
ile	O
are	O
for	O
debug	O
only	O
:	O
if	O
you	O
use	O
this	O
example	O
on	O
a	O
large	O
training	O
set	O
(	O
i.e.	O
,	O
a	O
large	O
text	O
corpus	O
like	O
treebank	O
of	O
hand-tagged	O
text	O
)	O
then	O
these	O
2d	O
arrays	O
containing	O
transition	O
and	O
probability	O
values	O
will	O
be	O
very	O
large	O
so	O
viewing	O
them	O
with	O
a	O
spreadsheet	O
is	O
convenient	O
.	O
then	O
the	O
method	O
train	O
model	O
calculates	O
the	O
probabilities	O
of	O
transitioning	O
from	O
tag	O
[	O
n	O
]	O
to	O
tag	O
[	O
m	O
]	O
(	O
see	O
table	O
9.4	O
)	O
.	O
here	O
is	O
the	O
code	O
for	O
calculating	O
these	O
transition	O
probabilities	O
:	O
//	O
now	O
calculate	O
the	O
probabilities	O
of	O
transitioning	O
170	O
9.7	O
hidden	O
markov	O
models	O
jj	O
0.00	O
jj	O
0.00	O
in	O
0.00	O
vb	O
vbn	O
0.00	O
0.00	O
to	O
0.00	O
nnp	O
0.00	O
prp	O
nn	O
0.00	O
rb	O
0.00	O
vbg	O
0.00	O
dt	O
0.04	O
in	O
0.00	O
0.00	O
0.11	O
0.00	O
0.00	O
0.05	O
0.00	O
0.10	O
0.00	O
0.00	O
0.00	O
vb	O
0.00	O
0.00	O
0.00	O
0.00	O
0.40	O
0.76	O
0.67	O
0.16	O
0.00	O
0.00	O
0.04	O
vbn	O
to	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.11	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.03	O
0.06	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
nnp	O
prp	O
nn	O
0.50	O
0.00	O
0.29	O
0.14	O
0.11	O
0.04	O
0.00	O
1.00	O
0.00	O
0.20	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.03	O
0.00	O
0.33	O
0.00	O
0.00	O
0.00	O
0.93	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.33	O
0.00	O
0.00	O
rb	O
0.50	O
0.00	O
0.04	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
vbg	O
dt	O
0.00	O
0.00	O
0.57	O
0.00	O
0.00	O
0.52	O
0.00	O
0.00	O
0.40	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
1.00	O
0.00	O
0.00	O
0.00	O
table	O
9.4	O
:	O
normalize	O
data	O
in	O
table	O
9.3	O
to	O
get	O
probability	O
of	O
one	O
tag	O
(	O
seen	O
in	O
row	O
)	O
transitioning	O
to	O
another	O
tag	O
(	O
seen	O
in	O
column	O
)	O
//	O
from	O
tag	O
[	O
n	O
]	O
to	O
tag	O
[	O
m	O
]	O
:	O
probabilitytag1totag2	O
=	O
new	O
float	O
[	O
uniquetagcount	O
]	O
[	O
uniquetagcount	O
]	O
;	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
uniquetagcount	O
;	O
i++	O
)	O
{	O
int	O
count	O
=	O
(	O
(	O
integer	O
)	O
tags.get	O
(	O
(	O
string	O
)	O
uniquetags.get	O
(	O
i	O
)	O
)	O
)	O
.intvalue	O
(	O
)	O
;	O
p	O
(	O
``	O
tag	O
:	O
``	O
+	O
uniquetags.get	O
(	O
i	O
)	O
+	O
``	O
,	O
count=	O
''	O
+count	O
)	O
;	O
for	O
(	O
int	O
j	O
=	O
0	O
;	O
j	O
<	O
uniquetagcount	O
;	O
j++	O
)	O
{	O
probabilitytag1totag2	O
[	O
i	O
]	O
[	O
j	O
]	O
=	O
0.0001f	O
+	O
tagtotagtransitioncount	O
[	O
i	O
]	O
[	O
j	O
]	O
/	O
(	O
float	O
)	O
count	O
;	O
}	O
}	O
writecsvfile	O
(	O
uniquetags	O
,	O
uniquetags	O
,	O
probabilitytag1totag2	O
,	O
''	O
test_data/markov/prob_tag_to_tag	O
''	O
)	O
;	O
finally	O
,	O
in	O
the	O
method	O
train	O
model	O
we	O
complete	O
the	O
training	O
by	O
deﬁning	O
the	O
array	O
probabilityw	O
ordgivent	O
ag	O
[	O
uniquew	O
ordcount	O
]	O
[	O
uniquet	O
agcount	O
]	O
which	O
shows	O
the	O
probability	O
of	O
a	O
tag	O
at	O
index	O
n	O
producing	O
a	O
word	O
at	O
index	O
n	O
in	O
the	O
input	O
training	O
text	O
.	O
here	O
is	O
the	O
code	O
for	O
this	O
last	O
training	O
step	O
:	O
//	O
now	O
calculate	O
the	O
probability	O
of	O
a	O
word	O
,	O
given	O
171	O
9	O
statistical	O
natural	O
language	O
processing	O
went	O
mary	O
played	O
river	O
leave	O
dog	O
away	O
chased	O
at	O
tired	O
good	O
had	O
throw	O
from	O
so	O
stayed	O
absense	O
street	O
john	O
ball	O
on	O
cat	O
later	O
she	O
of	O
with	O
saw	O
jj	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.50	O
0.50	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
in	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.14	O
0.00	O
0.00	O
0.00	O
0.00	O
0.14	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.29	O
0.00	O
0.00	O
0.00	O
0.14	O
0.29	O
0.00	O
vb	O
0.07	O
0.00	O
0.07	O
0.00	O
0.07	O
0.04	O
0.00	O
0.11	O
0.00	O
0.04	O
0.00	O
0.04	O
0.07	O
0.00	O
0.00	O
0.04	O
0.00	O
0.00	O
0.00	O
0.04	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.19	O
vbn	O
to	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
1.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
nnp	O
prp	O
nn	O
0.00	O
0.00	O
0.00	O
0.52	O
0.00	O
0.00	O
0.03	O
0.00	O
0.00	O
0.03	O
0.23	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.03	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.03	O
0.06	O
0.00	O
0.00	O
0.48	O
0.06	O
0.00	O
0.00	O
0.00	O
0.32	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.03	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.33	O
0.00	O
0.00	O
0.00	O
rb	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.33	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.33	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.00	O
0.33	O
0.00	O
0.00	O
0.00	O
0.00	O
table	O
9.5	O
:	O
probabilities	O
of	O
words	O
having	O
speciﬁc	O
tags	O
.	O
only	O
a	O
few	O
tags	O
are	O
shown	O
in	O
this	O
table	O
.	O
172	O
9.7	O
hidden	O
markov	O
models	O
//	O
a	O
proceeding	O
tag	O
:	O
probabilitywordgiventag	O
=	O
new	O
float	O
[	O
uniquewordcount	O
]	O
[	O
uniquetagcount	O
]	O
;	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
uniquewordcount	O
;	O
i++	O
)	O
{	O
string	O
tag	O
=	O
uniquetags.get	O
(	O
j	O
)	O
;	O
for	O
(	O
int	O
j	O
=	O
0	O
;	O
j	O
<	O
uniquetagcount	O
;	O
j++	O
)	O
{	O
string	O
tag	O
=	O
uniquetags.get	O
(	O
j	O
)	O
;	O
//	O
note	O
:	O
index	O
of	O
tag	O
is	O
one	O
less	O
than	O
index	O
//	O
of	O
emitted	O
word	O
we	O
are	O
testing	O
:	O
int	O
counttagoccurence	O
=	O
tags.get	O
(	O
tag	O
)	O
;	O
float	O
wordwithtagoccurence	O
=	O
0	O
;	O
for	O
(	O
int	O
n=0	O
,	O
sizem1=wordlist.size	O
(	O
)	O
-1	O
;	O
n	O
<	O
sizem1	O
;	O
n++	O
)	O
{	O
string	O
testword	O
=	O
wordlist.get	O
(	O
n	O
)	O
;	O
string	O
testtag	O
=	O
taglist.get	O
(	O
n	O
)	O
;	O
if	O
(	O
testword.equals	O
(	O
word	O
)	O
&	O
&	O
testtag.equals	O
(	O
tag	O
)	O
)	O
{	O
wordwithtagoccurence++	O
;	O
}	O
}	O
probabilitywordgiventag	O
[	O
i	O
]	O
[	O
j	O
]	O
=	O
wordwithtagoccurence	O
/	O
(	O
float	O
)	O
counttagoccurence	O
;	O
}	O
}	O
writecsvfile	O
(	O
uniquewords	O
,	O
uniquetags	O
,	O
probabilitywordgiventag	O
,	O
''	O
test_data/markov/prob_word_given_tag	O
''	O
)	O
;	O
9.7.2	O
using	O
the	O
trained	O
markov	O
model	O
to	O
tag	O
text	O
from	O
section	O
9.7.1	O
we	O
have	O
the	O
probabilities	O
of	O
a	O
given	O
tag	O
being	O
assigned	O
to	O
words	O
in	O
the	O
lexicon	O
and	O
we	O
have	O
the	O
probability	O
of	O
a	O
given	O
tag	O
,	O
given	O
the	O
preceding	O
tag	O
.	O
we	O
will	O
use	O
this	O
information	O
in	O
a	O
“	O
brute	O
force	O
”	O
way	O
in	O
the	O
method	O
test	O
model	O
:	O
we	O
will	O
iterate	O
through	O
all	O
possible	O
tagging	B
possibilities	O
and	O
rate	O
them	O
using	O
the	O
formula	O
from	O
foundations	O
of	O
statistical	O
natural	O
language	O
processing	O
[	O
manning/schutze	O
,	O
1999	O
]	O
page	O
347	O
:	O
rating	O
=	O
(	O
cid:81	O
)	O
i=1	O
p	O
(	O
wordi|tagi	O
)	O
∗	O
p	O
(	O
tagi|tagi−1	O
)	O
p	O
(	O
wordi|tagi	O
)	O
is	O
the	O
probability	O
of	O
word	O
having	O
a	O
tag	O
value	O
tag	O
and	O
p	O
(	O
tagi|tagi−1	O
)	O
is	O
the	O
probability	O
of	O
tagi	O
following	O
tagi−1	O
.	O
we	O
can	O
simply	O
implement	O
two	O
nested	O
loops	O
over	O
all	O
possible	O
tags	O
for	O
each	O
input	O
word	O
and	O
use	O
the	O
tag	O
for	O
each	O
word	O
with	O
the	O
highest	O
rating	O
(	O
score	O
)	O
.	O
173	O
9	O
statistical	O
natural	O
language	O
processing	O
the	O
arrays	O
for	O
these	O
probabilities	O
in	O
markov.java	O
are	O
probabilityw	O
ordgivent	O
ag	O
and	O
probabilityt	O
ag1t	O
ot	O
ag2	O
.	O
the	O
logic	B
for	O
scoring	O
a	O
speciﬁc	O
tagging	B
possibility	O
for	O
a	O
sequence	O
of	O
words	O
in	O
the	O
method	O
score	O
.	O
the	O
method	O
exponential	O
tagging	B
algorithm	O
is	O
the	O
top	O
level	O
api	O
for	O
tagging	B
words	O
.	O
please	O
note	O
that	O
the	O
word	O
sequence	O
that	O
you	O
pass	O
to	O
exponential	O
tagging	B
algorithm	O
must	O
not	O
contain	O
any	O
words	O
that	O
were	O
not	O
in	O
the	O
original	O
training	O
data	O
(	O
i.e.	O
,	O
in	O
the	O
ﬁle	O
tagged	O
text.txt	O
)	O
.	O
public	O
list	O
<	O
string	O
>	O
exponential_tagging_algorithm	O
(	O
list	O
<	O
string	O
>	O
words	O
)	O
{	O
possibletags	O
=	O
new	O
arraylist	O
<	O
arraylist	O
<	O
string	O
>	O
>	O
(	O
)	O
;	O
int	O
num	O
=	O
words.size	O
(	O
)	O
;	O
indices	O
=	O
new	O
int	O
[	O
num	O
]	O
;	O
counts	O
=	O
new	O
int	O
[	O
num	O
]	O
;	O
int	O
[	O
]	O
best_indices	O
=	O
new	O
int	O
[	O
num	O
]	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
num	O
;	O
i++	O
)	O
{	O
indices	O
[	O
i	O
]	O
=	O
0	O
;	O
counts	O
[	O
i	O
]	O
=	O
0	O
;	O
}	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
num	O
;	O
i++	O
)	O
{	O
string	O
word	O
=	O
``	O
''	O
+	O
words.get	O
(	O
i	O
)	O
;	O
list	O
<	O
string	O
>	O
v	O
=	O
lexicon.get	O
(	O
word	O
)	O
;	O
//	O
possible	O
tags	O
at	O
index	O
i	O
:	O
arraylist	O
<	O
string	O
>	O
v2	O
=	O
new	O
arraylist	O
<	O
string	O
>	O
(	O
)	O
;	O
for	O
(	O
int	O
j=0	O
;	O
j	O
<	O
v.size	O
(	O
)	O
;	O
j++	O
)	O
{	O
string	O
tag	O
=	O
``	O
''	O
+	O
v.get	O
(	O
j	O
)	O
;	O
if	O
(	O
v2.contains	O
(	O
tag	O
)	O
==	O
false	O
)	O
{	O
v2.add	O
(	O
tag	O
)	O
;	O
counts	O
[	O
i	O
]	O
++	O
;	O
}	O
}	O
//	O
possible	O
tags	O
at	O
index	O
i	O
:	O
possibletags.add	O
(	O
v2	O
)	O
;	O
system.out.print	O
(	O
``	O
ˆˆ	O
word	O
:	O
``	O
+	O
word	O
+	O
``	O
,	O
tag	O
count	O
:	O
``	O
+	O
counts	O
[	O
i	O
]	O
+	O
''	O
,	O
tags	O
:	O
``	O
)	O
;	O
for	O
(	O
int	O
j=0	O
;	O
j	O
<	O
v2.size	O
(	O
)	O
;	O
j++	O
)	O
{	O
system.out.print	O
(	O
``	O
``	O
+	O
v2.get	O
(	O
j	O
)	O
)	O
;	O
}	O
system.out.println	O
(	O
)	O
;	O
}	O
float	O
best_score	O
=	O
-9999	O
;	O
do	O
{	O
system.out.print	O
(	O
``	O
current	O
indices	O
:	O
''	O
)	O
;	O
for	O
(	O
int	O
k=0	O
;	O
k	O
<	O
num	O
;	O
k++	O
)	O
{	O
system.out.print	O
(	O
``	O
``	O
+	O
indices	O
[	O
k	O
]	O
)	O
;	O
174	O
9.7	O
hidden	O
markov	O
models	O
}	O
system.out.println	O
(	O
)	O
;	O
float	O
score	O
=	O
score	O
(	O
words	O
)	O
;	O
if	O
(	O
score	O
>	O
best_score	O
)	O
{	O
best_score	O
=	O
score	O
;	O
system.out.println	O
(	O
``	O
*	O
new	O
best	O
score	O
:	O
``	O
+	O
best_score	O
)	O
;	O
for	O
(	O
int	O
m=0	O
;	O
m	O
<	O
num	O
;	O
m++	O
)	O
{	O
best_indices	O
[	O
m	O
]	O
=	O
indices	O
[	O
m	O
]	O
;	O
}	O
}	O
}	O
while	O
(	O
incrementindices	O
(	O
num	O
)	O
)	O
;	O
//	O
see	O
text	O
below	O
list	O
<	O
string	O
>	O
tags	O
=	O
new	O
arraylist	O
<	O
string	O
>	O
(	O
num	O
)	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
num	O
;	O
i++	O
)	O
{	O
list	O
<	O
string	O
>	O
v	O
=	O
possibletags.get	O
(	O
i	O
)	O
;	O
tags.add	O
(	O
v.get	O
(	O
best_indices	O
[	O
i	O
]	O
)	O
)	O
;	O
}	O
return	O
tags	O
;	O
}	O
the	O
method	O
incrementindices	O
is	O
responsible	O
for	O
generating	O
the	O
next	O
possible	O
tag-	O
ging	O
for	O
a	O
sequence	O
of	O
words	O
.	O
each	O
word	O
in	O
a	O
sequence	O
can	O
have	O
one	O
or	O
more	O
possible	O
tags	O
.	O
the	O
method	O
incrementindices	O
counts	O
with	O
a	O
variable	O
base	O
per	O
digit	O
position	O
.	O
for	O
example	O
,	O
if	O
we	O
had	O
four	O
words	O
in	O
an	O
input	O
sequence	O
with	O
the	O
ﬁrst	O
and	O
last	O
words	O
only	O
having	O
one	O
possible	O
tag	O
value	O
and	O
the	O
second	O
having	O
two	O
possible	O
tag	O
values	O
and	O
the	O
third	O
word	O
having	O
three	O
possible	O
tag	O
values	O
,	O
then	O
incrementindices	O
would	O
count	O
like	O
this	O
:	O
0	O
0	O
0	O
0	O
0	O
1	O
0	O
0	O
0	O
0	O
1	O
0	O
0	O
1	O
1	O
0	O
0	O
0	O
2	O
0	O
0	O
1	O
1	O
0	O
the	O
generated	O
indices	O
(	O
i.e.	O
,	O
each	O
row	O
in	O
this	O
listing	O
)	O
are	O
stored	O
in	O
the	O
class	O
instance	O
variable	O
indices	O
which	O
is	O
used	O
in	O
method	O
score	O
:	O
/**	O
*	O
increment	O
the	O
class	O
variable	O
indices	O
[	O
]	O
to	O
point	O
*	O
to	O
the	O
next	O
possible	O
set	O
of	O
tags	O
to	O
check	O
.	O
*/	O
175	O
9	O
statistical	O
natural	O
language	O
processing	O
private	O
boolean	O
incrementindices	O
(	O
int	O
num	O
)	O
{	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
num	O
;	O
i++	O
)	O
{	O
if	O
(	O
indices	O
[	O
i	O
]	O
<	O
(	O
counts	O
[	O
i	O
]	O
-	O
1	O
)	O
)	O
{	O
indices	O
[	O
i	O
]	O
+=	O
1	O
;	O
for	O
(	O
int	O
j=0	O
;	O
j	O
<	O
i	O
;	O
j++	O
)	O
{	O
indices	O
[	O
j	O
]	O
=	O
0	O
;	O
}	O
return	O
true	O
;	O
}	O
}	O
return	O
false	O
;	O
}	O
we	O
are	O
not	O
using	O
an	O
efﬁcient	O
algorithm	O
if	O
the	O
word	O
sequence	O
is	O
long	O
.	O
in	O
practice	O
this	O
is	O
not	O
a	O
real	O
problem	O
because	O
you	O
can	O
break	O
up	O
long	O
texts	O
into	O
smaller	O
pieces	O
for	O
tagging	B
;	O
for	O
example	O
,	O
you	O
might	O
want	O
to	O
tag	O
just	O
one	O
sentence	O
at	O
a	O
time	O
.	O
176	O
10	O
information	O
gathering	O
we	O
saw	O
techniques	O
for	O
extracting	O
semantic	O
information	O
in	O
chapter	O
9	O
and	O
we	O
will	O
augment	O
that	O
material	O
with	O
the	O
use	O
of	O
reuters	O
open	O
calais	O
web	O
services	O
for	O
infor-	O
mation	O
extraction	O
from	O
text	O
.	O
we	O
will	O
then	O
look	O
at	O
information	O
discovery	O
in	O
relational	B
database	I
,	O
indexing	O
and	O
search	B
tools	O
and	O
techniques	O
.	O
10.1	O
open	O
calais	O
the	O
open	O
calais	O
system	O
was	O
developed	O
by	O
clear	O
forest	O
(	O
later	O
acquired	O
by	O
reuters	O
)	O
.	O
reuters	O
allows	O
free	O
use	O
(	O
with	O
registration	O
)	O
of	O
their	O
named	B
entity	I
extraction	I
web	O
ser-	O
vice	O
;	O
you	O
can	O
make	O
20,000	O
web	O
service	O
calls	O
a	O
day	O
.	O
you	O
need	O
to	O
sign	O
up	O
and	O
get	O
an	O
access	O
key	O
at	O
:	O
www.opencalais.com	O
.	O
starting	O
in	O
1999	O
,	O
i	O
have	O
developed	O
a	O
similar	O
named	B
entity	I
extraction	I
system	O
(	O
see	O
www.knowledgebooks.com	O
)	O
and	O
i	O
sometimes	O
use	O
both	O
open	O
calais	O
and	O
my	O
own	O
system	O
together	O
.	O
the	O
example	O
program	O
in	O
this	O
section	O
(	O
opencalaisclient.java	O
)	O
expects	O
the	O
key	O
to	O
be	O
set	O
in	O
your	O
environment	O
;	O
on	O
my	O
macbook	O
i	O
set	O
(	O
here	O
i	O
show	O
a	O
fake	O
key	O
–	O
get	O
your	O
own	O
)	O
:	O
open_calais_key=al4345lkea48586dgfta3129aq	O
you	O
will	O
need	O
to	O
make	O
sure	O
that	O
this	O
value	O
can	O
be	O
obtained	O
from	O
a	O
system.getenv	O
(	O
)	O
call	O
.	O
the	O
open	O
calais	O
web	O
services	O
support	O
json	O
,	O
rest	O
,	O
and	O
soap	O
calls	O
.	O
i	O
will	O
use	O
the	O
rest	O
architectural	O
style	O
in	O
this	O
example	O
.	O
the	O
open	O
calais	O
server	O
returns	O
an	O
xml	O
rdf	O
payload	O
that	O
can	O
be	O
directly	O
loaded	O
into	O
rdf	O
data	O
stores	O
like	O
sesame	O
(	O
see	O
chapter	O
4	O
)	O
.	O
the	O
example	O
class	O
opencalaisclient	O
depends	O
on	O
a	O
trick	O
that	O
may	O
break	O
in	O
future	O
versions	O
of	O
the	O
open	O
calais	O
web	O
service	O
:	O
an	O
xml	O
comment	O
block	O
at	O
the	O
top	O
of	O
the	O
returned	O
rdf	O
payload	O
lists	O
the	O
types	O
of	O
entities	O
and	O
their	O
values	O
.	O
for	O
example	O
,	O
here	O
is	O
a	O
sample	O
of	O
the	O
header	O
comments	O
with	O
most	O
of	O
the	O
rdf	O
payload	O
removed	O
for	O
brevity	O
:	O
<	O
?	O
xml	O
version=	O
''	O
1.0	O
''	O
encoding=	O
''	O
utf-8	O
''	O
?	O
>	O
177	O
10	O
information	O
gathering	O
<	O
string	O
xmlns=	O
''	O
http	O
:	O
//clearforest.com/	O
''	O
>	O
<	O
!	O
--	O
use	O
of	O
the	O
calais	O
web	O
service	O
is	O
governed	O
by	O
the	O
terms	O
of	O
service	O
located	O
at	O
http	O
:	O
//www.opencalais.com	O
.	O
by	O
using	O
this	O
service	O
or	O
the	O
results	O
of	O
the	O
service	O
you	O
agree	O
to	O
these	O
terms	O
of	O
service	O
.	O
--	O
>	O
<	O
!	O
--	O
relations	O
:	O
country	O
:	O
france	O
,	O
united	O
states	O
,	O
spain	O
person	O
:	O
hillary	O
clinton	O
,	O
doug	O
hattaway	O
,	O
al	O
gore	O
city	O
:	O
san	O
francisco	O
provinceorstate	O
:	O
texas	O
--	O
>	O
<	O
rdf	O
:	O
rdf	O
xmlns	O
:	O
rdf=	O
''	O
http	O
:	O
//www.w3.org/1	O
...	O
''	O
xmlns	O
:	O
c=	O
''	O
http	O
:	O
//s.opencalais.com/1/pred/	O
''	O
>	O
...	O
<	O
rdf	O
:	O
type	O
...	O
>	O
...	O
.	O
<	O
/rdf	O
:	O
rdf	O
>	O
<	O
/string	O
>	O
here	O
we	O
will	O
simply	O
parse	O
out	O
the	O
relations	O
from	O
the	O
comment	O
block	O
.	O
if	O
you	O
want	O
to	O
use	O
sesame	O
to	O
parse	O
the	O
rdf	O
payload	O
and	O
load	O
it	O
into	O
a	O
local	O
rdf	O
repository	O
then	O
you	O
can	O
alternatively	O
load	O
the	O
returned	O
open	O
calais	O
response	O
by	O
modifying	O
the	O
example	O
code	O
from	O
chapter	O
4	O
using	O
:	O
stringreader	O
sr	O
=	O
new	O
stringreader	O
(	O
result	O
)	O
;	O
repositoryconnection	O
connection	O
=	O
repository.getconnection	O
(	O
)	O
;	O
connection.add	O
(	O
sr	O
,	O
``	O
''	O
,	O
rdfformat.rdfxml	O
)	O
;	O
here	O
are	O
a	O
few	O
code	O
snippets	O
(	O
incomplete	O
code	O
:	O
please	O
see	O
the	O
java	O
source	O
ﬁle	O
for	O
more	O
details	O
)	O
from	O
the	O
ﬁle	O
opencalaisclient.java	O
:	O
public	O
hashtable	O
<	O
string	O
,	O
list	O
<	O
string	O
>	O
>	O
getpropertynamesandvalues	O
(	O
string	O
text	O
)	O
throws	O
malformedurlexception	O
,	O
ioexception	O
{	O
hashtable	O
<	O
string	O
,	O
list	O
<	O
string	O
>	O
>	O
ret	O
=	O
new	O
hashtable	O
<	O
string	O
,	O
list	O
<	O
string	O
>	O
>	O
(	O
)	O
;	O
you	O
need	O
an	O
open	O
calais	O
license	O
key	O
.	O
the	O
following	O
code	O
sets	O
up	O
the	O
data	O
for	O
a	O
rest	O
style	O
web	O
service	O
call	O
and	O
opens	O
a	O
connection	O
to	O
the	O
server	O
,	O
makes	O
the	O
request	O
,	O
and	O
retrieves	O
the	O
response	O
in	O
the	O
string	O
variable	O
payload	O
.	O
the	O
java	O
libraries	O
for	O
handling	O
178	O
http	O
connections	O
make	O
it	O
simple	O
to	O
make	O
a	O
architecture	O
style	O
web	O
service	O
call	O
and	O
get	O
the	O
response	O
as	O
a	O
text	O
string	O
:	O
10.1	O
open	O
calais	O
string	O
licenseid	O
=	O
system.getenv	O
(	O
``	O
open_calais_key	O
''	O
)	O
;	O
string	O
content	O
=	O
text	O
;	O
string	O
paramsxml	O
=	O
``	O
<	O
c	O
:	O
params	O
stringbuilder	O
sb	O
=	O
...	O
<	O
/c	O
:	O
params	O
>	O
''	O
;	O
new	O
stringbuilder	O
(	O
content.length	O
(	O
)	O
+	O
512	O
)	O
;	O
sb.append	O
(	O
``	O
licenseid=	O
''	O
)	O
.append	O
(	O
licenseid	O
)	O
;	O
sb.append	O
(	O
``	O
&	O
content=	O
''	O
)	O
.append	O
(	O
content	O
)	O
;	O
sb.append	O
(	O
``	O
&	O
paramsxml=	O
''	O
)	O
.append	O
(	O
paramsxml	O
)	O
;	O
string	O
payload	O
=	O
sb.tostring	O
(	O
)	O
;	O
urlconnection	O
connection	O
=	O
new	O
url	O
(	O
``	O
http	O
:	O
//api.opencalais.com	O
...	O
''	O
)	O
.	O
openconnection	O
(	O
)	O
;	O
connection.addrequestproperty	O
(	O
``	O
content-type	O
''	O
,	O
''	O
application/x-www-form-urlencoded	O
''	O
)	O
;	O
connection.addrequestproperty	O
(	O
``	O
content-length	O
''	O
,	O
string.valueof	O
(	O
payload.length	O
(	O
)	O
)	O
)	O
;	O
connection.setdooutput	O
(	O
true	O
)	O
;	O
outputstream	O
out	O
=	O
connection.getoutputstream	O
(	O
)	O
;	O
outputstreamwriter	O
writer	O
=	O
new	O
outputstreamwriter	O
(	O
out	O
)	O
;	O
writer.write	O
(	O
payload	O
)	O
;	O
writer.flush	O
(	O
)	O
;	O
//	O
get	O
response	O
from	O
open	O
calais	O
server	O
:	O
string	O
result	O
=	O
new	O
scanner	O
(	O
connection.getinputstream	O
(	O
)	O
)	O
.	O
usedelimiter	O
(	O
``	O
\\z	O
''	O
)	O
.next	O
(	O
)	O
;	O
result	O
=	O
result.replaceall	O
(	O
``	O
&	O
lt	O
;	O
''	O
,	O
``	O
<	O
``	O
)	O
.	O
replaceall	O
(	O
``	O
&	O
gt	O
;	O
''	O
,	O
``	O
>	O
''	O
)	O
;	O
the	O
text	O
that	O
we	O
are	O
parsing	O
looks	O
like	O
:	O
country	O
:	O
france	O
,	O
united	O
states	O
,	O
spain	O
person	O
:	O
hillary	O
clinton	O
,	O
doug	O
hattaway	O
,	O
al	O
gore	O
so	O
the	O
text	O
response	O
is	O
parsed	O
to	O
extract	O
a	O
list	O
of	O
values	O
for	O
each	O
property	O
name	O
contained	O
in	O
the	O
string	O
variable	O
result	O
:	O
int	O
index1	O
=	O
result.indexof	O
(	O
``	O
terms	O
of	O
service.	O
--	O
>	O
''	O
)	O
;	O
179	O
10	O
information	O
gathering	O
index1	O
=	O
result.indexof	O
(	O
``	O
<	O
!	O
--	O
''	O
,	O
index1	O
)	O
;	O
int	O
index2	O
=	O
result.indexof	O
(	O
``	O
--	O
>	O
''	O
,	O
index1	O
)	O
;	O
result	O
=	O
result.substring	O
(	O
index1	O
+	O
4	O
,	O
index2	O
-	O
1	O
+	O
1	O
)	O
;	O
string	O
[	O
]	O
lines	O
=	O
result.split	O
(	O
``	O
\\n	O
''	O
)	O
;	O
for	O
(	O
string	O
line	O
:	O
lines	O
)	O
{	O
int	O
index	O
=	O
line.indexof	O
(	O
``	O
:	O
''	O
)	O
;	O
if	O
(	O
index	O
>	O
-1	O
)	O
{	O
string	O
relation	O
=	O
line.substring	O
(	O
0	O
,	O
index	O
)	O
.trim	O
(	O
)	O
;	O
string	O
[	O
]	O
entities	O
=	O
line.substring	O
(	O
index	O
+	O
1	O
)	O
.trim	O
(	O
)	O
.split	O
(	O
``	O
,	O
''	O
)	O
;	O
for	O
(	O
int	O
i	O
=	O
0	O
,	O
size	O
=	O
entities.length	O
;	O
i	O
<	O
size	O
;	O
i++	O
)	O
{	O
entities	O
[	O
i	O
]	O
=	O
entities	O
[	O
i	O
]	O
.trim	O
(	O
)	O
;	O
}	O
ret.put	O
(	O
relation	O
,	O
arrays.aslist	O
(	O
entities	O
)	O
)	O
;	O
}	O
}	O
return	O
ret	O
;	O
}	O
again	O
,	O
i	O
want	O
to	O
point	O
out	O
that	O
the	O
above	O
code	O
depends	O
on	O
the	O
format	O
of	O
xml	O
com-	O
ments	O
in	O
the	O
returned	O
xml	O
payload	O
so	O
this	O
code	O
may	O
break	O
in	O
the	O
future	O
and	O
require	O
modiﬁcation	O
.	O
here	O
is	O
an	O
example	O
use	O
of	O
this	O
api	O
:	O
string	O
content	O
=	O
''	O
hillary	O
clinton	O
likes	O
to	O
remind	O
texans	O
that	O
...	O
''	O
;	O
map	O
<	O
string	O
,	O
list	O
<	O
string	O
>	O
>	O
results	O
=	O
new	O
opencalaisclient	O
(	O
)	O
.	O
getpropertynamesandvalues	O
(	O
content	O
)	O
;	O
for	O
(	O
string	O
key	O
:	O
results.keyset	O
(	O
)	O
)	O
{	O
system.out.println	O
(	O
``	O
``	O
+	O
key	O
+	O
``	O
:	O
``	O
+	O
results.get	O
(	O
key	O
)	O
)	O
;	O
}	O
in	O
this	O
example	O
the	O
string	O
value	O
assigned	O
to	O
the	O
variable	O
content	O
was	O
about	O
500	O
words	O
of	O
text	O
from	O
a	O
news	O
article	O
;	O
the	O
full	O
text	O
can	O
be	O
seen	O
in	O
the	O
example	O
data	O
ﬁles	O
.	O
the	O
output	O
of	O
this	O
example	O
code	O
is	O
:	O
person	O
:	O
[	O
hillary	O
clinton	O
,	O
doug	O
hattaway	O
,	O
al	O
gore	O
]	O
relations	O
:	O
[	O
]	O
city	O
:	O
[	O
san	O
francisco	O
]	O
country	O
:	O
[	O
france	O
,	O
united	O
states	O
,	O
spain	O
]	O
provinceorstate	O
:	O
[	O
texas	O
]	O
180	O
10.2	O
information	O
discovery	O
in	O
relational	O
databases	O
there	O
are	O
several	O
ways	O
that	O
you	O
might	O
want	O
to	O
use	O
named	O
entity	O
identiﬁcation	O
.	O
one	O
idea	O
is	O
to	O
create	O
a	O
search	B
engine	O
that	O
identiﬁes	O
people	O
,	O
places	O
,	O
and	O
products	O
in	O
search	B
results	O
and	O
offers	O
users	O
a	O
linked	O
set	O
of	O
documents	O
or	O
web	O
pages	O
that	O
discuss	O
the	O
same	O
people	O
,	O
places	O
,	O
and/or	O
products	O
.	O
another	O
idea	O
is	O
to	O
load	O
the	O
rdf	O
payload	O
returned	O
by	O
the	O
open	O
calais	O
web	O
service	O
calls	O
to	O
an	O
rdf	O
repository	O
and	O
support	O
sparql	O
queries	O
.	O
you	O
may	O
also	O
want	O
to	O
modify	O
any	O
content	O
management	O
systems	O
(	O
cms	O
)	O
that	O
you	O
use	O
to	O
add	O
tags	O
for	O
documents	O
maintained	O
in	O
a	O
cms	O
;	O
using	O
open	O
calais	O
you	O
are	O
limited	O
to	O
the	O
types	O
of	O
entities	O
that	O
they	O
extract	O
.	O
this	O
limitation	O
is	O
one	O
reason	O
why	O
i	O
maintain	O
and	O
support	O
my	O
own	O
system	O
for	O
named	O
entity	O
and	O
classiﬁcation	O
(	O
knowl-	O
edgebooks.com	O
)	O
–	O
i	O
like	O
some	O
ﬂexibility	O
in	O
the	O
type	O
of	O
semantic	O
information	O
that	O
i	O
extract	O
from	O
text	O
data	O
.	O
i	O
covered	O
some	O
of	O
the	O
techniques	O
that	O
i	O
use	O
in	O
my	O
own	O
work	O
in	O
section	O
9.2	O
if	O
you	O
decide	O
to	O
implement	O
your	O
own	O
system	O
to	O
replace	O
or	O
augment	O
open	O
calais	O
.	O
10.2	O
information	O
discovery	O
in	O
relational	O
databases	O
we	O
will	O
look	O
at	O
some	O
techniques	O
for	O
using	O
the	O
jdbc	O
meta-data	O
apis	O
to	O
explore	O
re-	O
lational	O
database	O
resources	O
where	O
you	O
at	O
least	O
have	O
read	O
access	O
rights	O
.	O
in	O
order	O
to	O
make	O
installation	O
of	O
the	O
example	O
programs	O
easier	O
we	O
will	O
use	O
the	O
derby	O
pure	O
java	O
database	O
that	O
is	O
bundled	O
with	O
jdk	O
1.6.	O
if	O
you	O
are	O
still	O
using	O
jdk	O
1.5	O
,	O
please	O
down-	O
load	O
the	O
derby.jar	O
ﬁle	O
and	O
copy	O
it	O
to	O
the	O
“	O
lib	O
”	O
directory	O
for	O
the	O
java	O
book	O
examples	O
:	O
http	O
:	O
//db.apache.org/derby/	O
there	O
are	O
small	O
differences	O
in	O
setting	O
up	O
a	O
jdbc	O
connection	O
to	O
an	O
embedded	O
derby	O
instance	O
rather	O
than	O
accessing	O
a	O
remote	O
server	O
:	O
these	O
differences	O
are	O
not	O
important	O
to	O
the	O
material	O
in	O
this	O
section	O
,	O
it	O
is	O
mostly	O
a	O
matter	O
of	O
changing	O
a	O
connection	O
call	O
.	O
i	O
will	O
use	O
two	O
xml	O
data	O
sources	O
(	O
data	O
on	O
us	O
states	O
and	O
the	O
cia	O
world	O
factbook	O
)	O
for	O
these	O
examples	O
,	O
and	O
start	O
with	O
the	O
program	O
to	O
insert	O
these	O
xml	O
data	O
ﬁles	O
into	O
the	O
relational	B
database	I
:	O
src-info-disc-rdbs/createsampledatabase.java	O
and	O
continue	O
with	O
a	O
program	O
to	O
print	O
out	O
all	O
metadata	O
that	O
is	O
implemented	O
in	O
the	O
ﬁles	O
:	O
src-info-disc-rdbs/dumpmetadata.java	O
src-info-disc-rdbs/databasediscovery.java	O
181	O
10	O
information	O
gathering	O
we	O
will	O
not	O
implement	O
any	O
speciﬁc	O
“	O
database	O
spidering	O
”	O
applications	O
but	O
i	O
will	O
pro-	O
vide	O
some	O
basic	O
access	O
techniques	O
and	O
give	O
you	O
some	O
ideas	O
for	O
using	O
database	O
meta	O
data	O
in	O
your	O
own	O
projects	O
.	O
10.2.1	O
creating	O
a	O
test	O
derby	O
database	O
using	O
the	O
cia	O
world	O
factbook	O
and	O
data	O
on	O
us	O
states	O
the	O
ﬁle	O
test	O
data/xml/factbook.xml	O
contains	O
data	O
that	O
i	O
obtained	O
from	O
the	O
fact-	O
book	O
web	O
site	O
and	O
converted	O
to	O
xml	O
.	O
this	O
xml	O
ﬁle	O
contains	O
data	O
for	O
individual	O
countries	O
and	O
a	O
few	O
general	O
regions	O
:	O
<	O
factbook	O
year=	O
''	O
2001	O
''	O
>	O
<	O
country	O
name=	O
''	O
aruba	O
''	O
location=	O
''	O
caribbean	O
,	O
island	O
in	O
the	O
...	O
''	O
background=	O
''	O
discovered	O
and	O
claimed	O
...	O
''	O
climate=	O
''	O
tropical	O
marine	O
;	O
little	O
seasonal	O
...	O
''	O
terrain=	O
''	O
flat	O
;	O
scant	O
vegetation	O
''	O
resources=	O
''	O
negl	O
;	O
white	O
sandy	O
beaches	O
''	O
hazards=	O
''	O
lies	O
outside	O
the	O
caribbean	O
hurricane	O
belt	O
''	O
population=	O
''	O
70,007	O
(	O
july	O
2001	O
est	O
.	O
)	O
''	O
government=	O
''	O
parliamentary	O
democracy	O
''	O
economy=	O
''	O
tourism	O
is	O
the	O
mainstay	O
of	O
the	O
aruban	O
...	O
''	O
inflation=	O
''	O
4.2	O
%	O
(	O
2000	O
est	O
.	O
)	O
''	O
languages=	O
''	O
dutch	O
(	O
official	O
)	O
,	O
papiamento	O
...	O
''	O
religions=	O
''	O
roman	O
catholic	O
82	O
%	O
,	O
protestant	O
8	O
%	O
,	O
...	O
''	O
capital=	O
''	O
oranjestad	O
''	O
unemployment=	O
''	O
0.6	O
%	O
(	O
1999	O
est	O
.	O
)	O
''	O
industries=	O
''	O
tourism	O
,	O
transshipment	O
facilities	O
,	O
...	O
''	O
agriculture=	O
''	O
aloes	O
;	O
livestock	O
;	O
fish	O
''	O
exports=	O
''	O
$	O
2.2	O
billion	O
(	O
including	O
oil	O
reexports	O
)	O
...	O
''	O
imports=	O
''	O
$	O
2.5	O
billion	O
(	O
2000	O
est	O
.	O
)	O
''	O
debt=	O
''	O
$	O
285	O
million	O
(	O
1996	O
)	O
''	O
aid=	O
''	O
$	O
26	O
million	O
(	O
1995	O
)	O
;	O
note	O
-	O
the	O
netherlands	O
...	O
''	O
internet_code=	O
''	O
.aw	O
''	O
/	O
>	O
...	O
<	O
/factbook	O
>	O
182	O
10.2	O
information	O
discovery	O
in	O
relational	O
databases	O
the	O
other	O
sample	O
xml	O
ﬁle	O
usstates.xml	O
contains	O
information	O
on	O
individual	O
states	O
:	O
<	O
usstates	O
year=	O
''	O
2003	O
''	O
>	O
<	O
state	O
name=	O
''	O
alabama	O
''	O
abbrev=	O
''	O
al	O
''	O
capital=	O
''	O
montgomery	O
''	O
industry=	O
''	O
paper	O
,	O
lumber	O
and	O
wood	O
products	O
...	O
''	O
agriculture=	O
''	O
poultry	O
and	O
eggs	O
,	O
cattle	O
,	O
...	O
''	O
population=	O
''	O
4447100	O
''	O
>	O
...	O
<	O
/usstates	O
>	O
the	O
example	O
class	O
createsampledatabases	O
reads	O
both	O
the	O
ﬁles	O
factbook.xml	O
and	O
ussattes.xml	O
and	O
creates	O
two	O
tables	O
“	O
factbook	O
”	O
and	O
“	O
states	O
”	O
in	O
a	O
test	O
database	O
.	O
the	O
implementation	O
of	O
this	O
utility	O
class	O
is	O
simple	O
:	O
just	O
parsing	O
xml	O
data	O
and	O
making	O
jdbc	O
calls	O
to	O
create	O
and	O
populate	O
the	O
two	O
tables	O
.	O
you	O
can	O
look	O
at	O
the	O
java	O
source	O
ﬁle	O
for	O
details	O
.	O
10.2.2	O
using	O
the	O
jdbc	O
meta	O
data	O
apis	O
this	O
chapter	O
is	O
about	O
processing	O
and	O
using	O
data	O
from	O
multiple	O
sources	O
.	O
with	O
the	O
wealth	O
of	O
data	O
stored	O
in	O
relational	B
database	I
systems	O
,	O
it	O
is	O
important	O
to	O
know	O
how	O
to	O
“	O
spider	O
”	O
databases	O
much	O
as	O
you	O
might	O
need	O
to	O
spider	O
data	O
stored	O
on	O
speciﬁc	O
web	O
sites	O
.	O
the	O
example	O
class	O
dumpm	O
etadata	O
shows	O
you	O
how	O
to	O
discover	O
tables	O
,	O
in-	O
formation	O
about	O
table	O
columns	O
,	O
and	O
query	O
all	O
tables	O
in	O
a	O
speciﬁc	O
database	O
.	O
the	O
constructor	O
of	O
class	O
dumpm	O
etadata	O
is	O
called	O
with	O
a	O
database	O
uri	O
and	O
prints	O
meta	O
data	O
and	O
data	O
to	O
standard	O
output	O
.	O
this	O
code	O
should	O
be	O
portable	O
to	O
database	O
systems	O
other	O
than	O
derby	O
by	O
changing	O
the	O
driver	O
name	O
.	O
class	O
dumpmetadata	O
{	O
public	O
dumpmetadata	O
(	O
string	O
connectionurl	O
)	O
throws	O
sqlexception	O
,	O
classnotfoundexception	O
{	O
class.forname	O
(	O
``	O
org.apache.derby.jdbc.embeddeddriver	O
''	O
)	O
;	O
connection	O
conn	O
=	O
drivermanager.getconnection	O
(	O
connectionurl	O
)	O
;	O
system.out.println	O
(	O
``	O
conn	O
:	O
``	O
+	O
conn	O
)	O
;	O
statement	O
s	O
=	O
conn.createstatement	O
(	O
)	O
;	O
databasemetadata	O
md	O
=	O
conn.getmetadata	O
(	O
)	O
;	O
//	O
discovery	O
all	O
table	O
names	O
in	O
this	O
database	O
:	O
list	O
<	O
string	O
>	O
tablenames	O
=	O
new	O
arraylist	O
<	O
string	O
>	O
(	O
5	O
)	O
;	O
183	O
10	O
information	O
gathering	O
we	O
will	O
use	O
the	O
method	O
gett	O
ables	O
(	O
)	O
to	O
fetch	O
a	O
list	O
of	O
all	O
tables	O
in	O
the	O
database	O
.	O
the	O
four	O
arguments	O
are	O
:	O
•	O
string	O
catalog	O
:	O
can	O
be	O
used	O
when	O
database	O
systems	O
support	O
catalogs	O
.	O
we	O
will	O
use	O
null	O
to	O
act	O
as	O
a	O
wildcard	O
match	O
.	O
•	O
string	O
schemapattern	O
:	O
can	O
be	O
used	O
when	O
database	O
systems	O
support	O
schemas	O
.	O
we	O
will	O
use	O
null	O
to	O
act	O
as	O
a	O
wildcard	O
match	O
.	O
•	O
string	O
tablenamepattern	O
:	O
a	O
pattern	O
to	O
match	O
table	O
names	O
;	O
we	O
will	O
use	O
“	O
%	O
”	O
as	O
a	O
wildcard	O
match	O
.	O
•	O
string	O
types	O
[	O
]	O
:	O
the	O
types	O
of	O
table	O
names	O
to	O
return	O
.	O
possible	O
values	O
include	O
table	O
,	O
view	O
,	O
alias	O
,	O
synonym	O
,	O
and	O
system	O
table	O
.	O
the	O
method	O
gett	O
ables	O
(	O
)	O
returns	O
a	O
resultset	O
so	O
we	O
iterate	O
through	O
returned	O
values	O
just	O
as	O
you	O
would	O
in	O
a	O
regular	O
sql	O
query	O
using	O
the	O
jdbc	O
apis	O
:	O
resultset	O
table_rs	O
=	O
md.gettables	O
(	O
null	O
,	O
null	O
,	O
``	O
%	O
''	O
,	O
new	O
string	O
[	O
]	O
{	O
``	O
table	O
''	O
}	O
)	O
;	O
while	O
(	O
table_rs.next	O
(	O
)	O
)	O
{	O
system.out.println	O
(	O
``	O
table	O
:	O
``	O
+	O
tablenames.add	O
(	O
table_rs.getstring	O
(	O
3	O
)	O
)	O
;	O
table_rs.getstring	O
(	O
3	O
)	O
)	O
;	O
}	O
//	O
loop	O
over	O
all	O
tables	O
printing	O
column	O
meta	O
data	O
and	O
//	O
the	O
first	O
row	O
:	O
for	O
(	O
string	O
tablename	O
:	O
tablenames	O
)	O
{	O
system.out.println	O
(	O
``	O
\n\n**	O
processing	O
table	O
``	O
+	O
tablename	O
+	O
``	O
\n	O
''	O
)	O
;	O
string	O
query	O
=	O
``	O
select	O
*	O
from	O
``	O
+	O
tablename	O
;	O
system.out.println	O
(	O
query	O
)	O
;	O
resultset	O
rs	O
=	O
s.executequery	O
(	O
query	O
)	O
;	O
resultsetmetadata	O
table_meta	O
=	O
rs.getmetadata	O
(	O
)	O
;	O
int	O
columncount	O
=	O
table_meta.getcolumncount	O
(	O
)	O
;	O
system.out.println	O
(	O
``	O
\ncolumn	O
meta	O
data	O
for	O
table	O
:	O
''	O
)	O
;	O
list	O
<	O
string	O
>	O
columnnames	O
=	O
new	O
arraylist	O
<	O
string	O
>	O
(	O
10	O
)	O
;	O
columnnames.add	O
(	O
``	O
''	O
)	O
;	O
for	O
(	O
int	O
col=1	O
;	O
col	O
<	O
=columncount	O
;	O
col++	O
)	O
{	O
system.out.println	O
(	O
``	O
column	O
``	O
+	O
col	O
+	O
''	O
name	O
:	O
``	O
+	O
table_meta.getcolumnlabel	O
(	O
col	O
)	O
)	O
;	O
system.out.println	O
(	O
``	O
column	O
data	O
type	O
:	O
``	O
+	O
columnnames.add	O
(	O
table_meta.getcolumnlabel	O
(	O
col	O
)	O
)	O
;	O
table_meta.getcolumntypename	O
(	O
col	O
)	O
)	O
;	O
184	O
10.2	O
information	O
discovery	O
in	O
relational	O
databases	O
}	O
system.out.println	O
(	O
``	O
\nfirst	O
row	O
in	O
table	O
:	O
''	O
)	O
;	O
if	O
(	O
rs.next	O
(	O
)	O
)	O
{	O
for	O
(	O
int	O
col=1	O
;	O
col	O
<	O
=columncount	O
;	O
col++	O
)	O
{	O
system.out.println	O
(	O
``	O
''	O
+	O
columnnames.get	O
(	O
col	O
)	O
+	O
''	O
:	O
``	O
+	O
rs.getstring	O
(	O
col	O
)	O
)	O
;	O
}	O
}	O
}	O
}	O
}	O
output	O
looks	O
like	O
this	O
:	O
table	O
:	O
factbook	O
table	O
:	O
usstates	O
**	O
processing	O
table	O
factbook	O
select	O
*	O
from	O
factbook	O
column	O
meta	O
data	O
for	O
table	O
:	O
column	O
1	O
name	O
:	O
name	O
column	O
data	O
type	O
:	O
varchar	O
column	O
2	O
name	O
:	O
location	O
column	O
data	O
type	O
:	O
varchar	O
column	O
3	O
name	O
:	O
export	O
column	O
data	O
type	O
:	O
bigint	O
column	O
4	O
name	O
:	O
import	O
column	O
data	O
type	O
:	O
bigint	O
column	O
5	O
name	O
:	O
debt	O
column	O
data	O
type	O
:	O
bigint	O
column	O
6	O
name	O
:	O
aid	O
column	O
data	O
type	O
:	O
bigint	O
column	O
7	O
name	O
:	O
unemployment_percent	O
column	O
data	O
type	O
:	O
integer	O
column	O
8	O
name	O
:	O
inflation_percent	O
column	O
data	O
type	O
:	O
integer	O
first	O
row	O
in	O
table	O
:	O
name	O
:	O
aruba	O
location	O
:	O
caribbean	O
,	O
island	O
in	O
the	O
caribbean	O
sea	O
,	O
north	O
of	O
venezuela	O
export	O
:	O
2200000000	O
185	O
10	O
information	O
gathering	O
import	O
:	O
2500000000	O
debt	O
:	O
285000000	O
aid	O
:	O
26000000	O
unemployment_percent	O
:	O
0	O
inflation_percent	O
:	O
4	O
**	O
processing	O
table	O
usstates	O
select	O
*	O
from	O
usstates	O
column	O
meta	O
data	O
for	O
table	O
:	O
column	O
1	O
name	O
:	O
name	O
column	O
data	O
type	O
:	O
varchar	O
column	O
2	O
name	O
:	O
abbreviation	O
column	O
data	O
type	O
:	O
char	O
column	O
3	O
name	O
:	O
industry	O
column	O
data	O
type	O
:	O
varchar	O
column	O
4	O
name	O
:	O
agriculture	O
column	O
data	O
type	O
:	O
varchar	O
column	O
5	O
name	O
:	O
population	O
column	O
data	O
type	O
:	O
bigint	O
first	O
row	O
in	O
table	O
:	O
name	O
:	O
alabama	O
abbreviation	O
:	O
al	O
industry	O
:	O
paper	O
,	O
lumber	O
and	O
wood	O
products	O
,	O
mining	O
,	O
rubber	O
and	O
plastic	O
products	O
,	O
transportation	O
equipment	O
,	O
apparel	O
agriculture	O
:	O
poultry	O
and	O
eggs	O
,	O
cattle	O
,	O
nursery	O
stock	O
,	O
peanuts	O
,	O
cotton	O
,	O
vegetables	O
,	O
milk	O
,	O
soybeans	O
population	O
:	O
4447100	O
using	O
the	O
jdbc	O
meta	O
data	O
apis	O
is	O
a	O
simple	O
technique	O
but	O
can	O
be	O
very	O
useful	O
for	O
both	O
searching	O
many	O
tables	O
for	O
speciﬁc	O
column	O
names	O
and	O
for	O
pulling	O
meta	O
data	O
and	O
row	O
data	O
into	O
local	O
search	B
engines	O
.	O
while	O
most	O
relational	O
databases	O
provide	O
support	O
for	O
free	O
text	O
search	O
of	O
text	O
ﬁelds	O
in	O
a	O
database	O
it	O
is	O
often	O
better	O
to	O
export	O
speciﬁc	O
text	O
columns	O
in	O
a	O
table	O
to	O
an	O
external	O
search	B
engine	O
.	O
we	O
will	O
spend	O
the	O
rest	O
of	O
this	O
chapter	O
on	O
index	O
and	O
search	B
techniques	O
.	O
while	O
we	O
usually	O
index	O
web	O
pages	O
and	O
local	O
document	O
repositories	O
,	O
keep	O
in	O
mind	O
that	O
data	O
in	O
relational	O
databases	O
can	O
also	O
easily	O
be	O
indexed	O
either	O
with	O
hand	O
written	O
export	O
utilities	O
or	O
automated	O
techniques	O
using	O
the	O
jdbc	O
meta-data	O
apis	O
that	O
we	O
used	O
in	O
this	O
section	O
.	O
186	O
10.3	O
down	O
to	O
the	O
bare	O
metal	O
:	O
in-memory	O
index	O
and	O
search	B
10.2.3	O
using	O
the	O
meta	O
data	O
apis	O
to	O
discern	O
entity	O
relationships	O
when	O
database	O
schemas	O
are	O
deﬁned	O
it	O
is	O
usually	O
a	O
top	O
down	O
approach	O
:	O
entities	O
and	O
their	O
relationships	O
are	O
modeled	O
and	O
then	O
represented	O
as	O
relational	B
database	I
tables	O
.	O
when	O
automatically	O
searching	O
remote	O
databases	O
for	O
information	O
we	O
might	O
need	O
to	O
discern	O
which	O
entities	O
and	O
their	O
relationships	O
exist	O
depending	O
on	O
table	O
and	O
column	O
names	O
.	O
this	O
is	O
likely	O
to	O
be	O
a	O
domain	O
speciﬁc	O
development	O
effort	O
.	O
while	O
it	O
is	O
feasible	O
and	O
probably	O
useful	O
to	O
build	O
a	O
“	O
database	O
spider	O
”	O
for	O
databases	O
in	O
a	O
limited	O
domain	O
(	O
for	O
example	O
car	O
parts	O
or	O
travel	O
destinations	O
)	O
to	O
discern	O
entity	O
models	O
and	O
their	O
relations	O
,	O
it	O
is	O
probably	O
not	O
possible	O
without	O
requiring	O
huge	O
resources	O
to	O
build	O
a	O
system	O
that	O
handles	O
multiple	O
data	O
domains	O
.	O
the	O
expression	O
“	O
dark	B
web	I
”	O
refers	O
to	O
information	O
on	O
the	O
web	O
that	O
is	O
usually	O
not	O
“	O
spi-	O
dered	O
”	O
–	O
information	O
that	O
lives	O
mostly	O
in	O
relational	O
databases	O
and	O
often	O
behind	O
query	O
forms	O
.	O
while	O
there	O
are	O
current	O
efforts	O
by	O
search	B
engine	O
companies	O
to	O
determine	O
the	O
data	O
domains	O
of	O
databases	O
hidden	O
behind	O
user	O
entry	O
forms	O
using	O
surrounding	O
text	O
,	O
for	O
most	O
organizations	O
this	O
is	O
simply	O
too	O
large	O
a	O
problem	O
to	O
solve	O
.	O
on	O
the	O
other	O
hand	O
,	O
using	O
the	O
meta	O
data	O
of	O
databases	O
that	O
you	O
or	O
your	O
organization	O
have	O
read	O
access	O
to	O
for	O
“	O
database	O
spidering	O
”	O
is	O
a	O
more	O
tractable	O
problem	O
.	O
10.3	O
down	O
to	O
the	O
bare	O
metal	O
:	O
in-memory	O
index	O
and	O
search	B
indexing	O
and	O
search	B
technology	O
is	O
used	O
in	O
a	O
wide	O
range	O
of	O
applications	O
.	O
in	O
order	O
to	O
get	O
a	O
good	O
understanding	O
of	O
index	O
and	O
search	B
we	O
will	O
design	O
and	O
implement	O
an	O
in-memory	O
library	O
in	O
this	O
section	O
.	O
in	O
section	O
10.4	O
we	O
will	O
take	O
a	O
quick	O
look	O
at	O
the	O
lucene	O
library	O
and	O
in	O
section	O
10.5	O
we	O
will	O
look	O
at	O
client	O
programs	O
using	O
the	O
nutch	O
indexing	O
and	O
search	B
system	O
that	O
is	O
based	O
on	O
lucene	O
.	O
we	O
need	O
a	O
way	O
to	O
represent	O
data	O
to	O
be	O
indexed	O
.	O
we	O
will	O
use	O
a	O
simple	O
package-	O
visible	O
class	O
(	O
no	O
getters/setters	O
,	O
assumed	O
to	O
be	O
in	O
the	O
same	O
package	O
as	O
the	O
indexing	O
and	O
search	B
class	O
)	O
:	O
class	O
testdocument	O
{	O
int	O
id	O
;	O
string	O
text	O
;	O
static	O
int	O
count	O
=	O
0	O
;	O
testdocument	O
(	O
string	O
text	O
)	O
{	O
this.text	O
=	O
text	O
;	O
187	O
10	O
information	O
gathering	O
id	O
=	O
count++	O
;	O
}	O
public	O
string	O
tostring	O
(	O
)	O
{	O
int	O
len	O
=	O
text.length	O
(	O
)	O
;	O
if	O
(	O
len	O
>	O
25	O
)	O
len	O
=	O
25	O
;	O
return	O
``	O
[	O
document	O
id	O
:	O
``	O
+	O
id	O
+	O
``	O
:	O
``	O
+	O
text.substring	O
(	O
0	O
,	O
len	O
)	O
+	O
``	O
...	O
]	O
''	O
;	O
}	O
}	O
we	O
will	O
write	O
a	O
class	O
inm	O
emorysearch	O
that	O
indexes	O
instances	O
of	O
the	O
t	O
estdocument	O
class	O
and	O
supplies	O
an	O
api	O
for	O
search	B
.	O
the	O
ﬁrst	O
decision	O
to	O
make	O
is	O
how	O
to	O
store	O
the	O
index	O
that	O
maps	O
search	B
terms	O
to	O
documents	O
that	O
contain	O
the	O
search	B
terms	O
.	O
one	O
sim-	O
ple	O
idea	O
would	O
be	O
to	O
use	O
a	O
map	O
to	O
maintain	O
a	O
set	O
of	O
document	O
ids	O
for	O
each	O
search	B
term	O
;	O
something	O
like	O
:	O
map	O
<	O
string	O
,	O
set	O
<	O
integer	O
>	O
>	O
index	O
;	O
this	O
would	O
be	O
easy	O
to	O
implement	O
but	O
leaves	O
much	O
to	O
be	O
desired	O
so	O
we	O
will	O
take	O
a	O
different	O
approach	O
.	O
we	O
would	O
like	O
to	O
rank	O
documents	O
by	O
relevance	O
but	O
a	O
relevance	O
measure	O
just	O
based	O
on	O
containing	O
all	O
(	O
or	O
most	O
)	O
of	O
the	O
search	B
terms	O
is	O
weak	O
.	O
we	O
will	O
improve	O
the	O
index	O
by	O
also	O
storing	O
a	O
score	O
of	O
how	O
many	O
times	O
a	O
search	B
term	O
occurs	O
in	O
a	O
document	O
,	O
scaled	O
by	O
the	O
number	O
of	O
words	O
in	O
a	O
document	O
.	O
since	O
our	O
document	O
model	O
does	O
not	O
contain	O
links	O
to	O
other	O
documents	O
we	O
will	O
not	O
use	O
a	O
google-like	O
page	O
ranking	O
algorithm	O
that	O
increases	O
the	O
relevance	O
of	O
search	B
results	O
based	O
on	O
the	O
number	O
of	O
incoming	O
links	O
to	O
matched	O
documents	O
.	O
we	O
will	O
use	O
a	O
utility	O
class	O
(	O
again	O
,	O
assuming	O
same	O
package	O
data	O
visibility	O
)	O
to	O
hold	O
a	O
document	O
id	O
and	O
a	O
search	B
term	O
count	O
.	O
i	O
used	O
generics	O
for	O
the	O
ﬁrst	O
version	O
of	O
this	O
class	O
to	O
allow	O
alternative	O
types	O
for	O
counting	O
word	O
use	O
in	O
a	O
document	O
and	O
later	O
changed	O
the	O
code	O
to	O
hardwiring	O
the	O
types	O
for	O
id	O
and	O
word	O
count	O
to	O
native	O
integer	O
values	O
for	O
runtime	O
efﬁciency	O
and	O
to	O
use	O
less	O
memory	O
.	O
here	O
is	O
the	O
second	O
version	O
of	O
the	O
code	O
:	O
class	O
idcount	O
implements	O
comparable	O
<	O
idcount	O
>	O
{	O
int	O
id	O
=	O
0	O
;	O
int	O
count	O
=	O
0	O
;	O
public	O
idcount	O
(	O
int	O
k	O
,	O
int	O
v	O
)	O
{	O
this.id	O
=	O
k	O
;	O
this.count	O
=	O
v	O
;	O
}	O
public	O
string	O
tostring	O
(	O
)	O
{	O
return	O
``	O
[	O
idcount	O
:	O
``	O
+	O
id	O
+	O
``	O
:	O
``	O
+	O
count	O
+	O
``	O
]	O
''	O
;	O
}	O
@	O
override	O
188	O
10.3	O
down	O
to	O
the	O
bare	O
metal	O
:	O
in-memory	O
index	O
and	O
search	B
public	O
int	O
compareto	O
(	O
idcount	O
o	O
)	O
{	O
//	O
don	O
’	O
t	O
use	O
o.count	O
-	O
count	O
:	O
avoid	O
overflows	O
if	O
(	O
o.count	O
==	O
count	O
)	O
return	O
0	O
;	O
if	O
(	O
o.count	O
>	O
count	O
)	O
return	O
1	O
;	O
return	O
-1	O
;	O
}	O
}	O
we	O
can	O
now	O
deﬁne	O
the	O
data	O
structure	O
for	O
our	O
index	O
:	O
map	O
<	O
string	O
,	O
treeset	O
<	O
idcount	O
>	O
>	O
index	O
=	O
new	O
hashtable	O
<	O
string	O
,	O
treeset	O
<	O
idcount	O
>	O
>	O
(	O
)	O
;	O
the	O
following	O
code	O
is	O
used	O
to	O
add	O
documents	O
to	O
the	O
index	O
.	O
i	O
score	O
word	O
counts	O
by	O
dividing	O
by	O
the	O
maximum	O
word	O
size	O
i	O
expect	O
for	O
documents	O
;	O
in	O
principle	O
it	O
would	O
be	O
better	O
to	O
use	O
a	O
f	O
loat	O
value	O
but	O
i	O
prefer	O
working	O
with	O
and	O
debugging	O
code	O
using	O
integers	O
–	O
debug	O
output	O
is	O
more	O
readable	O
.	O
the	O
reason	O
why	O
the	O
number	O
of	O
times	O
a	O
word	O
appears	O
in	O
a	O
document	O
needs	O
to	O
be	O
scaled	O
by	O
the	O
the	O
size	O
of	O
the	O
document	O
is	O
fairly	O
obvious	O
:	O
if	O
a	O
given	O
word	O
appears	O
once	O
in	O
a	O
document	O
with	O
10	O
words	O
and	O
once	O
in	O
another	O
document	O
with	O
1000	O
words	O
,	O
then	O
the	O
word	O
is	O
much	O
more	O
relevant	O
to	O
ﬁnding	O
the	O
ﬁrst	O
document	O
.	O
public	O
void	O
add	O
(	O
testdocument	O
document	O
)	O
{	O
map	O
<	O
string	O
,	O
integer	O
>	O
wcount	O
=	O
new	O
hashtable	O
<	O
string	O
,	O
integer	O
>	O
(	O
)	O
;	O
stringtokenizer	O
st	O
=	O
new	O
stringtokenizer	O
(	O
document.text.tolowercase	O
(	O
)	O
,	O
''	O
.	O
,	O
;	O
:	O
!	O
``	O
)	O
;	O
int	O
num_words	O
=	O
st.counttokens	O
(	O
)	O
;	O
if	O
(	O
num_words	O
==	O
0	O
)	O
return	O
;	O
while	O
(	O
st.hasmoretokens	O
(	O
)	O
)	O
{	O
string	O
word	O
=	O
st.nexttoken	O
(	O
)	O
;	O
system.out.println	O
(	O
word	O
)	O
;	O
if	O
(	O
wcount.containskey	O
(	O
word	O
)	O
)	O
{	O
wcount.put	O
(	O
word	O
,	O
wcount.get	O
(	O
word	O
)	O
+	O
(	O
max_words_per_document	O
/	O
num_words	O
)	O
)	O
;	O
}	O
else	O
{	O
wcount.put	O
(	O
word	O
,	O
max_words_per_document	O
/	O
num_words	O
)	O
;	O
}	O
}	O
for	O
(	O
string	O
word	O
:	O
wcount.keyset	O
(	O
)	O
)	O
{	O
treeset	O
<	O
idcount	O
>	O
ts	O
;	O
189	O
10	O
information	O
gathering	O
if	O
(	O
index.containskey	O
(	O
word	O
)	O
)	O
{	O
ts	O
=	O
index.get	O
(	O
word	O
)	O
;	O
}	O
else	O
{	O
ts	O
=	O
new	O
treeset	O
<	O
idcount	O
>	O
(	O
)	O
;	O
index.put	O
(	O
word	O
,	O
ts	O
)	O
;	O
}	O
ts.add	O
(	O
new	O
idcount	O
(	O
document.id	O
,	O
wcount.get	O
(	O
word	O
)	O
*	O
max_words_per_document	O
/	O
num_words	O
)	O
)	O
;	O
}	O
}	O
if	O
a	O
word	O
is	O
in	O
the	O
index	O
hash	O
table	O
then	O
the	O
hash	O
value	O
will	O
be	O
a	O
sorted	O
t	O
reeset	O
of	O
idcount	O
objects	O
.	O
sort	O
order	O
is	O
in	O
decreasing	O
size	O
of	O
the	O
scaled	O
word	O
count	O
.	O
notice	O
that	O
i	O
converted	O
all	O
tokenized	O
words	O
in	O
document	O
text	O
to	O
lower	O
case	O
but	O
i	O
did	O
not	O
stem	O
the	O
words	O
.	O
for	O
some	O
applications	O
you	O
may	O
want	O
to	O
use	O
a	O
word	O
stemmer	O
as	O
we	O
did	O
in	O
section	O
9.1.	O
i	O
used	O
the	O
temporary	O
hash	O
table	O
wcount	O
to	O
hold	O
word	O
counts	O
for	O
the	O
document	O
being	O
indexed	O
and	O
once	O
wcount	O
was	O
created	O
and	O
ﬁlled	O
,	O
then	O
looked	O
up	O
the	O
t	O
reeset	O
for	O
each	O
word	O
(	O
creating	O
it	O
if	O
it	O
did	O
not	O
yet	O
exist	O
)	O
and	O
added	O
in	O
new	O
idcount	O
objects	O
to	O
represent	O
the	O
currently	O
indexed	O
document	O
and	O
the	O
scaled	O
number	O
of	O
occurrences	O
for	O
the	O
word	O
that	O
is	O
the	O
index	O
hash	O
table	O
key	O
.	O
for	O
development	O
it	O
is	O
good	O
to	O
have	O
a	O
method	O
that	O
prints	O
out	O
the	O
entire	O
index	O
;	O
the	O
following	O
method	O
serves	O
this	O
purpose	O
:	O
public	O
void	O
debug	O
(	O
)	O
{	O
system.out.println	O
(	O
''	O
***	O
debug	O
:	O
dump	O
of	O
search	B
index	O
:	O
\n	O
''	O
)	O
;	O
for	O
(	O
string	O
word	O
:	O
index.keyset	O
(	O
)	O
)	O
{	O
system.out.println	O
(	O
``	O
\n*	O
``	O
+	O
word	O
)	O
;	O
treeset	O
<	O
idcount	O
>	O
ts	O
=	O
index.get	O
(	O
word	O
)	O
;	O
iterator	O
<	O
idcount	O
>	O
iter	O
=	O
ts.iterator	O
(	O
)	O
;	O
while	O
(	O
iter.hasnext	O
(	O
)	O
)	O
{	O
system.out.println	O
(	O
``	O
''	O
+	O
iter.next	O
(	O
)	O
)	O
;	O
}	O
}	O
}	O
here	O
are	O
a	O
few	O
lines	O
of	O
example	O
code	O
to	O
create	O
an	O
index	O
and	O
add	O
three	O
test	O
documents	O
:	O
inmemorysearch	O
ims	O
=	O
new	O
inmemorysearch	O
(	O
)	O
;	O
testdocument	O
doc1	O
=	O
new	O
testdocument	O
(	O
``	O
this	O
is	O
a	O
test	O
for	O
index	O
and	O
a	O
test	O
for	O
search	B
.	O
``	O
)	O
;	O
190	O
10.3	O
down	O
to	O
the	O
bare	O
metal	O
:	O
in-memory	O
index	O
and	O
search	B
ims.add	O
(	O
doc1	O
)	O
;	O
testdocument	O
doc2	O
=	O
new	O
testdocument	O
(	O
``	O
please	O
test	O
the	O
index	O
code	O
.	O
``	O
)	O
;	O
ims.add	O
(	O
doc2	O
)	O
;	O
testdocument	O
doc3	O
=	O
new	O
testdocument	O
(	O
``	O
please	O
test	O
the	O
index	O
code	O
before	O
tomorrow	O
.	O
``	O
)	O
;	O
ims.add	O
(	O
doc3	O
)	O
;	O
ims.debug	O
(	O
)	O
;	O
the	O
method	O
debug	O
produces	O
the	O
following	O
output	O
(	O
most	O
is	O
not	O
shown	O
for	O
brevity	O
)	O
.	O
remember	O
that	O
the	O
variable	O
idcount	O
contains	O
a	O
data	O
pair	O
:	O
the	O
document	O
integer	O
id	O
and	O
a	O
scaled	O
integer	O
word	O
count	O
in	O
the	O
document	O
.	O
also	O
notice	O
that	O
the	O
t	O
reeset	O
is	O
sorted	O
in	O
descending	O
order	O
of	O
scaled	O
word	O
count	O
.	O
***	O
debug	O
:	O
dump	O
of	O
search	B
index	O
:	O
*	O
code	O
[	O
idcount	O
:	O
1	O
:	O
40000	O
]	O
[	O
idcount	O
:	O
2	O
:	O
20285	O
]	O
*	O
please	O
[	O
idcount	O
:	O
1	O
:	O
40000	O
]	O
[	O
idcount	O
:	O
2	O
:	O
20285	O
]	O
*	O
index	O
[	O
idcount	O
:	O
1	O
:	O
40000	O
]	O
[	O
idcount	O
:	O
2	O
:	O
20285	O
]	O
[	O
idcount	O
:	O
0	O
:	O
8181	O
]	O
...	O
given	O
the	O
hash	O
table	O
index	O
it	O
is	O
simple	O
to	O
take	O
a	O
list	O
of	O
search	B
words	O
and	O
return	O
a	O
sorted	O
list	O
of	O
matching	O
documents	O
.	O
we	O
will	O
use	O
a	O
temporary	O
hash	O
table	O
ordered	O
results	O
that	O
maps	O
document	O
ids	O
to	O
the	O
current	O
search	B
result	O
score	O
for	O
that	O
document	O
.	O
we	O
tokenize	B
the	O
string	O
containing	O
search	B
terms	O
,	O
and	O
for	O
each	O
search	B
word	O
we	O
look	O
up	O
(	O
if	O
it	O
exists	O
)	O
a	O
score	O
count	O
in	O
the	O
temporary	O
map	O
ordered	O
results	O
(	O
creating	O
a	O
new	O
idcount	O
object	O
otherwise	O
)	O
and	O
increment	O
the	O
score	O
count	O
.	O
note	O
that	O
the	O
map	O
ordered	O
results	O
is	O
ordered	O
later	O
by	O
sorting	O
the	O
keys	O
by	O
the	O
hash	O
table	O
value	O
:	O
public	O
list	O
<	O
integer	O
>	O
search	B
(	O
string	O
search_terms	O
,	O
int	O
max_terms	O
)	O
{	O
list	O
<	O
integer	O
>	O
ret	O
=	O
new	O
arraylist	O
<	O
integer	O
>	O
(	O
max_terms	O
)	O
;	O
191	O
10	O
information	O
gathering	O
//	O
temporary	O
tree	O
set	O
to	O
keep	O
ordered	O
search	B
results	O
:	O
final	O
map	O
<	O
integer	O
,	O
integer	O
>	O
ordered_results	O
=	O
new	O
hashtable	O
<	O
integer	O
,	O
integer	O
>	O
(	O
0	O
)	O
;	O
stringtokenizer	O
st	O
=	O
new	O
stringtokenizer	O
(	O
search_terms.tolowercase	O
(	O
)	O
,	O
while	O
(	O
st.hasmoretokens	O
(	O
)	O
)	O
{	O
string	O
word	O
=	O
st.nexttoken	O
(	O
)	O
;	O
iterator	O
<	O
idcount	O
>	O
word_counts	O
=	O
''	O
.	O
,	O
;	O
:	O
!	O
``	O
)	O
;	O
index.get	O
(	O
word	O
)	O
.iterator	O
(	O
)	O
;	O
while	O
(	O
word_counts.hasnext	O
(	O
)	O
)	O
{	O
idcount	O
ts	O
=	O
word_counts.next	O
(	O
)	O
;	O
integer	O
id	O
=	O
ts.id	O
;	O
if	O
(	O
ordered_results.containskey	O
(	O
id	O
)	O
)	O
{	O
ordered_results.put	O
(	O
id	O
,	O
ordered_results.get	O
(	O
id	O
)	O
+	O
ts.count	O
)	O
;	O
}	O
else	O
{	O
ordered_results.put	O
(	O
id	O
,	O
ts.count	O
)	O
;	O
}	O
}	O
}	O
list	O
<	O
integer	O
>	O
keys	O
=	O
new	O
arraylist	O
<	O
integer	O
>	O
(	O
ordered_results.keyset	O
(	O
)	O
)	O
;	O
collections.sort	O
(	O
keys	O
,	O
new	O
comparator	O
<	O
integer	O
>	O
(	O
)	O
{	O
public	O
int	O
compare	O
(	O
integer	O
a	O
,	O
integer	O
b	O
)	O
{	O
return	O
-ordered_results.get	O
(	O
a	O
)	O
.	O
compareto	O
(	O
ordered_results.get	O
(	O
b	O
)	O
)	O
;	O
}	O
}	O
)	O
;	O
int	O
count	O
=	O
0	O
;	O
result_loop	O
:	O
for	O
(	O
integer	O
id	O
:	O
keys	O
)	O
{	O
if	O
(	O
count++	O
>	O
=	O
max_terms	O
)	O
break	O
result_loop	O
;	O
ret.add	O
(	O
id	O
)	O
;	O
}	O
return	O
ret	O
;	O
}	O
for	O
the	O
previous	O
example	O
using	O
the	O
three	O
short	O
test	O
documents	O
,	O
we	O
can	O
search	B
the	O
index	O
,	O
in	O
this	O
case	O
for	O
a	O
maximum	O
of	O
2	O
results	O
,	O
using	O
:	O
list	O
<	O
integer	O
>	O
search_results	O
=	O
system.out.println	O
(	O
``	O
result	O
doc	O
ids	O
:	O
``	O
+search_results	O
)	O
;	O
ims.search	O
(	O
``	O
test	O
index	O
''	O
,	O
2	O
)	O
;	O
192	O
10.4	O
indexing	O
and	O
search	B
using	O
embedded	O
lucene	O
getting	O
the	O
results	O
:	O
result	O
doc	O
ids	O
:	O
[	O
1	O
,	O
2	O
]	O
if	O
you	O
want	O
to	O
use	O
this	O
“	O
bare	O
metal	O
”	O
indexing	O
and	O
search	B
library	O
,	O
there	O
are	O
a	O
few	O
details	O
that	O
still	O
need	O
to	O
be	O
implemented	O
.	O
you	O
will	O
probably	O
want	O
to	O
persist	O
the	O
t	O
estdocument	O
objects	O
and	O
this	O
can	O
be	O
done	O
simply	O
by	O
tagging	B
the	O
class	O
with	O
the	O
serializable	O
interface	O
and	O
writing	O
serialized	O
ﬁles	O
using	O
the	O
document	O
id	O
as	O
the	O
ﬁle	O
name	O
.	O
you	O
might	O
also	O
want	O
to	O
serialize	O
the	O
inm	O
emorysearch	O
class	O
.	O
while	O
i	O
sometimes	O
implement	O
custom	O
indexing	O
and	O
search	B
libraries	O
for	O
projects	O
that	O
require	O
a	O
lightweight	O
and	O
ﬂexible	O
approach	O
to	O
indexing	O
and	O
search	B
as	O
we	O
did	O
in	O
this	O
section	O
,	O
i	O
usually	O
use	O
either	O
the	O
lucene	O
search	B
library	O
or	O
a	O
combination	O
of	O
the	O
hi-	O
bernate	O
object	O
relational	O
mapping	O
(	O
orm	O
)	O
library	O
with	O
lucene	O
(	O
hibernate	O
search	B
)	O
.	O
we	O
will	O
look	O
at	O
lucene	O
in	O
section	O
10.4	O
.	O
10.4	O
indexing	O
and	O
search	B
using	O
embedded	O
lucene	O
books	O
have	O
been	O
written	O
on	O
the	O
lucene	O
indexing	O
and	O
search	B
library	O
and	O
in	O
this	O
short	O
section	O
we	O
will	O
look	O
at	O
a	O
brief	O
application	O
example	O
that	O
you	O
can	O
use	O
for	O
a	O
quick	O
reference	O
for	O
starting	O
lucene	O
based	O
projects	O
.	O
i	O
consider	O
lucene	O
to	O
be	O
an	O
important	O
tool	O
for	O
building	O
intelligent	O
text	O
processing	O
systems	O
.	O
lucene	O
supports	O
the	O
concept	O
of	O
a	O
document	O
with	O
one	O
or	O
more	O
ﬁelds	O
.	O
fields	O
can	O
either	O
be	O
indexed	O
or	O
not	O
,	O
and	O
optionally	O
stored	O
in	O
a	O
disk-based	O
index	O
.	O
searchable	O
ﬁelds	O
can	O
be	O
automatically	O
tokenized	O
using	O
either	O
one	O
of	O
lucene	O
’	O
s	O
built	O
in	O
text	O
tokenizers	O
or	O
you	O
can	O
supply	O
your	O
customized	O
tokenizer	O
.	O
when	O
i	O
am	O
starting	O
a	O
new	O
project	O
using	O
lucene	O
i	O
begin	O
by	O
using	O
a	O
template	O
class	O
lucenem	O
anager	O
that	O
you	O
can	O
ﬁnd	O
in	O
the	O
ﬁle	O
src-index-search/lucenemanager.java	O
.	O
i	O
usually	O
clone	O
this	O
ﬁle	O
and	O
make	O
any	O
quick	O
changes	O
for	O
adding	O
ﬁelds	O
to	O
documents	O
,	O
etc	O
.	O
we	O
will	O
look	O
at	O
a	O
few	O
important	O
code	O
snippets	O
in	O
the	O
class	O
lucenem	O
anager	O
and	O
you	O
can	O
refer	O
to	O
the	O
source	O
code	O
for	O
more	O
details	O
.	O
we	O
will	O
start	O
by	O
looking	O
at	O
how	O
in-	O
dices	O
are	O
stored	O
and	O
managed	O
on	O
disk	O
.	O
the	O
class	O
constructor	O
stores	O
the	O
ﬁle	O
path	O
to	O
the	O
lucene	O
disk	O
index	O
.	O
you	O
can	O
optionally	O
use	O
method	O
createandclearluceneindex	O
to	O
delete	O
an	O
existing	O
lucene	O
index	O
(	O
if	O
it	O
exists	O
)	O
and	O
creates	O
an	O
empty	O
index	O
.	O
public	O
lucenemanager	O
(	O
string	O
data_store_file_root	O
)	O
{	O
this.data_store_file_root	O
=	O
data_store_file_root	O
;	O
}	O
193	O
10	O
information	O
gathering	O
public	O
void	O
createandclearluceneindex	O
(	O
)	O
throws	O
corruptindexexception	O
,	O
lockobtainfailedexception	O
,	O
ioexception	O
{	O
deletefilepath	O
(	O
new	O
file	O
(	O
data_store_file_root	O
+	O
''	O
/lucene_index	O
''	O
)	O
)	O
;	O
file	O
index_dir	O
=	O
new	O
file	O
(	O
data_store_file_root	O
+	O
''	O
/lucene_index	O
''	O
)	O
;	O
new	O
indexwriter	O
(	O
index_dir	O
,	O
}	O
new	O
standardanalyzer	O
(	O
)	O
,	O
true	O
)	O
.close	O
(	O
)	O
;	O
if	O
you	O
are	O
using	O
an	O
existing	O
disk-based	O
index	O
that	O
you	O
want	O
to	O
reuse	O
,	O
then	O
do	O
not	O
call	O
method	O
createandclearluceneindex	O
.	O
the	O
last	O
argument	O
to	O
the	O
class	O
indexw	O
riter	O
constructor	O
is	O
a	O
ﬂag	O
to	O
create	O
a	O
new	O
index	O
,	O
overwriting	O
any	O
existing	O
indices	O
.	O
i	O
use	O
the	O
utility	O
method	O
deletef	O
ilep	O
ath	O
to	O
make	O
sure	O
that	O
all	O
ﬁles	O
from	O
any	O
previous	O
indices	O
using	O
the	O
same	O
top	O
level	O
ﬁle	O
path	O
are	O
deleted	O
.	O
the	O
method	O
adddocumentt	O
oindex	O
is	O
used	O
to	O
add	O
new	O
documents	O
to	O
the	O
index	O
.	O
here	O
we	O
call	O
the	O
constructor	O
for	O
the	O
class	O
indexw	O
riter	O
with	O
a	O
value	O
of	O
false	O
for	O
the	O
last	O
argument	O
to	O
avoid	O
overwriting	O
the	O
index	O
each	O
time	O
method	O
adddocumentt	O
oindex	O
is	O
called	O
.	O
public	O
void	O
adddocumenttoindex	O
(	O
string	O
document_original_uri	O
,	O
string	O
document_plain_text	O
)	O
throws	O
corruptindexexception	O
,	O
ioexception	O
{	O
file	O
index_dir	O
=	O
new	O
file	O
(	O
data_store_file_root	O
+	O
``	O
/lucene_index	O
''	O
)	O
;	O
writer	O
=	O
new	O
indexwriter	O
(	O
index_dir	O
,	O
new	O
standardanalyzer	O
(	O
)	O
,	O
false	O
)	O
;	O
document	O
doc	O
=	O
new	O
document	O
(	O
)	O
;	O
//	O
store	O
uri	O
in	O
index	O
;	O
do	O
not	O
index	O
doc.add	O
(	O
new	O
field	O
(	O
``	O
uri	O
''	O
,	O
document_original_uri	O
,	O
field.store.yes	O
,	O
field.index.no	O
)	O
)	O
;	O
//	O
store	O
text	O
in	O
index	O
;	O
index	O
doc.add	O
(	O
new	O
field	O
(	O
``	O
text	O
''	O
,	O
document_plain_text	O
,	O
field.store.yes	O
,	O
field.index.tokenized	O
)	O
)	O
;	O
writer.adddocument	O
(	O
doc	O
)	O
;	O
writer.optimize	O
(	O
)	O
;	O
//	O
optional	O
writer.close	O
(	O
)	O
;	O
}	O
194	O
10.4	O
indexing	O
and	O
search	B
using	O
embedded	O
lucene	O
you	O
can	O
add	O
ﬁelds	O
as	O
needed	O
when	O
you	O
create	O
individual	O
lucene	O
document	O
objects	O
but	O
you	O
will	O
want	O
to	O
add	O
the	O
same	O
ﬁelds	O
in	O
your	O
application	O
:	O
it	O
is	O
not	O
good	O
to	O
have	O
different	O
documents	O
in	O
an	O
index	O
with	O
different	O
ﬁelds	O
.	O
there	O
are	O
a	O
few	O
things	O
that	O
you	O
may	O
want	O
to	O
change	O
if	O
you	O
use	O
this	O
class	O
as	O
an	O
implementation	O
example	O
in	O
your	O
own	O
projects	O
.	O
if	O
you	O
are	O
adding	O
many	O
documents	O
to	O
the	O
index	O
in	O
a	O
short	O
time	O
period	O
,	O
then	O
it	O
is	O
inefﬁcient	O
to	O
open	O
the	O
index	O
,	O
add	O
one	O
document	O
,	O
and	O
then	O
optimize	O
and	O
close	O
the	O
index	O
.	O
you	O
might	O
want	O
to	O
add	O
a	O
method	O
that	O
passes	O
in	O
collections	O
of	O
uris	O
and	O
document	O
text	O
strings	O
for	O
batch	O
inserts	O
.	O
you	O
also	O
may	O
not	O
want	O
to	O
store	O
the	O
document	O
text	O
in	O
the	O
index	O
if	O
you	O
are	O
already	O
storing	O
document	O
text	O
somewhere	O
else	O
,	O
perhaps	O
in	O
a	O
database	O
.	O
there	O
are	O
two	O
search	B
methods	O
in	O
my	O
lucenem	O
anager	O
class	O
:	O
one	O
just	O
returns	O
the	O
document	O
uris	O
for	O
search	B
matches	O
and	O
the	O
other	O
returns	O
both	O
uris	O
and	O
the	O
original	O
document	O
text	O
.	O
both	O
of	O
these	O
methods	O
open	O
an	O
instance	O
of	O
indexreader	O
for	O
each	O
query	O
.	O
for	O
high	O
search	B
volume	O
operations	O
in	O
a	O
multi-threaded	O
environment	O
,	O
you	O
may	O
want	O
to	O
create	O
a	O
pool	O
of	O
indexreader	O
instances	O
and	O
reuse	O
them	O
.	O
there	O
are	O
several	O
text	O
analyzer	O
classes	O
in	O
lucene	O
and	O
you	O
should	O
use	O
the	O
same	O
analyzer	O
class	O
when	O
adding	O
indexed	O
text	O
ﬁelds	O
to	O
the	O
index	O
as	O
when	O
you	O
perform	O
queries	O
.	O
in	O
the	O
two	O
search	B
methods	O
i	O
use	O
the	O
same	O
standardanalyzer	O
class	O
that	O
i	O
used	O
when	O
adding	O
documents	O
to	O
the	O
index	O
.	O
the	O
following	O
method	O
returns	O
a	O
list	O
of	O
string	O
uris	O
for	O
matched	O
documents	O
:	O
public	O
list	O
<	O
string	O
>	O
searchindexforuris	O
(	O
string	O
search_query	O
)	O
throws	O
parseexception	O
,	O
ioexception	O
{	O
reader	O
=	O
indexreader.open	O
(	O
data_store_file_root	O
+	O
''	O
/lucene_index	O
''	O
)	O
;	O
list	O
<	O
string	O
>	O
ret	O
=	O
new	O
arraylist	O
<	O
string	O
>	O
(	O
)	O
;	O
searcher	O
searcher	O
=	O
new	O
indexsearcher	O
(	O
reader	O
)	O
;	O
analyzer	O
analyzer	O
=	O
new	O
standardanalyzer	O
(	O
)	O
;	O
queryparser	O
parser	O
=	O
new	O
queryparser	O
(	O
``	O
text	O
''	O
,	O
analyzer	O
)	O
;	O
query	O
query	O
=	O
parser.parse	O
(	O
search_query	O
)	O
;	O
hits	O
hits	O
=	O
searcher.search	O
(	O
query	O
)	O
;	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
hits.length	O
(	O
)	O
;	O
i++	O
)	O
{	O
system.out.println	O
(	O
''	O
*	O
*	O
searchindexforuris	O
:	O
hit	O
:	O
``	O
+	O
hits.doc	O
(	O
i	O
)	O
)	O
;	O
document	O
doc	O
=	O
hits.doc	O
(	O
i	O
)	O
;	O
string	O
uri	O
=	O
doc.get	O
(	O
``	O
uri	O
''	O
)	O
;	O
ret.add	O
(	O
uri	O
)	O
;	O
}	O
reader.close	O
(	O
)	O
;	O
return	O
ret	O
;	O
}	O
195	O
10	O
information	O
gathering	O
the	O
lucene	O
class	O
hits	O
is	O
used	O
for	O
returned	O
search	B
matches	O
and	O
here	O
we	O
use	O
apis	O
to	O
get	O
the	O
number	O
of	O
hits	O
and	O
for	O
each	O
hit	O
get	O
back	O
an	O
instance	O
of	O
the	O
lucene	O
class	O
document	O
.	O
note	O
that	O
the	O
ﬁeld	O
values	O
are	O
retrieved	O
by	O
name	O
,	O
in	O
this	O
case	O
“	O
uri.	O
”	O
the	O
other	O
search	B
method	O
in	O
my	O
utility	O
class	O
searchindexf	O
oru	O
risanddoct	O
ext	O
is	O
almost	O
the	O
same	O
as	O
searchindexf	O
oru	O
ris	O
so	O
i	O
will	O
only	O
show	O
the	O
differences	O
:	O
public	O
list	O
<	O
string	O
[	O
]	O
>	O
searchindexforurisanddoctext	O
(	O
string	O
search_query	O
)	O
throws	O
exception	O
{	O
list	O
<	O
string	O
[	O
]	O
>	O
ret	O
=	O
new	O
arraylist	O
<	O
string	O
[	O
]	O
>	O
(	O
)	O
;	O
...	O
for	O
(	O
int	O
i	O
=	O
0	O
;	O
i	O
<	O
hits.length	O
(	O
)	O
;	O
i	O
+=	O
1	O
)	O
{	O
document	O
doc	O
=	O
hits.doc	O
(	O
i	O
)	O
;	O
system.out.println	O
(	O
``	O
*	O
*	O
hit	O
:	O
``	O
+	O
hits.doc	O
(	O
i	O
)	O
)	O
;	O
string	O
[	O
]	O
pair	O
=	O
new	O
string	O
[	O
]	O
{	O
doc.get	O
(	O
``	O
uri	O
''	O
)	O
,	O
doc.get	O
(	O
``	O
text	O
''	O
)	O
}	O
;	O
ret.add	O
(	O
pair	O
)	O
;	O
}	O
...	O
return	O
ret	O
;	O
}	O
here	O
we	O
also	O
return	O
the	O
original	O
text	O
from	O
matched	O
documents	O
that	O
we	O
get	O
by	O
fetch-	O
ing	O
the	O
named	O
ﬁeld	O
“	O
text.	O
”	O
the	O
following	O
code	O
snippet	O
is	O
an	O
example	O
for	O
using	O
the	O
lucenem	O
anager	O
class	O
:	O
lucenemanager	O
lm	O
=	O
new	O
lucenemanager	O
(	O
``	O
/tmp	O
''	O
)	O
;	O
//	O
start	O
fresh	O
:	O
create	O
a	O
new	O
index	O
:	O
lm.createandclearluceneindex	O
(	O
)	O
;	O
lm.adddocumenttoindex	O
(	O
``	O
file	O
:	O
//tmp/test1.txt	O
''	O
,	O
''	O
this	O
is	O
a	O
test	O
for	O
index	O
and	O
a	O
test	O
for	O
search	B
.	O
``	O
)	O
;	O
lm.adddocumenttoindex	O
(	O
``	O
file	O
:	O
//tmp/test2.txt	O
''	O
,	O
please	O
test	O
the	O
index	O
code	O
.	O
``	O
)	O
;	O
lm.adddocumenttoindex	O
(	O
``	O
file	O
:	O
//tmp/test3.txt	O
''	O
,	O
''	O
please	O
test	O
the	O
index	O
code	O
before	O
tomorrow	O
.	O
``	O
)	O
;	O
//	O
get	O
uris	O
of	O
matching	O
documents	O
:	O
list	O
<	O
string	O
>	O
doc_uris	O
=	O
lm.searchindexforuris	O
(	O
``	O
test	O
,	O
index	O
''	O
)	O
;	O
system.out.println	O
(	O
``	O
matched	O
document	O
uris	O
:	O
``	O
+doc_uris	O
)	O
;	O
//	O
get	O
uris	O
and	O
document	O
text	O
for	O
matching	O
documents	O
:	O
list	O
<	O
string	O
[	O
]	O
>	O
doc_uris_with_text	O
=	O
lm.searchindexforurisanddoctext	O
(	O
``	O
test	O
,	O
index	O
''	O
)	O
;	O
196	O
10.5	O
indexing	O
and	O
search	B
with	O
nutch	O
clients	O
for	O
(	O
string	O
[	O
]	O
uri_and_text	O
:	O
doc_uris_with_text	O
)	O
{	O
system.out.println	O
(	O
``	O
matched	O
document	O
uri	O
:	O
''	O
+	O
system.out.println	O
(	O
``	O
document	O
text	O
:	O
``	O
+	O
uri_and_text	O
[	O
0	O
]	O
)	O
;	O
uri_and_text	O
[	O
1	O
]	O
)	O
;	O
}	O
and	O
here	O
is	O
the	O
sample	O
output	O
(	O
with	O
debug	O
printout	O
from	O
deleting	O
the	O
old	O
test	O
disk-	O
based	O
index	O
removed	O
)	O
:	O
matched	O
document	O
uris	O
:	O
[	O
file	O
:	O
//tmp/test1.txt	O
,	O
file	O
:	O
//tmp/test2.txt	O
,	O
file	O
:	O
//tmp/test3.txt	O
]	O
matched	O
document	O
uri	O
:	O
file	O
:	O
//tmp/test1.txt	O
document	O
text	O
:	O
this	O
is	O
a	O
test	O
for	O
index	O
and	O
a	O
test	O
for	O
search	B
.	O
matched	O
document	O
uri	O
:	O
file	O
:	O
//tmp/test2.txt	O
document	O
text	O
:	O
please	O
test	O
the	O
index	O
code	O
.	O
matched	O
document	O
uri	O
:	O
file	O
:	O
//tmp/test3.txt	O
document	O
text	O
:	O
please	O
test	O
the	O
index	O
code	O
before	O
tomorrow	O
.	O
i	O
use	O
the	O
lucene	O
library	O
frequently	O
on	O
customer	O
projects	O
and	O
although	O
tailoring	O
lucene	O
to	O
speciﬁc	O
applications	O
is	O
not	O
simple	O
,	O
the	O
wealth	O
of	O
options	O
for	O
analyzing	O
text	O
and	O
maintaining	O
disk-based	O
indices	O
makes	O
lucene	O
a	O
very	O
good	O
tool	O
.	O
lucene	O
is	O
also	O
very	O
efﬁcient	O
and	O
scales	O
well	O
to	O
very	O
large	O
indices	O
.	O
in	O
section	O
10.5	O
we	O
will	O
look	O
at	O
the	O
nutch	O
system	O
that	O
is	O
built	O
on	O
top	O
of	O
lucene	O
and	O
provides	O
a	O
complete	O
turnkey	O
(	O
but	O
also	O
highly	O
customizable	O
)	O
solution	O
to	O
implement-	O
ing	O
search	B
in	O
large	O
scale	O
projects	O
where	O
it	O
does	O
not	O
make	O
sense	O
to	O
use	O
lucene	O
in	O
an	O
embedded	O
mode	O
as	O
we	O
did	O
in	O
this	O
section	O
.	O
10.5	O
indexing	O
and	O
search	B
with	O
nutch	O
clients	O
this	O
is	O
the	O
last	O
section	O
in	O
this	O
book	O
,	O
and	O
we	O
have	O
a	O
great	O
topic	O
for	O
ﬁnishing	O
the	O
book	O
:	O
the	O
nutch	O
system	O
that	O
is	O
a	O
very	O
useful	O
tool	O
for	O
information	O
storage	O
and	O
retrieval	O
.	O
out	O
of	O
the	O
box	O
,	O
it	O
only	O
takes	O
about	O
15	O
minutes	O
to	O
set	O
up	O
a	O
“	O
vanilla	O
”	O
nutch	O
server	O
with	O
the	O
default	O
web	O
interface	O
for	O
searching	O
documents	O
.	O
nutch	O
can	O
be	O
conﬁgured	O
to	O
index	O
documents	O
on	O
a	O
local	O
ﬁle	O
system	O
and	O
contains	O
utilities	O
for	O
processing	O
a	O
wide	O
range	O
of	O
document	O
types	O
(	O
microsoft	O
ofﬁce	O
,	O
openofﬁce.org	O
,	O
pdf	O
,	O
tml	O
,	O
etc.	O
)	O
.	O
you	O
can	O
also	O
conﬁgure	O
nutch	O
to	O
spider	O
remote	O
and	O
local	O
private	O
(	O
usually	O
on	O
a	O
company	O
lan	O
)	O
web	O
sites	O
.	O
197	O
10	O
information	O
gathering	O
the	O
nutch	O
web	O
site	O
http	O
:	O
//lucene.apache.org/nutch	O
contains	O
binary	O
distributions	O
and	O
tutorials	O
for	O
quickly	O
setting	O
up	O
a	O
nutch	O
system	O
and	O
i	O
will	O
not	O
repeat	O
all	O
of	O
these	O
di-	O
rections	O
here	O
.	O
what	O
i	O
do	O
want	O
to	O
show	O
you	O
is	O
how	O
i	O
usually	O
use	O
the	O
nutch	O
system	O
on	O
customer	O
projects	O
:	O
after	O
i	O
conﬁgure	O
nutch	O
to	O
periodically	O
“	O
spider	O
”	O
customer	O
speciﬁc	O
data	O
sources	O
i	O
then	O
use	O
a	O
web	O
services	O
client	O
library	O
to	O
integrate	O
nutch	O
with	O
other	O
systems	O
that	O
need	O
both	O
document	O
repository	O
and	O
search	B
functionality	O
.	O
although	O
you	O
can	O
tightly	O
couple	O
your	O
java	O
applications	O
with	O
nutch	O
using	O
the	O
nutch	O
api	O
,	O
i	O
prefer	O
to	O
use	O
the	O
opensearch	O
api	O
that	O
is	O
an	O
extension	O
of	O
rss	O
2.0	O
for	O
per-	O
forming	O
search	B
using	O
web	O
service	O
calls	O
.	O
opensearch	O
was	O
originally	O
developed	O
for	O
amazon	O
’	O
s	O
a9.com	O
search	B
engine	O
and	O
may	O
become	O
widely	O
adopted	O
since	O
it	O
is	O
a	O
rea-	O
sonable	O
standard	O
.	O
more	O
information	O
on	O
the	O
opensearch	O
standard	O
can	O
be	O
found	O
at	O
http	O
:	O
//www.opensearch.org	O
but	O
i	O
will	O
cover	O
the	O
basics	O
here	O
.	O
10.5.1	O
nutch	O
server	O
fast	O
start	O
setup	O
for	O
completeness	O
,	O
i	O
will	O
quickly	O
go	O
over	O
the	O
steps	O
i	O
use	O
to	O
set	O
up	O
tomcat	O
version	O
6	O
with	O
nutch	O
.	O
for	O
this	O
discussion	O
,	O
i	O
assume	O
that	O
you	O
have	O
unpacked	O
tomcat	O
and	O
changed	O
the	O
directory	O
name	O
to	O
tomcat6	O
nutch	O
,	O
that	O
you	O
have	O
removed	O
all	O
ﬁles	O
from	O
the	O
directory	O
tomcat6	O
nutch/webapps/	O
,	O
and	O
that	O
you	O
have	O
then	O
moved	O
the	O
nutch-	O
0.9.war	O
ﬁle	O
(	O
i	O
am	O
using	O
nutch	O
version	O
0.9	O
)	O
to	O
the	O
tomcat	O
webapps	O
directory	O
chang-	O
ing	O
its	O
name	O
to	O
root.war	O
:	O
tomcat6_nutch/webapps/root.war	O
i	O
then	O
move	O
the	O
directory	O
nutch-0.9	O
to	O
:	O
tomcat6_nutch/nutch	O
the	O
ﬁle	O
tomcat6	O
nutch/nutch/conf/crawl-urlﬁlter.txt	O
needs	O
to	O
be	O
edited	O
to	O
specify	O
a	O
combination	O
of	O
local	O
and	O
remote	O
data	O
sources	O
;	O
here	O
i	O
have	O
conﬁgured	O
it	O
to	O
spider	O
just	O
my	O
http	O
:	O
//knowledgebooks.com	O
web	O
site	O
(	O
the	O
only	O
changes	O
i	O
had	O
to	O
make	O
are	O
the	O
two	O
lines	O
,	O
one	O
being	O
a	O
comment	O
line	O
containing	O
the	O
string	O
“	O
knowledgebooks.com	O
”	O
)	O
:	O
#	O
skip	O
file	O
:	O
,	O
ftp	O
:	O
,	O
&	O
mailto	O
:	O
urls	O
-ˆ	O
(	O
file|ftp|mailto	O
)	O
:	O
#	O
skip	O
image	O
and	O
other	O
suffixes	O
we	O
can	O
’	O
t	O
yet	O
parse	O
-\	O
.	O
(	O
gif|gif|jpg|jpg|	O
...	O
)	O
$	O
#	O
skip	O
urls	O
containing	O
certain	O
characters	O
as	O
probable	O
#	O
queries	O
,	O
etc	O
.	O
-	O
[	O
?	O
*	O
!	O
@	O
=	O
]	O
198	O
10.5	O
indexing	O
and	O
search	B
with	O
nutch	O
clients	O
#	O
skip	O
urls	O
with	O
slash-delimited	O
segment	O
that	O
repeats	O
#	O
3+	O
times	O
,	O
to	O
break	O
loops	O
-.*	O
(	O
/.+	O
?	O
)	O
/.*	O
?	O
\1/	O
.	O
*	O
?	O
\1/	O
#	O
accept	O
hosts	O
in	O
knowledgebooks.com	O
+ˆhttp	O
:	O
//	O
(	O
[	O
a-z0-9	O
]	O
*\	O
.	O
)	O
*knowledgebooks.com/	O
#	O
skip	O
everything	O
else	O
-	O
.	O
additional	O
regular	O
expression	O
patterns	O
can	O
be	O
added	O
for	O
more	O
root	O
web	O
sites	O
.	O
nutch	O
will	O
not	O
spider	O
any	O
site	O
that	O
does	O
not	O
match	O
any	O
regular	O
expression	O
pattern	O
in	O
the	O
con-	O
ﬁguration	O
ﬁle	O
.	O
it	O
is	O
important	O
that	O
web	O
search	B
spiders	O
properly	O
identify	O
themselves	O
so	O
it	O
is	O
important	O
that	O
you	O
also	O
edit	O
the	O
ﬁle	O
tomcat6	O
nutch/nutch/conf/nutch-site.xml	O
,	O
following	O
the	O
directions	O
in	O
the	O
comments	O
to	O
identify	O
yourself	O
or	O
your	O
company	O
to	O
web	O
sites	O
that	O
you	O
spider	O
.	O
<	O
?	O
xml	O
version=	O
''	O
1.0	O
''	O
?	O
>	O
<	O
?	O
xml-stylesheet	O
type=	O
''	O
text/xsl	O
''	O
href=	O
''	O
configuration.xsl	O
''	O
?	O
>	O
<	O
configuration	O
>	O
<	O
property	O
>	O
<	O
name	O
>	O
http.agent.name	O
<	O
/name	O
>	O
<	O
value	O
>	O
your	O
name	O
nutch	O
spider	O
<	O
/value	O
>	O
<	O
description	O
>	O
test	O
spider	O
<	O
/description	O
>	O
<	O
/property	O
>	O
<	O
property	O
>	O
<	O
name	O
>	O
http.agent.url	O
<	O
/name	O
>	O
<	O
value	O
>	O
http	O
:	O
//yourdomain.com	O
<	O
/value	O
>	O
<	O
description	O
>	O
url	O
of	O
spider	O
server	O
<	O
/description	O
>	O
<	O
/property	O
>	O
<	O
property	O
>	O
<	O
name	O
>	O
http.agent.email	O
<	O
/name	O
>	O
<	O
value	O
>	O
your	O
email	O
address	O
<	O
/value	O
>	O
<	O
description	O
>	O
markw	O
at	O
markwatson	O
dot	O
com	O
<	O
/description	O
>	O
<	O
/property	O
>	O
<	O
/configuration	O
>	O
then	O
create	O
an	O
empty	O
directory	O
:	O
tomcat6_nutch/nutch/urls	O
and	O
create	O
a	O
text	O
ﬁle	O
(	O
any	O
ﬁle	O
name	O
is	O
ﬁne	O
)	O
with	O
a	O
list	O
of	O
starting	O
urls	O
to	O
spider	O
;	O
in	O
this	O
case	O
,	O
i	O
will	O
just	O
add	O
:	O
199	O
10	O
information	O
gathering	O
http	O
:	O
//knowledgebooks.com	O
then	O
make	O
a	O
small	O
test	O
spider	O
run	O
to	O
create	O
local	O
indices	O
in	O
the	O
subdirectory	O
./crawl	O
and	O
start	O
the	O
tomcat	O
server	O
interactively	O
:	O
cd	O
nutch/	O
bin/nutch	O
crawl	O
urls	O
-dir	O
crawl	O
-depth	O
3	O
-topn	O
80	O
../bin/catalina.sh	O
run	O
you	O
can	O
run	O
tomcat	O
as	O
a	O
background	O
service	O
using	O
“	O
start	O
”	O
instead	O
of	O
“	O
run	O
”	O
in	O
pro-	O
duction	O
mode	O
.	O
if	O
you	O
rerun	O
the	O
spidering	O
process	O
,	O
you	O
will	O
need	O
to	O
ﬁrst	O
delete	O
the	O
subdirectory	O
./crawl	O
or	O
put	O
the	O
new	O
index	O
in	O
a	O
different	O
location	O
and	O
copy	O
it	O
to	O
./crawl	O
when	O
the	O
new	O
index	O
is	O
complete	O
.	O
the	O
nutch	O
web	O
app	O
running	O
in	O
tomcat	O
will	O
expect	O
a	O
subdirectory	O
named	O
./crawl	O
in	O
the	O
directory	O
where	O
you	O
start	O
tomcat	O
.	O
just	O
to	O
test	O
that	O
you	O
have	O
nutch	O
up	O
and	O
running	O
with	O
a	O
valid	O
index	O
,	O
access	O
the	O
fol-	O
lowing	O
url	O
(	O
specifying	O
localhost	O
,	O
assuming	O
that	O
you	O
are	O
running	O
tomcat	O
on	O
your	O
local	O
computer	O
to	O
try	O
this	O
)	O
:	O
http	O
:	O
//localhost:8080	O
you	O
can	O
then	O
try	O
the	O
opensearch	O
web	O
service	O
interface	O
by	O
accessing	O
the	O
url	O
:	O
http	O
:	O
//localhost:8080/opensearch	O
?	O
query=java	O
%	O
20rdf	O
since	O
i	O
indexed	O
my	O
own	O
web	O
site	O
that	O
i	O
often	O
change	O
,	O
the	O
rss	O
2.0	O
xml	O
that	O
you	O
get	O
back	O
may	O
look	O
different	O
than	O
what	O
we	O
see	O
in	O
this	O
example	O
:	O
<	O
?	O
xml	O
version=	O
''	O
1.0	O
''	O
encoding=	O
''	O
utf-8	O
''	O
?	O
>	O
<	O
rss	O
xmlns	O
:	O
nutch=	O
''	O
http	O
:	O
//www.nutch.org/	O
...	O
>	O
<	O
channel	O
>	O
<	O
title	O
>	O
nutch	O
:	O
java	O
rdf	O
<	O
/title	O
>	O
<	O
description	O
>	O
nutch	O
search	B
results	O
for	O
query	O
:	O
java	O
rdf	O
<	O
/description	O
>	O
<	O
link	O
>	O
http	O
:	O
//localhost:8080/search	O
...	O
<	O
/link	O
>	O
<	O
opensearch	O
:	O
totalresults	O
>	O
1	O
<	O
/opensearch	O
:	O
totalresults	O
>	O
<	O
opensearch	O
:	O
startindex	O
>	O
0	O
<	O
/opensearch	O
:	O
startindex	O
>	O
<	O
opensearch	O
:	O
itemsperpage	O
>	O
10	O
<	O
/opensearch	O
:	O
itemsperpage	O
>	O
<	O
nutch	O
:	O
query	O
>	O
java	O
rdf	O
<	O
/nutch	O
:	O
query	O
>	O
200	O
10.5	O
indexing	O
and	O
search	B
with	O
nutch	O
clients	O
<	O
item	O
>	O
...	O
<	O
/title	O
>	O
<	O
title	O
>	O
knowledgebooks.com	O
:	O
ai	O
<	O
description	O
>	O
...	O
html	O
snippet	O
...	O
<	O
/description	O
>	O
<	O
link	O
>	O
http	O
:	O
//knowledgebooks.com/	O
<	O
/link	O
>	O
<	O
nutch	O
:	O
site	O
>	O
knowledgebooks.com	O
<	O
/nutch	O
:	O
site	O
>	O
<	O
nutch	O
:	O
cache	O
>	O
...	O
<	O
/nutch	O
:	O
cache	O
>	O
<	O
nutch	O
:	O
explain	O
>	O
...	O
<	O
/nutch	O
:	O
explain	O
>	O
<	O
nutch	O
:	O
segment	O
>	O
20080930151220	O
<	O
/nutch	O
:	O
segment	O
>	O
<	O
nutch	O
:	O
digest	O
>	O
923fb80f9f8fd66f47d70	O
<	O
/nutch	O
:	O
digest	O
>	O
<	O
nutch	O
:	O
tstamp	O
>	O
20080930221225918	O
<	O
/nutch	O
:	O
tstamp	O
>	O
<	O
nutch	O
:	O
boost	O
>	O
1.0	O
<	O
/nutch	O
:	O
boost	O
>	O
<	O
/item	O
>	O
<	O
/channel	O
>	O
<	O
/rss	O
>	O
for	O
multiple	O
search	B
results	O
,	O
there	O
are	O
multiple	O
<	O
item	O
>	O
elements	O
in	O
the	O
returned	O
xml	O
data	O
.	O
we	O
will	O
write	O
web	O
service	O
clients	O
to	O
submit	O
remote	O
queries	O
and	O
pro-	O
cess	O
the	O
returned	O
rss	O
2.0	O
xml	O
data	O
in	O
section	O
10.5.2	O
.	O
10.5.2	O
using	O
the	O
nutch	O
opensearch	O
web	O
apis	O
a	O
java	O
opensearch	O
web	O
services	O
client	O
is	O
fairly	O
easy	O
to	O
write	O
:	O
build	O
a	O
rest	O
query	O
url	O
with	O
the	O
search	B
phrase	O
url	O
encoded	O
,	O
open	O
a	O
httpu	O
rlconnection	O
for	O
this	O
query	O
url	O
,	O
read	O
the	O
response	O
,	O
and	O
then	O
use	O
an	O
xml	O
parser	O
to	O
process	O
the	O
returned	O
rss	O
2.0	O
xml	O
payload	O
.	O
we	O
will	O
ﬁrst	O
look	O
at	O
an	O
implementation	O
of	O
a	O
nutch	O
client	O
and	O
then	O
look	O
at	O
some	O
interesting	O
things	O
you	O
can	O
do	O
,	O
given	O
your	O
own	O
nutch	O
server	O
installation	O
and	O
a	O
client	O
.	O
the	O
client	O
class	O
n	O
utchclient	O
has	O
three	O
public	O
static	O
apis	O
:	O
•	O
search	B
–	O
returns	O
a	O
list	O
of	O
maps	O
,	O
each	O
map	O
having	O
values	O
for	O
keys	O
“	O
title	O
,	O
”	O
“	O
description	O
,	O
”	O
“	O
cache	O
uri	O
,	O
”	O
and	O
“	O
link.	O
”	O
the	O
title	O
is	O
the	O
web	O
page	O
title	O
,	O
the	O
de-	O
scription	O
is	O
an	O
htm	O
snippet	O
showing	O
search	B
terms	O
in	O
original	O
web	O
page	O
text	O
,	O
the	O
cache	O
uri	O
is	O
a	O
nutch	O
cache	O
of	O
the	O
original	O
web	O
page	O
,	O
and	O
the	O
link	O
is	O
the	O
url	O
to	O
the	O
matched	O
web	O
page	O
.	O
•	O
searchgetcache	O
–	O
like	O
search	B
but	O
each	O
map	O
also	O
contains	O
a	O
key	O
“	O
cache	O
content	O
”	O
with	O
a	O
value	O
equal	O
to	O
the	O
cached	O
html	O
for	O
the	O
original	O
web	O
page	O
.	O
•	O
getcachecontent	O
–	O
use	O
this	O
api	O
if	O
you	O
ﬁrst	O
used	O
search	B
and	O
later	O
want	O
the	O
cached	O
web	O
page	O
.	O
the	O
implementation	O
is	O
in	O
the	O
ﬁle	O
src-index-search/nutchclient.java	O
.	O
here	O
are	O
a	O
few	O
code	O
snippets	O
showing	O
the	O
public	O
apis	O
:	O
static	O
public	O
list	O
<	O
hashtable	O
<	O
string	O
,	O
string	O
>	O
>	O
201	O
10	O
information	O
gathering	O
searchgetcache	O
(	O
string	O
opensearch_url	O
,	O
string	O
query	O
)	O
throws	O
ioexception	O
,	O
parserconfigurationexception	O
,	O
saxexception	O
{	O
return	O
search_helper	O
(	O
opensearch_url	O
,	O
query	O
,	O
true	O
)	O
;	O
}	O
static	O
public	O
list	O
<	O
hashtable	O
<	O
string	O
,	O
string	O
>	O
>	O
search	B
(	O
string	O
opensearch_url	O
,	O
string	O
query	O
)	O
throws	O
ioexception	O
,	O
parserconfigurationexception	O
,	O
saxexception	O
{	O
return	O
search_helper	O
(	O
opensearch_url	O
,	O
query	O
,	O
false	O
)	O
;	O
}	O
static	O
public	O
string	O
getcachecontent	O
(	O
string	O
cache_uri	O
)	O
throws	O
ioexception	O
{	O
url	O
url	O
=	O
new	O
url	O
(	O
cache_uri	O
)	O
;	O
urlconnection	O
uc	O
=	O
url.openconnection	O
(	O
)	O
;	O
return	O
new	O
scanner	O
(	O
uc.getinputstream	O
(	O
)	O
)	O
.	O
usedelimiter	O
(	O
``	O
\\z	O
''	O
)	O
.next	O
(	O
)	O
;	O
}	O
the	O
implementation	O
of	O
the	O
private	O
helper	O
method	O
is	O
(	O
reformatted	O
to	O
ﬁt	O
the	O
page	O
width	O
and	O
with	O
comments	O
on	O
the	O
code	O
)	O
:	O
static	O
private	O
list	O
<	O
hashtable	O
<	O
string	O
,	O
string	O
>	O
>	O
search_helper	O
(	O
string	O
opensearch_url	O
,	O
string	O
query	O
,	O
boolean	O
return_cache	O
)	O
throws	O
...	O
{	O
list	O
<	O
hashtable	O
<	O
string	O
,	O
string	O
>	O
>	O
ret	O
=	O
new	O
arraylist	O
<	O
hashtable	O
<	O
string	O
,	O
string	O
>	O
>	O
(	O
)	O
;	O
we	O
are	O
using	O
a	O
rest	O
style	O
call	O
so	O
we	O
need	O
to	O
url	O
encode	O
the	O
search	B
terms	O
.	O
this	O
involves	O
replacing	O
space	O
characters	O
with	O
“	O
+	O
,	O
”	O
etc	O
.	O
a	O
search	B
for	O
“	O
java	O
ai	O
”	O
using	O
a	O
nutch	O
server	O
on	O
my	O
local	O
laptop	O
on	O
port	O
8080	O
would	O
look	O
like	O
:	O
http	O
:	O
//localhost:8080/opensearch	O
?	O
query=java+ai	O
string	O
url_str	O
=	O
opensearch_url	O
+	O
``	O
?	O
query=	O
''	O
+	O
urlencoder.encode	O
(	O
query	O
,	O
``	O
utf-8	O
''	O
)	O
;	O
url	O
url	O
=	O
new	O
url	O
(	O
url_str	O
)	O
;	O
urlconnection	O
uc	O
=	O
url.openconnection	O
(	O
)	O
;	O
202	O
10.5	O
indexing	O
and	O
search	B
with	O
nutch	O
clients	O
bufferedinputstream	O
bis	O
=	O
new	O
bufferedinputstream	O
(	O
uc.getinputstream	O
(	O
)	O
)	O
;	O
while	O
i	O
usually	O
prefer	O
sax	O
xml	O
parsers	O
for	O
less	O
memory	O
use	O
and	O
efﬁciency	O
,	O
it	O
is	O
easier	O
for	O
small	O
xml	O
payloads	O
just	O
to	O
use	O
the	O
dom-based	O
apis	O
:	O
documentbuilder	O
docbuilder	O
=	O
documentbuilderfactory.newinstance	O
(	O
)	O
.	O
newdocumentbuilder	O
(	O
)	O
;	O
document	O
doc	O
=	O
docbuilder.parse	O
(	O
bis	O
)	O
;	O
doc.getdocumentelement	O
(	O
)	O
.normalize	O
(	O
)	O
;	O
here	O
we	O
use	O
the	O
dom	O
xml	O
apis	O
to	O
get	O
all	O
“	O
item	O
”	O
tags	O
and	O
for	O
each	O
“	O
item	O
”	O
tag	O
get	O
the	O
text	O
for	O
the	O
child	O
nodes	O
:	O
nodelist	O
listitems	O
=	O
doc.getelementsbytagname	O
(	O
``	O
item	O
''	O
)	O
;	O
int	O
numitems	O
=	O
listitems.getlength	O
(	O
)	O
;	O
for	O
(	O
int	O
i=0	O
;	O
i	O
<	O
numitems	O
;	O
i++	O
)	O
{	O
node	O
item	O
=	O
listitems.item	O
(	O
i	O
)	O
;	O
hashtable	O
<	O
string	O
,	O
string	O
>	O
new_item	O
=	O
new	O
hashtable	O
<	O
string	O
,	O
string	O
>	O
(	O
)	O
;	O
ret.add	O
(	O
new_item	O
)	O
;	O
nodelist	O
item_data	O
=	O
item.getchildnodes	O
(	O
)	O
;	O
int	O
num	O
=	O
item_data.getlength	O
(	O
)	O
;	O
for	O
(	O
int	O
n=0	O
;	O
n	O
<	O
num	O
;	O
n++	O
)	O
{	O
node	O
data	O
=	O
item_data.item	O
(	O
n	O
)	O
;	O
string	O
name	O
=	O
data.getnodename	O
(	O
)	O
;	O
nutch	O
returns	O
many	O
extra	O
parameters	O
encoded	O
as	O
items	O
that	O
we	O
do	O
not	O
need	O
.	O
here	O
we	O
just	O
keep	O
what	O
we	O
need	O
:	O
if	O
(	O
name.equals	O
(	O
``	O
title	O
''	O
)	O
||	O
name.equals	O
(	O
``	O
description	O
''	O
)	O
||	O
name.equals	O
(	O
``	O
link	O
''	O
)	O
)	O
{	O
new_item.put	O
(	O
name	O
,	O
data.gettextcontent	O
(	O
)	O
)	O
;	O
}	O
if	O
(	O
name.equals	O
(	O
``	O
nutch	O
:	O
cache	O
''	O
)	O
)	O
{	O
new_item.put	O
(	O
``	O
cache_uri	O
''	O
,	O
data.gettextcontent	O
(	O
)	O
)	O
;	O
}	O
}	O
we	O
may	O
want	O
to	O
optionally	O
make	O
another	O
web	O
service	O
call	O
to	O
get	O
the	O
cached	O
web	O
page	O
for	O
this	O
search	B
result	O
.	O
doing	O
this	O
approximately	O
doubles	O
the	O
time	O
required	O
for	O
a	O
search	B
query	O
:	O
203	O
10	O
information	O
gathering	O
if	O
(	O
return_cache	O
&	O
&	O
new_item.get	O
(	O
``	O
cache_uri	O
''	O
)	O
!	O
=null	O
)	O
{	O
new_item.put	O
(	O
``	O
cache_content	O
''	O
,	O
getcachecontent	O
(	O
new_item.get	O
(	O
``	O
cache_uri	O
''	O
)	O
)	O
)	O
;	O
}	O
}	O
return	O
ret	O
;	O
}	O
here	O
is	O
a	O
sample	O
use	O
of	O
the	O
client	O
class	O
:	O
list	O
<	O
hashtable	O
<	O
string	O
,	O
string	O
>	O
>	O
results	O
=	O
nutchclient.search	O
(	O
''	O
http	O
:	O
//localhost:8080/opensearch	O
''	O
,	O
``	O
java	O
''	O
)	O
;	O
system.out.println	O
(	O
``	O
results	O
:	O
``	O
+	O
results	O
)	O
;	O
and	O
the	O
output	O
(	O
edited	O
for	O
brevity	O
)	O
:	O
results	O
:	O
[	O
{	O
cache_uri=http	O
:	O
//localhost:8080/cached.jsp	O
?	O
idx=0	O
&	O
id=0	O
,	O
link=http	O
:	O
//knowledgebooks.com/	O
,	O
description=	O
...	O
java	O
ai	O
...	O
,	O
title=knowledgebooks.com	O
:	O
ai	O
technology	O
for	O
...	O
}	O
,	O
{	O
cache_uri=http	O
:	O
//localhost:8080/cached.jsp	O
?	O
idx=0	O
&	O
id=1	O
,	O
link=http	O
:	O
//knowledgebooks.com/license.txt	O
,	O
description=	O
..	O
using	O
<	O
span	O
class=	O
''	O
highlight	O
''	O
>	O
java	O
..	O
,	O
title=http	O
:	O
//knowledgebooks.com/license.txt	O
}	O
]	O
the	O
average	O
time	O
for	O
a	O
nutch	O
client	O
web	O
service	O
call	O
on	O
my	O
macbook	O
is	O
130	O
mil-	O
liseconds	O
when	O
i	O
ran	O
both	O
tomcat	O
and	O
the	O
nutch	O
web	O
services	O
client	O
are	O
on	O
the	O
same	O
laptop	O
.	O
average	O
response	O
times	O
will	O
only	O
increase	O
slightly	O
when	O
the	O
client	O
and	O
the	O
server	O
are	O
on	O
the	O
same	O
local	O
area	O
network	O
.	O
average	O
response	O
times	O
will	O
be	O
longer	O
and	O
less	O
predictable	O
when	O
using	O
any	O
of	O
the	O
public	O
opensearch	O
servers	O
on	O
the	O
internet	O
.	O
what	O
can	O
you	O
use	O
a	O
search	B
client	O
for	O
?	O
here	O
are	O
a	O
few	O
ideas	O
based	O
on	O
my	O
own	O
work	O
projects	O
:	O
•	O
roughly	O
determine	O
if	O
two	O
words	O
or	O
phrases	O
are	O
associated	O
with	O
each	O
other	O
by	O
concatenating	O
the	O
words	O
or	O
phrases	O
and	O
counting	O
the	O
number	O
of	O
search	B
results	O
for	O
the	O
combined	O
search	B
query	O
.	O
•	O
determine	O
if	O
a	O
product	O
name	O
or	O
id	O
code	O
is	O
spelled	O
correctly	O
or	O
if	O
a	O
company	O
carries	O
a	O
product	O
by	O
setting	O
up	O
a	O
custom	O
nutch	O
instance	O
that	O
only	O
spiders	O
the	O
204	O
10.5	O
indexing	O
and	O
search	B
with	O
nutch	O
clients	O
company	O
’	O
s	O
web	O
site	O
(	O
s	O
)	O
.	O
always	O
follow	O
the	O
terms	O
and	O
conditions	O
of	O
a	O
web	O
site	O
when	O
setting	O
up	O
a	O
spider	O
.	O
•	O
improve	O
search	B
results	O
by	O
adding	O
a	O
list	O
of	O
project-speciﬁc	O
synonyms	O
to	O
the	O
search	B
client	O
.	O
expand	O
search	B
terms	O
using	O
the	O
synonym	O
list	O
.	O
•	O
if	O
you	O
need	O
access	O
to	O
public	O
information	O
,	O
spider	O
the	O
information	O
infrequently	O
and	O
then	O
perform	O
local	O
search	B
queries	O
and	O
use	O
the	O
local	O
page	O
caches	O
.	O
for	O
very	O
little	O
effort	O
you	O
can	O
set	O
up	O
nutch	O
server	O
instances	O
that	O
spider	O
speciﬁc	O
in-	O
formation	O
servers	O
.	O
you	O
can	O
often	O
add	O
signiﬁcant	O
value	O
to	O
application	O
programs	O
by	O
adding	O
search	B
functionality	O
and	O
by	O
using	O
nutch	O
you	O
can	O
locally	O
control	O
the	O
informa-	O
tion	O
.	O
205	O
10	O
information	O
gathering	O
206	O
11	O
conclusions	O
the	O
material	O
in	O
this	O
book	O
was	O
informed	O
by	O
my	O
own	O
work	O
writing	O
software	O
for	O
infor-	O
mation	O
processing	O
.	O
if	O
you	O
enjoyed	O
reading	O
it	O
and	O
you	O
make	O
practical	O
use	O
of	O
at	O
least	O
some	O
of	O
the	O
material	O
i	O
covered	O
,	O
then	O
i	O
consider	O
my	O
effort	O
to	O
be	O
worthwhile	O
.	O
writing	O
software	O
is	O
a	O
combination	O
of	O
a	O
business	O
activity	O
,	O
promoting	O
good	O
for	O
soci-	O
ety	O
,	O
and	O
an	O
exploration	O
to	O
try	O
out	O
new	O
ideas	O
for	O
self	O
improvement	O
.	O
i	O
believe	O
that	O
there	O
is	O
sometimes	O
a	O
ﬁne	O
line	O
between	O
spending	O
too	O
many	O
resources	O
tracking	O
many	O
new	O
technologies	O
versus	O
getting	O
stuck	O
using	O
old	O
technologies	O
at	O
the	O
expense	O
of	O
lost	O
opportunities	O
.	O
my	O
hope	O
is	O
that	O
reading	O
this	O
book	O
was	O
an	O
efﬁcient	O
and	O
pleasurable	O
use	O
of	O
your	O
time	O
in	O
learning	O
some	O
new	O
techniques	O
and	O
technologies	O
that	O
you	O
had	O
not	O
considered	O
before	O
.	O
when	O
we	O
can	O
expend	O
resources	O
to	O
try	O
new	O
things	O
it	O
is	O
almost	O
always	O
best	O
to	O
perform	O
many	O
small	O
experiments	O
and	O
then	O
dig	O
deeper	O
into	O
areas	O
that	O
have	O
a	O
good	O
chance	O
for	O
providing	O
high	O
value	O
and	O
capturing	O
your	O
interest	O
.	O
“	O
fail	O
fast	O
”	O
is	O
a	O
common	O
meme	O
but	O
failure	O
that	O
we	O
do	O
not	O
learn	O
from	O
is	O
a	O
waste	O
.	O
i	O
have	O
been	O
using	O
the	O
java	O
platform	O
from	O
the	O
very	O
beginning	O
and	O
although	O
i	O
also	O
use	O
many	O
other	O
programming	O
languages	O
in	O
my	O
work	O
and	O
studies	O
,	O
both	O
the	O
java	O
language	O
and	O
platform	O
provide	O
high	O
efﬁciency	O
,	O
scalability	O
,	O
many	O
well-trained	O
developers	O
,	O
and	O
a	O
wealth	O
of	O
existing	O
infrastructure	O
software	O
and	O
libraries	O
.	O
investment	O
in	O
java	O
de-	O
velopment	O
also	O
pays	O
when	O
using	O
alternative	O
jvm	O
languages	O
like	O
jruby	O
,	O
scala	O
,	O
and	O
clojure	O
.	O
if	O
we	O
never	O
get	O
to	O
meet	O
in	O
person	O
or	O
talk	O
on	O
the	O
telephone	O
,	O
then	O
i	O
would	O
like	O
to	O
thank	O
you	O
now	O
for	O
taking	O
the	O
time	O
to	O
read	O
this	O
book	O
.	O