springer texts in statistics series editors g. casella s. fienberg i. olkin for further volumes gareth james daniela witten trevor hastie robert tibshirani an introduction to statistical learning with applications in r gareth james department of data sciences and operations university of southern california los angeles ca usa trevor hastie department of statistics stanford university stanford ca usa daniela witten department of biostatistics university of washington seattle wa usa robert tibshirani department of statistics stanford university stanford ca usa issn isbn doi springer new york heidelberg dordrecht london isbn library of congress control number th printing springer sciencebusiness media new york at this work is subject to copyright. all rights are reserved by the publisher whether the whole or part of the material is concerned specifically the rights of translation reprinting reuse of illustrations recitation broadcasting reproduction on microfilms or in any other physical way and transmission or information storage and retrieval electronic adaptation computer software or by similar or dissimilar methodology now known or hereafter developed. exempted from this legal reservation are brief excerpts in connection with reviews or scholarly analysis or material supplied specifically for the purpose of being entered and executed on a computer system for exclusive use by the purchaser of the work. duplication of this publication or parts thereof is permitted only under the provisions of the copyright law of the publisher s location in its current version and permission for use must always be obtained from springer. permissions for use may be obtained through rightslink at the copyright clearance center. violations are liable to prosecution under the respective copyright law. the use of general descriptive names registered names trademarks service marks etc. in this publication does not imply even in the absence of a specific statement that such names are exempt from the relevant protective laws and regulations and therefore free for general use. while the advice and information in this book are believed to be true and accurate at the date of publication neither the authors nor the editors nor the publisher can accept any legal responsibility for any errors or omissions that may be made. the publisher makes no warranty express or implied with respect to the material contained herein. printed on acid-free paper springer is part of springer sciencebusiness media to our parents alison and michael james chiara nappi and edward witten valerie and patrick hastie vera and sami tibshirani and to our families michael daniel and catherine tessa theo and ari samantha timothy and lynda charlie ryan julie and cheryl preface statistical learning refers to a set of tools for modeling and understanding complex datasets. it is a recently developed area in statistics and blends with parallel developments in computer science and in particular machine learning. the field encompasses many methods such as the lasso and sparse regression classification and regression trees and boosting and support vector machines. with the explosion of big data problems statistical learning has become a very hot field in many scientific areas as well as marketing finance and other business disciplines. people with statistical learning skills are in high demand. one of the first books in this area the elements of statistical learning tibshirani and friedman was published in with a second edition in esl has become a popular text not only in statistics but also in related fields. one of the reasons for esl s popularity is its relatively accessible style. but esl is intended for individuals with advanced training in the mathematical sciences. an introduction to statistical learning arose from the perceived need for a broader and less technical treatment of these topics. in this new book we cover many of the same topics as esl but we concentrate more on the applications of the methods and less on the mathematical details. we have created labs illustrating how to implement each of the statistical learning methods using the popular statistical software package r. these labs provide the reader with valuable hands-on experience. this book is appropriate for advanced undergraduates or master s students in statistics or related quantitative fields or for individuals in other vii viii preface disciplines who wish to use statistical learning tools to analyze their data. it can be used as a textbook for a course spanning one or two semesters. we would like to thank several readers for valuable comments on preliminary drafts of this book pallavi basu alexandra chouldechova patrick danaher will fithian luella fu sam gross max grazier g sell courtney paulson xinghao qiao elisa sheng noah simon kean ming tan and xin lu tan. it s tough to make predictions especially about the future. los angeles usa seattle usa palo alto usa palo alto usa berra gareth james daniela witten trevor hastie robert tibshirani contents preface introduction statistical learning what is statistical learning? why estimate f how do we estimate f the trade-off between prediction accuracy and model interpretability supervised versus unsupervised learning regression versus classification problems assessing model accuracy measuring the quality of fit the bias-variance trade-off the classification setting lab introduction to r basic commands graphics indexing data loading data additional graphical and numerical summaries exercises vii ix x contents linear regression simple linear regression estimating the coefficients assessing the accuracy of the coefficient some important questions estimates assessing the accuracy of the model multiple linear regression estimating the regression coefficients other considerations in the regression model qualitative predictors extensions of the linear model potential problems the marketing plan comparison of linear regression with k-nearest neighbors lab linear regression libraries simple linear regression multiple linear regression non-linear transformations of the predictors qualitative predictors writing functions interaction terms exercises classification an overview of classification why not linear regression? logistic regression the logistic model estimating the regression coefficients making predictions multiple logistic regression logistic regression for response classes linear discriminant analysis using bayes theorem for classification linear discriminant analysis for p linear discriminant analysis for p quadratic discriminant analysis a comparison of classification methods lab logistic regression lda qda and knn the stock market data logistic regression linear discriminant analysis contents xi quadratic discriminant analysis k-nearest neighbors an application to caravan insurance data exercises resampling methods cross-validation the validation set approach leave-one-out cross-validation k-fold cross-validation bias-variance trade-off for k-fold cross-validation cross-validation on classification problems the bootstrap lab cross-validation and the bootstrap the validation set approach leave-one-out cross-validation k-fold cross-validation the bootstrap exercises linear model selection and regularization dimension reduction methods subset selection best subset selection stepwise selection choosing the optimal model shrinkage methods ridge regression the lasso selecting the tuning parameter principal components regression partial least squares considerations in high dimensions high-dimensional data what goes wrong in high dimensions? regression in high dimensions interpreting results in high dimensions lab subset selection methods best subset selection forward and backward stepwise selection choosing among models using the validation set approach and cross-validation xii contents lab ridge regression and the lasso ridge regression the lasso lab pcr and pls regression principal components regression partial least squares exercises moving beyond linearity polynomial regression step functions basis functions regression splines piecewise polynomials constraints and splines the spline basis representation choosing the number and locations of the knots smoothing splines comparison to polynomial regression an overview of smoothing splines choosing the smoothing parameter local regression generalized additive models gams for regression problems gams for classification problems lab non-linear modeling polynomial regression and step functions splines gams exercises tree-based methods the basics of decision trees regression trees classification trees trees versus linear models advantages and disadvantages of trees bagging random forests boosting bagging random forests boosting lab decision trees fitting classification trees fitting regression trees bagging and random forests boosting exercises contents xiii support vector machines maximal margin classifier what is a hyperplane? classification using a separating hyperplane the maximal margin classifier construction of the maximal margin classifier the non-separable case support vector classifiers overview of the support vector classifier details of the support vector classifier support vector machines classification with non-linear decision boundaries the support vector machine an application to the heart disease data svms with more than two classes one-versus-one classification one-versus-all classification relationship to logistic regression lab support vector machines support vector classifier support vector machine roc curves svm with multiple classes application to gene expression data exercises unsupervised learning the challenge of unsupervised learning principal components analysis what are principal components? another interpretation of principal components more on pca other uses for principal components clustering methods k-means clustering hierarchical clustering practical issues in clustering lab principal components analysis xiv contents lab clustering k-means clustering hierarchical clustering pca on the data clustering the observations of the data lab data example exercises index introduction an overview of statistical learning statistical learning refers to a vast set of tools for understanding data. these tools can be classified as supervised or unsupervised. broadly speaking supervised statistical learning involves building a statistical model for predicting or estimating an output based on one or more inputs. problems of this nature occur in fields as diverse as business medicine astrophysics and public policy. with unsupervised statistical learning there are inputs but no supervising output nevertheless we can learn relationships and structure from such data. to provide an illustration of some applications of statistical learning we briefly discuss three real-world data sets that are considered in this book. wage data in this application we refer to as the wage data set throughout this book we examine a number of factors that relate to wages for a group of males from the atlantic region of the united states. in particular we wish to understand the association between an employee s age and education as well as the calendar year on his wage. consider for example the left-hand panel of figure which displays wage versus age for each of the individuals in the data set. there is evidence that wage increases with age but then decreases again after approximately age the blue line which provides an estimate of the average wage for a given age makes this trend clearer. g. james et al. an introduction to statistical learning with applications in r springer texts in statistics doi springer sciencebusiness media new york introduction e g a w e g a w e g a w age year education level figure wage data which contains income survey information for males from the central atlantic region of the united states. left wage as a function of age. on average wage increases with age until about years of age at which point it begins to decline. center wage as a function of year. there is a slow but steady increase of approximately in the average wage between and right boxplots displaying wage as a function of education with indicating the lowest level high school diploma and the highest level advanced graduate degree. on average wage increases with the level of education. given an employee s age we can use this curve to predict his wage. however it is also clear from figure that there is a significant amount of variability associated with this average value and so age alone is unlikely to provide an accurate prediction of a particular man s wage. we also have information regarding each employee s education level and the year in which the wage was earned. the center and right-hand panels of figure which display wage as a function of both year and education indicate that both of these factors are associated with wage. wages increase by approximately in a roughly linear straight-line fashion between and though this rise is very slight relative to the variability in the data. wages are also typically greater for individuals with higher education levels men with the lowest education level tend to have substantially lower wages than those with the highest education level clearly the most accurate prediction of a given man s wage will be obtained by combining his age his education and the year. in chapter we discuss linear regression which can be used to predict wage from this data set. ideally we should predict wage in a way that accounts for the non-linear relationship between wage and age. in chapter we discuss a class of approaches for addressing this problem. stock market data the wage data involves predicting a continuous or quantitative output value. this is often referred to as a regression problem. however in certain cases we may instead wish to predict a non-numerical value that is a categorical yesterday two days previous three days previous introduction p s n i e g n a h c e g a n e c r e p t p s n i e g n a h c e g a t n e c r e p p s n i e g n a h c e g a n e c r e p t down up today s direction down up today s direction down up today s direction figure left boxplots of the previous day s percentage change in the sp index for the days for which the market increased or decreased obtained from the smarket data. center and right same as left panel but the percentage changes for and days previous are shown. or qualitative output. for example in chapter we examine a stock market data set that contains the daily movements in the standard poor s stock index over a period between and we refer to this as the smarket data. the goal is to predict whether the index will increase or decrease on a given day using the past days percentage changes in the index. here the statistical learning problem does not involve predicting a numerical value. instead it involves predicting whether a given day s stock market performance will fall into the up bucket or the down bucket. this is known as a classification problem. a model that could accurately predict the direction in which the market will move would be very useful! the left-hand panel of figure displays two boxplots of the previous day s percentage changes in the stock index one for the days for which the market increased on the subsequent day and one for the days for which the market decreased. the two plots look almost identical suggesting that there is no simple strategy for using yesterday s movement in the sp to predict today s returns. the remaining panels which display boxplots for the percentage changes and days previous to today similarly indicate little association between past and present returns. of course this lack of pattern is to be expected in the presence of strong correlations between successive days returns one could adopt a simple trading strategy to generate profits from the market. nevertheless in chapter we explore these data using several different statistical learning methods. interestingly there are hints of some weak trends in the data that suggest that at least for this period it is possible to correctly predict the direction of movement in the market approximately of the time introduction y t i l i b a b o r p d e i t c d e r p down up today s direction figure we fit a quadratic discriminant analysis model to the subset of the smarket data corresponding to the time period and predicted the probability of a stock market decrease using the data. on average the predicted probability of decrease is higher for the days in which the market does decrease. based on these results we are able to correctly predict the direction of movement in the market of the time. gene expression data the previous two applications illustrate data sets with both input and output variables. however another important class of problems involves situations in which we only observe input variables with no corresponding output. for example in a marketing setting we might have demographic information for a number of current or potential customers. we may wish to understand which types of customers are similar to each other by grouping individuals according to their observed characteristics. this is known as a clustering problem. unlike in the previous examples here we are not trying to predict an output variable. we devote chapter to a discussion of statistical learning methods for problems in which no natural output variable is available. we consider the data set which consists of gene expression measurements for each of cancer cell lines. instead of predicting a particular output variable we are interested in determining whether there are groups or clusters among the cell lines based on their gene expression measurements. this is a difficult question to address in part because there are thousands of gene expression measurements per cell line making it hard to visualize the data. the left-hand panel of figure addresses this problem by representing each of the cell lines using just two numbers and these are the first two principal components of the data which summarize the expression measurements for each cell line down to two numbers or dimensions. while it is likely that this dimension reduction has resulted in introduction z z figure left representation of the gene expression data set in a two-dimensional space and each point corresponds to one of the cell lines. there appear to be four groups of cell lines which we have represented using different colors. right same as left panel except that we have represented each of the different types of cancer using a different colored symbol. cell lines corresponding to the same cancer type tend to be nearby in the two-dimensional space. some loss of information it is now possible to visually examine the data for evidence of clustering. deciding on the number of clusters is often a difficult problem. but the left-hand panel of figure suggests at least four groups of cell lines which we have represented using separate colors. we can now examine the cell lines within each cluster for similarities in their types of cancer in order to better understand the relationship between gene expression levels and cancer. in this particular data set it turns out that the cell lines correspond to different types of cancer. this information was not used to create the left-hand panel of figure the right-hand panel of figure is identical to the left-hand panel except that the cancer types are shown using distinct colored symbols. there is clear evidence that cell lines with the same cancer type tend to be located near each other in this two-dimensional representation. in addition even though the cancer information was not used to produce the left-hand panel the clustering obtained does bear some resemblance to some of the actual cancer types observed in the right-hand panel. this provides some independent verification of the accuracy of our clustering analysis. a brief history of statistical learning though the term statistical learning is fairly new many of the concepts that underlie the field were developed long ago. at the beginning of the nineteenth century legendre and gauss published papers on the method introduction of least squares which implemented the earliest form of what is now known as linear regression. the approach was first successfully applied to problems in astronomy. linear regression is used for predicting quantitative values such as an individual s salary. in order to predict qualitative values such as whether a patient survives or dies or whether the stock market increases or decreases fisher proposed linear discriminant analysis in in the various authors put forth an alternative approach logistic regression. in the early nelder and wedderburn coined the term generalized linear models for an entire class of statistical learning methods that include both linear and logistic regression as special cases. by the end of the many more techniques for learning from data were available. however they were almost exclusively linear methods because fitting non-linear relationships was computationally infeasible at the time. by the computing technology had finally improved sufficiently that non-linear methods were no longer computationally prohibitive. in mid breiman friedman olshen and stone introduced classification and regression trees and were among the first to demonstrate the power of a detailed practical implementation of a method including cross-validation for model selection. hastie and tibshirani coined the term generalized additive models in for a class of non-linear extensions to generalized linear models and also provided a practical software implementation. since that time inspired by the advent of machine learning and other disciplines statistical learning has emerged as a new subfield in statistics focused on supervised and unsupervised modeling and prediction. in recent years progress in statistical learning has been marked by the increasing availability of powerful and relatively user-friendly software such as the popular and freely available r system. this has the potential to continue the transformation of the field from a set of techniques used and developed by statisticians and computer scientists to an essential toolkit for a much broader community. this book the elements of statistical learning by hastie tibshirani and friedman was first published in since that time it has become an important reference on the fundamentals of statistical machine learning. its success derives from its comprehensive and detailed treatment of many important topics in statistical learning as well as the fact that to many upper-level statistics textbooks it is accessible to a wide audience. however the greatest factor behind the success of esl has been its topical nature. at the time of its publication interest in the field of statistical introduction learning was starting to explode. esl provided one of the first accessible and comprehensive introductions to the topic. since esl was first published the field of statistical learning has continued to flourish. the field s expansion has taken two forms. the most obvious growth has involved the development of new and improved statistical learning approaches aimed at answering a range of scientific questions across a number of fields. however the field of statistical learning has also expanded its audience. in the increases in computational power generated a surge of interest in the field from non-statisticians who were eager to use cutting-edge statistical tools to analyze their data. unfortunately the highly technical nature of these approaches meant that the user community remained primarily restricted to experts in statistics computer science and related fields with the training time to understand and implement them. in recent years new and improved software packages have significantly eased the implementation burden for many statistical learning methods. at the same time there has been growing recognition across a number of fields from business to health care to genetics to the social sciences and beyond that statistical learning is a powerful tool with important practical applications. as a result the field has moved from one of primarily academic interest to a mainstream discipline with an enormous potential audience. this trend will surely continue with the increasing availability of enormous quantities of data and the software to analyze it. the purpose of an introduction to statistical learning is to facilitate the transition of statistical learning from an academic to a mainstream field. isl is not intended to replace esl which is a far more comprehensive text both in terms of the number of approaches considered and the depth to which they are explored. we consider esl to be an important companion for professionals graduate degrees in statistics machine learning or related fields who need to understand the technical details behind statistical learning approaches. however the community of users of statistical learning techniques has expanded to include individuals with a wider range of interests and backgrounds. therefore we believe that there is now a place for a less technical and more accessible version of esl. in teaching these topics over the years we have discovered that they are of interest to master s and phd students in fields as disparate as business administration biology and computer science as well as to quantitativelyoriented upper-division undergraduates. it is important for this diverse group to be able to understand the models intuitions and strengths and weaknesses of the various approaches. but for this audience many of the technical details behind statistical learning methods such as optimization algorithms and theoretical properties are not of primary interest. we believe that these students do not need a deep understanding of these aspects in order to become informed users of the various methodologies and introduction in order to contribute to their chosen fields through the use of statistical learning tools. islr is based on the following four premises. many statistical learning methods are relevant and useful in a wide range of academic and non-academic disciplines beyond just the statistical sciences. we believe that many contemporary statistical learning procedures should and will become as widely available and used as is currently the case for classical methods such as linear regression. as a result rather than attempting to consider every possible approach impossible task we have concentrated on presenting the methods that we believe are most widely applicable. statistical learning should not be viewed as a series of black boxes. no single approach will perform well in all possible applications. without understanding all of the cogs inside the box or the interaction between those cogs it is impossible to select the best box. hence we have attempted to carefully describe the model intuition assumptions and trade-offs behind each of the methods that we consider. while it is important to know what job is performed by each cog it is not necessary to have the skills to construct the machine inside the box! thus we have minimized discussion of technical details related to fitting procedures and theoretical properties. we assume that the reader is comfortable with basic mathematical concepts but we do not assume a graduate degree in the mathematical sciences. for instance we have almost completely avoided the use of matrix algebra and it is possible to understand the entire book without a detailed knowledge of matrices and vectors. we presume that the reader is interested in applying statistical learning methods to real-world problems. in order to facilitate this as well as to motivate the techniques discussed we have devoted a section within each chapter to r computer labs. in each lab we walk the reader through a realistic application of the methods considered in that chapter. when we have taught this material in our courses we have allocated roughly one-third of classroom time to working through the labs and we have found them to be extremely useful. many of the less computationally-oriented students who were initially intimidated by r s command level interface got the hang of things over the course of the quarter or semester. we have used r because it is freely available and is powerful enough to implement all of the methods discussed in the book. it also has optional packages that can be downloaded to implement literally thousands of additional methods. most importantly r is the language of choice for academic statisticians and new approaches often become available in introduction r years before they are implemented in commercial packages. however the labs in isl are self-contained and can be skipped if the reader wishes to use a different software package or does not wish to apply the methods discussed to real-world problems. who should read this book? this book is intended for anyone who is interested in using modern statistical methods for modeling and prediction from data. this group includes scientists engineers data analysts or quants but also less technical individuals with degrees in non-quantitative fields such as the social sciences or business. we expect that the reader will have had at least one elementary course in statistics. background in linear regression is also useful though not required since we review the key concepts behind linear regression in chapter the mathematical level of this book is modest and a detailed knowledge of matrix operations is not required. this book provides an introduction to the statistical programming language r. previous exposure to a programming language such as matlab or python is useful but not required. we have successfully taught material at this level to master s and phd students in business computer science biology earth sciences psychology and many other areas of the physical and social sciences. this book could also be appropriate for advanced undergraduates who have already taken a course on linear regression. in the context of a more mathematically rigorous course in which esl serves as the primary textbook isl could be used as a supplementary text for teaching computational aspects of the various approaches. notation and simple matrix algebra choosing notation for a textbook is always a difficult task. for the most part we adopt the same notational conventions as esl. we will use n to represent the number of distinct data points or observations in our sample. we will let p denote the number of variables that are available for use in making predictions. for example the wage data set consists of variables for people so we have n observations and p variables as year age and more. note that throughout this book we indicate variable names using colored font variable name. sex in some examples p might be quite large such as on the order of thousands or even millions this situation arises quite often for example in the analysis of modern biological data or web-based advertising data. introduction in general we will let xij represent the value of the jth variable for the ith observation where i n and j p. throughout this book i will be used to index the samples or observations to n and j will be used to index the variables to p. we let x denote a n p matrix whose jth element is xij. that is x xnp for readers who are unfamiliar with matrices it is useful to visualize x as a spreadsheet of numbers with n rows and p columns. at times we will be interested in the rows of x which we write as xn. here xi is a vector of length p containing the p variable measurements for the ith observation. that is xip xi are by default represented as columns. for example for the wage data xi is a vector of length consisting of year age and other values for the ith individual. at other times we will instead be interested in the columns of x which we write as xp. each is a vector of length n. that is sex xnj xj for example for the wage data contains the n values for year. using this notation the matrix x can be written as x or xp xt xt xt n x introduction the t notation denotes the transpose of a matrix or vector. so for example xt xnp while xip xt i we use yi to denote the ith observation of the variable on which we wish to make predictions such as wage. hence we write the set of all n observations in vector form as yn y then our observed data consists of yn where each xi is a vector of length p. p then xi is simply a scalar. in this text a vector of length n will always be denoted in lower case bold e.g. an a however vectors that are not of length n as feature vectors of length p as in will be denoted in lower case normal font e.g. a. scalars will also be denoted in lower case normal font e.g. a. in the rare cases in which these two uses for lower case normal font lead to ambiguity we will clarify which use is intended. matrices will be denoted using bold capitals such as a. random variables will be denoted using capital normal font e.g. a regardless of their dimensions. occasionally we will want to indicate the dimension of a particular object. to indicate that an object is a scalar we will use the notation a r. to indicate that it is a vector of length k we will use a rk a rn if it is of length n. we will indicate that an object is a r s matrix using a rr s. we have avoided using matrix algebra whenever possible. however in a few instances it becomes too cumbersome to avoid it entirely. in these rare instances it is important to understand the concept of multiplying two matrices. suppose that a rr d and b rd s. then the product introduction of a and b is denoted ab. the jth element of ab is computed by multiplying each element of the ith row of a by the corresponding element d of the jth column of b. that is aikbkj. as an example consider and b a then ab note that this operation produces an r s matrix. it is only possible to compute ab if the number of columns of a is the same as the number of rows of b. organization of this book chapter introduces the basic terminology and concepts behind statistical learning. this chapter also presents the k-nearest neighbor classifier a very simple method that works surprisingly well on many problems. chapters and cover classical linear methods for regression and classification. in particular chapter reviews linear regression the fundamental starting point for all regression methods. in chapter we discuss two of the most important classical classification methods logistic regression and linear discriminant analysis. a central problem in all statistical learning situations involves choosing the best method for a given application. hence in chapter we introduce cross-validation and the bootstrap which can be used to estimate the accuracy of a number of different methods in order to choose the best one. much of the recent research in statistical learning has concentrated on non-linear methods. however linear methods often have advantages over their non-linear competitors in terms of interpretability and sometimes also accuracy. hence in chapter we consider a host of linear methods both classical and more modern which offer potential improvements over standard linear regression. these include stepwise selection ridge regression principal components regression partial least squares and the lasso. the remaining chapters move into the world of non-linear statistical learning. we first introduce in chapter a number of non-linear methods that work well for problems with a single input variable. we then show how these methods can be used to fit non-linear additive models for which there is more than one input. in chapter we investigate tree-based methods including bagging boosting and random forests. support vector machines a set of approaches for performing both linear and non-linear classification introduction are discussed in chapter finally in chapter we consider a setting in which we have input variables but no output variable. in particular we present principal components analysis k-means clustering and hierarchical clustering. at the end of each chapter we present one or more r lab sections in which we systematically work through applications of the various methods discussed in that chapter. these labs demonstrate the strengths and weaknesses of the various approaches and also provide a useful reference for the syntax required to implement the various methods. the reader may choose to work through the labs at his or her own pace or the labs may be the focus of group sessions as part of a classroom environment. within each r lab we present the results that we obtained when we performed the lab at the time of writing this book. however new versions of r are continuously released and over time the packages called in the labs will be updated. therefore in the future it is possible that the results shown in the lab sections may no longer correspond precisely to the results obtained by the reader who performs the labs. as necessary we will post updates to the labs on the book website. we use the symbol to denote sections or exercises that contain more challenging concepts. these can be easily skipped by readers who do not wish to delve as deeply into the material or who lack the mathematical background. data sets used in labs and exercises in this textbook we illustrate statistical learning methods using applications from marketing finance biology and other areas. the islr package available on the book website contains a number of data sets that are required in order to perform the labs and exercises associated with this book. one other data set is contained in the mass library and yet another is part of the base r distribution. table contains a summary of the data sets required to perform the labs and exercises. a couple of these data sets are also available as text files on the book website for use in chapter book website the website for this book is located at www.statlearning.com introduction description gas mileage horsepower and other information for cars. housing values and other information about boston suburbs. information about individuals offered caravan insurance. information about car seat sales in stores. demographic characteristics tuition and more for usa colleges. customer default records for a credit card company. records and salaries for baseball players. gene expression measurements for four cancer types. gene expression measurements for cancer cell lines. sales information for citrus hill and minute maid orange juice. name auto boston caravan carseats college default hitters khan oj portfolio past values of financial assets for use in portfolio allocation. daily percentage returns for sp over a period. smarket usarrests crime statistics per residents in states of usa. wage weekly income survey data for males in central atlantic region of usa. weekly stock market returns for years. table a list of data sets needed to perform the labs and exercises in this textbook. all data sets are available in the islr library with the exception of boston of mass and usarrests of the base r distribution. it contains a number of resources including the r package associated with this book and some additional data sets. acknowledgements a few of the plots in this book were taken from esl figures and all other plots are new to this book. statistical learning what is statistical learning? in order to motivate our study of statistical learning we begin with a simple example. suppose that we are statistical consultants hired by a client to provide advice on how to improve sales of a particular product. the advertising data set consists of the sales of that product in different markets along with advertising budgets for the product in each of those markets for three different media tv radio and newspaper. the data are displayed in figure it is not possible for our client to directly increase sales of the product. on the other hand they can control the advertising expenditure in each of the three media. therefore if we determine that there is an association between advertising and sales then we can instruct our client to adjust advertising budgets thereby indirectly increasing sales. in other words our goal is to develop an accurate model that can be used to predict sales on the basis of the three media budgets. in this setting the advertising budgets are input variables while sales is an output variable. the input variables are typically denoted using the symbol x with a subscript to distinguish them. so might be the tv budget the radio budget and the newspaper budget. the inputs go by different names such as predictors independent variables features or sometimes just variables. the output variable in this case sales is often called the response or dependent variable and is typically denoted using the symbol y throughout this book we will use all of these terms interchangeably. g. james et al. an introduction to statistical learning with applications in r springer texts in statistics doi springer sciencebusiness media new york input variable output variable predictor independent variable feature variable response dependent variable statistical learning l s e a s l s e a s l s e a s tv radio newspaper figure the advertising data set. the plot displays sales in thousands of units as a function of tv radio and newspaper budgets in thousands of dollars for different markets. in each plot we show the simple least squares fit of sales to that variable as described in chapter in other words each blue line represents a simple model that can be used to predict sales using tv radio and newspaper respectively. more generally suppose that we observe a quantitative response y and p different predictors xp. we assume that there is some relationship between y and x xp which can be written in the very general form y f here f is some fixed but unknown function of xp and is a random error term which is independent of x and has mean zero. in this formulation f represents the systematic information that x provides about y as another example consider the left-hand panel of figure a plot of income versus years of education for individuals in the income data set. the plot suggests that one might be able to predict income using years of education. however the function f that connects the input variable to the output variable is in general unknown. in this situation one must estimate f based on the observed points. since income is a simulated data set f is known and is shown by the blue curve in the right-hand panel of figure the vertical lines represent the error terms we note that some of the observations lie above the blue curve and some lie below it overall the errors have approximately mean zero. in general the function f may involve more than one input variable. in figure we plot income as a function of years of education and seniority. here f is a two-dimensional surface that must be estimated based on the observed data. error term systematic what is statistical learning? e m o c n i e m o c n i years of education years of education figure the income data set. left the red dots are the observed values of income tens of thousands of dollars and years of education for individuals. right the blue curve represents the true underlying relationship between income and years of education which is generally unknown is known in this case because the data were simulated. the black lines represent the error associated with each observation. note that some errors are positive an observation lies above the blue curve and some are negative an observation lies below the curve. overall these errors have approximately mean zero. in essence statistical learning refers to a set of approaches for estimating f in this chapter we outline some of the key theoretical concepts that arise in estimating f as well as tools for evaluating the estimates obtained. why estimate f there are two main reasons that we may wish to estimate f prediction and inference. we discuss each in turn. prediction in many situations a set of inputs x are readily available but the output y cannot be easily obtained. in this setting since the error term averages to zero we can predict y using y f where f represents our estimate for f and y represents the resulting prediction for y in this setting f is often treated as a black box in the sense that one is not typically concerned with the exact form of f provided that it yields accurate predictions for y statistical learning i n c o m e ye ars of e d ucatio n seniority figure the plot displays income as a function of years of education and seniority in the income data set. the blue surface represents the true underlying relationship between income and years of education and seniority which is known since the data are simulated. the red dots indicate the observed values of these quantities for individuals. as an example suppose that xp are characteristics of a patient s blood sample that can be easily measured in a lab and y is a variable encoding the patient s risk for a severe adverse reaction to a particular drug. it is natural to seek to predict y using x since we can then avoid giving the drug in question to patients who are at high risk of an adverse reaction that is patients for whom the estimate of y is high. the accuracy of y as a prediction for y depends on two quantities which we will call the reducible error and the irreducible error. in general f will not be a perfect estimate for f and this inaccuracy will introduce some error. this error is reducible because we can potentially improve the accuracy of f by using the most appropriate statistical learning technique to estimate f however even if it were possible to form a perfect estimate for f so that our estimated response took the form y f our prediction would still have some error in it! this is because y is also a function of which by definition cannot be predicted using x. therefore variability associated with also affects the accuracy of our predictions. this is known as the irreducible error because no matter how well we estimate f we cannot reduce the error introduced by why is the irreducible error larger than zero? the quantity may contain unmeasured variables that are useful in predicting y since we don t measure them f cannot use them for its prediction. the quantity may also contain unmeasurable variation. for example the risk of an adverse reaction might vary for a given patient on a given day depending on reducible error irreducible error what is statistical learning? manufacturing variation in the drug itself or the patient s general feeling of well-being on that day. consider a given estimate f and a set of predictors x which yields the prediction y f assume for a moment that both f and x are fixed. then it is easy to show that ey y ef f f var expected value variance reducible irreducible where ey y represents the average or expected value of the squared difference between the predicted and actual value of y and var represents the variance associated with the error term the focus of this book is on techniques for estimating f with the aim of minimizing the reducible error. it is important to keep in mind that the irreducible error will always provide an upper bound on the accuracy of our prediction for y this bound is almost always unknown in practice. inference we are often interested in understanding the way that y is affected as xp change. in this situation we wish to estimate f but our goal is not necessarily to make predictions for y we instead want to understand the relationship between x and y or more specifically to understand how y changes as a function of xp. now f cannot be treated as a black box because we need to know its exact form. in this setting one may be interested in answering the following questions which predictors are associated with the response? it is often the case that only a small fraction of the available predictors are substantially associated with y identifying the few important predictors among a large set of possible variables can be extremely useful depending on the application. what is the relationship between the response and each predictor? some predictors may have a positive relationship with y in the sense that increasing the predictor is associated with increasing values of y other predictors may have the opposite relationship. depending on the complexity of f the relationship between the response and a given predictor may also depend on the values of the other predictors. can the relationship between y and each predictor be adequately summarized using a linear equation or is the relationship more complicated? historically most methods for estimating f have taken a linear form. in some situations such an assumption is reasonable or even desirable. but often the true relationship is more complicated in which case a linear model may not provide an accurate representation of the relationship between the input and output variables. statistical learning in this book we will see a number of examples that fall into the prediction setting the inference setting or a combination of the two. for instance consider a company that is interested in conducting a direct-marketing campaign. the goal is to identify individuals who will respond positively to a mailing based on observations of demographic variables measured on each individual. in this case the demographic variables serve as predictors and response to the marketing campaign positive or negative serves as the outcome. the company is not interested in obtaining a deep understanding of the relationships between each individual predictor and the response instead the company simply wants an accurate model to predict the response using the predictors. this is an example of modeling for prediction. in contrast consider the advertising data illustrated in figure one may be interested in answering questions such as which media contribute to sales? which media generate the biggest boost in sales? or how much increase in sales is associated with a given increase in tv advertising? this situation falls into the inference paradigm. another example involves modeling the brand of a product that a customer might purchase based on variables such as price store location discount levels competition price and so forth. in this situation one might really be most interested in how each of the individual variables affects the probability of purchase. for instance what effect will changing the price of a product have on sales? this is an example of modeling for inference. finally some modeling could be conducted both for prediction and inference. for example in a real estate setting one may seek to relate values of homes to inputs such as crime rate zoning distance from a river air quality schools income level of community size of houses and so forth. in this case one might be interested in how the individual input variables affect the prices that is how much extra will a house be worth if it has a view of the river? this is an inference problem. alternatively one may simply be interested in predicting the value of a home given its characteristics is this house under- or over-valued? this is a prediction problem. depending on whether our ultimate goal is prediction inference or a combination of the two different methods for estimating f may be appropriate. for example linear models allow for relatively simple and interpretable inference but may not yield as accurate predictions as some other approaches. in contrast some of the highly non-linear approaches that we discuss in the later chapters of this book can potentially provide quite accurate predictions for y but this comes at the expense of a less interpretable model for which inference is more challenging. linear model what is statistical learning? how do we estimate f throughout this book we explore many linear and non-linear approaches for estimating f however these methods generally share certain characteristics. we provide an overview of these shared characteristics in this section. we will always assume that we have observed a set of n different data points. for example in figure we observed n data points. these observations are called the training data because we will use these observations to train or teach our method how to estimate f let xij represent the value of the jth predictor or input for observation i where i n and j p. correspondingly let yi represent the response variable for the ith observation. then our training data consist of yn where xi xipt our goal is to apply a statistical learning method to the training data in order to estimate the unknown function f in other words we want to find a function f such that y f for any observation y broadly speaking most statistical learning methods for this task can be characterized as either parametric or non-parametric. we now briefly discuss these two types of approaches. parametric methods parametric methods involve a two-step model-based approach. first we make an assumption about the functional form or shape of f for example one very simple assumption is that f is linear in x f pxp. this is a linear model which will be discussed extensively in chapter once we have assumed that f is linear the problem of estimating f is greatly simplified. instead of having to estimate an entirely arbitrary p-dimensional function f one only needs to estimate the p coefficients p. training data parametric nonparametric after a model has been selected we need a procedure that uses the training data to fit or train the model. in the case of the linear model we need to estimate the parameters p. that is we want to find values of these parameters such that y pxp. fit train the most common approach to fitting the model is referred to as least squares which we discuss in chapter however least squares is one of many possible ways to fit the linear model. in chapter we discuss other approaches for estimating the parameters in least squares the model-based approach just described is referred to as parametric it reduces the problem of estimating f down to one of estimating a set of statistical learning i n c o m e ye ars of e d ucatio n seniority figure a linear model fit by least squares to the income data from figure the observations are shown in red and the yellow plane indicates the least squares fit to the data. parameters. assuming a parametric form for f simplifies the problem of estimating f because it is generally much easier to estimate a set of parameters such as p in the linear model than it is to fit an entirely arbitrary function f the potential disadvantage of a parametric approach is that the model we choose will usually not match the true unknown form of f if the chosen model is too far from the true f then our estimate will be poor. we can try to address this problem by choosing flexible models that can fit many different possible functional forms for f but in general fitting a more flexible model requires estimating a greater number of parameters. these more complex models can lead to a phenomenon known as overfitting the data which essentially means they follow the errors or noise too closely. these issues are discussed throughout this book. figure shows an example of the parametric approach applied to the income data from figure we have fit a linear model of the form income education seniority. since we have assumed a linear relationship between the response and the two predictors the entire fitting problem reduces to estimating and which we do using least squares linear regression. comparing figure to figure we can see that the linear fit given in figure is not quite right the true f has some curvature that is not captured in the linear fit. however the linear fit still appears to do a reasonable job of capturing the positive relationship between years of education and income as well as the flexible overfitting noise what is statistical learning? seniority i n c o m e ars of e d ye ucatio n figure a smooth thin-plate spline fit to the income data from figure is shown in yellow the observations are displayed in red. splines are discussed in chapter slightly less positive relationship between seniority and income. it may be that with such a small number of observations this is the best we can do. non-parametric methods non-parametric methods do not make explicit assumptions about the functional form of f instead they seek an estimate of f that gets as close to the data points as possible without being too rough or wiggly. such approaches can have a major advantage over parametric approaches by avoiding the assumption of a particular functional form for f they have the potential to accurately fit a wider range of possible shapes for f any parametric approach brings with it the possibility that the functional form used to estimate f is very different from the true f in which case the resulting model will not fit the data well. in contrast non-parametric approaches completely avoid this danger since essentially no assumption about the form of f is made. but non-parametric approaches do suffer from a major disadvantage since they do not reduce the problem of estimating f to a small number of parameters a very large number of observations more than is typically needed for a parametric approach is required in order to obtain an accurate estimate for f an example of a non-parametric approach to fitting the income data is shown in figure a thin-plate spline is used to estimate f this approach does not impose any pre-specified model on f it instead attempts to produce an estimate for f that is as close as possible to the observed data subject to the fit that is the yellow surface in figure being thin-plate spline statistical learning i n c o m e ye ars of e d ucatio n seniority figure a rough thin-plate spline fit to the income data from figure this fit makes zero errors on the training data. smooth. in this case the non-parametric fit has produced a remarkably accurate estimate of the true f shown in figure in order to fit a thin-plate spline the data analyst must select a level of smoothness. figure shows the same thin-plate spline fit using a lower level of smoothness allowing for a rougher fit. the resulting estimate fits the observed data perfectly! however the spline fit shown in figure is far more variable than the true function f from figure this is an example of overfitting the data which we discussed previously. it is an undesirable situation because the fit obtained will not yield accurate estimates of the response on new observations that were not part of the original training data set. we discuss methods for choosing the correct amount of smoothness in chapter splines are discussed in chapter as we have seen there are advantages and disadvantages to parametric and non-parametric methods for statistical learning. we explore both types of methods throughout this book. the trade-off between prediction accuracy and model interpretability of the many methods that we examine in this book some are less flexible or more restrictive in the sense that they can produce just a relatively small range of shapes to estimate f for example linear regression is a relatively inflexible approach because it can only generate linear functions such as the lines shown in figure or the plane shown in figure what is statistical learning? h g h i subset selection lasso y t i l i b a t e r p r e t n i w o l low least squares generalized additive models trees bagging boosting support vector machines flexibility high figure a representation of the tradeoff between flexibility and interpretability using different statistical learning methods. in general as the flexibility of a method increases its interpretability decreases. other methods such as the thin plate splines shown in figures and are considerably more flexible because they can generate a much wider range of possible shapes to estimate f one might reasonably ask the following question why would we ever choose to use a more restrictive method instead of a very flexible approach? there are several reasons that we might prefer a more restrictive model. if we are mainly interested in inference then restrictive models are much more interpretable. for instance when inference is the goal the linear model may be a good choice since it will be quite easy to understand the relationship between y and xp. in contrast very flexible approaches such as the splines discussed in chapter and displayed in figures and and the boosting methods discussed in chapter can lead to such complicated estimates of f that it is difficult to understand how any individual predictor is associated with the response. figure provides an illustration of the trade-off between flexibility and interpretability for some of the methods that we cover in this book. least squares linear regression discussed in chapter is relatively inflexible but is quite interpretable. the lasso discussed in chapter relies upon the linear model but uses an alternative fitting procedure for estimating the coefficients p. the new procedure is more restrictive in estimating the coefficients and sets a number of them to exactly zero. hence in this sense the lasso is a less flexible approach than linear regression. it is also more interpretable than linear regression because in the final model the response variable will only be related to a small subset of the predictors namely those with nonzero coefficient estimates. generalized lasso generalized additive model bagging boosting support vector machine statistical learning additive models discussed in chapter instead extend the linear model to allow for certain non-linear relationships. consequently gams are more flexible than linear regression. they are also somewhat less interpretable than linear regression because the relationship between each predictor and the response is now modeled using a curve. finally fully non-linear methods such as bagging boosting and support vector machines with non-linear kernels discussed in chapters and are highly flexible approaches that are harder to interpret. we have established that when inference is the goal there are clear advantages to using simple and relatively inflexible statistical learning methods. in some settings however we are only interested in prediction and the interpretability of the predictive model is simply not of interest. for instance if we seek to develop an algorithm to predict the price of a stock our sole requirement for the algorithm is that it predict accurately interpretability is not a concern. in this setting we might expect that it will be best to use the most flexible model available. surprisingly this is not always the case! we will often obtain more accurate predictions using a less flexible method. this phenomenon which may seem counterintuitive at first glance has to do with the potential for overfitting in highly flexible methods. we saw an example of overfitting in figure we will discuss this very important concept further in section and throughout this book. supervised versus unsupervised learning most statistical learning problems fall into one of two categories supervised or unsupervised. the examples that we have discussed so far in this chapter all fall into the supervised learning domain. for each observation of the predictor measurements xi i n there is an associated response measurement yi. we wish to fit a model that relates the response to the predictors with the aim of accurately predicting the response for future observations or better understanding the relationship between the response and the predictors many classical statistical learning methods such as linear regression and logistic regression as well as more modern approaches such as gam boosting and support vector machines operate in the supervised learning domain. the vast majority of this book is devoted to this setting. in contrast unsupervised learning describes the somewhat more challenging situation in which for every observation i n we observe a vector of measurements xi but no associated response yi. it is not possible to fit a linear regression model since there is no response variable to predict. in this setting we are in some sense working blind the situation is referred to as unsupervised because we lack a response variable that can supervise our analysis. what sort of statistical analysis is supervised unsupervised logistic regression what is statistical learning? figure a clustering data set involving three groups. each group is shown using a different colored symbol. left the three groups are well-separated. in this setting a clustering approach should successfully identify the three groups. right there is some overlap among the groups. now the clustering task is more challenging. possible? we can seek to understand the relationships between the variables or between the observations. one statistical learning tool that we may use in this setting is cluster analysis or clustering. the goal of cluster analysis is to ascertain on the basis of xn whether the observations fall into relatively distinct groups. for example in a market segmentation study we might observe multiple characteristics for potential customers such as zip code family income and shopping habits. we might believe that the customers fall into different groups such as big spenders versus low spenders. if the information about each customer s spending patterns were available then a supervised analysis would be possible. however this information is not available that is we do not know whether each potential customer is a big spender or not. in this setting we can try to cluster the customers on the basis of the variables measured in order to identify distinct groups of potential customers. identifying such groups can be of interest because it might be that the groups differ with respect to some property of interest such as spending habits. figure provides a simple illustration of the clustering problem. we have plotted observations with measurements on two variables and each observation corresponds to one of three distinct groups. for illustrative purposes we have plotted the members of each group using different colors and symbols. however in practice the group memberships are unknown and the goal is to determine the group to which each observation belongs. in the left-hand panel of figure this is a relatively easy task because the groups are well-separated. in contrast the right-hand panel illustrates a more challenging problem in which there is some overlap cluster analysis statistical learning between the groups. a clustering method could not be expected to assign all of the overlapping points to their correct group green or orange. in the examples shown in figure there are only two variables and so one can simply visually inspect the scatterplots of the observations in order to identify clusters. however in practice we often encounter data sets that contain many more than two variables. in this case we cannot easily plot the observations. for instance if there are p variables in our data set then pp distinct scatterplots can be made and visual inspection is simply not a viable way to identify clusters. for this reason automated clustering methods are important. we discuss clustering and other unsupervised learning approaches in chapter many problems fall naturally into the supervised or unsupervised learning paradigms. however sometimes the question of whether an analysis should be considered supervised or unsupervised is less clear-cut. for instance suppose that we have a set of n observations. for m of the observations where m n we have both predictor measurements and a response measurement. for the remaining n m observations we have predictor measurements but no response measurement. such a scenario can arise if the predictors can be measured relatively cheaply but the corresponding responses are much more expensive to collect. we refer to this setting as a semi-supervised learning problem. in this setting we wish to use a statistical learning method that can incorporate the m observations for which response measurements are available as well as the n m observations for which they are not. although this is an interesting topic it is beyond the scope of this book. semisupervised learning regression versus classification problems variables can be characterized as either quantitative or qualitative known as categorical. quantitative variables take on numerical values. examples include a person s age height or income the value of a house and the price of a stock. in contrast qualitative variables take on values in one of k different classes or categories. examples of qualitative variables include a person s gender or female the brand of product purchased a b or c whether a person defaults on a debt or no or a cancer diagnosis myelogenous leukemia acute lymphoblastic leukemia or no leukemia. we tend to refer to problems with a quantitative response as regression problems while those involving a qualitative response are often referred to as classification problems. however the distinction is not always that crisp. least squares linear regression is used with a quantitative response whereas logistic regression is typically used with a qualitative or binary response. as such it is often used as a classification method. but since it estimates class probabilities it can be thought of as a regression quantitative qualitative categorical class regression classification binary assessing model accuracy method as well. some statistical methods such as k-nearest neighbors and and boosting can be used in the case of either quantitative or qualitative responses. we tend to select statistical learning methods on the basis of whether the response is quantitative or qualitative i.e. we might use linear regression when quantitative and logistic regression when qualitative. however whether the predictors are qualitative or quantitative is generally considered less important. most of the statistical learning methods discussed in this book can be applied regardless of the predictor variable type provided that any qualitative predictors are properly coded before the analysis is performed. this is discussed in chapter assessing model accuracy one of the key aims of this book is to introduce the reader to a wide range of statistical learning methods that extend far beyond the standard linear regression approach. why is it necessary to introduce so many different statistical learning approaches rather than just a single best method? there is no free lunch in statistics no one method dominates all others over all possible data sets. on a particular data set one specific method may work best but some other method may work better on a similar but different data set. hence it is an important task to decide for any given set of data which method produces the best results. selecting the best approach can be one of the most challenging parts of performing statistical learning in practice. in this section we discuss some of the most important concepts that arise in selecting a statistical learning procedure for a specific data set. as the book progresses we will explain how the concepts presented here can be applied in practice. measuring the quality of fit in order to evaluate the performance of a statistical learning method on a given data set we need some way to measure how well its predictions actually match the observed data. that is we need to quantify the extent to which the predicted response value for a given observation is close to the true response value for that observation. in the regression setting the most commonly-used measure is the mean squared error given by mean m se n f squared error statistical learning where f is the prediction that f gives for the ith observation. the mse will be small if the predicted responses are very close to the true responses and will be large if for some of the observations the predicted and true responses differ substantially. the mse in is computed using the training data that was used to fit the model and so should more accurately be referred to as the training mse. but in general we do not really care how well the method works on the training data. rather we are interested in the accuracy of the predictions that we obtain when we apply our method to previously unseen test data. why is this what we care about? suppose that we are interested in developing an algorithm to predict a stock s price based on previous stock returns. we can train the method using stock returns from the past months. but we don t really care how well our method predicts last week s stock price. we instead care about how well it will predict tomorrow s price or next month s price. on a similar note suppose that we have clinical measurements weight blood pressure height age family history of disease for a number of patients as well as information about whether each patient has diabetes. we can use these patients to train a statistical learning method to predict risk of diabetes based on clinical measurements. in practice we want this method to accurately predict diabetes risk for future patients based on their clinical measurements. we are not very interested in whether or not the method accurately predicts diabetes risk for patients used to train the model since we already know which of those patients have diabetes. to state it more mathematically suppose that we fit our statistical learn ing method on our training observations yn and we obtain the estimate f we can then compute f f f if these are approximately equal to yn then the training mse given by is small. however we are really not interested in whether f yi instead we want to know whether f is approximately equal to where is a previously unseen test observation not used to train the statistical learning method. we want to choose the method that gives the lowest test mse as opposed to the lowest training mse. in other words if we had a large number of test observations we could compute f the average squared prediction error for these test observations we d like to select the model for which the average of this quantity the test mse is as small as possible. how can we go about trying to select a method that minimizes the test mse? in some settings we may have a test data set available that is we may have access to a set of observations that were not used to train the statistical learning method. we can then simply evaluate on the test observations and select the learning method for which the test mse is training mse test data test mse assessing model accuracy y r o r r e d e r a u q s n a e m x flexibility figure left data simulated from f shown in black. three estimates of f are shown the linear regression line curve and two smoothing spline fits and green curves. right training mse curve test mse curve and minimum possible test mse over all methods line. squares represent the training and test mses for the three fits shown in the left-hand panel. smallest. but what if no test observations are available? in that case one might imagine simply selecting a statistical learning method that minimizes the training mse this seems like it might be a sensible approach since the training mse and the test mse appear to be closely related. unfortunately there is a fundamental problem with this strategy there is no guarantee that the method with the lowest training mse will also have the lowest test mse. roughly speaking the problem is that many statistical methods specifically estimate coefficients so as to minimize the training set mse. for these methods the training set mse can be quite small but the test mse is often much larger. figure illustrates this phenomenon on a simple example. in the lefthand panel of figure we have generated observations from with the true f given by the black curve. the orange blue and green curves illustrate three possible estimates for f obtained using methods with increasing levels of flexibility. the orange line is the linear regression fit which is relatively inflexible. the blue and green curves were produced using smoothing splines discussed in chapter with different levels of smoothness. it is clear that as the level of flexibility increases the curves fit the observed data more closely. the green curve is the most flexible and matches the data very well however we observe that it fits the true f in black poorly because it is too wiggly. by adjusting the level of flexibility of the smoothing spline fit we can produce many different fits to this data. smoothing spline degrees of freedom statistical learning we now move on to the right-hand panel of figure the grey curve displays the average training mse as a function of flexibility or more formally the degrees of freedom for a number of smoothing splines. the degrees of freedom is a quantity that summarizes the flexibility of a curve it is discussed more fully in chapter the orange blue and green squares indicate the mses associated with the corresponding curves in the lefthand panel. a more restricted and hence smoother curve has fewer degrees of freedom than a wiggly curve note that in figure linear regression is at the most restrictive end with two degrees of freedom. the training mse declines monotonically as flexibility increases. in this example the true f is non-linear and so the orange linear fit is not flexible enough to estimate f well. the green curve has the lowest training mse of all three methods since it corresponds to the most flexible of the three curves fit in the left-hand panel. in this example we know the true function f and so we can also compute the test mse over a very large test set as a function of flexibility. course in general f is unknown so this will not be possible. the test mse is displayed using the red curve in the right-hand panel of figure as with the training mse the test mse initially declines as the level of flexibility increases. however at some point the test mse levels off and then starts to increase again. consequently the orange and green curves both have high test mse. the blue curve minimizes the test mse which should not be surprising given that visually it appears to estimate f the best in the left-hand panel of figure the horizontal dashed line indicates var the irreducible error in which corresponds to the lowest achievable test mse among all possible methods. hence the smoothing spline represented by the blue curve is close to optimal. in the right-hand panel of figure as the flexibility of the statistical learning method increases we observe a monotone decrease in the training mse and a u-shape in the test mse. this is a fundamental property of statistical learning that holds regardless of the particular data set at hand and regardless of the statistical method being used. as model flexibility increases training mse will decrease but the test mse may not. when a given method yields a small training mse but a large test mse we are said to be overfitting the data. this happens because our statistical learning procedure is working too hard to find patterns in the training data and may be picking up some patterns that are just caused by random chance rather than by true properties of the unknown function f when we overfit the training data the test mse will be very large because the supposed patterns that the method found in the training data simply don t exist in the test data. note that regardless of whether or not overfitting has occurred we almost always expect the training mse to be smaller than the test mse because most statistical learning methods either directly or indirectly seek to minimize the training mse. overfitting refers specifically to the case in which a less flexible model would have yielded a smaller test mse. assessing model accuracy y r o r r e d e r a u q s n a e m x flexibility figure details are as in figure using a different true f that is much closer to linear. in this setting linear regression provides a very good fit to the data. figure provides another example in which the true f is approximately linear. again we observe that the training mse decreases monotonically as the model flexibility increases and that there is a u-shape in the test mse. however because the truth is close to linear the test mse only decreases slightly before increasing again so that the orange least squares fit is substantially better than the highly flexible green curve. finally figure displays an example in which f is highly non-linear. the training and test mse curves still exhibit the same general patterns but now there is a rapid decrease in both curves before the test mse starts to increase slowly. in practice one can usually compute the training mse with relative ease but estimating test mse is considerably more difficult because usually no test data are available. as the previous three examples illustrate the flexibility level corresponding to the model with the minimal test mse can vary considerably among data sets. throughout this book we discuss a variety of approaches that can be used in practice to estimate this minimum point. one important method is cross-validation which is a crossmethod for estimating test mse using the training data. validation the bias-variance trade-off the u-shape observed in the test mse curves turns out to be the result of two competing properties of statistical learning methods. though the mathematical proof is beyond the scope of this book it is possible to show that the expected test mse for a given value can statistical learning y r o r r e d e r a u q s n a e m x flexibility figure details are as in figure using a different f that is far from linear. in this setting linear regression provides a very poor fit to the data. always be decomposed into the sum of three fundamental quantities the variance of f the squared bias of f and the variance of the error terms that is var f f var. e f f here the notation e defines the expected test mse and refers to the average test mse that we would obtain if we repeatedly estimated f using a large number of training sets and tested each at the overall f over all expected test mse can be computed by averaging e possible values of in the test set. equation tells us that in order to minimize the expected test error we need to select a statistical learning method that simultaneously achieves low variance and low bias. note that variance is inherently a nonnegative quantity and squared bias is also nonnegative. hence we see that the expected test mse can never lie below var the irreducible error from what do we mean by the variance and bias of a statistical learning method? variance refers to the amount by which f would change if we estimated it using a different training data set. since the training data are used to fit the statistical learning method different training data sets will result in a different f but ideally the estimate for f should not vary too much between training sets. however if a method has high variance then small changes in the training data can result in large changes in f in general more flexible statistical methods have higher variance. consider the variance bias expected test mse assessing model accuracy green and orange curves in figure the flexible green curve is following the observations very closely. it has high variance because changing any one of these data points may cause the estimate f to change considerably. in contrast the orange least squares line is relatively inflexible and has low variance because moving any single observation will likely cause only a small shift in the position of the line. on the other hand bias refers to the error that is introduced by approximating a real-life problem which may be extremely complicated by a much simpler model. for example linear regression assumes that there is a linear relationship between y and xp. it is unlikely that any real-life problem truly has such a simple linear relationship and so performing linear regression will undoubtedly result in some bias in the estimate of f in figure the true f is substantially non-linear so no matter how many training observations we are given it will not be possible to produce an accurate estimate using linear regression. in other words linear regression results in high bias in this example. however in figure the true f is very close to linear and so given enough data it should be possible for linear regression to produce an accurate estimate. generally more flexible methods result in less bias. as a general rule as we use more flexible methods the variance will increase and the bias will decrease. the relative rate of change of these two quantities determines whether the test mse increases or decreases. as we increase the flexibility of a class of methods the bias tends to initially decrease faster than the variance increases. consequently the expected test mse declines. however at some point increasing flexibility has little impact on the bias but starts to significantly increase the variance. when this happens the test mse increases. note that we observed this pattern of decreasing test mse followed by increasing test mse in the right-hand panels of figures the three plots in figure illustrate equation for the examples in figures in each case the blue solid curve represents the squared bias for different levels of flexibility while the orange curve corresponds to the variance. the horizontal dashed line represents var the irreducible error. finally the red curve corresponding to the test set mse is the sum of these three quantities. in all three cases the variance increases and the bias decreases as the method s flexibility increases. however the flexibility level corresponding to the optimal test mse differs considerably among the three data sets because the squared bias and variance change at different rates in each of the data sets. in the left-hand panel of figure the bias initially decreases rapidly resulting in an initial sharp decrease in the expected test mse. on the other hand in the center panel of figure the true f is close to linear so there is only a small decrease in bias as flexibility increases and the test mse only declines slightly before increasing rapidly as the variance increases. finally in the right-hand panel of figure as flexibility increases there is a dramatic decline in bias because statistical learning mse bias var flexibility flexibility flexibility figure squared bias curve variance curve var line and test mse curve for the three data sets in figures the vertical dotted line indicates the flexibility level corresponding to the smallest test mse. the true f is very non-linear. there is also very little increase in variance as flexibility increases. consequently the test mse declines substantially before experiencing a small increase as model flexibility increases. the relationship between bias variance and test set mse given in equation and displayed in figure is referred to as the bias-variance trade-off. good test set performance of a statistical learning method requires low variance as well as low squared bias. this is referred to as a trade-off because it is easy to obtain a method with extremely low bias but high variance instance by drawing a curve that passes through every single training observation or a method with very low variance but high bias fitting a horizontal line to the data. the challenge lies in finding a method for which both the variance and the squared bias are low. this trade-off is one of the most important recurring themes in this book. in a real-life situation in which f is unobserved it is generally not possible to explicitly compute the test mse bias or variance for a statistical learning method. nevertheless one should always keep the bias-variance trade-off in mind. in this book we explore methods that are extremely flexible and hence can essentially eliminate bias. however this does not guarantee that they will outperform a much simpler method such as linear regression. to take an extreme example suppose that the true f is linear. in this situation linear regression will have no bias making it very hard for a more flexible method to compete. in contrast if the true f is highly non-linear and we have an ample number of training observations then we may do better using a highly flexible approach as in figure in chapter we discuss cross-validation which is a way to estimate the test mse using the training data. bias-variance trade-off assessing model accuracy the classification setting thus far our discussion of model accuracy has been focused on the regression setting. but many of the concepts that we have encountered such as the bias-variance trade-off transfer over to the classification setting with only some modifications due to the fact that yi is no longer numerical. suppose that we seek to estimate f on the basis of training observations yn where now yn are qualitative. the most common approach for quantifying the accuracy of our estimate f is the training error rate the proportion of mistakes that are made if we apply our estimate f to the training observations n iyi yi. here yi is the predicted class label for the ith observation using f and iyi yi is an indicator variable that equals if yi yi and zero if yi yi. if iyi yi then the ith observation was classified correctly by our classification method otherwise it was misclassified. hence equation computes the fraction of incorrect classifications. equation is referred to as the training error rate because it is computed based on the data that was used to train our classifier. as in the regression setting we are most interested in the error rates that result from applying our classifier to test observations that were not used in training. the test error rate associated with a set of test observations of the form is given by ave error rate indicator variable training error test error where is the predicted class label that results from applying the classifier to the test observation with predictor a good classifier is one for which the test error is smallest. the bayes classifier it is possible to show the proof is outside of the scope of this book that the test error rate given in is minimized on average by a very simple classifier that assigns each observation to the most likely class given its predictor values. in other words we should simply assign a test observation with predictor vector to the class j for which pry jx is largest. note that is a conditional probability it is the probability that y j given the observed predictor vector this very simple classifier is called the bayes classifier. in a two-class problem where there are only two possible response values say class or class the bayes classifier conditional probability bayes classifier statistical learning o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o oo o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o figure a simulated data set consisting of observations in each of two groups indicated in blue and in orange. the purple dashed line represents the bayes decision boundary. the orange background grid indicates the region in which a test observation will be assigned to the orange class and the blue background grid indicates the region in which a test observation will be assigned to the blue class. corresponds to predicting class one if pry and class two otherwise. figure provides an example using a simulated data set in a twodimensional space consisting of predictors and the orange and blue circles correspond to training observations that belong to two different classes. for each value of and there is a different probability of the response being orange or blue. since this is simulated data we know how the data were generated and we can calculate the conditional probabilities for each value of and the orange shaded region reflects the set of points for which pry orangex is greater than while the blue shaded region indicates the set of points for which the probability is below the purple dashed line represents the points where the probability is exactly this is called the bayes decision boundary. the bayes classifier s prediction is determined by the bayes decision boundary an observation that falls on the orange side of the boundary will be assigned to the orange class and similarly an observation on the blue side of the boundary will be assigned to the blue class. the bayes classifier produces the lowest possible test error rate called the bayes error rate. since the bayes classifier will always choose the class for which is largest the error rate at x will be maxj pry jx in general the overall bayes error rate is given by max pry jx e j bayes decision boundary bayes error rate k-nearest neighbors assessing model accuracy where the expectation averages the probability over all possible values of x. for our simulated data the bayes error rate is it is greater than zero because the classes overlap in the true population so maxj pry jx for some values of the bayes error rate is analogous to the irreducible error discussed earlier. k-nearest neighbors in theory we would always like to predict qualitative responses using the bayes classifier. but for real data we do not know the conditional distribution of y given x and so computing the bayes classifier is impossible. therefore the bayes classifier serves as an unattainable gold standard against which to compare other methods. many approaches attempt to estimate the conditional distribution of y given x and then classify a given observation to the class with highest estimated probability. one such method is the k-nearest neighbors classifier. given a positive integer k and a test observation the knn classifier first identifies the k points in the training data that are closest to represented by points in whose response values equal j it then estimates the conditional probability for class j as the fraction of pry jx i k iyi j. finally knn applies bayes rule and classifies the test observation to the class with the largest probability. figure provides an illustrative example of the knn approach. in the left-hand panel we have plotted a small training data set consisting of six blue and six orange observations. our goal is to make a prediction for the point labeled by the black cross. suppose that we choose k then knn will first identify the three observations that are closest to the cross. this neighborhood is shown as a circle. it consists of two blue points and one orange point resulting in estimated probabilities of for the blue class and for the orange class. hence knn will predict that the black cross belongs to the blue class. in the right-hand panel of figure we have applied the knn approach with k at all of the possible values for and and have drawn in the corresponding knn decision boundary. despite the fact that it is a very simple approach knn can often produce classifiers that are surprisingly close to the optimal bayes classifier. figure displays the knn decision boundary using k when applied to the larger simulated data set from figure notice that even though the true distribution is not known by the knn classifier the knn decision boundary is very close to that of the bayes classifier. the test error rate using knn is which is close to the bayes error rate of statistical learning o o o o o o o o o o o o o o o o o o o o o o o o figure the knn approach using k is illustrated in a simple situation with six blue observations and six orange observations. left a test observation at which a predicted class label is desired is shown as a black cross. the three closest points to the test observation are identified and it is predicted that the test observation belongs to the most commonly-occurring class in this case blue. right the knn decision boundary for this example is shown in black. the blue grid indicates the region in which a test observation will be assigned to the blue class and the orange grid indicates the region in which it will be assigned to the orange class. the choice of k has a drastic effect on the knn classifier obtained. figure displays two knn fits to the simulated data from figure using k and k when k the decision boundary is overly flexible and finds patterns in the data that don t correspond to the bayes decision boundary. this corresponds to a classifier that has low bias but very high variance. as k grows the method becomes less flexible and produces a decision boundary that is close to linear. this corresponds to a low-variance but high-bias classifier. on this simulated data set neither k nor k give good predictions they have test error rates of and respectively. just as in the regression setting there is not a strong relationship between the training error rate and the test error rate. with k the knn training error rate is but the test error rate may be quite high. in general as we use more flexible classification methods the training error rate will decline but the test error rate may not. in figure we have plotted the knn test and training errors as a function of as increases the method becomes more flexible. as in the regression setting the training error rate consistently declines as the flexibility increases. however the test error exhibits a characteristic u-shape declining at first a minimum at approximately k before increasing again when the method becomes excessively flexible and overfits. assessing model accuracy knn o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o oo o o o o o o o o o o o o o o o o oo o o o o o o o o o o o oo o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o figure the black curve indicates the knn decision boundary on the data from figure using k the bayes decision boundary is shown as a purple dashed line. the knn and bayes decision boundaries are very similar. knn knn o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o figure a comparison of the knn decision boundaries black curves obtained using k and k on the data from figure with k the decision boundary is overly flexible while with k it is not sufficiently flexible. the bayes decision boundary is shown as a purple dashed line. statistical learning e t a r r o r r e training errors test errors figure the knn training error rate observations and test error rate observations on the data from figure as the level of flexibility using increases or equivalently as the number of neighbors k decreases. the black dashed line indicates the bayes error rate. the jumpiness of the curves is due to the small size of the training data set. in both the regression and classification settings choosing the correct level of flexibility is critical to the success of any statistical learning method. the bias-variance tradeoff and the resulting u-shape in the test error can make this a difficult task. in chapter we return to this topic and discuss various methods for estimating test error rates and thereby choosing the optimal level of flexibility for a given statistical learning method. lab introduction to r in this lab we will introduce some simple r commands. the best way to learn a new language is to try out the commands. r can be downloaded from httpcran.r-project.org basic commands r uses functions to perform operations. to run a function called funcname we type where the inputs arguments function argument lab introduction to r and tell r how to run the function. a function can have any number of inputs. for example to create a vector of numbers we use the function c concatenate. any numbers inside the parentheses are joined together. the following command instructs r to join together the numbers and and to save them as a vector named x. when we type x it gives us back the vector. c vector x c x note that the is not part of the command rather it is printed by r to indicate that it is ready for another command to be entered. we can also save things using rather than x c x y c hitting the up arrow multiple times will display the previous commands which can then be edited. this is useful since one often wishes to repeat a similar command. in addition typing will always cause r to open a new help file window with additional information about the function funcname. we can tell r to add two sets of numbers together. it will then add the first number from x to the first number from y and so on. however x and y should be the same length. we can check their length using the length function. length length x length y x y the ls function allows us to look at a list of all of the objects such as data and functions that we have saved so far. the rm function can be used to delete any that we don t want. ls rm ls x y rm y ls character it s also possible to remove all objects at once rm list ls statistical learning the matrix function can be used to create a matrix of numbers. before we use the matrix function we can learn more about it matrix matrix the help file reveals that the matrix function takes a number of inputs but for now we focus on the first three the data entries in the matrix the number of rows and the number of columns. first we create a simple matrix. x matrix data c nrow ncol x note that we could just as well omit typing data nrow and ncol in the matrix command above that is we could just type x matrix c and this would have the same effect. however it can sometimes be useful to specify the names of the arguments passed in since otherwise r will assume that the function arguments are passed into the function in the same order that is given in the function s help file. as this example illustrates by default r creates matrices by successively filling in columns. alternatively the byrowtrue option can be used to populate the matrix in order of the rows. matrix c byrow true notice that in the above command we did not assign the matrix to a value such as x. in this case the matrix is printed to the screen but is not saved for future calculations. the sqrt function returns the square root of each element of a vector or matrix. the command raises each element of x to the power any powers are possible including fractional or negative powers. sqrt sqrt x x the rnorm function generates a vector of random normal variables with first argument n the sample size. each time we call this function we will get a different answer. here we create two correlated sets of numbers x and y and use the cor function to compute the correlation between them. rnorm cor lab introduction to r x rnorm y x rnorm mean sd cor x y by default rnorm creates standard normal random variables with a mean of and a standard deviation of however the mean and standard deviation can be altered using the mean and sd arguments as illustrated above. sometimes we want our code to reproduce the exact same set of random numbers we can use the set.seed function to do this. the set.seed function takes an integer argument. set.seed set seed rnorm we use set.seed throughout the labs whenever we perform calculations involving random quantities. in general this should allow the user to reproduce our results. however it should be noted that as new versions of r become available it is possible that some small discrepancies may form between the book and the output from r. the mean and var functions can be used to compute the mean and variance of a vector of numbers. applying sqrt to the output of var will give the standard deviation. or we can simply use the sd function. mean var sd set seed y rnorm mean y var y sqrt var y sd y graphics the plot function is the primary way to plot data in r. for instance plotxy produces a scatterplot of the numbers in x versus the numbers in y. there are many additional options that can be passed in to the plot function. for example passing in the argument xlab will result in a label on the x-axis. to find out more information about the plot function type plot x rnorm y rnorm plot y plot xlab this is the x axis ylab this is the y axis main plot of x vs y statistical learning we will often want to save the output of an r plot. the command that we use to do this will depend on the file type that we would like to create. for instance to create a pdf we use the pdf function and to create a jpeg we use the jpeg function. pdf jpeg pdf figure pdf plot col green dev off null device the function dev.off indicates to r that we are done creating the plot. alternatively we can simply copy the plot window and paste it into an appropriate file type such as a word document. the function seq can be used to create a sequence of numbers. for instance seqab makes a vector of integers between a and b. there are many other options for instance makes a sequence of numbers that are equally spaced between and typing is a shorthand for for integer arguments. dev.off seq x seq x x x x seq pi pi length we will now create some more sophisticated plots. the contour function produces a contour plot in order to represent three-dimensional data it is like a topographical map. it takes three arguments contour contour plot a vector of the x values first dimension a vector of the y values second dimension and a matrix whose elements correspond to the z value third dimen sion for each pair of coordinates. as with the plot function there are many other inputs that can be used to fine-tune the output of the contour function. to learn more about these take a look at the help file by typing y x f outer function y cos y x contour f contour nlevels add t fa f t f contour fa nlevels the image function works the same way as contour except that it produces a color-coded plot whose colors depend on the z value. this is image lab introduction to r known as a heatmap and is sometimes used to plot temperature in weather forecasts. alternatively persp can be used to produce a three-dimensional plot. the arguments theta and phi control the angles at which the plot is viewed. heatmap persp image fa persp fa persp fa theta persp fa theta phi persp fa theta phi persp fa theta phi indexing data we often wish to examine part of a set of data. suppose that our data is stored in the matrix a. a matrix a then typing a will select the element corresponding to the second row and the third column. the first number after the open-bracket symbol always refers to the row and the second number always refers to the column. we can also select multiple rows and columns at a time by providing vectors as the indices. a c c a a a statistical learning the last two examples include either no index for the columns or no index for the rows. these indicate that r should include all columns or all rows respectively. r treats a single row or column of a matrix as a vector. a the use of a negative sign in the index tells r to keep all rows or columns except those indicated in the index. a c a c the dim function outputs the number of rows followed by the number of columns of a given matrix. dim dim a loading data for most analyses the first step involves importing a data set into r. the read.table function is one of the primary ways to do this. the help file contains details about how to use this function. we can use the function write.table to export data. before attempting to load a data set we must make sure that r knows to search for the data in the proper directory. for example on a windows system one could select the directory using the change dir. option under the file menu. however the details of how to do this depend on the operating system windows mac unix that is being used and so we do not give further details here. we begin by loading in the auto data set. this data is part of the islr library discuss libraries in chapter but to illustrate the read.table function we load it now from a text file. the following command will load the auto.data file into r and store it as an object called auto in a format referred to as a data frame. text file can be obtained from this book s website. once the data has been loaded the fix function can be used to view it in a spreadsheet like window. however the window must be closed before further r commands can be entered. read.table write. table data frame auto read table auto data fix auto lab introduction to r note that auto.data is simply a text file which you could alternatively open on your computer using a standard text editor. it is often a good idea to view a data set using a text editor or other software such as excel before loading it into r. this particular data set has not been loaded correctly because r has assumed that the variable names are part of the data and so has included them in the first row. the data set also includes a number of missing observations indicated by a question mark missing values are a common occurrence in real data sets. using the option headert headertrue in the read.table function tells r that the first line of the file contains the variable names and using the option na.strings tells r that any time it sees a particular character or set of characters as a question mark it should be treated as a missing element of the data matrix. auto read table auto data header na strings fix auto excel is a common-format data storage program. an easy way to load such data into r is to save it as a csv separated value file and then use the read.csv function to load it in. auto read csv auto csv header na strings fix auto dim auto auto the dim function tells us that the data has observations or rows and nine variables or columns. there are various ways to deal with the missing data. in this case only five of the rows contain missing observations and so we choose to use the na.omit function to simply remove these rows. auto na omit auto dim auto once the data are loaded correctly we can use names to check the variable names. names auto mpg weight name cylinders a c c e l e r a t i o n year d i s p l a c e m e n t horsepower origin dim na.omit names additional graphical and numerical summaries we can use the plot function to produce scatterplots of the quantitative variables. however simply typing the variable names will produce an error message because r does not know to look in the auto data set for those variables. scatterplot statistical learning plot cylinders mpg error in plot cylinders mpg object cylinders not found to refer to a variable we must type the data set and the variable name joined with a symbol. alternatively we can use the attach function in order to tell r to make the variables in this data frame available by name. attach plot autocylinders autompg attach auto plot cylinders mpg the cylinders variable is stored as a numeric vector so r has treated it as quantitative. however since there are only a small number of possible values for cylinders one may prefer to treat it as a qualitative variable. the as.factor function converts quantitative variables into qualitative variables. as.factor cylinders as factor cylinders if the variable plotted on the x-axis is categorial then boxplots will automatically be produced by the plot function. as usual a number of options can be specified in order to customize the plots. boxplot plot cylinders mpg plot cylinders mpg col red plot cylinders mpg col red varwidth t plot cylinders mpg col red varwidth horizontal t plot cylinders mpg col red varwidth xlab cylinders ylab mpg the hist function can be used to plot a histogram. note that has the same effect as colred. hist mpg hist mpg col hist mpg col breaks hist histogram the pairs function creates a scatterplot matrix i.e. a scatterplot for every pair of variables for any given data set. we can also produce scatterplots for just a subset of the variables. scatterplot matrix pairs auto pairs mpg d i s p l a c e m e n t horsepowe r weight acceleration auto in conjunction with the plot function identify provides a useful interactive method for identifying the value for a particular variable for points on a plot. we pass in three arguments to identify the x-axis variable the y-axis variable and the variable whose values we would like to see printed for each point. then clicking on a given point in the plot will cause r to print the value of the variable of interest. right-clicking on the plot will exit the identify function on a mac. the numbers printed under the identify function correspond to the rows for the selected points. identify plot horsepower mpg identify horsepower mpg name lab introduction to r the summary function produces a numerical summary of each variable in a particular data set. summary summary auto mpg min st qu median mean rd qu max horsepower min st qu median mean rd qu max cylinders min st qu median mean rd qu max d i s p l a c e m e n t min st qu median mean rd qu max weight min st qu median mean rd qu max a c c e l e r a t i o n min st qu median mean rd qu max year origin name min st qu median mean rd qu max min st qu median mean rd qu max amc matador ford pinto toyota corolla amc gremlin amc hornet chevrolet chevette other for qualitative variables such as name r will list the number of observations that fall in each category. we can also produce a summary of just a single variable. summary mpg min st qu median mean rd qu max once we have finished using r we type q in order to shut it down or quit. when exiting r we have the option to save the current workspace so that all objects as data sets that we have created in this r session will be available next time. before exiting r we may want to save a record of all of the commands that we typed in the most recent session this can be accomplished using the savehistory function. next time we enter r we can load that history using the loadhistory function. q workspace savehistory loadhistory statistical learning exercises conceptual for each of parts through indicate whether we would generally expect the performance of a flexible statistical learning method to be better or worse than an inflexible method. justify your answer. the sample size n is extremely large and the number of predic tors p is small. the number of predictors p is extremely large and the number of observations n is small. the relationship between the predictors and response is highly non-linear. the variance of the error terms i.e. var is extremely high. explain whether each scenario is a classification or regression problem and indicate whether we are most interested in inference or prediction. finally provide n and p. we collect a set of data on the top firms in the us. for each firm we record profit number of employees industry and the ceo salary. we are interested in understanding which factors affect ceo salary. we are considering launching a new product and wish to know whether it will be a success or a failure. we collect data on similar products that were previously launched. for each product we have recorded whether it was a success or failure price charged for the product marketing budget competition price and ten other variables. we are interest ed in predicting the change in the usdeuro exchange rate in relation to the weekly changes in the world stock markets. hence we collect weekly data for all of for each week we record the change in the usdeuro the change in the us market the change in the british market and the change in the german market. we now revisit the bias-variance decomposition. provide a sketch of typical bias variance training error test error and bayes irreducible error curves on a single plot as we go from less flexible statistical learning methods towards more flexible approaches. the x-axis should represent exercises the amount of flexibility in the method and the y-axis should represent the values for each curve. there should be five curves. make sure to label each one. explain why each of the five curves has the shape displayed in part you will now think of some real-life applications for statistical learn ing. describe three real-life applications in which classification might be useful. describe the response as well as the predictors. is the goal of each application inference or prediction? explain your answer. describe three real-life applications in which regression might be useful. describe the response as well as the predictors. is the goal of each application inference or prediction? explain your answer. describe three real-life applications in which cluster analysis might be useful. what are the advantages and disadvantages of a very flexible a less flexible approach for regression or classification? under what circumstances might a more flexible approach be preferred to a less flexible approach? when might a less flexible approach be preferred? describe the differences between a parametric and a non-parametric statistical learning approach. what are the advantages of a parametric approach to regression or classification opposed to a nonparametric approach? what are its disadvantages? the table below provides a training data set containing six observa tions three predictors and one qualitative response variable. obs. y red red red green green red suppose we wish to use this data set to make a prediction for y when using k-nearest neighbors. compute the euclidean distance between each observation and the test point statistical learning what is our prediction with k why? what is our prediction with k why? if the bayes decision boundary in this problem is highly nonlinear then would we expect the best value for k to be large or small? why? applied this exercise relates to the college data set which can be found in the file college.csv. it contains a number of variables for different universities and colleges in the us. the variables are private publicprivate indicator apps number of applications received accept number of applicants accepted enroll number of new students enrolled new students from top of high school class new students from top of high school class f.undergrad number of full-time undergraduates p.undergrad number of part-time undergraduates outstate out-of-state tuition room.board room and board costs books estimated book costs personal estimated personal spending phd percent of faculty with ph.d. s terminal percent of faculty with terminal degree s.f.ratio studentfaculty ratio perc.alumni percent of alumni who donate expend instructional expenditure per student grad.rate graduation rate before reading the data into r it can be viewed in excel or a text editor. use the read.csv function to read the data into r. call the loaded data college. make sure that you have the directory set to the correct location for the data. look at the data using the fix function. you should notice that the first column is just the name of each university. we don t really want r to treat this as data. however it may be handy to have these names for later. try the following commands exercises rownames college college fix college you should see that there is now a row.names column with the name of each university recorded. this means that r has given each row a name corresponding to the appropriate university. r will not try to perform calculations on the row names. however we still need to eliminate the first column in the data where the names are stored. try college college fix college now you should see that the first data column is private. note that another column labeled row.names now appears before the private column. however this is not a data column but rather the name that r is giving to each row. i. use the summary function to produce a numerical summary of the variables in the data set. ii. use the pairs function to produce a scatterplot matrix of the first ten columns or variables of the data. recall that you can reference the first ten columns of a matrix a using iii. use the plot function to produce side-by-side boxplots of outstate versus private. iv. create a new qualitative variable called elite by binning the variable. we are going to divide universities into two groups based on whether or not the proportion of students coming from the top of their high school classes exceeds elite rep no nrow college elite pe rc yes elite as factor elite college data frame college elite use the summary function to see how many elite universities there are. now use the plot function to produce side-by-side boxplots of outstate versus elite. v. use the hist function to produce some histograms with differing numbers of bins for a few of the quantitative variables. you may find the command useful it will divide the print window into four regions so that four plots can be made simultaneously. modifying the arguments to this function will divide the screen in other ways. vi. continue exploring the data and provide a brief summary of what you discover. statistical learning this exercise involves the auto data set studied in the lab. make sure that the missing values have been removed from the data. which of the predictors are quantitative and which are quali tative? what is the range of each quantitative predictor? you can an swer this using the range function. what is the mean and standard deviation of each quantitative range predictor? now remove the through observations. what is the range mean and standard deviation of each predictor in the subset of the data that remains? using the full data set investigate the predictors graphically using scatterplots or other tools of your choice. create some plots highlighting the relationships among the predictors. comment on your findings. suppose that we wish to predict gas mileage on the basis of the other variables. do your plots suggest that any of the other variables might be useful in predicting mpg? justify your answer. this exercise involves the boston housing data set. to begin load in the boston data set. the boston data set is part of the mass library in r. library mass now the data set is contained in the object boston. boston read about the data set boston how many rows are in this data set? how many columns? what do the rows and columns represent? make some pairwise scatterplots of the predictors in this data set. describe your findings. are any of the predictors associated with per capita crime rate? if so explain the relationship. do any of the suburbs of boston appear to have particularly high crime rates? tax rates? pupil-teacher ratios? comment on the range of each predictor. how many of the suburbs in this data set bound the charles river? exercises what is the median pupil-teacher ratio among the towns in this data set? which suburb of boston has lowest median value of owneroccupied homes? what are the values of the other predictors for that suburb and how do those values compare to the overall ranges for those predictors? comment on your findings. in this data set how many of the suburbs average more than seven rooms per dwelling? more than eight rooms per dwelling? comment on the suburbs that average more than eight rooms per dwelling. linear regression this chapter is about linear regression a very simple approach for supervised learning. in particular linear regression is a useful tool for predicting a quantitative response. linear regression has been around for a long time and is the topic of innumerable textbooks. though it may seem somewhat dull compared to some of the more modern statistical learning approaches described in later chapters of this book linear regression is still a useful and widely used statistical learning method. moreover it serves as a good jumping-off point for newer approaches as we will see in later chapters many fancy statistical learning approaches can be seen as generalizations or extensions of linear regression. consequently the importance of having a good understanding of linear regression before studying more complex learning methods cannot be overstated. in this chapter we review some of the key ideas underlying the linear regression model as well as the least squares approach that is most commonly used to fit this model. recall the advertising data from chapter figure displays sales thousands of units for a particular product as a function of advertising budgets thousands of dollars for tv radio and newspaper media. suppose that in our role as statistical consultants we are asked to suggest on the basis of this data a marketing plan for next year that will result in high product sales. what information would be useful in order to provide such a recommendation? here are a few important questions that we might seek to address is there a relationship between advertising budget and sales? our first goal should be to determine whether the data provide g. james et al. an introduction to statistical learning with applications in r springer texts in statistics doi springer sciencebusiness media new york linear regression evidence of an association between advertising expenditure and sales. if the evidence is weak then one might argue that no money should be spent on advertising! how strong is the relationship between advertising budget and sales? assuming that there is a relationship between advertising and sales we would like to know the strength of this relationship. in other words given a certain advertising budget can we predict sales with a high level of accuracy? this would be a strong relationship. or is a prediction of sales based on advertising expenditure only slightly better than a random guess? this would be a weak relationship. which media contribute to sales? do all three media tv radio and newspaper contribute to sales or do just one or two of the media contribute? to answer this question we must find a way to separate out the individual effects of each medium when we have spent money on all three media. how accurately can we estimate the effect of each medium on sales? for every dollar spent on advertising in a particular medium by what amount will sales increase? how accurately can we predict this amount of increase? how accurately can we predict future sales? for any given level of television radio or newspaper advertising what is our prediction for sales and what is the accuracy of this prediction? is the relationship linear? if there is approximately a straight-line relationship between advertising expenditure in the various media and sales then linear regression is an appropriate tool. if not then it may still be possible to transform the predictor or the response so that linear regression can be used. is there synergy among the advertising media? perhaps spending on television advertising and on radio advertising results in more sales than allocating to either television or radio individually. in marketing this is known as a synergy effect while in statistics it is called an interaction effect. it turns out that linear regression can be used to answer each of these questions. we will first discuss all of these questions in a general context and then return to them in this specific context in section synergy interaction simple linear regression simple linear regression simple linear regression lives up to its name it is a very straightforward approach for predicting a quantitative response y on the basis of a single predictor variable x. it assumes that there is approximately a linear relationship between x and y mathematically we can write this linear relationship as you might read as is approximately modeled as we will sometimes describe by saying that we are regressing y on x y onto x. for example x may represent tv advertising and y may represent sales. then we can regress sales onto tv by fitting the model y sales tv. simple linear regression in equation and are two unknown constants that represent the intercept and slope terms in the linear model. together and are known as the model coefficients or parameters. once we have used our training data to produce estimates and for the model coefficients we can predict future sales on the basis of a particular value of tv advertising by computing intercept slope coefficient parameter y where y indicates a prediction of y on the basis of x x. here we use a hat symbol to denote the estimated value for an unknown parameter or coefficient or to denote the predicted value of the response. estimating the coefficients in practice and are unknown. so before we can use to make predictions we must use data to estimate the coefficients. let yn represent n observation pairs each of which consists of a measurement of x and a measurement of y in the advertising example this data set consists of the tv advertising budget and product sales in n different markets. that the data are displayed in figure our goal is to obtain coefficient estimates and such that the linear model fits the available data well that is so that yi for i n. in other words we want to find an intercept and a slope such that the resulting line is as close as possible to the n data points. there are a number of ways of measuring closeness. however by far the most common approach involves minimizing the least squares criterion and we take that approach in this chapter. alternative approaches will be considered in chapter least squares linear regression l s e a s tv figure for the advertising data the least squares fit for the regression of sales onto tv is shown. the fit is found by minimizing the sum of squared errors. each grey line segment represents an error and the fit makes a compromise by averaging their squares. in this case a linear fit captures the essence of the relationship although it is somewhat deficient in the left of the plot. let yi be the prediction for y based on the ith value of x. then ei yi yi represents the ith residual this is the difference between the ith observed response value and the ith response value that is predicted by our linear model. we define the residual sum of squares as rss n or equivalently as residual residual sum of squares rss the least squares approach chooses and to minimize the rss. using some calculus one can show that the minimizers are where y n xi are the sample means. in other words defines the least squares coefficient estimates for simple linear regression. yi and x n n n figure displays the simple linear regression fit to the advertising data where and in other words according to n xyi y y x n simple linear regression r s s figure contour and three-dimensional plots of the rss on the advertising data using sales as the response and tv as the predictor. the red dots correspond to the least squares estimates and given by this approximation an additional spent on tv advertising is associated with selling approximately additional units of the product. in figure we have computed rss for a number of values of and using the advertising data with sales as the response and tv as the predictor. in each plot the red dot represents the pair of least squares estimates given by these values clearly minimize the rss. assessing the accuracy of the coefficient estimates recall from that we assume that the true relationship between x and y takes the form y f for some unknown function f where is a mean-zero random error term. if f is to be approximated by a linear function then we can write this relationship as y here is the intercept term that is the expected value of y when x and is the slope the average increase in y associated with a one-unit increase in x. the error term is a catch-all for what we miss with this simple model the true relationship is probably not linear there may be other variables that cause variation in y and there may be measurement error. we typically assume that the error term is independent of x. the model given by defines the population regression line which is the best linear approximation to the true relationship between x and y the least squares regression coefficient estimates characterize the least squares line the left-hand panel of figure displays these assumption of linearity is often a useful working model. however despite what many textbooks might tell us we seldom believe that the true relationship is linear. population regression line least squares line linear regression y y x x figure a simulated data set. left the red line represents the true relationship f which is known as the population regression line. the blue line is the least squares line it is the least squares estimate for f based on the observed data shown in black. right the population regression line is again shown in red and the least squares line in dark blue. in light blue ten least squares lines are shown each computed on the basis of a separate random set of observations. each least squares line is different but on average the least squares lines are quite close to the population regression line. two lines in a simple simulated example. we created random xs and generated corresponding y s from the model y where was generated from a normal distribution with mean zero. the red line in the left-hand panel of figure displays the true relationship f while the blue line is the least squares estimate based on the observed data. the true relationship is generally not known for real data but the least squares line can always be computed using the coefficient estimates given in in other words in real applications we have access to a set of observations from which we can compute the least squares line however the population regression line is unobserved. in the right-hand panel of figure we have generated ten different data sets from the model given by and plotted the corresponding ten least squares lines. notice that different data sets generated from the same true model result in slightly different least squares lines but the unobserved population regression line does not change. at first glance the difference between the population regression line and the least squares line may seem subtle and confusing. we only have one data set and so what does it mean that two different lines describe the relationship between the predictor and the response? fundamentally the simple linear regression concept of these two lines is a natural extension of the standard statistical approach of using information from a sample to estimate characteristics of a large population. for example suppose that we are interested in knowing the population mean of some random variable y unfortunately is unknown but we do have access to n observations from y which we can write as yn and which we can use to estimate a reasonable n estimate is y where y yi is the sample mean. the sample n mean and the population mean are different but in general the sample mean will provide a good estimate of the population mean. in the same way the unknown coefficients and in linear regression define the population regression line. we seek to estimate these unknown coefficients using and given in these coefficient estimates define the least squares line. the analogy between linear regression and estimation of the mean of a random variable is an apt one based on the concept of bias. if we use the sample mean to estimate this estimate is unbiased in the sense that on average we expect to equal what exactly does this mean? it means that on the basis of one particular set of observations yn might overestimate and on the basis of another set of observations might underestimate but if we could average a huge number of estimates of obtained from a huge number of sets of observations then this average would exactly equal hence an unbiased estimator does not systematically over- or under-estimate the true parameter. the property of unbiasedness holds for the least squares coefficient estimates given by as well if we estimate and on the basis of a particular data set then our estimates won t be exactly equal to and but if we could average the estimates obtained over a huge number of data sets then the average of these estimates would be spot on! in fact we can see from the righthand panel of figure that the average of many least squares lines each estimated from a separate data set is pretty close to the true population regression line. we continue the analogy with the estimation of the population mean of a random variable y a natural question is as follows how accurate is the sample mean as an estimate of we have established that the average of s over many data sets will be very close to but that a single estimate may be a substantial underestimate or overestimate of how far off will that single estimate of be? in general we answer this question by computing the standard error of written as se we have the well-known formula bias unbiased standard error var se n linear regression n where is the standard deviation of each of the realizations yi of y roughly speaking the standard error tells us the average amount that this estimate differs from the actual value of equation also tells us how this deviation shrinks with n the more observations we have the smaller the standard error of in a similar vein we can wonder how close and are to the true values and to compute the standard errors associated with and we use the following formulas n n se se where var. for these formulas to be strictly valid we need to assume that the errors for each observation are uncorrelated with common variance this is clearly not true in figure but the formula still turns out to be a good approximation. notice in the formula that se is smaller when the xi are more spread out intuitively we have more leverage to estimate a slope when this is the case. we also see that se would be the same as se if x were zero which case would be equal to y. in general is not known but can be estimated from the data. the estimate of is known as the residual standard error and is given by the formula rssn strictly speaking when is estimated from the rse data we should write to indicate that an estimate has been made but for simplicity of notation we will drop this extra hat standard errors can be used to compute confidence intervals. a confidence interval is defined as a range of values such that with probability the range will contain the true unknown value of the parameter. the range is defined in terms of lower and upper limits computed from the sample of data. for linear regression the confidence interval for approximately takes the form that is there is approximately a chance that the interval se se will contain the true value of similarly a confidence interval for approximately takes the form se se residual standard error confidence interval formula holds provided that the n observations are uncorrelated. for several reasons. equation relies on the assumption that the errors are gaussian. also the factor of in front of the se term will vary slightly depending on the number of observations n in the linear regression. to be precise rather than the number should contain the quantile of a t-distribution with n degrees of freedom. details of how to compute the confidence interval precisely in r will be provided later in this chapter. simple linear regression in the case of the advertising data the confidence interval for is and the confidence interval for is therefore we can conclude that in the absence of any advertising sales will on average fall somewhere between and units. furthermore for each increase in television advertising there will be an average increase in sales of between and units. standard errors can also be used to perform hypothesis tests on the coefficients. the most common hypothesis test involves testing the null hypothesis of there is no relationship between x and y versus the alternative hypothesis ha there is some relationship between x and y hypothesis test null hypothesis alternative hypothesis mathematically this corresponds to testing versus ha since if then the model reduces to y and x is not associated with y to test the null hypothesis we need to determine whether our estimate for is sufficiently far from zero that we can be confident that is non-zero. how far is far enough? this of course depends on the accuracy of that is it depends on se if se is small then even relatively small values of may provide strong evidence that and hence that there is a relationship between x and y in contrast if se is large then must be large in absolute value in order for us to reject the null hypothesis. in practice we compute a t-statistic given by t-statistic se t which measures the number of standard deviations that is away from if there really is no relationship between x and y then we expect that will have a t-distribution with n degrees of freedom. the tdistribution has a bell shape and for values of n greater than approximately it is quite similar to the normal distribution. consequently it is a simple matter to compute the probability of observing any number equal to or larger in absolute value assuming we call this probability the p-value. roughly speaking we interpret the p-value as follows a small p-value indicates that it is unlikely to observe such a substant ial association between the predictor and the response due to chance in the absence of any real association between the predictor and the response. hence if we see a small p-value p-value linear regression then we can infer that there is an association between the predictor and the response. we reject the null hypothesis that is we declare a relationship to exist between x and y if the p-value is small enough. typical p-value cutoffs for rejecting the null hypothesis are or when n these correspond to t-statistics of around and respectively. intercept tv coefficient std. error t-statistic p-value table for the advertising data coefficients of the least squares model for the regression of number of units sold on tv advertising budget. an increase of in the tv advertising budget is associated with an increase in sales by around units that the sales variable is in thousands of units and the tv variable is in thousands of dollars. table provides details of the least squares model for the regression of number of units sold on tv advertising budget for the advertising data. notice that the coefficients for and are very large relative to their standard errors so the t-statistics are also large the probabilities of seeing such values if is true are virtually zero. hence we can conclude that and assessing the accuracy of the model once we have rejected the null hypothesis in favor of the alternative hypothesis it is natural to want to quantify the extent to which the model fits the data. the quality of a linear regression fit is typically assessed using two related quantities the residual standard error and the statistic. table displays the rse the statistic and the f-statistic be described in section for the linear regression of number of units sold on tv advertising budget. residual standard error recall from the model that associated with each observation is an error term due to the presence of these error terms even if we knew the true regression line even if and were known we would not be able to perfectly predict y from x. the rse is an estimate of the standard table a small p-value for the intercept indicates that we can reject the null hypothesis that and a small p-value for tv indicates that we can reject the null hypothesis that rejecting the latter null hypothesis allows us to conclude that there is a relationship between tv and sales. rejecting the former allows us to conclude that in the absence of tv expenditure sales are non-zero. simple linear regression quantity residual standard error f-statistic value table for the advertising data more information about the least squares model for the regression of number of units sold on tv advertising budget. deviation of roughly speaking it is the average amount that the response will deviate from the true regression line. it is computed using the formula rse n rss n note that rss was defined in section and is given by the formula rss in the case of the advertising data we see from the linear regression output in table that the rse is in other words actual sales in each market deviate from the true regression line by approximately units on average. another way to think about this is that even if the model were correct and the true values of the unknown coefficients and were known exactly any prediction of sales on the basis of tv advertising would still be off by about units on average. of course whether or not units is an acceptable prediction error depends on the problem context. in the advertising data set the mean value of sales over all markets is approximately units and so the percentage error is the rse is considered a measure of the lack of fit of the model to the data. if the predictions obtained using the model are very close to the true outcome values that is if yi yi for i n then will be small and we can conclude that the model fits the data very well. on the other hand if yi is very far from yi for one or more observations then the rse may be quite large indicating that the model doesn t fit the data well. statistic the rse provides an absolute measure of lack of fit of the model to the data. but since it is measured in the units of y it is not always clear what constitutes a good rse. the statistic provides an alternative measure of fit. it takes the form of a proportion the proportion of variance explained and so it always takes on a value between and and is independent of the scale of y linear regression to calculate we use the formula tss rss tss rss tss is the total sum of squares and rss is defined where tss in tss measures the total variance in the response y and can be thought of as the amount of variability inherent in the response before the regression is performed. in contrast rss measures the amount of variability that is left unexplained after performing the regression. hence tss rss measures the amount of variability in the response that is explained removed by performing the regression and measures the proportion of variability in y that can be explained using x. an statistic that is close to indicates that a large proportion of the variability in the response has been explained by the regression. a number near indicates that the regression did not explain much of the variability in the response this might occur because the linear model is wrong or the inherent error is high or both. in table the was and so just under two-thirds of the variability in sales is explained by a linear regression on tv. total sum of squares the statistic has an interpretational advantage over the rse since unlike the rse it always lies between and however it can still be challenging to determine what is a good value and in general this will depend on the application. for instance in certain problems in physics we may know that the data truly comes from a linear model with a small residual error. in this case we would expect to see an value that is extremely close to and a substantially smaller value might indicate a serious problem with the experiment in which the data were generated. on the other hand in typical applications in biology psychology marketing and other domains the linear model is at best an extremely rough approximation to the data and residual errors due to other unmeasured factors are often very large. in this setting we would expect only a very small proportion of the variance in the response to be explained by the predictor and an value well below might be more realistic! the statistic is a measure of the linear relationship between x and y recall that correlation defined as corx y n n xyi y n correlation is also a measure of the linear relationship between x and y this suggests that we might be able to use r corx y instead of in order to assess the fit of the linear model. in fact it can be shown that in the simple linear regression setting in other words the squared correlation note that in fact the right-hand side of is the sample correlation thus it would be more correct to write y however we omit the hat for ease of notation. multiple linear regression and the statistic are identical. however in the next section we will discuss the multiple linear regression problem in which we use several predictors simultaneously to predict the response. the concept of correlation between the predictors and the response does not extend automatically to this setting since correlation quantifies the association between a single pair of variables rather than between a larger number of variables. we will see that fills this role. multiple linear regression simple linear regression is a useful approach for predicting a response on the basis of a single predictor variable. however in practice we often have more than one predictor. for example in the advertising data we have examined the relationship between sales and tv advertising. we also have data for the amount of money spent advertising on the radio and in newspapers and we may want to know whether either of these two media is associated with sales. how can we extend our analysis of the advertising data in order to accommodate these two additional predictors? one option is to run three separate simple linear regressions each of which uses a different advertising medium as a predictor. for instance we can fit a simple linear regression to predict sales on the basis of the amount spent on radio advertisements. results are shown in table table. we find that a increase in spending on radio advertising is associated with an increase in sales by around units. table table contains the least squares coefficients for a simple linear regression of sales onto newspaper advertising budget. a increase in newspaper advertising budget is associated with an increase in sales by approximately units. however the approach of fitting a separate simple linear regression model for each predictor is not entirely satisfactory. first of all it is unclear how to make a single prediction of sales given levels of the three advertising media budgets since each of the budgets is associated with a separate regression equation. second each of the three regression equations ignores the other two media in forming estimates for the regression coefficients. we will see shortly that if the media budgets are correlated with each other in the markets that constitute our data set then this can lead to very misleading estimates of the individual media effects on sales. instead of fitting a separate simple linear regression model for each predictor a better approach is to extend the simple linear regression model so that it can directly accommodate multiple predictors. we can do this by giving each predictor a separate slope coefficient in a single model. in general suppose that we have p distinct predictors. then the multiple linear regression model takes the form y pxp linear regression simple regression of sales on radio intercept radio coefficient std. error t-statistic p-value simple regression of sales on newspaper intercept newspaper coefficient std. error t-statistic p-value table more simple linear regression models for the advertising data. coefficients of the simple linear regression model for number of units sold on top radio advertising budget and bottom newspaper advertising budget. a increase in spending on radio advertising is associated with an average increase in sales by around units while the same increase in spending on newspaper advertising is associated with an average increase in sales by around units that the sales variable is in thousands of units and the radio and newspaper variables are in thousands of dollars. where xj represents the jth predictor and j quantifies the association between that variable and the response. we interpret j as the average effect on y of a one unit increase in xj holding all other predictors fixed. in the advertising example becomes sales tv radio newspaper estimating the regression coefficients as was the case in the simple linear regression setting the regression coefficients p in are unknown and must be estimated. given estimates p we can make predictions using the formula y pxp. the parameters are estimated using the same least squares approach that we saw in the context of simple linear regression. we choose p to minimize the sum of squared residuals rss multiple linear regression y figure in a three-dimensional setting with two predictors and one response the least squares regression line becomes a plane. the plane is chosen to minimize the sum of the squared vertical distances between each observation in red and the plane. the values p that minimize are the multiple least squares regression coefficient estimates. unlike the simple linear regression estimates given in the multiple regression coefficient estimates have somewhat complicated forms that are most easily represented using matrix algebra. for this reason we do not provide them here. any statistical software package can be used to compute these coefficient estimates and later in this chapter we will show how this can be done in r. figure illustrates an example of the least squares fit to a toy data set with p predictors. table displays the multiple regression coefficient estimates when tv radio and newspaper advertising budgets are used to predict product sales using the advertising data. we interpret these results as follows for a given amount of tv and newspaper advertising spending an additional on radio advertising leads to an increase in sales by approximately units. comparing these coefficient estimates to those displayed in tables and we notice that the multiple regression coefficient estimates for tv and radio are pretty similar to the simple linear regression coefficient estimates. however while the newspaper regression coefficient estimate in table was significantly non-zero the coefficient estimate for newspaper in the multiple regression model is close to zero and the corresponding p-value is no longer significant with a value around this illustrates linear regression intercept tv radio newspaper coefficient std. error t-statistic p-value table for the advertising data least squares coefficient estimates of the multiple linear regression of number of units sold on radio tv and newspaper advertising budgets. that the simple and multiple regression coefficients can be quite different. this difference stems from the fact that in the simple regression case the slope term represents the average effect of a increase in newspaper advertising ignoring other predictors such as tv and radio. in contrast in the multiple regression setting the coefficient for newspaper represents the average effect of increasing newspaper spending by while holding tv and radio fixed. does it make sense for the multiple regression to suggest no relationship between sales and newspaper while the simple linear regression implies the opposite? in fact it does. consider the correlation matrix for the three predictor variables and response variable displayed in table notice that the correlation between radio and newspaper is this reveals a tendency to spend more on newspaper advertising in markets where more is spent on radio advertising. now suppose that the multiple regression is correct and newspaper advertising has no direct impact on sales but radio advertising does increase sales. then in markets where we spend more on radio our sales will tend to be higher and as our correlation matrix shows we also tend to spend more on newspaper advertising in those same markets. hence in a simple linear regression which only examines sales versus newspaper we will observe that higher values of newspaper tend to be associated with higher values of sales even though newspaper advertising does not actually affect sales. so newspaper sales are a surrogate for radio advertising newspaper gets credit for the effect of radio on sales. this slightly counterintuitive result is very common in many real life situations. consider an absurd example to illustrate the point. running a regression of shark attacks versus ice cream sales for data collected at a given beach community over a period of time would show a positive relationship similar to that seen between sales and newspaper. of course no one has suggested that ice creams should be banned at beaches to reduce shark attacks. in reality higher temperatures cause more people to visit the beach which in turn results in more ice cream sales and more shark attacks. a multiple regression of attacks versus ice cream sales and temperature reveals that as intuition implies the former predictor is no longer significant after adjusting for temperature. multiple linear regression tv radio newspaper sales tv radio newspaper sales table correlation matrix for tv radio newspaper and sales for the advertising data. some important questions when we perform multiple linear regression we usually are interested in answering a few important questions. is at least one of the predictors xp useful in predicting the response? do all the predictors help to explain y or is only a subset of the predictors useful? how well does the model fit the data? given a set of predictor values what response value should we predict and how accurate is our prediction? we now address each of these questions in turn. one is there a relationship between the response and predictors? recall that in the simple linear regression setting in order to determine whether there is a relationship between the response and the predictor we can simply check whether in the multiple regression setting with p predictors we need to ask whether all of the regression coefficients are zero i.e. whether p as in the simple linear regression setting we use a hypothesis test to answer this question. we test the null hypothesis p versus the alternative ha at least one j is non-zero. this hypothesis test is performed by computing the f-statistic rssp rssn p f f-statistic linear regression quantity residual standard error f-statistic value table more information about the least squares model for the regression of number of units sold on tv newspaper and radio advertising budgets in the advertising data. other information about this model was displayed in table where as with simple linear regression tss and rss if the linear model assumptions are correct one can show that erssn p and that provided is true etss rssp hence when there is no relationship between the response and predictors one would expect the f-statistic to take on a value close to on the other hand if ha is true then etss rssp so we expect f to be greater than the f-statistic for the multiple linear regression model obtained by regressing sales onto radio tv and newspaper is shown in table in this example the f-statistic is since this is far larger than it provides compelling evidence against the null hypothesis in other words the large f-statistic suggests that at least one of the advertising media must be related to sales. however what if the f-statistic had been closer to how large does the f-statistic need to be before we can reject and conclude that there is a relationship? it turns out that the answer depends on the values of n and p. when n is large an f-statistic that is just a little larger than might still provide evidence against in contrast a larger f-statistic is needed to reject if n is small. when is true and the errors have a normal distribution the f-statistic follows an for any given value of n and p any statistical software package can be used to compute the p-value associated with the f-statistic using this distribution. based on this p-value we can determine whether or not to reject for the advertising data the p-value associated with the f-statistic in table is essentially zero so we have extremely strong evidence that at least one of the media is associated with increased sales. in we are testing that all the coefficients are zero. sometimes we want to test that a particular subset of q of the coefficients are zero. this corresponds to a null hypothesis p p p if the errors are not normally-distributed the f-statistic approximately follows an f-distribution provided that the sample size n is large. multiple linear regression where for convenience we have put the variables chosen for omission at the end of the list. in this case we fit a second model that uses all the variables except those last q. suppose that the residual sum of squares for that model is then the appropriate f-statistic is rssq rssn p f notice that in table for each individual predictor a t-statistic and a p-value were reported. these provide information about whether each individual predictor is related to the response after adjusting for the other predictors. it turns out that each of these are exactly to the f-test that omits that single variable from the model leaving all the others in i.e. in so it reports the partial effect of adding that variable to the model. for instance as we discussed earlier these p-values indicate that tv and radio are related to sales but that there is no evidence that newspaper is associated with sales in the presence of these two. given these individual p-values for each variable why do we need to look at the overall f-statistic? after all it seems likely that if any one of the p-values for the individual variables is very small then at least one of the predictors is related to the response. however this logic is flawed especially when the number of predictors p is large. for instance consider an example in which p and p is true so no variable is truly associated with the response. in this situation about of the p-values associated with each variable the type shown in table will be below by chance. in other words we expect to see approximately five small p-values even in the absence of any true association between the predictors and the response. in fact we are almost guaranteed that we will observe at least one p-value below by chance! hence if we use the individual t-statistics and associated pvalues in order to decide whether or not there is any association between the variables and the response there is a very high chance that we will incorrectly conclude that there is a relationship. however the f-statistic does not suffer from this problem because it adjusts for the number of predictors. hence if is true there is only a chance that the fstatistic will result in a p-value below regardless of the number of predictors or the number of observations. the approach of using an f-statistic to test for any association between the predictors and the response works when p is relatively small and certainly small compared to n. however sometimes we have a very large number of variables. if p n then there are more coefficients j to estimate than observations from which to estimate them. in this case we cannot even fit the multiple linear regression model using least squares so the square of each t-statistic is the corresponding f-statistic. linear regression f-statistic cannot be used and neither can most of the other concepts that we have seen so far in this chapter. when p is large some of the approaches discussed in the next section such as forward selection can be used. this high-dimensional setting is discussed in greater detail in chapter highdimensional two deciding on important variables as discussed in the previous section the first step in a multiple regression analysis is to compute the f-statistic and to examine the associated pvalue. if we conclude on the basis of that p-value that at least one of the predictors is related to the response then it is natural to wonder which are the guilty ones! we could look at the individual p-values as in table but as discussed if p is large we are likely to make some false discoveries. it is possible that all of the predictors are associated with the response but it is more often the case that the response is only related to a subset of the predictors. the task of determining which predictors are associated with the response in order to fit a single model involving only those predictors is referred to as variable selection. the variable selection problem is studied extensively in chapter and so here we will provide only a brief outline of some classical approaches. ideally we would like to perform variable selection by trying out a lot of different models each containing a different subset of the predictors. for instance if p then we can consider four models a model containing no variables a model containing only a model containing only and a model containing both and we can then select the best model out of all of the models that we have considered. how do we determine which model is best? various statistics can be used to judge the quality of a model. these include mallow s cp akaike information criterion bayesian information criterion and adjusted these are discussed in more detail in chapter we can also determine which model is best by plotting various model outputs such as the residuals in order to search for patterns. unfortunately there are a total of models that contain subsets of p variables. this means that even for moderate p trying out every possible subset of the predictors is infeasible. for instance we saw that if p then there are models to consider. but if p then we must consider models! this is not practical. therefore unless p is very small we cannot consider all models and instead we need an automated and efficient approach to choose a smaller set of models to consider. there are three classical approaches for this task variable selection mallow s cp akaike information criterion bayesian information criterion adjusted forward selection. we begin with the null model a model that contains an intercept but no predictors. we then fit p simple linear regressions and add to the null model the variable that results in the lowest rss. we then add to that model the variable that results forward selection null model multiple linear regression in the lowest rss for the new two-variable model. this approach is continued until some stopping rule is satisfied. backward selection. we start with all variables in the model and remove the variable with the largest p-value that is the variable that is the least statistically significant. the new model is fit and the variable with the largest p-value is removed. this procedure continues until a stopping rule is reached. for instance we may stop when all remaining variables have a p-value below some threshold. mixed selection. this is a combination of forward and backward selection. we start with no variables in the model and as with forward selection we add the variable that provides the best fit. we continue to add variables one-by-one. of course as we noted with the advertising example the p-values for variables can become larger as new predictors are added to the model. hence if at any point the p-value for one of the variables in the model rises above a certain threshold then we remove that variable from the model. we continue to perform these forward and backward steps until all variables in the model have a sufficiently low p-value and all variables outside the model would have a large p-value if added to the model. backward selection mixed selection backward selection cannot be used if p n while forward selection can always be used. forward selection is a greedy approach and might include variables early that later become redundant. mixed selection can remedy this. three model fit two of the most common numerical measures of model fit are the rse and the fraction of variance explained. these quantities are computed and interpreted in the same fashion as for simple linear regression. recall that in simple regression is the square of the correlation of the response and the variable. in multiple linear regression it turns out that it equals cory y the square of the correlation between the response and the fitted linear model in fact one property of the fitted linear model is that it maximizes this correlation among all possible linear models. an value close to indicates that the model explains a large portion of the variance in the response variable. as an example we saw in table that for the advertising data the model that uses all three advertising media to predict sales has an of on the other hand the model that uses only tv and radio to predict sales has an value of in other words there is a small increase in if we include newspaper advertising in the model that already contains tv and radio advertising even though we saw earlier that the p-value for newspaper advertising in table is not significant. it turns out that will always increase when more variables linear regression are added to the model even if those variables are only weakly associated with the response. this is due to the fact that adding another variable to the least squares equations must allow us to fit the training data not necessarily the testing data more accurately. thus the statistic which is also computed on the training data must increase. the fact that adding newspaper advertising to the model containing only tv and radio advertising leads to just a tiny increase in provides additional evidence that newspaper can be dropped from the model. essentially newspaper provides no real improvement in the model fit to the training samples and its inclusion will likely lead to poor results on independent test samples due to overfitting. in contrast the model containing only tv as a predictor had an of adding radio to the model leads to a substantial improvement in this implies that a model that uses tv and radio expenditures to predict sales is substantially better than one that uses only tv advertising. we could further quantify this improvement by looking at the p-value for the radio coefficient in a model that contains only tv and radio as predictors. the model that contains only tv and radio as predictors has an rse of and the model that also contains newspaper as a predictor has an rse of in contrast the model that contains only tv has an rse of this corroborates our previous conclusion that a model that uses tv and radio expenditures to predict sales is much more accurate the training data than one that only uses tv spending. furthermore given that tv and radio expenditures are used as predictors there is no point in also using newspaper spending as a predictor in the model. the observant reader may wonder how rse can increase when newspaper is added to the model given that rss must decrease. in general rse is defined as rse n p rss which simplifies to for a simple linear regression. thus models with more variables can have higher rse if the decrease in rss is small relative to the increase in p. in addition to looking at the rse and statistics just discussed it can be useful to plot the data. graphical summaries can reveal problems with a model that are not visible from numerical statistics. for example figure displays a three-dimensional plot of tv and radio versus sales. we see that some observations lie above and some observations lie below the least squares regression plane. in particular the linear model seems to overestimate sales for instances in which most of the advertising money was spent exclusively on either tv or radio. it underestimates sales for instances where the budget was split between the two media. this pronounced non-linear pattern cannot be modeled accurately using linear re sales multiple linear regression tv radio figure for the advertising data a linear regression fit to sales using tv and radio as predictors. from the pattern of the residuals we can see that there is a pronounced non-linear relationship in the data. the positive residuals visible above the surface tend to lie along the line where tv and radio budgets are split evenly. the negative residuals not visible tend to lie away from this line where budgets are more lopsided. gression. it suggests a synergy or interaction effect between the advertising media whereby combining the media together results in a bigger boost to sales than using any single medium. in section we will discuss extending the linear model to accommodate such synergistic effects through the use of interaction terms. four predictions once we have fit the multiple regression model it is straightforward to apply in order to predict the response y on the basis of a set of values for the predictors xp. however there are three sorts of uncertainty associated with this prediction. the coefficient estimates p are estimates for p. that is the least squares plane y pxp is only an estimate for the true population regression plane f pxp. the inaccuracy in the coefficient estimates is related to the reducible error from chapter we can compute a confidence interval in order to determine how close y will be to f linear regression of course in practice assuming a linear model for f is almost always an approximation of reality so there is an additional source of potentially reducible error which we call model bias. so when we use a linear model we are in fact estimating the best linear approximation to the true surface. however here we will ignore this discrepancy and operate as if the linear model were correct. even if we knew f that is even if we knew the true values for p the response value cannot be predicted perfectly because of the random error in the model in chapter we referred to this as the irreducible error. how much will y vary from y we use prediction intervals to answer this question. prediction intervals are always wider than confidence intervals because they incorporate both the error in the estimate for f reducible error and the uncertainty as to how much an individual point will differ from the population regression plane irreducible error. we use a confidence interval to quantify the uncertainty surrounding the average sales over a large number of cities. for example given that is spent on tv advertising and is spent on radio advertising in each city the confidence interval is we interpret this to mean that of intervals of this form will contain the true value of f on the other hand a prediction interval can be used to quantify the uncertainty surrounding sales for a particular city. given that is spent on tv advertising and is spent on radio advertising in that city the prediction interval is we interpret this to mean that of intervals of this form will contain the true value of y for this city. note that both intervals are centered at but that the prediction interval is substantially wider than the confidence interval reflecting the increased uncertainty about sales for a given city in comparison to the average sales over many locations. confidence interval prediction interval other considerations in the regression model qualitative predictors in our discussion so far we have assumed that all variables in our linear regression model are quantitative. but in practice this is not necessarily the case often some predictors are qualitative. other words if we collect a large number of data sets like the advertising data set and we construct a confidence interval for the average sales on the basis of each data set in tv and in radio advertising then of these confidence intervals will contain the true value of average sales. other considerations in the regression model for example the credit data set displayed in figure records balance credit card debt for a number of individuals as well as several quantitative predictors age cards of credit cards education of education income thousands of dollars limit limit and rating rating. each panel of figure is a scatterplot for a pair of variables whose identities are given by the corresponding row and column labels. for example the scatterplot directly to the right of the word balance depicts balance versus age while the plot directly to the right of age corresponds to age versus cards. in addition to these quantitative variables we also have four qualitative variables gender student status status status and ethnicity african american or asian. balance age cards education income limit rating figure the credit data set contains information about balance age cards education income limit and rating for a number of potential customers. linear regression intercept genderfemale coefficient std. error t-statistic p-value table least squares coefficient estimates associated with the regression of balance onto gender in the credit data set. the linear model is given in that is gender is encoded as a dummy variable as in predictors with only two levels suppose that we wish to investigate differences in credit card balance between males and females ignoring the other variables for the moment. if a qualitative predictor known as a factor only has two levels or possible values then incorporating it into a regression model is very simple. we simply create an indicator or dummy variable that takes on two possible numerical values. for example based on the gender variable we can create a new variable that takes the form factor level dummy variable xi if ith person is female if ith person is male and use this variable as a predictor in the regression equation. this results in the model yi if ith person is female if ith person is male. now can be interpreted as the average credit card balance among males as the average credit card balance among females and as the average difference in credit card balance between females and males. table displays the coefficient estimates and other information associated with the model the average credit card debt for males is estimated to be whereas females are estimated to carry in additional debt for a total of however we notice that the p-value for the dummy variable is very high. this indicates that there is no statistical evidence of a difference in average credit card balance between the genders. the decision to code females as and males as in is arbitrary and has no effect on the regression fit but does alter the interpretation of the coefficients. if we had coded males as and females as then the estimates for and would have been and respectively leading once again to a prediction of credit card debt of for males and a prediction of for females. alternatively instead of a coding scheme we could create a dummy variable other considerations in the regression model xi if ith person is female if ith person is male and use this variable in the regression equation. this results in the model yi if ith person is female if ith person is male. now can be interpreted as the overall average credit card balance the gender effect and is the amount that females are above the average and males are below the average. in this example the estimate for would be halfway between the male and female averages of and the estimate for would be which is half of the average difference between females and males. it is important to note that the final predictions for the credit balances of males and females will be identical regardless of the coding scheme used. the only difference is in the way that the coefficients are interpreted. qualitative predictors with more than two levels when a qualitative predictor has more than two levels a single dummy variable cannot represent all possible values. in this situation we can create additional dummy variables. for example for the ethnicity variable we create two dummy variables. the first could be if ith person is asian if ith person is not asian and the second could be if ith person is caucasian if ith person is not caucasian. then both of these variables can be used in the regression equation in order to obtain the model yi if ith person is asian if ith person is caucasian if ith person is african american. now can be interpreted as the average credit card balance for african americans can be interpreted as the difference in the average balance between the asian and african american categories and can be interpreted as the difference in the average balance between the caucasian and linear regression intercept ethnicityasian ethnicitycaucasian coefficient std. error t-statistic p-value table least squares coefficient estimates associated with the regression of balance onto ethnicity in the credit data set. the linear model is given in that is ethnicity is encoded via two dummy variables and african american categories. there will always be one fewer dummy variable than the number of levels. the level with no dummy variable african american in this example is known as the baseline. from table we see that the estimated balance for the baseline african american is it is estimated that the asian category will have less debt than the african american category and that the caucasian category will have less debt than the african american category. however the p-values associated with the coefficient estimates for the two dummy variables are very large suggesting no statistical evidence of a real difference in credit card balance between the ethnicities. once again the level selected as the baseline category is arbitrary and the final predictions for each group will be the same regardless of this choice. however the coefficients and their p-values do depend on the choice of dummy variable coding. rather than rely on the individual coefficients we can use an f-test to test this does not depend on the coding. this f-test has a p-value of indicating that we cannot reject the null hypothesis that there is no relationship between balance and ethnicity. using this dummy variable approach presents no difficulties when incorporating both quantitative and qualitative predictors. for example to regress balance on both a quantitative variable such as income and a qualitative variable such as student we must simply create a dummy variable for student and then fit a multiple regression model using income and the dummy variable as predictors for credit card balance. there are many different ways of coding qualitative variables besides the dummy variable approach taken here. all of these approaches lead to equivalent model fits but the coefficients are different and have different interpretations and are designed to measure particular contrasts. this topic is beyond the scope of the book and so we will not pursue it further. extensions of the linear model the standard linear regression model provides interpretable results and works quite well on many real-world problems. however it makes several highly restrictive assumptions that are often violated in practice. two of the most important assumptions state that the relationship between the predictors and response are additive and linear. the additive assumption baseline contrast additive linear other considerations in the regression model means that the effect of changes in a predictor xj on the response y is independent of the values of the other predictors. the linear assumption states that the change in the response y due to a one-unit change in xj is constant regardless of the value of xj. in this book we examine a number of sophisticated methods that relax these two assumptions. here we briefly examine some common classical approaches for extending the linear model. removing the additive assumption in our previous analysis of the advertising data we concluded that both tv and radio seem to be associated with sales. the linear models that formed the basis for this conclusion assumed that the effect on sales of increasing one advertising medium is independent of the amount spent on the other media. for example the linear model states that the average effect on sales of a one-unit increase in tv is always regardless of the amount spent on radio. however this simple model may be incorrect. suppose that spending money on radio advertising actually increases the effectiveness of tv advertising so that the slope term for tv should increase as radio increases. in this situation given a fixed budget of spending half on radio and half on tv may increase sales more than allocating the entire amount to either tv or to radio. in marketing this is known as a synergy effect and in statistics it is referred to as an interaction effect. figure suggests that such an effect may be present in the advertising data. notice that when levels of either tv or radio are low then the true sales are lower than predicted by the linear model. but when advertising is split between the two media then the model tends to underestimate sales. consider the standard linear regression model with two variables y according to this model if we increase by one unit then y will increase by an average of units. notice that the presence of does not alter this statement that is regardless of the value of a one-unit increase in will lead to a increase in y one way of extending this model to allow for interaction effects is to include a third predictor called an interaction term which is constructed by computing the product of and this results in the model y how does inclusion of this interaction term relax the additive assumption? notice that can be rewritten as y linear regression intercept tv radio tv radio coefficient std. error t-statistic p-value table for the advertising data least squares coefficient estimates associated with the regression of sales onto tv and radio with an interaction term as in where since changes with the effect of on y is no longer constant adjusting will change the impact of on y for example suppose that we are interested in studying the productivity of a factory. we wish to predict the number of units produced on the basis of the number of production lines and the total number of workers. it seems likely that the effect of increasing the number of production lines will depend on the number of workers since if no workers are available to operate the lines then increasing the number of lines will not increase production. this suggests that it would be appropriate to include an interaction term between lines and workers in a linear model to predict units. suppose that when we fit the model we obtain units lines workers workers workers lines workers. in other words adding an additional line will increase the number of units produced by workers. hence the more workers we have the stronger will be the effect of lines. we now return to the advertising example. a linear model that uses radio tv and an interaction between the two to predict sales takes the form sales tv radio tv radio tv radio we can interpret as the increase in the effectiveness of tv advertising for a one unit increase in radio advertising vice-versa. the coefficients that result from fitting the model are given in table the results in table strongly suggest that the model that includes the interaction term is superior to the model that contains only main effects. the p-value for the interaction term tv radio is extremely low indicating that there is strong evidence for ha in other words it is clear that the true relationship is not additive. the for the model is compared to only for the model that predicts sales using tv and radio without an interaction term. this means that of the variability in sales that remains after fitting the additive model has been explained by the interaction term. the coefficient main effect other considerations in the regression model estimates in table suggest that an increase in tv advertising of is associated with increased sales of radio radio an increase in sales of tv tv units. units. and an increase in radio advertising of will be associated with in this example the p-values associated with tv radio and the interaction term all are statistically significant and so it is obvious that all three variables should be included in the model. however it is sometimes the case that an interaction term has a very small p-value but the associated main effects this case tv and radio do not. the hierarchical principle states that if we include an interaction in a model we should also include the main effects even if the p-values associated with their coefficients are not significant. in other words if the interaction between and seems important then we should include both and in the model even if their coefficient estimates have large p-values. the rationale for this principle is that if is related to the response then whether or not the coefficients of or are exactly zero is of little interest. also is typically correlated with and and so leaving them out tends to alter the meaning of the interaction. hierarchical principle in the previous example we considered an interaction between tv and radio both of which are quantitative variables. however the concept of interactions applies just as well to qualitative variables or to a combination of quantitative and qualitative variables. in fact an interaction between a qualitative variable and a quantitative variable has a particularly nice interpretation. consider the credit data set from section and suppose that we wish to predict balance using the income and student variables. in the absence of an interaction term the model takes the form balancei incomei if ith person is a student if ith person is not a student incomei if ith person is a student if ith person is not a student. notice that this amounts to fitting two parallel lines to the data one for students and one for non-students. the lines for students and non-students have different intercepts versus but the same slope this is illustrated in the left-hand panel of figure the fact that the lines are parallel means that the average effect on balance of a one-unit increase in income does not depend on whether or not the individual is a student. this represents a potentially serious limitation of the model since in fact a change in income may have a very different effect on the credit card balance of a student versus a non-student. this limitation can be addressed by adding an interaction variable created by multiplying income with the dummy variable for student. our linear regression e c n a a b l student non student e c n a a b l income income figure for the credit data the least squares lines are shown for prediction of balance from income for students and non-students. left the model was fit. there is no interaction between income and student. right the model was fit. there is an interaction term between income and student. model now becomes balancei incomei incomei if student if not student incomei incomei if student if not student once again we have two different regression lines for the students and the non-students. but now those regression lines have different intercepts versus as well as different slopes versus this allows for the possibility that changes in income may affect the credit card balances of students and non-students differently. the right-hand panel of figure shows the estimated relationships between income and balance for students and non-students in the model we note that the slope for students is lower than the slope for non-students. this suggests that increases in income are associated with smaller increases in credit card balance among students as compared to non-students. non-linear relationships as discussed previously the linear regression model assumes a linear relationship between the response and predictors. but in some cases the true relationship between the response and the predictors may be nonlinear. here we present a very simple way to directly extend the linear model to accommodate non-linear relationships using polynomial regression. in later chapters we will present more complex approaches for performing non-linear fits in more general settings. consider figure in which the mpg mileage in miles per gallon versus horsepower is shown for a number of cars in the auto data set. the polynomial regression other considerations in the regression model linear degree degree n o l l a g r e p s e l i m horsepower figure the auto data set. for a number of cars mpg and horsepower are shown. the linear regression fit is shown in orange. the linear regression fit for a is shown as a blue curve. the linear regression model that includes horsepower fit for a model that includes all polynomials of horsepower up to fifth-degree is shown in green. orange line represents the linear regression fit. there is a pronounced relationship between mpg and horsepower but it seems clear that this relationship is in fact non-linear the data suggest a curved relationship. a simple approach for incorporating non-linear associations in a linear model is to include transformed versions of the predictors in the model. for example the points in figure seem to have a quadratic shape suggesting that a model of the form mpg horsepower horsepower quadratic may provide a better fit. equation involves predicting mpg using a non-linear function of horsepower. but it is still a linear model! that is is simply a multiple linear regression model with horsepower so we can use standard linear regression software to and horsepower estimate and in order to produce a non-linear fit. the blue curve in figure shows the resulting quadratic fit to the data. the quadratic fit appears to be substantially better than the fit obtained when just the linear term is included. the of the quadratic fit is compared to for the linear fit and the p-value in table for the quadratic term is highly significant. if including horsepower led to such a big improvement in the model why the green curve or even horsepower not include horsepower horsepower linear regression intercept horsepower horsepower coefficient std. error t-statistic p-value table for the auto data set least squares coefficient estimates associated with the regression of mpg onto horsepower and horsepower in figure displays the fit that results from including all polynomials up to fifth degree in the model the resulting fit seems unnecessarily wiggly that is it is unclear that including the additional terms really has led to a better fit to the data. the approach that we have just described for extending the linear model to accommodate non-linear relationships is known as polynomial regression since we have included polynomial functions of the predictors in the regression model. we further explore this approach and other non-linear extensions of the linear model in chapter potential problems when we fit a linear regression model to a particular data set many problems may occur. most common among these are the following non-linearity of the response-predictor relationships. correlation of error terms. non-constant variance of error terms. outliers. high-leverage points. collinearity. in practice identifying and overcoming these problems is as much an art as a science. many pages in countless books have been written on this topic. since the linear regression model is not our primary focus here we will provide only a brief summary of some key points. non-linearity of the data the linear regression model assumes that there is a straight-line relationship between the predictors and the response. if the true relationship is far from linear then virtually all of the conclusions that we draw from the fit are suspect. in addition the prediction accuracy of the model can be significantly reduced. residual plots are a useful graphical tool for identifying non-linearity. given a simple linear regression model we can plot the residuals ei yi yi versus the predictor xi. in the case of a multiple regression model residual plot other considerations in the regression model residual plot for linear fit residual plot for quadratic fit l s a u d s e r i l s a u d s e r i fitted fitted values fitted values figure plots of residuals versus predicted fitted values for the auto data set. in each plot the red line is a smooth fit to the residuals intended to make it easier to identify a trend. left a linear regression of mpg on horsepower. a strong pattern in the residuals indicates non-linearity in the data. right a linear there is little pattern in the regression of mpg on horsepower and horsepower residuals. since there are multiple predictors we instead plot the residuals versus the predicted fitted values yi. ideally the residual plot will show no discernible pattern. the presence of a pattern may indicate a problem with some aspect of the linear model. the left panel of figure displays a residual plot from the linear regression of mpg onto horsepower on the auto data set that was illustrated in figure the red line is a smooth fit to the residuals which is displayed in order to make it easier to identify any trends. the residuals exhibit a clear u-shape which provides a strong indication of non-linearity in the data. in contrast the right-hand panel of figure displays the residual plot that results from the model which contains a quadratic term. there appears to be little pattern in the residuals suggesting that the quadratic term improves the fit to the data. if the residual plot indicates that there are non-linear associations in the data then a simple approach is to use non-linear transformations of the x and x in the regression model. in the predictors such as log x later chapters of this book we will discuss other more advanced non-linear approaches for addressing this issue. correlation of error terms an important assumption of the linear regression model is that the error terms are uncorrelated. what does this mean? for instance if the errors are uncorrelated then the fact that is positive provides little or no information about the sign of the standard errors that are computed for the estimated regression coefficients or the fitted values linear regression are based on the assumption of uncorrelated error terms. if in fact there is correlation among the error terms then the estimated standard errors will tend to underestimate the true standard errors. as a result confidence and prediction intervals will be narrower than they should be. for example a confidence interval may in reality have a much lower probability than of containing the true value of the parameter. in addition p-values associated with the model will be lower than they should be this could cause us to erroneously conclude that a parameter is statistically significant. in short if the error terms are correlated we may have an unwarranted sense of confidence in our model. as an extreme example suppose we accidentally doubled our data leading to observations and error terms identical in pairs. if we ignored this our standard error calculations would be as if we had a sample of size when in fact we have only n samples. our estimated parameters would be the same for the samples as for the n samples but the confidence intervals would be narrower by a factor of why might correlations among the error terms occur? such correlations frequently occur in the context of time series data which consists of observations for which measurements are obtained at discrete points in time. in many cases observations that are obtained at adjacent time points will have positively correlated errors. in order to determine if this is the case for a given data set we can plot the residuals from our model as a function of time. if the errors are uncorrelated then there should be no discernible pattern. on the other hand if the error terms are positively correlated then we may see tracking in the residuals that is adjacent residuals may have similar values. figure provides an illustration. in the top panel we see the residuals from a linear regression fit to data generated with uncorrelated errors. there is no evidence of a time-related trend in the residuals. in contrast the residuals in the bottom panel are from a data set in which adjacent errors had a correlation of now there is a clear pattern in the residuals adjacent residuals tend to take on similar values. finally the center panel illustrates a more moderate case in which the residuals had a correlation of there is still evidence of tracking but the pattern is less clear. many methods have been developed to properly take account of correlations in the error terms in time series data. correlation among the error terms can also occur outside of time series data. for instance consider a study in which individuals heights are predicted from their weights. the assumption of uncorrelated errors could be violated if some of the individuals in the study are members of the same family or eat the same diet or have been exposed to the same environmental factors. in general the assumption of uncorrelated errors is extremely important for linear regression as well as for other statistical methods and good experimental design is crucial in order to mitigate the risk of such correlations. time series tracking l i a u d s e r l i a u d s e r l i a u d s e r other considerations in the regression model observation figure plots of residuals from simulated time series data sets generated with differing levels of correlation between error terms for adjacent time points. non-constant variance of error terms another important assumption of the linear regression model is that the error terms have a constant variance vari the standard errors confidence intervals and hypothesis tests associated with the linear model rely upon this assumption. unfortunately it is often the case that the variances of the error terms are non-constant. for instance the variances of the error terms may increase with the value of the response. one can identify non-constant variances in the errors or heteroscedasticity from the presence of a funnel shape in the residual plot. an example is shown in the left-hand panel of figure in which the magnitude of the residuals tends to increase with the fitted values. when faced with this problem one possible solution is to transy such form the response y using a concave function such as log y or a transformation results in a greater amount of shrinkage of the larger responses leading to a reduction in heteroscedasticity. the right-hand panel of figure displays the residual plot after transforming the response heteroscedasticity linear regression response y response logy l s a u d s e r i l s a u d s e r i fitted values fitted values figure residual plots. in each plot the red line is a smooth fit to the residuals intended to make it easier to identify a trend. the blue lines track the outer quantiles of the residuals and emphasize patterns. left the funnel shape indicates heteroscedasticity. right the response has been log transformed and there is now no evidence of heteroscedasticity. using log y the residuals now appear to have constant variance though there is some evidence of a slight non-linear relationship in the data. sometimes we have a good idea of the variance of each response. for example the ith response could be an average of ni raw observations. if each of these raw observations is uncorrelated with variance then their average has variance i in this case a simple remedy is to fit our model by weighted least squares with weights proportional to the inverse variances i.e. wi ni in this case. most linear regression software allows for observation weights. outliers an outlier is a point for which yi is far from the value predicted by the model. outliers can arise for a variety of reasons such as incorrect recording of an observation during data collection. the red point in the left-hand panel of figure illustrates a typical outlier. the red solid line is the least squares regression fit while the blue dashed line is the least squares fit after removal of the outlier. in this case removing the outlier has little effect on the least squares line it leads to almost no change in the slope and a miniscule reduction in the intercept. it is typical for an outlier that does not have an unusual predictor value to have little effect on the least squares fit. however even if an outlier does not have much effect on the least squares fit it can cause other problems. for instance in this example the rse is when the outlier is included in the regression but it is only when the outlier is removed. since the rse is used to compute all confidence intervals and weighted least squares outlier other considerations in the regression model y l s a u d s e r i l i s a u d s e r d e z i t n e d u s t x fitted values fitted values figure left the least squares regression line is shown in red and the regression line after removing the outlier is shown in blue. center the residual plot clearly identifies the outlier. right the outlier has a studentized residual of typically we expect values between and p-values such a dramatic increase caused by a single data point can have implications for the interpretation of the fit. similarly inclusion of the outlier causes the to decline from to residual plots can be used to identify outliers. in this example the outlier is clearly visible in the residual plot illustrated in the center panel of figure but in practice it can be difficult to decide how large a residual needs to be before we consider the point to be an outlier. to address this problem instead of plotting the residuals we can plot the studentized residuals computed by dividing each residual ei by its estimated standard error. observations whose studentized residuals are greater than in absolute value are possible outliers. in the right-hand panel of figure the outlier s studentized residual exceeds while all other observations have studentized residuals between and if we believe that an outlier has occurred due to an error in data collection or recording then one solution is to simply remove the observation. however care should be taken since an outlier may instead indicate a deficiency with the model such as a missing predictor. high leverage points we just saw that outliers are observations for which the response yi is unusual given the predictor xi. in contrast observations with high leverage have an unusual value for xi. for example observation in the left-hand panel of figure has high leverage in that the predictor value for this observation is large relative to the other observations. that the data displayed in figure are the same as the data displayed in figure but with the addition of a single high leverage observation. the red solid line is the least squares fit to the data while the blue dashed line is the fit produced when observation is removed. comparing the left-hand panels of figures and we observe that removing the high leverage observation has a much more substantial impact on the least squares line studentized residual high leverage linear regression y x l i s a u d s e r d e z i t n e d u s t x leverage figure left observation is a high leverage point while is not. the red line is the fit to all the data and the blue line is the fit with observation removed. center the red observation is not unusual in terms of its value or its value but still falls outside the bulk of the data and hence has high leverage. right observation has a high leverage and a high residual. than removing the outlier. in fact high leverage observations tend to have a sizable impact on the estimated regression line. it is cause for concern if the least squares line is heavily affected by just a couple of observations because any problems with these points may invalidate the entire fit. for this reason it is important to identify high leverage observations. in a simple linear regression high leverage observations are fairly easy to identify since we can simply look for observations for which the predictor value is outside of the normal range of the observations. but in a multiple linear regression with many predictors it is possible to have an observation that is well within the range of each individual predictor s values but that is unusual in terms of the full set of predictors. an example is shown in the center panel of figure for a data set with two predictors and most of the observations predictor values fall within the blue dashed ellipse but the red observation is well outside of this range. but neither its value for nor its value for is unusual. so if we examine just or just we will fail to notice this high leverage point. this problem is more pronounced in multiple regression settings with more than two predictors because then there is no simple way to plot all dimensions of the data simultaneously. in order to quantify an observation s leverage we compute the leverage statistic. a large value of this statistic indicates an observation with high leverage. for a simple linear regression hi n n it is clear from this equation that hi increases with the distance of xi from x. there is a simple extension of hi to the case of multiple predictors though we do not provide the formula here. the leverage statistic hi is always between and and the average leverage for all the observations is always equal to so if a given observation has a leverage statistic leverage statistic other considerations in the regression model e g a g n i t a r limit limit figure scatterplots of the observations from the credit data set. left a plot of age versus limit. these two variables are not collinear. right a plot of rating versus limit. there is high collinearity. that greatly exceeds then we may suspect that the corresponding point has high leverage. the right-hand panel of figure provides a plot of the studentized residuals versus hi for the data in the left-hand panel of figure observation stands out as having a very high leverage statistic as well as a high studentized residual. in other words it is an outlier as well as a high leverage observation. this is a particularly dangerous combination! this plot also reveals the reason that observation had relatively little effect on the least squares fit in figure it has low leverage. collinearity collinearity refers to the situation in which two or more predictor variables are closely related to one another. the concept of collinearity is illustrated in figure using the credit data set. in the left-hand panel of figure the two predictors limit and age appear to have no obvious relationship. in contrast in the right-hand panel of figure the predictors limit and rating are very highly correlated with each other and we say that they are collinear. the presence of collinearity can pose problems in the regression context since it can be difficult to separate out the individual effects of collinear variables on the response. in other words since limit and rating tend to increase or decrease together it can be difficult to determine how each one separately is associated with the response balance. collinearity figure illustrates some of the difficulties that can result from collinear ity. the left-hand panel of figure is a contour plot of the rss associated with different possible coefficient estimates for the regression of balance on limit and age. each ellipse represents a set of coefficients that correspond to the same rss with ellipses nearest to the center taking on the lowest values of rss. the black dots and associated dashed linear regression e g a g n i t a r limit limit figure contour plots for the rss values as a function of the parameters for various regressions involving the credit data set. in each plot the black dots represent the coefficient values corresponding to the minimum rss. left a contour plot of rss for the regression of balance onto age and limit. the minimum value is well defined. right a contour plot of rss for the regression of balance onto rating and limit. because of the collinearity there are many pairs limit rating with a similar value for rss. lines represent the coefficient estimates that result in the smallest possible rss in other words these are the least squares estimates. the axes for limit and age have been scaled so that the plot includes possible coefficient estimates that are up to four standard errors on either side of the least squares estimates. thus the plot includes all plausible values for the coefficients. for example we see that the true limit coefficient is almost certainly somewhere between and in contrast the right-hand panel of figure displays contour plots of the rss associated with possible coefficient estimates for the regression of balance onto limit and rating which we know to be highly collinear. now the contours run along a narrow valley there is a broad range of values for the coefficient estimates that result in equal values for rss. hence a small change in the data could cause the pair of coefficient values that yield the smallest rss that is the least squares estimates to move anywhere along this valley. this results in a great deal of uncertainty in the coefficient estimates. notice that the scale for the limit coefficient now runs from roughly to this is an eight-fold increase over the plausible range of the limit coefficient in the regression with age. interestingly even though the limit and rating coefficients now have much more individual uncertainty they will almost certainly lie somewhere in this contour valley. for example we would not expect the true value of the limit and rating coefficients to be and respectively even though such a value is plausible for each coefficient individually. other considerations in the regression model model model intercept age limit intercept rating limit coefficient std. error t-statistic p-value table the results for two multiple regression models involving the credit data set are shown. model is a regression of balance on age and limit and model a regression of balance on rating and limit. the standard error of limit increases in the second regression due to collinearity. since collinearity reduces the accuracy of the estimates of the regression coefficients it causes the standard error for j to grow. recall that the t-statistic for each predictor is calculated by dividing j by its standard error. consequently collinearity results in a decline in the t-statistic. as a result in the presence of collinearity we may fail to reject j this means that the power of the hypothesis test the probability of correctly power detecting a non-zero coefficient is reduced by collinearity. table compares the coefficient estimates obtained from two separate multiple regression models. the first is a regression of balance on age and limit and the second is a regression of balance on rating and limit. in the first regression both age and limit are highly significant with very small pvalues. in the second the collinearity between limit and rating has caused the standard error for the limit coefficient estimate to increase by a factor of and the p-value to increase to in other words the importance of the limit variable has been masked due to the presence of collinearity. to avoid such a situation it is desirable to identify and address potential collinearity problems while fitting the model. a simple way to detect collinearity is to look at the correlation matrix of the predictors. an element of this matrix that is large in absolute value indicates a pair of highly correlated variables and therefore a collinearity problem in the data. unfortunately not all collinearity problems can be detected by inspection of the correlation matrix it is possible for collinearity to exist between three or more variables even if no pair of variables has a particularly high correlation. we call this situation multicollinearity. instead of inspecting the correlation matrix a better way to assess multicollinearity is to compute the variance inflation factor the vif is the ratio of the variance of j when fitting the full model divided by the variance of j if fit on its own. the smallest possible value for vif is which indicates the complete absence of collinearity. typically in practice there is a small amount of collinearity among the predictors. as a rule of thumb a vif value that exceeds or indicates a problematic amount of multicollinearity variance inflation factor linear regression collinearity. the vif for each variable can be computed using the formula vif j xjx j xjx j where predictors. if the vif will be large. is the from a regression of xj onto all of the other xjx j is close to one then collinearity is present and so in the credit data a regression of balance on age rating and limit indicates that the predictors have vif values of and as we suspected there is considerable collinearity in the data! when faced with the problem of collinearity there are two simple solutions. the first is to drop one of the problematic variables from the regression. this can usually be done without much compromise to the regression fit since the presence of collinearity implies that the information that this variable provides about the response is redundant in the presence of the other variables. for instance if we regress balance onto age and limit without the rating predictor then the resulting vif values are close to the minimum possible value of and the drops from to so dropping rating from the set of predictors has effectively solved the collinearity problem without compromising the fit. the second solution is to combine the collinear variables together into a single predictor. for instance we might take the average of standardized versions of limit and rating in order to create a new variable that measures credit worthiness. the marketing plan we now briefly return to the seven questions about the advertising data that we set out to answer at the beginning of this chapter. is there a relationship between advertising sales and budget? this question can be answered by fitting a multiple regression model of sales onto tv radio and newspaper as in and testing the hypothesis tv radio newspaper in section we showed that the f-statistic can be used to determine whether or not we should reject this null hypothesis. in this case the p-value corresponding to the f-statistic in table is very low indicating clear evidence of a relationship between advertising and sales. how strong is the relationship? we discussed two measures of model accuracy in section first the rse estimates the standard deviation of the response from the population regression line. for the advertising data the rse is the marketing plan units while the mean value for the response is indicating a percentage error of roughly second the statistic records the percentage of variability in the response that is explained by the predictors. the predictors explain almost of the variance in sales. the rse and statistics are displayed in table which media contribute to sales? to answer this question we can examine the p-values associated with each predictor s t-statistic in the multiple linear regression displayed in table the p-values for tv and radio are low but the p-value for newspaper is not. this suggests that only tv and radio are related to sales. in chapter we explore this question in greater detail. how large is the effect of each medium on sales? we saw in section that the standard error of j can be used to construct confidence intervals for j. for the advertising data the confidence intervals are as follows for tv for radio and for newspaper. the confidence intervals for tv and radio are narrow and far from zero providing evidence that these media are related to sales. but the interval for newspaper includes zero indicating that the variable is not statistically significant given the values of tv and radio. we saw in section that collinearity can result in very wide standard errors. could collinearity be the reason that the confidence interval associated with newspaper is so wide? the vif scores are and for tv radio and newspaper suggesting no evidence of collinearity. in order to assess the association of each medium individually on sales we can perform three separate simple linear regressions. results are shown in tables and there is evidence of an extremely strong association between tv and sales and between radio and sales. there is evidence of a mild association between newspaper and sales when the values of tv and radio are ignored. how accurately can we predict future sales? the response can be predicted using the accuracy associated with this estimate depends on whether we wish to predict an individual response y f or the average response f if the former we use a prediction interval and if the latter we use a confidence interval. prediction intervals will always be wider than confidence intervals because they account for the uncertainty associated with the irreducible error. linear regression is the relationship linear? in section we saw that residual plots can be used in order to identify non-linearity. if the relationships are linear then the residual plots should display no pattern. in the case of the advertising data we observe a non-linear effect in figure though this effect could also be observed in a residual plot. in section we discussed the inclusion of transformations of the predictors in the linear regression model in order to accommodate non-linear relationships. is there synergy among the advertising media? the standard linear regression model assumes an additive relationship between the predictors and the response. an additive model is easy to interpret because the effect of each predictor on the response is unrelated to the values of the other predictors. however the additive assumption may be unrealistic for certain data sets. in section we showed how to include an interaction term in the regression model in order to accommodate non-additive relationships. a small p-value associated with the interaction term indicates the presence of such relationships. figure suggested that the advertising data may not be additive. including an interaction term in the model results in a substantial increase in from around to almost comparison of linear regression with k-nearest neighbors as discussed in chapter linear regression is an example of a parametric approach because it assumes a linear functional form for f parametric methods have several advantages. they are often easy to fit because one need estimate only a small number of coefficients. in the case of linear regression the coefficients have simple interpretations and tests of statistical significance can be easily performed. but parametric methods do have a disadvantage by construction they make strong assumptions about the form of f if the specified functional form is far from the truth and prediction accuracy is our goal then the parametric method will perform poorly. for instance if we assume a linear relationship between x and y but the true relationship is far from linear then the resulting model will provide a poor fit to the data and any conclusions drawn from it will be suspect. in contrast non-parametric methods do not explicitly assume a parametric form for f and thereby provide an alternative and more flexible approach for performing regression. we discuss various non-parametric methods in this book. here we consider one of the simplest and best-known non-parametric methods k-nearest neighbors regression regression. k-nearest neighbors regression comparison of linear regression with k-nearest neighbors y y figure plots of f using knn regression on a two-dimensional data set with observations dots. left k results in a rough step function fit. right k produces a much smoother fit. the knn regression method is closely related to the knn classifier discussed in chapter given a value for k and a prediction point knn regression first identifies the k training observations that are closest to represented by it then estimates f using the average of all the training responses in in other words f k yi. xi figure illustrates two knn fits on a data set with p predictors. the fit with k is shown in the left-hand panel while the right-hand panel corresponds to k we see that when k the knn fit perfectly interpolates the training observations and consequently takes the form of a step function. when k the knn fit still is a step function but averaging over nine observations results in much smaller regions of constant prediction and consequently a smoother fit. in general the optimal value for k will depend on the bias-variance tradeoff which we introduced in chapter a small value for k provides the most flexible fit which will have low bias but high variance. this variance is due to the fact that the prediction in a given region is entirely dependent on just one observation. in contrast larger values of k provide a smoother and less variable fit the prediction in a region is an average of several points and so changing one observation has a smaller effect. however the smoothing may cause bias by masking some of the structure in f in chapter we introduce several approaches for estimating test error rates. these methods can be used to identify the optimal value of k in knn regression. linear regression in what setting will a parametric approach such as least squares linear regression outperform a non-parametric approach such as knn regression? the answer is simple the parametric approach will outperform the nonparametric approach if the parametric form that has been selected is close to the true form of f figure provides an example with data generated from a one-dimensional linear regression model. the black solid lines represent f while the blue curves correspond to the knn fits using k and k in this case the k predictions are far too variable while the smoother k fit is much closer to f however since the true relationship is linear it is hard for a non-parametric approach to compete with linear regression a non-parametric approach incurs a cost in variance that is not offset by a reduction in bias. the blue dashed line in the lefthand panel of figure represents the linear regression fit to the same data. it is almost perfect. the right-hand panel of figure reveals that linear regression outperforms knn for this data. the green solid line plotted as a function of represents the test set mean squared error for knn. the knn errors are well above the black dashed line which is the test mse for linear regression. when the value of k is large then knn performs only a little worse than least squares regression in terms of mse. it performs far worse when k is small. in practice the true relationship between x and y is rarely exactly linear. figure examines the relative performances of least squares regression and knn under increasing levels of non-linearity in the relationship between x and y in the top row the true relationship is nearly linear. in this case we see that the test mse for linear regression is still superior to that of knn for low values of k. however for k knn outperforms linear regression. the second row illustrates a more substantial deviation from linearity. in this situation knn substantially outperforms linear regression for all values of k. note that as the extent of non-linearity increases there is little change in the test set mse for the non-parametric knn method but there is a large increase in the test set mse of linear regression. figures and display situations in which knn performs slightly worse than linear regression when the relationship is linear but much better than linear regression for non-linear situations. in a real life situation in which the true relationship is unknown one might draw the conclusion that knn should be favored over linear regression because it will at worst be slightly inferior than linear regression if the true relationship is linear and may give substantially better results if the true relationship is non-linear. but in reality even when the true relationship is highly non-linear knn may still provide inferior results to linear regression. in particular both figures and illustrate settings with p predictor. but in higher dimensions knn often performs worse than linear regression. figure considers the same strongly non-linear situation as in the second row of figure except that we have added additional noise comparison of linear regression with k-nearest neighbors y y x x figure plots of f using knn regression on a one-dimensional data set with observations. the true relationship is given by the black solid line. left the blue curve corresponds to k and interpolates passes directly through the training data. right the blue curve corresponds to k and represents a smoother fit. y r o r r e d e r a u q s n a e m x figure the same data set shown in figure is investigated further. left the blue dashed line is the least squares fit to the data. since f is in fact linear as the black line the least squares regression line provides a very good estimate of f right the dashed horizontal line represents the least squares test set mse while the green solid line corresponds to the mse for knn as a function of the log scale. linear regression achieves a lower test mse than does knn regression since f is in fact linear. for knn regression the best results occur with a very large value of k corresponding to a small value of linear regression x y y r o r r e d e r a u q s n a e m r o r r e d e r a u q s n a e m x figure top left in a setting with a slightly non-linear relationship between x and y black line the knn fits with k and k are displayed. top right for the slightly non-linear data the test set mse for least squares regression black and kn n with various values of are displayed. bottom left and bottom right as in the top panel but with a strongly non-linear relationship between x and y predictors that are not associated with the response. when p or p knn outperforms linear regression. but for p the results are mixed and for p linear regression is superior to knn. in fact the increase in dimension has only caused a small deterioration in the linear regression test set mse but it has caused more than a ten-fold increase in the mse for knn. this decrease in performance as the dimension increases is a common problem for knn and results from the fact that in higher dimensions there is effectively a reduction in sample size. in this data set there are training observations when p this provides enough information to accurately estimate f however spreading observations over p dimensions results in a phenomenon in which a given observation has no nearby neighbors this is the so-called curse of dimensionality. that is the k observations that are nearest to a given test observation may be very far away from in p-dimensional space when p is large leading to a curse of dimensionality lab linear regression r o r r e d e r a u q s n a e m figure test mse for linear regression dashed lines and knn curves as the number of variables p increases. the true function is non linear in the first variable as in the lower panel in figure and does not depend on the additional variables. the performance of linear regression deteriorates slowly in the presence of these additional noise variables whereas knn s performance degrades much more quickly as p increases. very poor prediction of f and hence a poor knn fit. as a general rule parametric methods will tend to outperform non-parametric approaches when there is a small number of observations per predictor. even in problems in which the dimension is small we might prefer linear regression to knn from an interpretability standpoint. if the test mse of knn is only slightly lower than that of linear regression we might be willing to forego a little bit of prediction accuracy for the sake of a simple model that can be described in terms of just a few coefficients and for which p-values are available. lab linear regression libraries the library function is used to load libraries or groups of functions and data sets that are not included in the base r distribution. basic functions that perform least squares linear regression and other simple analyses come standard with the base distribution but more exotic functions require additional libraries. here we load the mass package which is a very large collection of data sets and functions. we also load the islr package which includes the data sets associated with this book. library library mass library islr if you receive an error message when loading any of these libraries it likely indicates that the corresponding library has not yet been installed on your system. some libraries such as mass come with r and do not need to be separately installed on your computer. however other packages such as linear regression islr must be downloaded the first time they are used. this can be done directly from within r. for example on a windows system select the install package option under the packages tab. after you select any mirror site a list of available packages will appear. simply select the package you wish to install and r will automatically download the package. alternatively this can be done at the r command line via install.packagesislr. this installation only needs to be done the first time you use a package. however the library function must be called each time you wish to use a given package. simple linear regression the mass library contains the boston data set which records medv house value for neighborhoods around boston. we will seek to predict medv using predictors such as rm number of rooms per house age age of houses and lstat of households with low socioeconomic status. fix boston names boston crim dis zn rad indus tax chas nox ptratio black rm lstat age medv to find out more about the data set we can type we will start by using the lm function to fit a simple linear regression model with medv as the response and lstat as the predictor. the basic syntax is lmy xdata where y is the response x is the predictor and data is the data set in which these two variables are kept. lm fit lm medv lstat error in eval expr envir enclos object medv not found lm the command causes an error because r does not know where to find the variables medv and lstat. the next line tells r that the variables are in boston. if we attach boston the first line works fine because r now recognizes the variables. lm fit lm medv lstat data boston lm fit lm medv lstat attach boston if we type lm.fit some basic information about the model is output. for more detailed information we use summarylm.fit. this gives us pvalues and standard errors for the coefficients as well as the statistic and f-statistic for the model. lm fit call lm formula medv lstat lab linear regression c o e f f i c i e n t s intercept lstat summary lm fit call lm formula medv lstat residuals min q median q max c o e f f i c i e n t s estimate std error t value pr t intercept lstat codes residual standard error on degrees of freedom multiple r squared f statistic on and df adjusted r squared p value we can use the names function in order to find out what other pieces of information are stored in lm.fit. although we can extract these quantities by name e.g. lm.fitcoefficients it is safer to use the extractor functions like coef to access them. names coef names lm fit c o e f f i c i e n t s rank qr call coef lm fit intercept lstat effects residuals fitted values assign df residual terms xlevels model in order to obtain a confidence interval for the coefficient estimates we can use the confint command. confint confint lm fit intercept lstat the predict function can be used to produce confidence intervals and prediction intervals for the prediction of medv for a given value of lstat. predict predict lm fit data frame lstat c interval confidenc e lwr fit upr linear regression predict lm fit data frame lstat c interval predictio n lwr fit upr for instance the confidence interval associated with a lstat value of is and the prediction interval is as expected the confidence and prediction intervals are centered around the same point predicted value of for medv when lstat equals but the latter are substantially wider. we will now plot medv and lstat along with the least squares regression line using the plot and abline functions. abline plot lstat medv abline lm fit there is some evidence for non-linearity in the relationship between lstat and medv. we will explore this issue later in this lab. the abline function can be used to draw any line not just the least squares regression line. to draw a line with intercept a and slope b we type ablineab. below we experiment with some additional settings for plotting lines and points. the command causes the width of the regression line to be increased by a factor of this works for the plot and lines functions also. we can also use the pch option to create different plotting symbols. abline lm fit lwd abline lm fit lwd col red plot lstat medv col red plot lstat medv pch plot lstat medv pch plot pch next we examine some diagnostic plots several of which were discussed in section four diagnostic plots are automatically produced by applying the plot function directly to the output from lm. in general this command will produce one plot at a time and hitting enter will generate the next plot. however it is often convenient to view all four plots together. we can achieve this by using the par function which tells r to split the display screen into separate panels so that multiple plots can be viewed simultaneously. for example divides the plotting region into a grid of panels. par par mfrow c plot lm fit alternatively we can compute the residuals from a linear regression fit using the residuals function. the function rstudent will return the studentized residuals and we can use this function to plot the residuals against the fitted values. residuals rstudent lab linear regression plot predict lm fit residuals lm fit plot predict lm fit rstudent lm fit on the basis of the residual plots there is some evidence of non-linearity. leverage statistics can be computed for any number of predictors using the hatvalues function. hatvalues plot hatvalues lm fit which max hatvalues lm fit the which.max function identifies the index of the largest element of a vector. in this case it tells us which observation has the largest leverage statistic. which.max multiple linear regression in order to fit a multiple linear regression model using least squares we again use the lm function. the syntax lmy is used to fit a model with three predictors and the summary function now outputs the regression coefficients for all the predictors. lm fit lm medv lstat age data boston summary lm fit call lm formula medv lstat age data boston residuals min q median q max c o e f f i c i e n t s estimate std error t value pr t intercept lstat age codes residual standard error on degrees of freedom multiple r squared f statistic on and df adjusted r squared p value the boston data set contains variables and so it would be cumbersome to have to type all of these in order to perform a regression using all of the predictors. instead we can use the following short-hand lm fit lm medv data boston summary lm fit call lm formula medv data boston linear regression residuals min q median q max c o e f f i c i e n t s estimate std error t value pr t intercept crim zn indus chas nox rm age dis rad tax ptratio black lstat codes e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e residual standard error on degrees of freedom multiple r squared f statistic on and df adjusted r squared p value e we can access the individual components of a summary object by name to see what is available. hence summarylm.fitr.sq gives us the and summarylm.fitsigma gives us the rse. the vif function part of the car package can be used to compute variance inflation factors. most vif s are low to moderate for this data. the car package is not part of the base r installation so it must be downloaded the first time you use it via the install.packages option in r. vif library car vif lm fit crim dis zn rad indus chas tax ptratio nox black rm lstat age what if we would like to perform a regression using all of the variables but one? for example in the above regression output age has a high p-value. so we may wish to run a regression excluding this predictor. the following syntax results in a regression using all predictors except age. lm lm medv age data boston summary lm alternatively the update function can be used. update lab linear regression lm update lm fit age interaction terms it is easy to include interaction terms in a linear model using the lm function. the syntax lstatblack tells r to include an interaction term between lstat and black. the syntax lstatage simultaneously includes lstat age and the interaction term lstat age as predictors it is a shorthand for lstatagelstatage. summary lm medv lstat age data boston call lm formula medv lstat age data boston residuals min q median q max c o e f f i c i e n t s estimate std error t value pr t intercept lstat age lstat age codes e residual standard error on degrees of freedom multiple r squared f statistic adjusted r squared on and df p value non-linear transformations of the predictors the lm function can also accommodate non-linear transformations of the predictors. for instance given a predictor x we can create a predictor x using the function i is needed since the has a special meaning in a formula wrapping as we do allows the standard usage in r which is to raise x to the power we now perform a regression of medv onto lstat and lstat lm lm medv lstat i lstat i summary lm call lm formula medv lstat i lstat residuals min q median q max linear regression c o e f f i c i e n t s estimate std error t value pr t intercept lstat i lstat codes residual standard error on degrees of freedom multiple r squared f statistic adjusted r squared on and df p value the near-zero p-value associated with the quadratic term suggests that it leads to an improved model. we use the anova function to further quantify the extent to which the quadratic fit is superior to the linear fit. lm fit lm medv lstat anova anova lm fit lm analysis of variance table model medv lstat model medv lstat i lstat res df rss df sum of sq f pr f codes here model represents the linear submodel containing only one predictor lstat while model corresponds to the larger quadratic model that has two the anova function performs a hypothesis predictors lstat and lstat test comparing the two models. the null hypothesis is that the two models fit the data equally well and the alternative hypothesis is that the full model is superior. here the f-statistic is and the associated p-value is virtually zero. this provides very clear evidence that the model containing is far superior to the model that only the predictors lstat and lstat contains the predictor lstat. this is not surprising since earlier we saw evidence for non-linearity in the relationship between medv and lstat. if we type par mfrow c plot lm then we see that when the lstat little discernible pattern in the residuals. term is included in the model there is in order to create a cubic fit we can include a predictor of the form however this approach can start to get cumbersome for higherorder polynomials. a better approach involves using the poly function to create the polynomial within lm. for example the following command produces a fifth-order polynomial fit poly lab linear regression lm lm medv poly lstat summary lm call lm formula medv poly lstat residuals min q median q max c o e f f i c i e n t s estimate std error t value pr t intercept poly lstat poly lstat poly lstat poly lstat poly lstat codes e e residual standard error on degrees of freedom multiple r squared f statistic adjusted r squared on and df p value this suggests that including additional polynomial terms up to fifth order leads to an improvement in the model fit! however further investigation of the data reveals that no polynomial terms beyond fifth order have significant p-values in a regression fit. of course we are in no way restricted to using polynomial transforma tions of the predictors. here we try a log transformation. summary lm medv log rm data boston qualitative predictors we will now examine the carseats data which is part of the islr library. we will attempt to predict sales car seat sales in locations based on a number of predictors. fix carseats names carseats sales population education compprice price urban income shelveloc us advertisi n g age the carseats data includes qualitative predictors such as shelveloc an indicator of the quality of the shelving location that is the space within a store in which the car seat is displayed at each location. the predictor shelveloc takes on three possible values bad medium and good. linear regression given a qualitative variable such as shelveloc r generates dummy variables automatically. below we fit a multiple regression model that includes some interaction terms. lm fit lm sales income advertisi ng price age data carseats summary lm fit call lm formula sales income advertisin g price age data carseats residuals min q median q max c o e f f i c i e n t s intercept compprice income advertis i ng populatio n price s h e l v e l o c g o o d s h e l v e l o c m e d i u m age education urbanyes usyes income advertisi n g price age codes estimate std error t value pr t e e residual standard error on degrees of freedom multiple r squared f statistic on and df adjusted r squared p value the contrasts function returns the coding that r uses for the dummy variables. contrasts attach carseats contrasts shelveloc bad good medium good medium use to learn about other contrasts and how to set them. r has created a shelvelocgood dummy variable that takes on a value of if the shelving location is good and otherwise. it has also created a shelvelocmedium dummy variable that equals if the shelving location is medium and otherwise. a bad shelving location corresponds to a zero for each of the two dummy variables. the fact that the coefficient for lab linear regression shelvelocgood in the regression output is positive indicates that a good shelving location is associated with high sales to a bad location. and shelvelocmedium has a smaller positive coefficient indicating that a medium shelving location leads to higher sales than a bad shelving location but lower sales than a good shelving location. writing functions as we have seen r comes with many useful functions and still more functions are available by way of r libraries. however we will often be interested in performing an operation for which no function is available. in this setting we may want to write our own function. for instance below we provide a simple function that reads in the islr and mass libraries called loadlibraries. before we have created the function r returns an error if we try to call it. l o a d l i b r a r i e s error object loadlibraries not found l o a d l i b r a r i e s error could not find function l o a d l i b r a r i e s we now create the function. note that the symbols are printed by r and should not be typed in. the symbol informs r that multiple commands are about to be input. hitting enter after typing will cause r to print the symbol. we can then input as many commands as we wish hitting enter after each one. finally the symbol informs r that no further commands will be entered. l o a d l i b r a r i e s function library islr library mass print the libraries have been loaded now if we type in loadlibraries r will tell us what is in the function. l o a d l i b r a r i e s function library islr library mass print the libraries have been loaded if we call the function the libraries are loaded in and the print statement is output. l o a d l i b r a r i e s the libraries have been loaded linear regression exercises conceptual describe the null hypotheses to which the p-values given in table correspond. explain what conclusions you can draw based on these p-values. your explanation should be phrased in terms of sales tv radio and newspaper rather than in terms of the coefficients of the linear model. carefully explain the differences between the knn classifier and knn regression methods. suppose we have a data set with five predictors gpa iq gender for female and for male interaction between gpa and iq and interaction between gpa and gender. the response is starting salary after graduation thousands of dollars. suppose we use least squares to fit the model and get which answer is correct and why? i. for a fixed value of iq and gpa males earn more on average than females. ii. for a fixed value of iq and gpa females earn more on average than males. iii. for a fixed value of iq and gpa males earn more on average than females provided that the gpa is high enough. iv. for a fixed value of iq and gpa females earn more on average than males provided that the gpa is high enough. predict the salary of a female with iq of and a gpa of true or false since the coefficient for the gpaiq interaction term is very small there is very little evidence of an interaction effect. justify your answer. i collect a set of data observations containing a single predictor and a quantitative response. i then fit a linear regression model to the data as well as a separate cubic regression i.e. y suppose that the true relationship between x and y is linear i.e. y consider the training residual sum of squares for the linear regression and also the training rss for the cubic regression. would we expect one to be lower than the other would we expect them to be the same or is there not enough information to tell? justify your answer. exercises answer using test rather than training rss. suppose that the true relationship between x and y is not linear but we don t know how far it is from linear. consider the training rss for the linear regression and also the training rss for the cubic regression. would we expect one to be lower than the other would we expect them to be the same or is there not enough information to tell? justify your answer. answer using test rather than training rss. consider the fitted values that result from performing linear regression without an intercept. in this setting the ith fitted value takes the form where yi xi xiyi show that we can write yi what is note we interpret this result by saying that the fitted values from linear regression are linear combinations of the response values. using argue that in the case of simple linear regression the least squares line always passes through the point x y. it is claimed in the text that in the case of simple linear regression of y onto x the statistic is equal to the square of the correlation between x and y prove that this is the case. for simplicity you may assume that x y applied this question involves the use of simple linear regression on the auto data set. use the lm function to perform a simple linear regression with mpg as the response and horsepower as the predictor. use the summary function to print the results. comment on the output. for example linear regression i. is there a relationship between the predictor and the re sponse? ii. how strong is the relationship between the predictor and the response? iii. is the relationship between the predictor and the response positive or negative? iv. what is the predicted mpg associated with a horsepower of what are the associated confidence and prediction intervals? plot the response and the predictor. use the abline function to display the least squares regression line. use the plot function to produce diagnostic plots of the least squares regression fit. comment on any problems you see with the fit. this question involves the use of multiple linear regression on the auto data set. produce a scatterplot matrix which includes all of the variables in the data set. compute the matrix of correlations between the variables using the function cor. you will need to exclude the name variable which is qualitative. cor use the lm function to perform a multiple linear regression with mpg as the response and all other variables except name as the predictors. use the summary function to print the results. comment on the output. for instance i. is there a relationship between the predictors and the re sponse? ii. which predictors appear to have a statistically significant relationship to the response? iii. what does the coefficient for the year variable suggest? use the plot function to produce diagnostic plots of the linear regression fit. comment on any problems you see with the fit. do the residual plots suggest any unusually large outliers? does the leverage plot identify any observations with unusually high leverage? use the and symbols to fit linear regression models with interaction effects. do any interactions appear to be statistically significant? x x comment on your findings. try a few different transformations of the variables such as logx this question should be answered using the carseats data set. exercises fit a multiple regression model to predict sales using price urban and us. provide an interpretation of each coefficient in the model. be careful some of the variables in the model are qualitative! write out the model in equation form being careful to handle the qualitative variables properly. for which of the predictors can you reject the null hypothesis j on the basis of your response to the previous question fit a smaller model that only uses the predictors for which there is evidence of association with the outcome. how well do the models in and fit the data? using the model from obtain confidence intervals for the coefficients. is there evidence of outliers or high leverage observations in the model from in this problem we will investigate the t-statistic for the null hypothesis in simple linear regression without an intercept. to begin we generate a predictor x and a response y as follows. set seed x rnorm y x rnorm perform a simple linear regression of y onto x without an intercept. report the coefficient estimate the standard error of this coefficient estimate and the t-statistic and p-value associated with the null hypothesis comment on these results. can perform regression without an intercept using the command lmy now perform a simple linear regression of x onto y without an intercept and report the coefficient estimate its standard error and the corresponding t-statistic and p-values associated with the null hypothesis comment on these results. what is the relationship between the results obtained in and for the regression of y onto x without an intercept the tstatistic for takes the form where is given by and where n se xi n linear regression formulas are slightly different from those given in sections and since here we are performing regression without an intercept. show algebraically and confirm numerically in r that the t-statistic can be written as n n n i n xiyi n using the results from argue that the t-statistic for the regression of y onto x is the same as the t-statistic for the regression of x onto y. in r show that when regression is performed with an intercept the t-statistic for is the same for the regression of y onto x as it is for the regression of x onto y. this problem involves simple linear regression without an intercept. recall that the coefficient estimate for the linear regression of y onto x without an intercept is given by under what circumstance is the coefficient estimate for the regression of x onto y the same as the coefficient estimate for the regression of y onto x? generate an example in r with n observations in which the coefficient estimate for the regression of x onto y is different from the coefficient estimate for the regression of y onto x. generate an example in r with n observations in which the coefficient estimate for the regression of x onto y is the same as the coefficient estimate for the regression of y onto x. in this exercise you will create some simulated data and will fit simple linear regression models to it. make sure to use prior to starting part to ensure consistent results. using the rnorm function create a vector x containing observations drawn from a n distribution. this represents a feature x. using the rnorm function create a vector eps containing observations drawn from a n distribution i.e. a normal distribution with mean zero and variance using x and eps generate a vector y according to the model y what is the length of the vector y? what are the values of and in this linear model? exercises create a scatterplot displaying the relationship between x and y. comment on what you observe. fit a least squares linear model to predict y using x. comment on the model obtained. how do and compare to and display the least squares line on the scatterplot obtained in draw the population regression line on the plot in a different color. use the legend command to create an appropriate legend. now fit a polynomial regression model that predicts y using x and is there evidence that the quadratic term improves the model fit? explain your answer. repeat after modifying the data generation process in such a way that there is less noise in the data. the model should remain the same. you can do this by decreasing the variance of the normal distribution used to generate the error term in describe your results. repeat after modifying the data generation process in such a way that there is more noise in the data. the model should remain the same. you can do this by increasing the variance of the normal distribution used to generate the error term in describe your results. what are the confidence intervals for and based on the original data set the noisier data set and the less noisy data set? comment on your results. this problem focuses on the collinearity problem. perform the following commands in r set seed runif rnorm y rnorm the last line corresponds to creating a linear model in which y is a function of and write out the form of the linear model. what are the regression coefficients? what is the correlation between and create a scatterplot displaying the relationship between the variables. using this data fit a least squares regression to predict y using and describe the results obtained. what are and how do these relate to the true and can you reject the null hypothesis how about the null hypothesis linear regression now fit a least squares regression to predict y using only comment on your results. can you reject the null hypothesis now fit a least squares regression to predict y using only comment on your results. can you reject the null hypothesis do the results obtained in contradict each other? explain your answer. now suppose we obtain one additional observation which was unfortunately mismeasured. c c y c re-fit the linear models from to using this new data. what effect does this new observation have on the each of the models? in each model is this observation an outlier? a high-leverage point? both? explain your answers. this problem involves the boston data set which we saw in the lab for this chapter. we will now try to predict per capita crime rate using the other variables in this data set. in other words per capita crime rate is the response and the other variables are the predictors. for each predictor fit a simple linear regression model to predict the response. describe your results. in which of the models is there a statistically significant association between the predictor and the response? create some plots to back up your assertions. fit a multiple regression model to predict the response using all of the predictors. describe your results. for which predictors can we reject the null hypothesis j how do your results from compare to your results from create a plot displaying the univariate regression coefficients from on the x-axis and the multiple regression coefficients from on the y-axis. that is each predictor is displayed as a single point in the plot. its coefficient in a simple linear regression model is shown on the x-axis and its coefficient estimate in the multiple linear regression model is shown on the y-axis. is there evidence of non-linear association between any of the predictors and the response? to answer this question for each predictor x fit a model of the form y classification the linear regression model discussed in chapter assumes that the response variable y is quantitative. but in many situations the response variable is instead qualitative. for example eye color is qualitative taking on values blue brown or green. often qualitative variables are referred to as categorical we will use these terms interchangeably. in this chapter we study approaches for predicting qualitative responses a process that is known as classification. predicting a qualitative response for an observation can be referred to as classifying that observation since it involves assigning the observation to a category or class. on the other hand often the methods used for classification first predict the probability of each of the categories of a qualitative variable as the basis for making the classification. in this sense they also behave like regression methods. there are many possible classification techniques or classifiers that one might use to predict a qualitative response. we touched on some of these in sections and in this chapter we discuss three of the most widely-used classifiers logistic regression linear discriminant analysis and k-nearest neighbors. we discuss more computer-intensive methods in later chapters such as generalized additive models trees random forests and boosting and support vector machines qualitative classification classifier logistic regression linear discriminant analysis k-nearest neighbors g. james et al. an introduction to statistical learning with applications in r springer texts in statistics doi springer sciencebusiness media new york classification an overview of classification classification problems occur often perhaps even more so than regression problems. some examples include a person arrives at the emergency room with a set of symptoms that could possibly be attributed to one of three medical conditions. which of the three conditions does the individual have? an online banking service must be able to determine whether or not a transaction being performed on the site is fraudulent on the basis of the user s ip address past transaction history and so forth. on the basis of dna sequence data for a number of patients with and without a given disease a biologist would like to figure out which dna mutations are deleterious and which are not. just as in the regression setting in the classification setting we have a set of training observations yn that we can use to build a classifier. we want our classifier to perform well not only on the training data but also on test observations that were not used to train the classifier. in this chapter we will illustrate the concept of classification using the simulated default data set. we are interested in predicting whether an individual will default on his or her credit card payment on the basis of annual income and monthly credit card balance. the data set is displayed in figure we have plotted annual income and monthly credit card balance for a subset of individuals. the left-hand panel of figure displays individuals who defaulted in a given month in orange and those who did not in blue. overall default rate is about so we have plotted only a fraction of the individuals who did not default. it appears that individuals who defaulted tended to have higher credit card balances than those who did not. in the right-hand panel of figure two pairs of boxplots are shown. the first shows the distribution of balance split by the binary default variable the second is a similar plot for income. in this chapter we learn how to build a model to predict default for any given value of balance and income since y is not quantitative the simple linear regression model of chapter is not appropriate. it is worth noting that figure displays a very pronounced relationship between the predictor balance and the response default. in most real applications the relationship between the predictor and the response will not be nearly so strong. however for the sake of illustrating the classification procedures discussed in this chapter we use an example in which the relationship between the predictor and the response is somewhat exaggerated. e m o c n i why not linear regression? e c n a a b l e m o c n i balance yes no default yes no default figure the default data set. left the annual incomes and monthly credit card balances of a number of individuals. the individuals who defaulted on their credit card payments are shown in orange and those who did not are shown in blue. center boxplots of balance as a function of default status. right boxplots of income as a function of default status. why not linear regression? we have stated that linear regression is not appropriate in the case of a qualitative response. why not? suppose that we are trying to predict the medical condition of a patient in the emergency room on the basis of her symptoms. in this simplified example there are three possible diagnoses stroke drug overdose and epileptic seizure. we could consider encoding these values as a quantitative response variable y as follows y if stroke if drug overdose if epileptic seizure. using this coding least squares could be used to fit a linear regression model to predict y on the basis of a set of predictors xp. unfortunately this coding implies an ordering on the outcomes putting drug overdose in between stroke and epileptic seizure and insisting that the difference between stroke and drug overdose is the same as the difference between drug overdose and epileptic seizure. in practice there is no particular reason that this needs to be the case. for instance one could choose an equally reasonable coding y if epileptic seizure if stroke if drug overdose. classification which would imply a totally different relationship among the three conditions. each of these codings would produce fundamentally different linear models that would ultimately lead to different sets of predictions on test observations. if the response variable s values did take on a natural ordering such as mild moderate and severe and we felt the gap between mild and moderate was similar to the gap between moderate and severe then a coding would be reasonable. unfortunately in general there is no natural way to convert a qualitative response variable with more than two levels into a quantitative response that is ready for linear regression. for a binary level qualitative response the situation is better. for instance perhaps there are only two possibilities for the patient s medical condition stroke and drug overdose. we could then potentially use the dummy variable approach from section to code the response as follows binary y if stroke if drug overdose. we could then fit a linear regression to this binary response and predict drug overdose if y and stroke otherwise. in the binary case it is not hard to show that even if we flip the above coding linear regression will produce the same final predictions. for a binary response with a coding as above regression by least squares does make sense it can be shown that the x obtained using linear regression is in fact an estimate of prdrug overdosex in this special case. however if we use linear regression some of our estimates might be outside the interval figure making them hard to interpret as probabilities! nevertheless the predictions provide an ordering and can be interpreted as crude probability estimates. curiously it turns out that the classifications that we get if we use linear regression to predict a binary response will be the same as for the linear discriminant analysis procedure we discuss in section however the dummy variable approach cannot be easily extended to accommodate qualitative responses with more than two levels. for these reasons it is preferable to use a classification method that is truly suited for qualitative response values such as the ones presented next. logistic regression consider again the default data set where the response default falls into one of two categories yes or no. rather than modeling this response y directly logistic regression models the probability that y belongs to a particular category. t l f u a e d f o y t i l i b a b o r p t l f u a e d f o y t i l i b a b o r p logistic regression balance balance figure classification using the default data. left estimated probability of default using linear regression. some estimated probabilities are negative! the orange ticks indicate the values coded for defaultno or yes. right predicted probabilities of default using logistic regression. all probabilities lie between and for the default data logistic regression models the probability of default. for example the probability of default given balance can be written as prdefault yesbalance. the values of prdefault yesbalance which we abbreviate pbalance will range between and then for any given value of balance a prediction can be made for default. for example one might predict default yes for any individual for whom pbalance alternatively if a company wishes to be conservative in predicting individuals who are at risk for default then they may choose to use a lower threshold such as pbalance the logistic model how should we model the relationship between px pry and x? convenience we are using the generic coding for the response. in section we talked of using a linear regression model to represent these probabilities px if we use this approach to predict defaultyes using balance then we obtain the model shown in the left-hand panel of figure here we see the problem with this approach for balances close to zero we predict a negative probability of default if we were to predict for very large balances we would get values bigger than these predictions are not sensible since of course the true probability of default regardless of credit card balance must fall between and this problem is not unique to the credit default data. any time a straight line is fit to a binary response that is coded as classification or in principle we can always predict px for some values of x and px for others the range of x is limited. to avoid this problem we must model px using a function that gives outputs between and for all values of x. many functions meet this description. in logistic regression we use the logistic function px e e to fit the model we use a method called maximum likelihood which we discuss in the next section. the right-hand panel of figure illustrates the fit of the logistic regression model to the default data. notice that for low balances we now predict the probability of default as close to but never below zero. likewise for high balances we predict a default probability close to but never above one. the logistic function will always produce an s-shaped curve of this form and so regardless of the value of x we will obtain a sensible prediction. we also see that the logistic model is better able to capture the range of probabilities than is the linear regression model in the left-hand plot. the average fitted probability in both cases is over the training data which is the same as the overall proportion of defaulters in the data set. after a bit of manipulation of we find that px px e the quantity px is called the odds and can take on any value between and values of the odds close to and indicate very low and very high probabilities of default respectively. for example on average in people with an odds of will default since px implies an likewise on average nine out of every ten people with odds of an odds of will default since px implies an odds of odds are traditionally used instead of probabilities in horse-racing since they relate more naturally to the correct betting strategy. logistic function maximum likelihood odds by taking the logarithm of both sides of we arrive at log px px the left-hand side is called the log-odds or logit. we see that the logistic regression model has a logit that is linear in x. recall from chapter that in a linear regression model gives the average change in y associated with a one-unit increase in x. in contrast in a logistic regression model increasing x by one unit changes the log odds by or equivalently it multiplies the odds by e however because the relationship between px and x in is not a straight line log-odds logit logistic regression does not correspond to the change in px associated with a one-unit increase in x. the amount that px changes due to a one-unit change in x will depend on the current value of x. but regardless of the value of x if is positive then increasing x will be associated with increasing px and if is negative then increasing x will be associated with decreasing px. the fact that there is not a straight-line relationship between px and x and the fact that the rate of change in px per unit change in x depends on the current value of x can also be seen by inspection of the right-hand panel of figure estimating the regression coefficients the coefficients and in are unknown and must be estimated based on the available training data. in chapter we used the least squares approach to estimate the unknown linear regression coefficients. although we could use least squares to fit the model the more general method of maximum likelihood is preferred since it has better statistical properties. the basic intuition behind using maximum likelihood to fit a logistic regression model is as follows we seek estimates for and such that the predicted probability pxi of default for each individual using corresponds as closely as possible to the individual s observed default status. in other words we try to find and such that plugging these estimates into the model for px given in yields a number close to one for all individuals who defaulted and a number close to zero for all individuals who did not. this intuition can be formalized using a mathematical equation called a likelihood function pxi likelihood function the estimates and are chosen to maximize this likelihood function. maximum likelihood is a very general approach that is used to fit many of the non-linear models that we examine throughout this book. in the linear regression setting the least squares approach is in fact a special case of maximum likelihood. the mathematical details of maximum likelihood are beyond the scope of this book. however in general logistic regression and other models can be easily fit using a statistical software package such as r and so we do not need to concern ourselves with the details of the maximum likelihood fitting procedure. table shows the coefficient estimates and related information that result from fitting a logistic regression model on the default data in order to predict the probability of defaultyes using balance. we see that this indicates that an increase in balance is associated with an increase in the probability of default. to be precise a one-unit increase in balance is associated with an increase in the log odds of default by units. classification intercept balance coefficient std. error z-statistic p-value table for the default data estimated coefficients of the logistic regression model that predicts the probability of default using balance. a one-unit increase in balance is associated with an increase in the log odds of default by units. many aspects of the logistic regression output shown in table are similar to the linear regression output of chapter for example we can measure the accuracy of the coefficient estimates by computing their standard errors. the z-statistic in table plays the same role as the t-statistic in the linear regression output for example in table on page for instance the z-statistic associated with is equal to and so a large value of the z-statistic indicates evidence against the null hypothesis this null hypothesis implies that px e in other words that the probability of default does not depend on balance. since the p-value associated with balance in table is tiny we can reject in other words we conclude that there is indeed an association between balance and probability of default. the estimated intercept in table is typically not of interest its main purpose is to adjust the average fitted probabilities to the proportion of ones in the data. making predictions once the coefficients have been estimated it is a simple matter to compute the probability of default for any given credit card balance. for example using the coefficient estimates given in table we predict that the default probability for an individual with a balance of is px e e e e which is below in contrast the predicted probability of default for an individual with a balance of is much higher and equals or one can use qualitative predictors with the logistic regression model using the dummy variable approach from section as an example the default data set contains the qualitative variable student. to fit the model we simply create a dummy variable that takes on a value of for students and for non-students. the logistic regression model that results from predicting probability of default from student status can be seen in table the coefficient associated with the dummy variable is positive logistic regression intercept studentyes coefficient std. error z-statistic p-value table for the default data estimated coefficients of the logistic regression model that predicts the probability of default using student status. student status is encoded as a dummy variable with a value of for a student and a value of for a non-student and represented by the variable studentyes in the table. and the associated p-value is statistically significant. this indicates that students tend to have higher default probabilities than non-students e e e e multiple logistic regression we now consider the problem of predicting a binary response using multiple predictors. by analogy with the extension from simple to multiple linear regression in chapter we can generalize as follows log px px pxp where x xp are p predictors. equation can be rewritten as px e pxp e pxp just as in section we use the maximum likelihood method to estimate p. table shows the coefficient estimates for a logistic regression model that uses balance income thousands of dollars and student status to predict probability of default. there is a surprising result here. the pvalues associated with balance and the dummy variable for student status are very small indicating that each of these variables is associated with the probability of default. however the coefficient for the dummy variable is negative indicating that students are less likely to default than nonstudents. in contrast the coefficient for the dummy variable is positive in table how is it possible for student status to be associated with an increase in probability of default in table and a decrease in probability of default in table the left-hand panel of figure provides a graphical illustration of this apparent paradox. the orange and blue solid lines show the average default rates for students and non-students respectively classification intercept balance income studentyes coefficient std. error z-statistic p-value table for the default data estimated coefficients of the logistic regression model that predicts the probability of default using balance income and student status. student status is encoded as a dummy variable studentyes with a value of for a student and a value of for a non-student. in fitting this model income was measured in thousands of dollars. as a function of credit card balance. the negative coefficient for student in the multiple logistic regression indicates that for a fixed value of balance and income a student is less likely to default than a non-student. indeed we observe from the left-hand panel of figure that the student default rate is at or below that of the non-student default rate for every value of balance. but the horizontal broken lines near the base of the plot which show the default rates for students and non-students averaged over all values of balance and income suggest the opposite effect the overall student default rate is higher than the non-student default rate. consequently there is a positive coefficient for student in the single variable logistic regression output shown in table the right-hand panel of figure provides an explanation for this discrepancy. the variables student and balance are correlated. students tend to hold higher levels of debt which is in turn associated with higher probability of default. in other words students are more likely to have large credit card balances which as we know from the left-hand panel of figure tend to be associated with high default rates. thus even though an individual student with a given credit card balance will tend to have a lower probability of default than a non-student with the same credit card balance the fact that students on the whole tend to have higher credit card balances means that overall students tend to default at a higher rate than non-students. this is an important distinction for a credit card company that is trying to determine to whom they should offer credit. a student is riskier than a non-student if no information about the student s credit card balance is available. however that student is less risky than a non-student with the same credit card balance! this simple example illustrates the dangers and subtleties associated with performing regressions involving only a single predictor when other predictors may also be relevant. as in the linear regression setting the results obtained using one predictor may be quite different from those obtained using multiple predictors especially when there is correlation among the predictors. in general the phenomenon seen in figure is known as confounding. confounding e t a r t l f u a e d logistic regression l e c n a a b d r a c t i d e r c credit card balance no yes student status figure confounding in the default data. left default rates are shown for students and non-students the solid lines display default rate as a function of balance while the horizontal broken lines display the overall default rates. right boxplots of balance for students and non-students are shown. by substituting estimates for the regression coefficients from table into we can make predictions. for example a student with a credit card balance of and an income of has an estimated probability of default of px e e e a non-student with the same balance and income has an estimated probability of default of px e we multiply the income coefficient estimate from table by rather than by because in that table the model was fit with income measured in units of logistic regression for response classes we sometimes wish to classify a response variable that has more than two classes. for example in section we had three categories of medical condition in the emergency room stroke drug overdose epileptic seizure. in this setting we wish to model both pry strokex and pry drug overdosex with the remaining pry epileptic seizurex pry strokex pry drug overdosex. the two-class logistic regression models discussed in the previous sections have multiple-class extensions but in practice they tend not to be used all that often. one of the reasons is that the method we discuss in the next section discriminant classification analysis is popular for multiple-class classification. so we do not go into the details of multiple-class logistic regression here but simply note that such an approach is possible and that software for it is available in r. linear discriminant analysis logistic regression involves directly modeling pry kx x using the logistic function given by for the case of two response classes. in statistical jargon we model the conditional distribution of the response y given the predictors x. we now consider an alternative and less direct approach to estimating these probabilities. in this alternative approach we model the distribution of the predictors x separately in each of the response classes given y and then use bayes theorem to flip these around into estimates for pry kx x. when these distributions are assumed to be normal it turns out that the model is very similar in form to logistic regression. why do we need another method when we have logistic regression? there are several reasons when the classes are well-separated the parameter estimates for the logistic regression model are surprisingly unstable. linear discriminant analysis does not suffer from this problem. if n is small and the distribution of the predictors x is approximately normal in each of the classes the linear discriminant model is again more stable than the logistic regression model. as mentioned in section linear discriminant analysis is popular when we have more than two response classes. using bayes theorem for classification suppose that we wish to classify an observation into one of k classes where k in other words the qualitative response variable y can take on k possible distinct and unordered values. let k represent the overall or prior probability that a randomly chosen observation comes from the kth class this is the probability that a given observation is associated with the kth category of the response variable y let fk prx xy k denote x prior the density function of x for an observation that comes from the kth class. in other words fkx is relatively large if there is a high probability that an observation in the kth class has x x and fkx is small if it is very density function this definition is only correct if x is continuous then region dx around x. fkxdx would correspond to the probability of is a discrete random variabl.e. if x fa ling in in a small x l unlikely that an observation in the kth class has x x. then bayes theorem states that linear discriminant analysis pry kx x kfkx k lflx in accordance with our earlier notation we will use the abbreviation pkx pry kx. this suggests that instead of directly computing pkx as in section we can simply plug in estimates of k and fkx into in general estimating k is easy if we have a random sample of y s from the population we simply compute the fraction of the training observations that belong to the kth class. however estimating fkx tends to be more challenging unless we assume some simple forms for these densities. we refer to pkx as the posterior probability that an observation x x belongs to the kth class. that is it is the probability that the observation belongs to the kth class given the predictor value for that observation. we know from chapter that the bayes classifier which classifies an observation to the class for which pkx is largest has the lowest possible error rate out of all classifiers. is of course only true if the terms in are all correctly specified. therefore if we can find a way to estimate fkx then we can develop a classifier that approximates the bayes classifier. such an approach is the topic of the following sections. linear discriminant analysis for p for now assume that p that is we have only one predictor. we would like to obtain an estimate for fkx that we can plug into in order to estimate pkx. we will then classify an observation to the class for which pkx is greatest. in order to estimate fkx we will first make some assumptions about its form. suppose we assume that fkx is normal or gaussian. in the one dimensional setting the normal density takes the form fkx k exp k bayes theorem posterior normal gaussian where k and k are the mean and variance parameters for the kth class. for now let us further assume that k that is there is a shared variance term across all k classes which for simplicity we can denote by plugging into we find that exp pkx k k l exp that in k denotes the prior probability that an observation belongs to the kth class not to be confused with the mathematical constant. the bayes classifier involves assigning an observation classification figure left two one-dimensional normal density functions are shown. the dashed vertical line represents the bayes decision boundary. right observations were drawn from each of the two classes and are shown as histograms. the bayes decision boundary is again shown as a dashed vertical line. the solid vertical line represents the lda decision boundary estimated from the training data. x x to the class for which is largest. taking the log of and rearranging the terms it is not hard to show that this is equivalent to assigning the observation to the class for which kx x k k log k is largest. for instance if k and then the bayes classifier assigns an observation to class if and to class otherwise. in this case the bayes decision boundary corresponds to the point where x an example is shown in the left-hand panel of figure the two normal density functions that are displayed and represent two distinct classes. the mean and variance parameters for the two density functions are and the two densities overlap and so given that x x there is some uncertainty about the class to which the observation belongs. if we assume that an observation is equally likely to come from either class that is then by inspection of we see that the bayes classifier assigns the observation to class if x and class otherwise. note that in this case we can compute the bayes classifier because we know that x is drawn from a gaussian distribution within each class and we know all of the parameters involved. in a real-life situation we are not able to calculate the bayes classifier. in practice even if we are quite certain of our assumption that x is drawn from a gaussian distribution within each class we still have to estimate the parameters k k and the linear discriminant linear discriminant analysis analysis method approximates the bayes classifier by plugging estimates for k k and into in particular the following estimates are used linear discriminant analysis k nk iyik xi n k iyik where n is the total number of training observations and nk is the number of training observations in the kth class. the estimate for k is simply the average of all the training observations from the kth class while can be seen as a weighted average of the sample variances for each of the k classes. sometimes we have knowledge of the class membership probabilities k which can be used directly. in the absence of any additional information lda estimates k using the proportion of the training observations that belong to the kth class. in other words k nkn. the lda classifier plugs the estimates given in and into and assigns an observation x x to the class for which kx x k k log k discriminant function is largest. the word linear in the classifier s name stems from the fact that the discriminant functions kx in are linear functions of x opposed to a more complex function of x. the right-hand panel of figure displays a histogram of a random sample of observations from each class. to implement lda we began by estimating k k and using and we then computed the decision boundary shown as a black solid line that results from assigning an observation to the class for which is largest. all points to the left of this line will be assigned to the green class while points to the right of this line are assigned to the purple class. in this case since we have as a result the decision boundary corresponds to the midpoint between the sample means for the two classes the figure indicates that the lda decision boundary is slightly to the left of the optimal bayes decision boundary which instead equals how well does the lda classifier perform on this data? since this is simulated data we can generate a large number of test observations in order to compute the bayes error rate and the lda test error rate. these are and respectively. in other words the lda classifier s error rate is only above the smallest possible error rate! this indicates that lda is performing pretty well on this data set. classification figure two multivariate gaussian density functions are shown with p left the two predictors are uncorrelated. right the two variables have a correlation of to reiterate the lda classifier results from assuming that the observations within each class come from a normal distribution with a class-specific mean vector and a common variance and plugging estimates for these parameters into the bayes classifier. in section we will consider a less stringent set of assumptions by allowing the observations in the kth class to have a class-specific variance k. multivariate gaussian linear discriminant analysis for p we now extend the lda classifier to the case of multiple predictors. to do this we will assume that x xp is drawn from a multivariate gaussian multivariate normal distribution with a class-specific mean vector and a common covariance matrix. we begin with a brief review of such a distribution. the multivariate gaussian distribution assumes that each individual predictor follows a one-dimensional normal distribution as in with some correlation between each pair of predictors. two examples of multivariate gaussian distributions with p are shown in figure the height of the surface at any particular point represents the probability that both and fall in a small region around that point. in either panel if the surface is cut along the axis or along the axis the resulting cross-section will have the shape of a one-dimensional normal distribution. the left-hand panel of figure illustrates an example in which and this surface has a characteristic bell shape. however the bell shape will be distorted if the predictors are correlated or have unequal variances as is illustrated in the right-hand panel of figure in this situation the base of the bell will have an elliptical rather than circular linear discriminant analysis x x figure an example with three classes. the observations from each class are drawn from a multivariate gaussian distribution with p with a class-specific mean vector and a common covariance matrix. left ellipses that contain of the probability for each of the three classes are shown. the dashed lines are the bayes decision boundaries. right observations were generated from each class and the corresponding lda decision boundaries are indicated using solid black lines. the bayes decision boundaries are once again shown as dashed lines. shape. to indicate that a p-dimensional random variable x has a multivariate gaussian distribution we write x n here ex is the mean of x vector with p components and covx is the p p covariance matrix of x. formally the multivariate gaussian density is defined as f exp in the case of p predictors the lda classifier assumes that the observations in the kth class are drawn from a multivariate gaussian distribution n k where k is a class-specific mean vector and is a covariance matrix that is common to all k classes. plugging the density function for the kth class fkx x into and performing a little bit of algebra reveals that the bayes classifier assigns an observation x x to the class for which kx xt k k log k t k is largest. this is the vectormatrix version of an example is shown in the left-hand panel of figure three equallysized gaussian classes are shown with class-specific mean vectors and a common covariance matrix. the three ellipses represent regions that contain of the probability for each of the three classes. the dashed lines classification are the bayes decision boundaries. in other words they represent the set of values x for which kx i.e. xt k k xt t k l l t l for k l. log k term from has disappeared because each of the three classes has the same number of training observations i.e. k is the same for each class. note that there are three lines representing the bayes decision boundaries because there are three pairs of classes among the three classes. that is one bayes decision boundary separates class from class one separates class from class and one separates class from class these three bayes decision boundaries divide the predictor space into three regions. the bayes classifier will classify an observation according to the region in which it is located. once again we need to estimate the unknown parameters k k and the formulas are similar to those used in the onedimensional case given in to assign a new observation x x lda plugs these estimates into and classifies to the class for which kx is largest. note that in kx is a linear function of x that is the lda decision rule depends on x only through a linear combination of its elements. once again this is the reason for the word linear in lda. in the right-hand panel of figure observations drawn from each of the three classes are displayed and the resulting lda decision boundaries are shown as solid black lines. overall the lda decision boundaries are pretty close to the bayes decision boundaries shown again as dashed lines. the test error rates for the bayes and lda classifiers are and respectively. this indicates that lda is performing well on this data. we can perform lda on the default data in order to predict whether or not an individual will default on the basis of credit card balance and student status. the lda model fit to the training samples results in a training error rate of this sounds like a low error rate but two caveats must be noted. first of all training error rates will usually be lower than test error rates which are the real quantity of interest. in other words we might expect this classifier to perform worse if we use it to predict whether or not a new set of individuals will default. the reason is that we specifically adjust the parameters of our model to do well on the training data. the higher the ratio of parameters p to number of samples n the more we expect this overfitting to play a role. for these data we don t expect this to be a problem since p and n second since only of the individuals in the training sample defaulted a simple but useless classifier that always predicts that overfitting linear discriminant analysis predicted default status no yes total true default status total no yes table a confusion matrix compares the lda predictions to the true default statuses for the training observations in the default data set. elements on the diagonal of the matrix represent individuals whose default statuses were correctly predicted while off-diagonal elements represent individuals that were misclassified. lda made incorrect predictions for individuals who did not default and for individuals who did default. each individual will not default regardless of his or her credit card balance and student status will result in an error rate of in other words the trivial null classifier will achieve an error rate that is only a bit higher than the lda training set error rate. null in practice a binary classifier such as this one can make two types of errors it can incorrectly assign an individual who defaults to the no default category or it can incorrectly assign an individual who does not default to the default category. it is often of interest to determine which of these two types of errors are being made. a confusion matrix shown for the default data in table is a convenient way to display this information. the table reveals that lda predicted that a total of people would default. of these people actually defaulted and did not. hence only out of of the individuals who did not default were incorrectly labeled. this looks like a pretty low error rate! however of the individuals who defaulted were missed by lda. so while the overall error rate is low the error rate among individuals who defaulted is very high. from the perspective of a credit card company that is trying to identify high-risk individuals an error rate of among individuals who default may well be unacceptable. class-specific performance is also important in medicine and biology where the terms sensitivity and specificity characterize the performance of a classifier or screening test. in this case the sensitivity is the percentage of true defaulters that are identified a low in this case. the specificity is the percentage of non-defaulters that are correctly identified here why does lda do such a poor job of classifying the customers who default? in other words why does it have such a low sensitivity? as we have seen lda is trying to approximate the bayes classifier which has the lowest total error rate out of all classifiers the gaussian model is correct. that is the bayes classifier will yield the smallest possible total number of misclassified observations irrespective of which class the errors come from. that is some misclassifications will result from incorrectly assigning confusion matrix sensitivity specificity classification predicted default status no yes total true default status total no yes table a confusion matrix compares the lda predictions to the true default statuses for the training observations in the default data set using a modified threshold value that predicts default for any individuals whose posterior default probability exceeds a customer who does not default to the default class and others will result from incorrectly assigning a customer who defaults to the non-default class. in contrast a credit card company might particularly wish to avoid incorrectly classifying an individual who will default whereas incorrectly classifying an individual who will not default though still to be avoided is less problematic. we will now see that it is possible to modify lda in order to develop a classifier that better meets the credit card company s needs. the bayes classifier works by assigning an observation to the class for which the posterior probability pkx is greatest. in the two-class case this amounts to assigning an observation to the default class if prdefault yesx x thus the bayes classifier and by extension lda uses a threshold of for the posterior probability of default in order to assign an observation to the default class. however if we are concerned about incorrectly predicting the default status for individuals who default then we can consider lowering this threshold. for instance we might label any customer with a posterior probability of default above to the default class. in other words instead of assigning an observation to the default class if holds we could instead assign an observation to this class if prdefault yesx x the error rates that result from taking this approach are shown in table now lda predicts that individuals will default. of the individuals who default lda correctly predicts all but or this is a vast improvement over the error rate of that resulted from using the threshold of however this improvement comes at a cost now individuals who do not default are incorrectly classified. as a result the overall error rate has increased slightly to but a credit card company may consider this slight increase in the total error rate to be a small price to pay for more accurate identification of individuals who do indeed default. figure illustrates the trade-off that results from modifying the threshold value for the posterior probability of default. various error rates are linear discriminant analysis t e a r r o r r e threshold figure for the default data set error rates are shown as a function of the threshold value for the posterior probability that is used to perform the assignment. the black solid line displays the overall error rate. the blue dashed line represents the fraction of defaulting customers that are incorrectly classified and the orange dotted line indicates the fraction of errors among the non-defaulting customers. shown as a function of the threshold value. using a threshold of as in minimizes the overall error rate shown as a black solid line. this is to be expected since the bayes classifier uses a threshold of and is known to have the lowest overall error rate. but when a threshold of is used the error rate among the individuals who default is quite high dashed line. as the threshold is reduced the error rate among individuals who default decreases steadily but the error rate among the individuals who do not default increases. how can we decide which threshold value is best? such a decision must be based on domain knowledge such as detailed information about the costs associated with default. the roc curve is a popular graphic for simultaneously displaying the two types of errors for all possible thresholds. the name roc is historic and comes from communications theory. it is an acronym for receiver operating characteristics. figure displays the roc curve for the lda classifier on the training data. the overall performance of a classifier summarized over all possible thresholds is given by the area under the curve an ideal roc curve will hug the top left corner so the larger the auc the better the classifier. for this data the auc is which is close to the maximum of one so would be considered very good. we expect a classifier that performs no better than chance to have an auc of evaluated on an independent test set not used in model training. roc curves are useful for comparing different classifiers since they take into account all possible thresholds. it turns out that the roc curve for the logistic regression model of section fit to these data is virtually indistinguishable from this one for the lda model so we do not display it here. as we have seen above varying the classifier threshold changes its true positive and false positive rate. these are also called the sensitivity and one roc curve area under the curve sensitivity classification roc curve t e a r e v i t i s o p e u r t false positive rate figure a roc curve for the lda classifier on the default data. it traces out two types of error as we vary the threshold value for the posterior probability of default. the actual thresholds are not shown. the true positive rate is the sensitivity the fraction of defaulters that are correctly identified using a given threshold value. the false positive rate is the fraction of non-defaulters that we classify incorrectly as defaulters using that same threshold value. the ideal roc curve hugs the top left corner indicating a high true positive rate and a low false positive rate. the dotted line represents the no information classifier this is what we would expect if student status and credit card balance are not associated with probability of default. or non-null true false pos. class or non-null false neg. true pos. or null true neg. total n p predicted class or null total n p table possible results when applying a classifier or diagnostic test to a population. minus the specificity of our classifier. since there is an almost bewildering array of terms used in this context we now give a summary. table shows the possible results when applying a classifier diagnostic test to a population. to make the connection with the epidemiology literature we think of as the disease that we are trying to detect and as the non-disease state. to make the connection to the classical hypothesis testing literature we think of as the null hypothesis and as the alternative hypothesis. in the context of the default data indicates an individual who defaults and indicates one who does not. specificity linear discriminant analysis name false pos. rate true pos. rate pos. pred. value neg. pred. value definition synonyms fpn type i error specificity tpp type ii error power sensitivity recall tpp tnn precision false discovery proportion table important measures for classification and diagnostic testing derived from quantities in table table lists many of the popular performance measures that are used in this context. the denominators for the false positive and true positive rates are the actual population counts in each class. in contrast the denominators for the positive predictive value and the negative predictive value are the total predicted counts for each class. quadratic discriminant analysis as we have discussed lda assumes that the observations within each class are drawn from a multivariate gaussian distribution with a classspecific mean vector and a covariance matrix that is common to all k classes. quadratic discriminant analysis provides an alternative approach. like lda the qda classifier results from assuming that the observations from each class are drawn from a gaussian distribution and plugging estimates for the parameters into bayes theorem in order to perform prediction. however unlike lda qda assumes that each class has its own covariance matrix. that is it assumes that an observation from the kth class is of the form x n k k where k is a covariance matrix for the kth class. under this assumption the bayes classifier assigns an observation x x to the class for which quadratic discriminant analysis kx kt xt k x xt k k log k log k log k log k k k k k t k is largest. so the qda classifier involves plugging estimates for k k and k into and then assigning an observation x x to the class for which this quantity is largest. unlike in the quantity x appears as a quadratic function in this is where qda gets its name. why does it matter whether or not we assume that the k classes share a common covariance matrix? in other words why would one prefer lda to qda or vice-versa? the answer lies in the bias-variance trade-off. when there are p predictors then estimating a covariance matrix requires estimating parameters. qda estimates a separate covariance matrix for each class for a total of parameters. with predictors this classification x x figure left the bayes dashed lda dotted and qda solid decision boundaries for a two-class problem with the shading indicates the qda decision rule. since the bayes decision boundary is linear it is more accurately approximated by lda than by qda. right details are as given in the left-hand panel except that since the bayes decision boundary is non-linear it is more accurately approximated by qda than by lda. is some multiple of which is a lot of parameters. by instead assuming that the k classes share a common covariance matrix the lda model becomes linear in x which means there are kp linear coefficients to estimate. consequently lda is a much less flexible classifier than qda and so has substantially lower variance. this can potentially lead to improved prediction performance. but there is a trade-off if lda s assumption that the k classes share a common covariance matrix is badly off then lda can suffer from high bias. roughly speaking lda tends to be a better bet than qda if there are relatively few training observations and so reducing variance is crucial. in contrast qda is recommended if the training set is very large so that the variance of the classifier is not a major concern or if the assumption of a common covariance matrix for the k classes is clearly untenable. figure illustrates the performances of lda and qda in two scenarios. in the left-hand panel the two gaussian classes have a common correlation of between and as a result the bayes decision boundary is linear and is accurately approximated by the lda decision boundary. the qda decision boundary is inferior because it suffers from higher variance without a corresponding decrease in bias. in contrast the right-hand panel displays a situation in which the orange class has a correlation of between the variables and the blue class has a correlation of now the bayes decision boundary is quadratic and so qda more accurately approximates this boundary than does lda. a comparison of classification methods a comparison of classification methods in this chapter we have considered three different classification approaches logistic regression lda and qda. in chapter we also discussed the k-nearest neighbors method. we now consider the types of scenarios in which one approach might dominate the others. though their motivations differ the logistic regression and lda methods are closely connected. consider the two-class setting with p predictor and let and be the probabilities that the observation x x belongs to class and class respectively. in the lda framework we can see from to a bit of simple algebra that the log odds is given by log log where and are functions of and from we know that in logistic regression log both and are linear functions of x. hence both logistic regression and lda produce linear decision boundaries. the only difference between the two approaches lies in the fact that and are estimated using maximum likelihood whereas and are computed using the estimated mean and variance from a normal distribution. this same connection between lda and logistic regression also holds for multidimensional data with p since logistic regression and lda differ only in their fitting procedures one might expect the two approaches to give similar results. this is often but not always the case. lda assumes that the observations are drawn from a gaussian distribution with a common covariance matrix in each class and so can provide some improvements over logistic regression when this assumption approximately holds. conversely logistic regression can outperform lda if these gaussian assumptions are not met. recall from chapter that knn takes a completely different approach from the classifiers seen in this chapter. in order to make a prediction for an observation x x the k training observations that are closest to x are identified. then x is assigned to the class to which the plurality of these observations belong. hence knn is a completely non-parametric approach no assumptions are made about the shape of the decision boundary. therefore we can expect this approach to dominate lda and logistic regression when the decision boundary is highly non-linear. on the other hand knn does not tell us which predictors are important we don t get a table of coefficients as in table classification scenario scenario scenario knn knn cv lda logistic qda knn knn cv lda logistic qda knn knn cv lda logistic qda figure boxplots of the test error rates for each of the linear scenarios described in the main text. scenario scenario scenario knn knn cv lda logistic qda knn knn cv lda logistic qda knn knn cv lda logistic qda figure boxplots of the test error rates for each of the non-linear scenarios described in the main text. finally qda serves as a compromise between the non-parametric knn method and the linear lda and logistic regression approaches. since qda assumes a quadratic decision boundary it can accurately model a wider range of problems than can the linear methods. though not as flexible as knn qda can perform better in the presence of a limited number of training observations because it does make some assumptions about the form of the decision boundary. to illustrate the performances of these four classification approaches we generated data from six different scenarios. in three of the scenarios the bayes decision boundary is linear and in the remaining scenarios it is non-linear. for each scenario we produced random training data sets. on each of these training sets we fit each method to the data and computed the resulting test error rate on a large test set. results for the linear scenarios are shown in figure and the results for the non-linear scenarios are in figure the knn method requires selection of k the number of neighbors. we performed knn with two values of k k a comparison of classification methods and a value of k that was chosen automatically using an approach called cross-validation which we discuss further in chapter in each of the six scenarios there were p predictors. the scenarios were as follows scenario there were training observations in each of two classes. the observations within each class were uncorrelated random normal variables with a different mean in each class. the left-hand panel of figure shows that lda performed well in this setting as one would expect since this is the model assumed by lda. knn performed poorly because it paid a price in terms of variance that was not offset by a reduction in bias. qda also performed worse than lda since it fit a more flexible classifier than necessary. since logistic regression assumes a linear decision boundary its results were only slightly inferior to those of lda. scenario details are as in scenario except that within each class the two predictors had a correlation of the center panel of figure indicates little change in the relative performances of the methods as compared to the previous scenario. scenario we generated and from the t-distribution with observations per class. the t-distribution has a similar shape to the normal distribution but it has a tendency to yield more extreme points that is more points that are far from the mean. in this setting the decision boundary was still linear and so fit into the logistic regression framework. the set-up violated the assumptions of lda since the observations were not drawn from a normal distribution. the right-hand panel of figure shows that logistic regression outperformed lda though both methods were superior to the other approaches. in particular the qda results deteriorated considerably as a consequence of non-normality. scenario the data were generated from a normal distribution with a correlation of between the predictors in the first class and correlation of between the predictors in the second class. this setup corresponded to the qda assumption and resulted in quadratic decision boundaries. the left-hand panel of figure shows that qda outperformed all of the other approaches. scenario within each class the observations were generated from a normal distribution with uncorrelated predictors. however the responses were sampled from the logistic function using x and as predictors. consequently there is a quadratic decision x boundary. the center panel of figure indicates that qda once again performed best followed closely by knn-cv. the linear methods had poor performance. tdistribution classification scenario details are as in the previous scenario but the responses were sampled from a more complicated non-linear function. as a result even the quadratic decision boundaries of qda could not adequately model the data. the right-hand panel of figure shows that qda gave slightly better results than the linear methods while the much more flexible knn-cv method gave the best results. but knn with k gave the worst results out of all methods. this highlights the fact that even when the data exhibits a complex nonlinear relationship a non-parametric method such as knn can still give poor results if the level of smoothness is not chosen correctly. these six examples illustrate that no one method will dominate the others in every situation. when the true decision boundaries are linear then the lda and logistic regression approaches will tend to perform well. when the boundaries are moderately non-linear qda may give better results. finally for much more complicated decision boundaries a non-parametric approach such as knn can be superior. but the level of smoothness for a non-parametric approach must be chosen carefully. in the next chapter we examine a number of approaches for choosing the correct level of smoothness and in general for selecting the best overall method. finally recall from chapter that in the regression setting we can accommodate a non-linear relationship between the predictors and the response by performing regression using transformations of the predictors. a similar approach could be taken in the classification setting. for instance we could create a more flexible version of logistic regression by including x x and even x as predictors. this may or may not improve logistic regression s performance depending on whether the increase in variance due to the added flexibility is offset by a sufficiently large reduction in bias. we could do the same for lda. if we added all possible quadratic terms and cross-products to lda the form of the model would be the same as the qda model although the parameter estimates would be different. this device allows us to move somewhere between an lda and a qda model. lab logistic regression lda qda and knn the stock market data we will begin by examining some numerical and graphical summaries of the smarket data which is part of the islr library. this data set consists of percentage returns for the sp stock index over days from the beginning of until the end of for each date we have recorded the percentage returns for each of the five previous trading days through we have also recorded volume number of shares traded lab logistic regression lda qda and knn on the previous day in billions today percentage return on the date in question and direction the market was up or down on this date. library islr names smarket year dim smarket summary smarket volume today direction year min st qu median mean rd qu max min st qu median mean rd qu max min st qu median mean rd qu max min st qu median mean rd qu max min st qu median mean rd qu max min st qu median mean rd qu max volume today min st qu median mean rd qu max min st qu median mean rd qu max pairs smarket direction down up the cor function produces a matrix that contains all of the pairwise correlations among the predictors in a data set. the first command below gives an error message because the direction variable is qualitative. cor smarket error in cor smarket x must be numeric cor smarket year volume today year year volume today classification volume today as one would expect the correlations between the lag variables and today s returns are close to zero. in other words there appears to be little correlation between today s returns and previous days returns. the only substantial correlation is between year and volume. by plotting the data we see that volume is increasing over time. in other words the average number of shares traded daily increased from to attach smarket plot volume logistic regression next we will fit a logistic regression model in order to predict direction using through and volume. the glm function fits generalized linear models a class of models that includes logistic regression. the syntax of the glm function is similar to that of lm except that we must pass in the argument familybinomial in order to tell r to run a logistic regression rather than some other type of generalized linear model. glm fit s glm direction volume glm generalized linear model data smarket family binomial summary glm fit s call glm formula direction volume family binomial data smarket deviance residuals min q median q max c o e f f i c i e n t s intercept volume estimate std error z value pr z lab logistic regression lda qda and knn dispersion parameter for binomial family taken to be null deviance residual deviance aic on on degrees of freedom degrees of freedom number of fisher scoring iteration s the smallest p-value here is associated with the negative coefficient for this predictor suggests that if the market had a positive return yesterday then it is less likely to go up today. however at a value of the p-value is still relatively large and so there is no clear evidence of a real association between and direction. we use the coef function in order to access just the coefficients for this fitted model. we can also use the summary function to access particular aspects of the fitted model such as the p-values for the coefficients. coef glm fit s intercept volume summary glm fit s estimate std error z value pr z intercept volume summary glm fit s intercept volume the predict function can be used to predict the probability that the market will go up given values of the predictors. the typeresponse option tells r to output probabilities of the form p as opposed to other information such as the logit. if no data set is supplied to the predict function then the probabilities are computed for the training data that was used to fit the logistic regression model. here we have printed only the first ten probabilities. we know that these values correspond to the probability of the market going up rather than down because the contrasts function indicates that r has created a dummy variable with a for up. glm probs predict glm fit s type response glm probs classification contrasts direction up down up in order to make a prediction as to whether the market will go up or down on a particular day we must convert these predicted probabilities into class labels up or down. the following two commands create a vector of class predictions based on whether the predicted probability of a market increase is greater than or less than glm pred rep down glm pred glm probs up the first command creates a vector of down elements. the second line transforms to up all of the elements for which the predicted probability of a market increase exceeds given these predictions the table function can be used to produce a confusion matrix in order to determine how many observations were correctly or incorrectly classified. table table glm pred direction glm pred down direction up down up mean glm pred direction the diagonal elements of the confusion matrix indicate correct predictions while the off-diagonals represent incorrect predictions. hence our model correctly predicted that the market would go up on days and that it would go down on days for a total of correct predictions. the mean function can be used to compute the fraction of days for which the prediction was correct. in this case logistic regression correctly predicted the movement of the market of the time. at first glance it appears that the logistic regression model is working a little better than random guessing. however this result is misleading because we trained and tested the model on the same set of observations. in other words is the training error rate. as we have seen previously the training error rate is often overly optimistic it tends to underestimate the test error rate. in order to better assess the accuracy of the logistic regression model in this setting we can fit the model using part of the data and then examine how well it predicts the held out data. this will yield a more realistic error rate in the sense that in practice we will be interested in our model s performance not on the data that we used to fit the model but rather on days in the future for which the market s movements are unknown. lab logistic regression lda qda and knn to implement this strategy we will first create a vector corresponding to the observations from through we will then use this vector to create a held out data set of observations from train year smarket smarket train dim smarket direction direction train the object train is a vector of elements corresponding to the observations in our data set. the elements of the vector that correspond to observations that occurred before are set to true whereas those that correspond to observations in are set to false. the object train is a boolean vector since its elements are true and false. boolean vectors can be used to obtain a subset of the rows or columns of a matrix. for instance the command smarkettrain would pick out a submatrix of the stock market data set corresponding only to the dates before since those are the ones for which the elements of train are true. the symbol can be used to reverse all of the elements of a boolean vector. that is is a vector similar to train except that the elements that are true in train get swapped to false in and the elements that are false in train get swapped to true in therefore smarket!train yields a submatrix of the stock market data containing only the observations for which train is false that is the observations with dates in the output above indicates that there are such observations. we now fit a logistic regression model using only the subset of the observations that correspond to dates before using the subset argument. we then obtain predicted probabilities of the stock market going up for each of the days in our test set that is for the days in glm fit s glm direction volume data smarket family binomial subset train glm probs predict glm fit s smarket type response notice that we have trained and tested our model on two completely separate data sets training was performed using only the dates before and testing was performed using only the dates in finally we compute the predictions for and compare them to the actual movements of the market over that time period. boolean glm pred rep down glm pred glm probs up table glm pred direction direction glm pred down up down up mean glm pred direction classification mean glm pred direction the notation means not equal to and so the last command computes the test set error rate. the results are rather disappointing the test error rate is which is worse than random guessing! of course this result is not all that surprising given that one would not generally expect to be able to use previous days returns to predict future market performance. all if it were possible to do so then the authors of this book would be out striking it rich rather than writing a statistics textbook. we recall that the logistic regression model had very underwhelming pvalues associated with all of the predictors and that the smallest p-value though not very small corresponded to perhaps by removing the variables that appear not to be helpful in predicting direction we can obtain a more effective model. after all using predictors that have no relationship with the response tends to cause a deterioration in the test error rate such predictors cause an increase in variance without a corresponding decrease in bias and so removing such predictors may in turn yield an improvement. below we have refit the logistic regression using just and which seemed to have the highest predictive power in the original logistic regression model. glm fit s glm direction data smarket family binomial subset train glm probs predict glm fit s smarket type response glm pred rep down glm pred glm probs up table glm pred direction direction up glm pred down down up mean glm pred direction now the results appear to be a little better of the daily movements have been correctly predicted. it is worth noting that in this case a much simpler strategy of predicting that the market will increase every day will also be correct of the time! hence in terms of overall error rate the logistic regression method is no better than the na ve approach. however the confusion matrix shows that on days when logistic regression predicts an increase in the market it has a accuracy rate. this suggests a possible trading strategy of buying on days when the model predicts an increasing market and avoiding trades on days when a decrease is predicted. of course one would need to investigate more carefully whether this small improvement was real or just due to random chance. lab logistic regression lda qda and knn suppose that we want to predict the returns associated with particular values of and in particular we want to predict direction on a day when and equal and respectively and on a day when they equal and we do this using the predict function. predict glm fit s newdata data frame c c type response linear discriminant analysis now we will perform lda on the smarket data. in r we fit an lda model using the lda function which is part of the mass library. notice that the syntax for the lda function is identical to that of lm and to that of glm except for the absence of the family option. we fit the model using only the observations before lda library mass lda fit lda direction data smarket subset train lda fit call lda direction data smarket subset train prior p r o b a b i l i t i e s of groups down up group means down up c o e f f i c i e n t s of linear d i s c r i m i n a n t s plot lda fit the lda output indicates that and in other words of the training observations correspond to days during which the market went down. it also provides the group means these are the average of each predictor within each class and are used by lda as estimates of k. these suggest that there is a tendency for the previous days returns to be negative on days when the market increases and a tendency for the previous days returns to be positive on days when the market declines. the coefficients of linear discriminants output provides the linear combination of and that are used to form the lda decision rule. in other words these are the multipliers of the elements of x x in if is large then the lda classifier will classification predict a market increase and if it is small then the lda classifier will predict a market decline. the plot function produces plots of the linear discriminants obtained by computing for each of the training observations. the predict function returns a list with three elements. the first element class contains lda s predictions about the movement of the market. the second element posterior is a matrix whose kth column contains the posterior probability that the corresponding observation belongs to the kth class computed from finally x contains the linear discriminants described earlier. lda pred predict lda fit smarket names lda pred class posterior x as we observed in section the lda and logistic regression predictions are almost identical. lda class lda predclass table lda class direction direction up lda pred down down up mean lda class direction applying a threshold to the posterior probabilities allows us to recreate the predictions contained in lda.predclass. sum lda p r e d p o s t e r i o r sum lda p r e d p o s t e r i o r notice that the posterior probability output by the model corresponds to the probability that the market will decrease lda p r e d p o s t e r i o r lda class if we wanted to use a posterior probability threshold other than in order to make predictions then we could easily do so. for instance suppose that we wish to predict a market decrease only if we are very certain that the market will indeed decrease on that day say if the posterior probability is at least sum lda p r e d p o s t e r i o r no days in meet that threshold! in fact the greatest posterior probability of decrease in all of was lab logistic regression lda qda and knn quadratic discriminant analysis we will now fit a qda model to the smarket data. qda is implemented in r using the qda function which is also part of the mass library. the syntax is identical to that of lda. qda fit qda direction data smarket subset train qda qda fit call qda direction data smarket subset train prior p r o b a b i l i t i e s of groups down up group means down up the output contains the group means. but it does not contain the coefficients of the linear discriminants because the qda classifier involves a quadratic rather than a linear function of the predictors. the predict function works in exactly the same fashion as for lda. qda class predict qda fit smarket table qda class direction direction qda class down up down up mean qda class direction interestingly the qda predictions are accurate almost of the time even though the data was not used to fit the model. this level of accuracy is quite impressive for stock market data which is known to be quite hard to model accurately. this suggests that the quadratic form assumed by qda may capture the true relationship more accurately than the linear forms assumed by lda and logistic regression. however we recommend evaluating this method s performance on a larger test set before betting that this approach will consistently beat the market! k-nearest neighbors we will now perform knn using the knn function which is part of the class library. this function works rather differently from the other modelfitting functions that we have encountered thus far. rather than a two-step approach in which we first fit the model and then we use the model to make predictions knn forms predictions using a single command. the function requires four inputs. knn classification a matrix containing the predictors associated with the training data labeled train.x below. a matrix containing the predictors associated with the data for which we wish to make predictions labeled test.x below. a vector containing the class labels for the training observations labeled train.direction below. a value for k the number of nearest neighbors to be used by the classifier. we use the cbind function short for column bind to bind the and variables together into two matrices one for the training set and the other for the test set. cbind library class train x cbind train test x cbind train train direction direction train now the knn function can be used to predict the market s movement for the dates in we set a random seed before we apply knn because if several observations are tied as nearest neighbors then r will randomly break the tie. therefore a seed must be set in order to ensure reproducibility of results. set seed knn pred knn train test train direction k table knn pred direction direction knn pred down up down up the results using k are not very good since only of the observations are correctly predicted. of course it may be that k results in an overly flexible fit to the data. below we repeat the analysis using k knn pred knn train test train direction k table knn pred direction direction knn pred down up down up mean knn pred direction the results have improved slightly. but increasing k further turns out to provide no further improvements. it appears that for this data qda provides the best results of the methods that we have examined so far. lab logistic regression lda qda and knn an application to caravan insurance data finally we will apply the knn approach to the caravan data set which is part of the islr library. this data set includes predictors that measure demographic characteristics for individuals. the response variable is purchase which indicates whether or not a given individual purchases a caravan insurance policy. in this data set only of people purchased caravan insurance. dim caravan attach caravan summary purchase yes no because the knn classifier predicts the class of a given test observation by identifying the observations that are nearest to it the scale of the variables matters. any variables that are on a large scale will have a much larger effect on the distance between the observations and hence on the knn classifier than variables that are on a small scale. for instance imagine a data set that contains two variables salary and age in dollars and years respectively. as far as knn is concerned a difference of in salary is enormous compared to a difference of years in age. consequently salary will drive the knn classification results and age will have almost no effect. this is contrary to our intuition that a salary difference of is quite small compared to an age difference of years. furthermore the importance of scale to the knn classifier leads to another issue if we measured salary in japanese yen or if we measured age in minutes then we d get quite different classification results from what we get if these two variables are measured in dollars and years. a good way to handle this problem is to standardize the data so that all variables are given a mean of zero and a standard deviation of one. then all variables will be on a comparable scale. the scale function does just this. in standardizing the data we exclude column because that is the qualitative purchase variable. standardize scale s t a n d a r d i z e d x scale caravan var caravan var caravan var s t a n d a r d i z e d x var s t a n d a r d i z e d x now every column of standardized.x has a standard deviation of one and a mean of zero. classification we now split the observations into a test set containing the first observations and a training set containing the remaining observations. we fit a knn model on the training data using k and evaluate its performance on the test data. test train x s t a n d a r d i z e d x test test x s t a n d a r d i z e d x test train y purchase test test y purchase test set seed knn pred knn train test train k mean test y knn pred mean test y no the vector test is numeric with values from through typing standardized.xtest yields the submatrix of the data containing the observations whose indices range from to whereas typing standardized.x-test yields the submatrix containing the observations whose indices do not range from to the knn error rate on the test observations is just under at first glance this may appear to be fairly good. however since only of customers purchased insurance we could get the error rate down to by always predicting no regardless of the values of the predictors! suppose that there is some non-trivial cost to trying to sell insurance to a given individual. for instance perhaps a salesperson must visit each potential customer. if the company tries to sell insurance to a random selection of customers then the success rate will be only which may be far too low given the costs involved. instead the company would like to try to sell insurance only to customers who are likely to buy it. so the overall error rate is not of interest. instead the fraction of individuals that are correctly predicted to buy insurance is of interest. it turns out that knn with k does far better than random guessing among the customers that are predicted to buy insurance. among such customers or actually do purchase insurance. this is double the rate that one would obtain from random guessing. table knn pred test y knn pred no yes test y no yes using k the success rate increases to and with k the rate is this is over four times the rate that results from random guessing. it appears that knn is finding some real patterns in a difficult data set! lab logistic regression lda qda and knn knn pred knn train test train k table knn pred test y knn pred no yes test y no yes knn pred knn train test train k table knn pred test y knn pred no yes test y no yes as a comparison we can also fit a logistic regression model to the data. if we use as the predicted probability cut-off for the classifier then we have a problem only seven of the test observations are predicted to purchase insurance. even worse we are wrong about all of these! however we are not required to use a cut-off of if we instead predict a purchase any time the predicted probability of purchase exceeds we get much better results we predict that people will purchase insurance and we are correct for about of these people. this is over five times better than random guessing! glm fit s glm purchase data caravan family binomial subset test fitted p r o b a b i l i t i e s numerical l y or occurred caravan test type response warning message g lm fit s glm probs predict glm pred rep no glm pred glm probs yes table glm pred test y g lm fit s glm pred no yes test y no yes glm pred rep no glm pred glm probs yes table glm pred test y test y no yes glm pred no yes classification exercises conceptual using a little bit of algebra prove that is equivalent to in other words the logistic function representation and logit representation for the logistic regression model are equivalent. it was stated in the text that classifying an observation to the class for which is largest is equivalent to classifying an observation to the class for which is largest. prove that this is the case. in other words under the assumption that the observations in the kth class are drawn from a n k distribution the bayes classifier assigns an observation to the class for which the discriminant function is maximized. this problem relates to the qda model in which the observations within each class are drawn from a normal distribution with a classspecific mean vector and a class specific covariance matrix. we consider the simple case where p i.e. there is only one feature. tribution x n k suppose that we have k classes and that if an observation belongs to the kth class then x comes from a one-dimensional normal disk. recall that the density function for the one-dimensional normal distribution is given in prove that in this case the bayes classifier is not linear. argue that it is in fact quadratic. hint for this problem you should follow the arguments laid out in section but without making the assumption that k when the number of features p is large there tends to be a deterioration in the performance of knn and other local approaches that perform prediction using only observations that are near the test observation for which a prediction must be made. this phenomenon is known as the curse of dimensionality and it ties into the fact that non-parametric approaches often perform poorly when p is large. we will now investigate this curse. curse of dimensionality suppose that we have a set of observations each with measurements on p feature x. we assume that x is uniformly distributed on associated with each observation is a response value. suppose that we wish to predict a test observation s response using only observations that are within of the range of x closest to that test observation. for instance in order to predict the response for a test observation with x exercises we will use observations in the range on average what fraction of the available observations will we use to make the prediction? now suppose that we have a set of observations each with measurements on p features and we assume that are uniformly distributed on we wish to predict a test observation s response using only observations that are within of the range of and within of the range of closest to that test observation. for instance in order to predict the response for a test observation with and we will use observations in the range for and in the range for on average what fraction of the available observations will we use to make the prediction? now suppose that we have a set of observations on p features. again the observations are uniformly distributed on each feature and again each feature ranges in value from to we wish to predict a test observation s response using observations within the of each feature s range that is closest to that test observation. what fraction of the available observations will we use to make the prediction? using your answers to parts argue that a drawback of knn when p is large is that there are very few training observations near any given test observation. now suppose that we wish to make a prediction for a test observation by creating a p-dimensional hypercube centered around the test observation that contains on average of the training observations. for p and what is the length of each side of the hypercube? comment on your answer. note a hypercube is a generalization of a cube to an arbitrary number of dimensions. when p a hypercube is simply a line segment when p it is a square and when p it is a cube. we now examine the differences between lda and qda. if the bayes decision boundary is linear do we expect lda or qda to perform better on the training set? on the test set? if the bayes decision boundary is non-linear do we expect lda or qda to perform better on the training set? on the test set? in general as the sample size n increases do we expect the test prediction accuracy of qda relative to lda to improve decline or be unchanged? why? classification true or false even if the bayes decision boundary for a given problem is linear we will probably achieve a superior test error rate using qda rather than lda because qda is flexible enough to model a linear decision boundary. justify your answer. suppose we collect data for a group of students in a statistics class with variables hours studied undergrad gpa and y receive an a. we fit a logistic regression and produce estimated coefficient estimate the probability that a student who studies for h and has an undergrad gpa of gets an a in the class. how many hours would the student in part need to study to have a chance of getting an a in the class? suppose that we wish to predict whether a given stock will issue a dividend this year yes or no based on x last year s percent profit. we examine a large number of companies and discover that the mean value of x for companies that issued a dividend was x while the mean for those that didn t was x in addition the variance of x for these two sets of companies was finally of companies issued dividends. assuming that x follows a normal distribution predict the probability that a company will issue a dividend this year given that its percentage profit was x last year. hint recall that the density function for a normal random variable is f you will need to use bayes theorem. e suppose that we take a data set divide it into equally-sized training and test sets and then try out two different classification procedures. first we use logistic regression and get an error rate of on the training data and on the test data. next we use neighbors k and get an average error rate over both test and training data sets of based on these results which method should we prefer to use for classification of new observations? why? this problem has to do with odds. on average what fraction of people with an odds of of defaulting on their credit card payment will in fact default? suppose that an individual has a chance of defaulting on her credit card payment. what are the odds that she will default? exercises applied this question should be answered using the weekly data set which is part of the islr package. this data is similar in nature to the smarket data from this chapter s lab except that it contains weekly returns for years from the beginning of to the end of produce some numerical and graphical summaries of the weekly data. do there appear to be any patterns? use the full data set to perform a logistic regression with direction as the response and the five lag variables plus volume as predictors. use the summary function to print the results. do any of the predictors appear to be statistically significant? if so which ones? compute the confusion matrix and overall fraction of correct predictions. explain what the confusion matrix is telling you about the types of mistakes made by logistic regression. now fit the logistic regression model using a training data period from to with as the only predictor. compute the confusion matrix and the overall fraction of correct predictions for the held out data is the data from and repeat using lda. repeat using qda. repeat using knn with k which of these methods appears to provide the best results on this data? experiment with different combinations of predictors including possible transformations and interactions for each of the methods. report the variables method and associated confusion matrix that appears to provide the best results on the held out data. note that you should also experiment with values for k in the knn classifier. in this problem you will develop a model to predict whether a given car gets high or low gas mileage based on the auto data set. create a binary variable that contains a if mpg contains a value above its median and a if mpg contains a value below its median. you can compute the median using the median function. note you may find it helpful to use the data.frame function to create a single data set containing both and the other auto variables. classification explore the data graphically in order to investigate the association between and the other features. which of the other features seem most likely to be useful in predicting scatterplots and boxplots may be useful tools to answer this question. describe your findings. split the data into a training set and a test set. perform lda on the training data in order to predict using the variables that seemed most associated with in what is the test error of the model obtained? perform qda on the training data in order to predict using the variables that seemed most associated with in what is the test error of the model obtained? perform logistic regression on the training data in order to predict using the variables that seemed most associated with in what is the test error of the model obtained? perform knn on the training data with several values of k in order to predict use only the variables that seemed most associated with in what test errors do you obtain? which value of k seems to perform the best on this data set? this problem involves writing functions. write a function power that prints out the result of raising to the power. in other words your function should compute and print out the results. hint recall that xa raises x to the power a. use the print function to output the result. create a new function that allows you to pass any two numbers x and a and prints out the value of xa. you can do this by beginning your function with the line function a you should be able to call your function by entering for instance on the command line. this should output the value of namely using the function that you just wrote compute and now create a new function that actually returns the result xa as an r object rather than simply printing it to the screen. that is if you store the value xa in an object called result within your function then you can simply return this result using the following line return exercises return result the line above should be the last line in your function before the symbol. now using the function create a plot of f the x-axis should display a range of integers from to and the y-axis should display label the axes appropriately and use an appropriate title for the figure. consider displaying either the x-axis the y-axis or both on the log-scale. you can do this by using log x log y or log xy as arguments to the plot function. create a function plotpower that allows you to create a plot of x against xa for a fixed a and for a range of values of x. for instance if you call plotpower then a plot should be created with an x-axis taking on values and a y-axis taking on values using the boston data set fit classification models in order to predict whether a given suburb has a crime rate above or below the median. explore logistic regression lda and knn models using various subsets of the predictors. describe your findings. resampling methods resampling methods are an indispensable tool in modern statistics. they involve repeatedly drawing samples from a training set and refitting a model of interest on each sample in order to obtain additional information about the fitted model. for example in order to estimate the variability of a linear regression fit we can repeatedly draw different samples from the training data fit a linear regression to each new sample and then examine the extent to which the resulting fits differ. such an approach may allow us to obtain information that would not be available from fitting the model only once using the original training sample. resampling approaches can be computationally expensive because they involve fitting the same statistical method multiple times using different subsets of the training data. however due to recent advances in computing power the computational requirements of resampling methods generally are not prohibitive. in this chapter we discuss two of the most commonly used resampling methods cross-validation and the bootstrap. both methods are important tools in the practical application of many statistical learning procedures. for example cross-validation can be used to estimate the test error associated with a given statistical learning method in order to evaluate its performance or to select the appropriate level of flexibility. the process of evaluating a model s performance is known as model assessment whereas the process of selecting the proper level of flexibility for a model is known as model selection. the bootstrap is used in several contexts most commonly to provide a measure of accuracy of a parameter estimate or of a given statistical learning method. g. james et al. an introduction to statistical learning with applications in r springer texts in statistics doi springer sciencebusiness media new york model assessment model selection resampling methods cross-validation in chapter we discuss the distinction between the test error rate and the training error rate. the test error is the average error that results from using a statistical learning method to predict the response on a new observation that is a measurement that was not used in training the method. given a data set the use of a particular statistical learning method is warranted if it results in a low test error. the test error can be easily calculated if a designated test set is available. unfortunately this is usually not the case. in contrast the training error can be easily calculated by applying the statistical learning method to the observations used in its training. but as we saw in chapter the training error rate often is quite different from the test error rate and in particular the former can dramatically underestimate the latter. in the absence of a very large designated test set that can be used to directly estimate the test error rate a number of techniques can be used to estimate this quantity using the available training data. some methods make a mathematical adjustment to the training error rate in order to estimate the test error rate. such approaches are discussed in chapter in this section we instead consider a class of methods that estimate the test error rate by holding out a subset of the training observations from the fitting process and then applying the statistical learning method to those held out observations. in sections for simplicity we assume that we are interested in performing regression with a quantitative response. in section we consider the case of classification with a qualitative response. as we will see the key concepts remain the same regardless of whether the response is quantitative or qualitative. the validation set approach suppose that we would like to estimate the test error associated with fitting a particular statistical learning method on a set of observations. the validation set approach displayed in figure is a very simple strategy for this task. it involves randomly dividing the available set of observations into two parts a training set and a validation set or hold-out set. the model is fit on the training set and the fitted model is used to predict the responses for the observations in the validation set. the resulting validation set error rate typically assessed using mse in the case of a quantitative response provides an estimate of the test error rate. we illustrate the validation set approach on the auto data set. recall from chapter that there appears to be a non-linear relationship between mpg and horsepower and that a model that predicts mpg using horsepower and gives better results than a model that uses only a linear term. horsepower it is natural to wonder whether a cubic or higher-order fit might provide validation set approach validation set hold-out set cross-validation n figure a schematic display of the validation set approach. a set of n observations are randomly split into a training set in blue containing observations and among others and a validation set in beige and containing observation among others. the statistical learning method is fit on the training set and its performance is evaluated on the validation set. even better results. we answer this question in chapter by looking at the p-values associated with a cubic term and higher-order polynomial terms in a linear regression. but we could also answer this question using the validation method. we randomly split the observations into two sets a training set containing of the data points and a validation set containing the remaining observations. the validation set error rates that result from fitting various regression models on the training sample and evaluating their performance on the validation sample using mse as a measure of validation set error are shown in the left-hand panel of figure the validation set mse for the quadratic fit is considerably smaller than for the linear fit. however the validation set mse for the cubic fit is actually slightly larger than for the quadratic fit. this implies that including a cubic term in the regression does not lead to better prediction than simply using a quadratic term. recall that in order to create the left-hand panel of figure we randomly divided the data set into two parts a training set and a validation set. if we repeat the process of randomly splitting the sample set into two parts we will get a somewhat different estimate for the test mse. as an illustration the right-hand panel of figure displays ten different validation set mse curves from the auto data set produced using ten different random splits of the observations into training and validation sets. all ten curves indicate that the model with a quadratic term has a dramatically smaller validation set mse than the model with only a linear term. furthermore all ten curves indicate that there is not much benefit in including cubic or higher-order polynomial terms in the model. but it is worth noting that each of the ten curves results in a different test mse estimate for each of the ten regression models considered. and there is no consensus among the curves as to which model results in the smallest validation set mse. based on the variability among these curves all that we can conclude with any confidence is that the linear fit is not adequate for this data. the validation set approach is conceptually simple and is easy to imple ment. but it has two potential drawbacks resampling methods r o r r e d e r a u q s n a e m r o r r e d e r a u q s n a e m degree of polynomial degree of polynomial figure the validation set approach was used on the auto data set in order to estimate the test error that results from predicting mpg using polynomial functions of horsepower. left validation error estimates for a single split into training and validation data sets. right the validation method was repeated ten times each time using a different random split of the observations into a training set and a validation set. this illustrates the variability in the estimated test mse that results from this approach. as is shown in the right-hand panel of figure the validation estimate of the test error rate can be highly variable depending on precisely which observations are included in the training set and which observations are included in the validation set. in the validation approach only a subset of the observations those that are included in the training set rather than in the validation set are used to fit the model. since statistical methods tend to perform worse when trained on fewer observations this suggests that the validation set error rate may tend to overestimate the test error rate for the model fit on the entire data set. in the coming subsections we will present cross-validation a refinement of the validation set approach that addresses these two issues. leave-one-out cross-validation leave-one-out cross-validation is closely related to the validation set approach of section but it attempts to address that method s drawbacks. like the validation set approach loocv involves splitting the set of observations into two parts. however instead of creating two subsets of comparable size a single observation is used for the validation set and the remaining observations yn make up the training set. the statistical learning method is fit on the n training observations and a prediction is made for the excluded observation using its value since was not used in the fitting process leave-oneout crossvalidation cross-validation n n n n n figure a schematic display of loocv. a set of n data points is repeatedly split into a training set in blue containing all but one observation and a validation set that contains only that observation in beige. the test error is then estimated by averaging the n resulting mse s. the first training set contains all but observation the second training set contains all but observation and so forth. provides an approximately unbiased estimate for the test error. but even though is unbiased for the test error it is a poor estimate because it is highly variable since it is based upon a single observation we can repeat the procedure by selecting for the validation data training the statistical learning procedure on the n observations yn and computing repeating this approach n times produces n squared errors msen. the loocv estimate for the test mse is the average of these n test error estimates cvn n msei. a schematic of the loocv approach is illustrated in figure loocv has a couple of major advantages over the validation set approach. first it has far less bias. in loocv we repeatedly fit the statistical learning method using training sets that contain n observations almost as many as are in the entire data set. this is in contrast to the validation set approach in which the training set is typically around half the size of the original data set. consequently the loocv approach tends not to overestimate the test error rate as much as the validation set approach does. second in contrast to the validation approach which will yield different results when applied repeatedly due to randomness in the trainingvalidation set splits performing loocv multiple times will resampling methods loocv fold cv r o r r e d e r a u q s n a e m r o r r e d e r a u q s n a e m degree of polynomial degree of polynomial figure cross-validation was used on the auto data set in order to estimate the test error that results from predicting mpg using polynomial functions of horsepower. left the loocv error curve. right cv was run nine separate times each with a different random split of the data into ten parts. the figure shows the nine slightly different cv error curves. always yield the same results there is no randomness in the trainingvalidation set splits. we used loocv on the auto data set in order to obtain an estimate of the test set mse that results from fitting a linear regression model to predict mpg using polynomial functions of horsepower. the results are shown in the left-hand panel of figure loocv has the potential to be expensive to implement since the model has to be fit n times. this can be very time consuming if n is large and if each individual model is slow to fit. with least squares linear or polynomial regression an amazing shortcut makes the cost of loocv the same as that of a single model fit! the following formula holds yi yi hi n cvn where yi is the ith fitted value from the original least squares fit and hi is the leverage defined in on page this is like the ordinary mse except the ith residual is divided by hi. the leverage lies between and and reflects the amount that an observation influences its own fit. hence the residuals for high-leverage points are inflated in this formula by exactly the right amount for this equality to hold. loocv is a very general method and can be used with any kind of predictive modeling. for example we could use it with logistic regression or linear discriminant analysis or any of the methods discussed in later cross-validation n figure a schematic display of cv. a set of n observations is randomly split into five non-overlapping groups. each of these fifths acts as a validation set in beige and the remainder as a training set in blue. the test error is estimated by averaging the five resulting mse estimates. chapters. the magic formula does not hold in general in which case the model has to be refit n times. k-fold cross-validation an alternative to loocv is k-fold cv. this approach involves randomly dividing the set of observations into k groups or folds of approximately equal size. the first fold is treated as a validation set and the method is fit on the remaining k folds. the mean squared error is k-fold cv then computed on the observations in the held-out fold. this procedure is repeated k times each time a different group of observations is treated as a validation set. this process results in k estimates of the test error msek. the k-fold cv estimate is computed by averaging these values cvk k msei. figure illustrates the k-fold cv approach. it is not hard to see that loocv is a special case of k-fold cv in which k is set to equal n. in practice one typically performs k-fold cv using k or k what is the advantage of using k or k rather than k n? the most obvious advantage is computational. loocv requires fitting the statistical learning method n times. this has the potential to be computationally expensive for linear models fit by least squares in which case formula can be used. but cross-validation is a very general approach that can be applied to almost any statistical learning method. some statistical learning methods have computationally intensive fitting procedures and so performing loocv may pose computational problems especially if n is extremely large. in contrast performing resampling methods r o r r e d e r a u q s n a e m r o r r e d e r a u q s n a e m r o r r e d e r a u q s n a e m flexibility flexibility flexibility figure true and estimated test mse for the simulated data sets in figures left center and right. the true test mse is shown in blue the loocv estimate is shown as a black dashed line and the cv estimate is shown in orange. the crosses indicate the minimum of each of the mse curves. cv requires fitting the learning procedure only ten times which may be much more feasible. as we see in section there also can be other non-computational advantages to performing or cv which involve the bias-variance trade-off. the right-hand panel of figure displays nine different cv estimates for the auto data set each resulting from a different random split of the observations into ten folds. as we can see from the figure there is some variability in the cv estimates as a result of the variability in how the observations are divided into ten folds. but this variability is typically much lower than the variability in the test error estimates that results from the validation set approach panel of figure when we examine real data we do not know the true test mse and so it is difficult to determine the accuracy of the cross-validation estimate. however if we examine simulated data then we can compute the true test mse and can thereby evaluate the accuracy of our cross-validation results. in figure we plot the cross-validation estimates and true test error rates that result from applying smoothing splines to the simulated data sets illustrated in figures of chapter the true test mse is displayed in blue. the black dashed and orange solid lines respectively show the estimated loocv and cv estimates. in all three plots the two cross-validation estimates are very similar. in the right-hand panel of figure the true test mse and the cross-validation curves are almost identical. in the center panel of figure the two sets of curves are similar at the lower degrees of flexibility while the cv curves overestimate the test set mse for higher degrees of flexibility. in the left-hand panel of figure the cv curves have the correct general shape but they underestimate the true test mse. cross-validation when we perform cross-validation our goal might be to determine how well a given statistical learning procedure can be expected to perform on independent data in this case the actual estimate of the test mse is of interest. but at other times we are interested only in the location of the minimum point in the estimated test mse curve. this is because we might be performing cross-validation on a number of statistical learning methods or on a single method using different levels of flexibility in order to identify the method that results in the lowest test error. for this purpose the location of the minimum point in the estimated test mse curve is important but the actual value of the estimated test mse is not. we find in figure that despite the fact that they sometimes underestimate the true test mse all of the cv curves come close to identifying the correct level of flexibility that is the flexibility level corresponding to the smallest test mse. bias-variance trade-off for k-fold cross-validation we mentioned in section that k-fold cv with k n has a computational advantage to loocv. but putting computational issues aside a less obvious but potentially more important advantage of k-fold cv is that it often gives more accurate estimates of the test error rate than does loocv. this has to do with a bias-variance trade-off. it was mentioned in section that the validation set approach can lead to overestimates of the test error rate since in this approach the training set used to fit the statistical learning method contains only half the observations of the entire data set. using this logic it is not hard to see that loocv will give approximately unbiased estimates of the test error since each training set contains n observations which is almost as many as the number of observations in the full data set. and performing k-fold cv for say k or k will lead to an intermediate level of bias since each training set contains observations fewer than in the loocv approach but substantially more than in the validation set approach. therefore from the perspective of bias reduction it is clear that loocv is to be preferred to k-fold cv. however we know that bias is not the only source for concern in an estimating procedure we must also consider the procedure s variance. it turns out that loocv has higher variance than does k-fold cv with k n. why is this the case? when we perform loocv we are in effect averaging the outputs of n fitted models each of which is trained on an almost identical set of observations therefore these outputs are highly correlated with each other. in contrast when we perform k-fold cv with k n we are averaging the outputs of k fitted models that are somewhat less correlated with each other since the overlap between the training sets in each model is smaller. since the mean of many highly correlated quantities resampling methods has higher variance than does the mean of many quantities that are not as highly correlated the test error estimate resulting from loocv tends to have higher variance than does the test error estimate resulting from k-fold cv. to summarize there is a bias-variance trade-off associated with the choice of k in k-fold cross-validation. typically given these considerations one performs k-fold cross-validation using k or k as these values have been shown empirically to yield test error rate estimates that suffer neither from excessively high bias nor from very high variance. cross-validation on classification problems in this chapter so far we have illustrated the use of cross-validation in the regression setting where the outcome y is quantitative and so have used mse to quantify test error. but cross-validation can also be a very useful approach in the classification setting when y is qualitative. in this setting cross-validation works just as described earlier in this chapter except that rather than using mse to quantify test error we instead use the number of misclassified observations. for instance in the classification setting the loocv error rate takes the form cvn n erri where erri iyi yi. the k-fold cv error rate and validation set error rates are defined analogously. as an example we fit various logistic regression models on the twodimensional classification data displayed in figure in the top-left panel of figure the black solid line shows the estimated decision boundary resulting from fitting a standard logistic regression model to this data set. since this is simulated data we can compute the true test error rate which takes a value of and so is substantially larger than the bayes error rate of clearly logistic regression does not have enough flexibility to model the bayes decision boundary in this setting. we can easily extend logistic regression to obtain a non-linear decision boundary by using polynomial functions of the predictors as we did in the regression setting in section for example we can fit a quadratic logistic regression model given by log p p the top-right panel of figure displays the resulting decision boundary which is now curved. however the test error rate has improved only slightly to a much larger improvement is apparent in the bottom-left panel cross-validation o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o oo o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o oo o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o oo o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o oo o o o o o o o oo o o o o o o o o o o o o o o o o o o o o oo o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o figure logistic regression fits on the two-dimensional classification data displayed in figure the bayes decision boundary is represented using a purple dashed line. estimated decision boundaries from linear quadratic cubic and quartic logistic regressions are displayed in black. the test error rates for the four logistic regression fits are respectively and while the bayes error rate is of figure in which we have fit a logistic regression model involving cubic polynomials of the predictors. now the test error rate has decreased to going to a quartic polynomial slightly increases the test error. in practice for real data the bayes decision boundary and the test error rates are unknown. so how might we decide between the four logistic regression models displayed in figure we can use cross-validation in order to make this decision. the left-hand panel of figure displays in resampling methods e t a r r o r r e e t a r r o r r e order of polynomials used figure test error training error and cv error on the two-dimensional classification data displayed in figure left logistic regression using polynomial functions of the predictors. the order of the polynomials used is displayed on the x-axis. right the knn classifier with different values of k the number of neighbors used in the knn classifier. black the cv error rates that result from fitting ten logistic regression models to the data using polynomial functions of the predictors up to tenth order. the true test errors are shown in brown and the training errors are shown in blue. as we have seen previously the training error tends to decrease as the flexibility of the fit increases. figure indicates that though the training error rate doesn t quite decrease monotonically it tends to decrease on the whole as the model complexity increases. in contrast the test error displays a characteristic u-shape. the cv error rate provides a pretty good approximation to the test error rate. while it somewhat underestimates the error rate it reaches a minimum when fourth-order polynomials are used which is very close to the minimum of the test curve which occurs when third-order polynomials are used. in fact using fourth-order polynomials would likely lead to good test set performance as the true test error rate is approximately the same for third fourth fifth and sixth-order polynomials. the right-hand panel of figure displays the same three curves using the knn approach for classification as a function of the value of k in this context indicates the number of neighbors used in the knn classifier rather than the number of cv folds used. again the training error rate declines as the method becomes more flexible and so we see that the training error rate cannot be used to select the optimal value for k. though the cross-validation error curve slightly underestimates the test error rate it takes on a minimum very close to the best value for k. the bootstrap the bootstrap bootstrap the bootstrap is a widely applicable and extremely powerful statistical tool that can be used to quantify the uncertainty associated with a given estimator or statistical learning method. as a simple example the bootstrap can be used to estimate the standard errors of the coefficients from a linear regression fit. in the specific case of linear regression this is not particularly useful since we saw in chapter that standard statistical software such as r outputs such standard errors automatically. however the power of the bootstrap lies in the fact that it can be easily applied to a wide range of statistical learning methods including some for which a measure of variability is otherwise difficult to obtain and is not automatically output by statistical software. in this section we illustrate the bootstrap on a toy example in which we wish to determine the best investment allocation under a simple model. in section we explore the use of the bootstrap to assess the variability associated with the regression coefficients in a linear model fit. suppose that we wish to invest a fixed sum of money in two financial assets that yield returns of x and y respectively where x and y are random quantities. we will invest a fraction of our money in x and will invest the remaining in y since there is variability associated with the returns on these two assets we wish to choose to minimize the total risk or variance of our investment. in other words we want to minimize var x one can show that the value that minimizes the risk is given by xy y xy x y where x varx y vary and xy covx y in reality the quantities x y and xy are unknown. we can compute estimates for these quantities x y and xy using a data set that contains past measurements for x and y we can then estimate the value of that minimizes the variance of our investment using xy y xy x y figure illustrates this approach for estimating on a simulated data set. in each panel we simulated pairs of returns for the investments x and y we used these returns to estimate y and xy which we then substituted into in order to obtain estimates for the value of resulting from each simulated data set ranges from to x it is natural to wish to quantify the accuracy of our estimate of to estimate the standard deviation of we repeated the process of simulating paired observations of x and y and estimating using resampling methods y y y x x y x x figure each panel displays simulated returns for investments x and y from left to right and top to bottom the resulting estimates for are and times. we thereby obtained estimates for which we can call the left-hand panel of figure displays a histogram of the resulting estimates. for these simulations the parameters were set to x y and xy and so we know that the true value of is we indicated this value using a solid vertical line on the histogram. the mean over all estimates for is r very close to and the standard deviation of the estimates is r this gives us a very good idea of the accuracy of se so roughly speaking for a random sample from the population we would expect to differ from by approximately on average. in practice however the procedure for estimating se outlined above cannot be applied because for real data we cannot generate new samples from the original population. however the bootstrap approach allows us to use a computer to emulate the process of obtaining new sample sets the bootstrap true bootstrap figure left a histogram of the estimates of obtained by generating simulated data sets from the true population. center a histogram of the estimates of obtained from bootstrap samples from a single data set. right the estimates of displayed in the left and center panels are shown as boxplots. in each panel the pink line indicates the true value of so that we can estimate the variability of without generating additional samples. rather than repeatedly obtaining independent data sets from the population we instead obtain distinct data sets by repeatedly sampling observations from the original data set. this approach is illustrated in figure on a simple data set which we call z that contains only n observations. we randomly select n observations from the data set in order to produce a bootstrap data set the sampling is performed with replacement which means that the z same observation can occur more than once in the bootstrap data set. in contains the third observation twice the first observation this example z once and no instances of the second observation. note that if an observation then both its x and y values are included. we can use is contained in z this to produce a new bootstrap estimate for which we call z procedure is repeated b times for some large value of b in order to produce b and b corresponding b different bootstrap data sets z b. we can compute the standard error of these estimates bootstrap estimates using the formula z z seb b r b this serves as an estimate of the standard error of estimated from the original data set. the bootstrap approach is illustrated in the center panel of figure which displays a histogram of bootstrap estimates of each computed using a distinct bootstrap data set. this panel was constructed on the basis of a single data set and hence could be created using real data. replacement resampling methods obs x y original data zb obs x obs x obs x y y y ab figure a graphical illustration of the bootstrap approach on a small sample containing n observations. each bootstrap data set contains n observations sampled with replacement from the original data set. each bootstrap data set is used to obtain an estimate of note that the histogram looks very similar to the left-hand panel which displays the idealized histogram of the estimates of obtained by generating simulated data sets from the true population. in particular the bootstrap estimate se from is very close to the estimate of obtained using simulated data sets. the right-hand panel displays the information in the center and left panels in a different way via boxplots of the estimates for obtained by generating simulated data sets from the true population and using the bootstrap approach. again the boxplots are quite similar to each other indicating that the bootstrap approach can be used to effectively estimate the variability associated with lab cross-validation and the bootstrap in this lab we explore the resampling techniques covered in this chapter. some of the commands in this lab may take a while to run on your computer. lab cross-validation and the bootstrap the validation set approach we explore the use of the validation set approach in order to estimate the test error rates that result from fitting various linear models on the auto data set. before we begin we use the set.seed function in order to set a seed for r s random number generator so that the reader of this book will obtain precisely the same results as those shown below. it is generally a good idea to set a random seed when performing an analysis such as cross-validation that contains an element of randomness so that the results obtained can be reproduced precisely at a later time. we begin by using the sample function to split the set of observations into two halves by selecting a random subset of observations out of the original observations. we refer to these observations as the training set. seed sample library islr set seed train sample we use a shortcut in the sample command see for details. we then use the subset option in lm to fit a linear regression using only the observations corresponding to the training set. lm fit lm mpg horsepower data auto subset train we now use the predict function to estimate the response for all observations and we use the mean function to calculate the mse of the observations in the validation set. note that the index below selects only the observations that are not in the training set. attach auto mean mpg predict lm fit auto train therefore the estimated test mse for the linear regression fit is we can use the poly function to estimate the test error for the quadratic and cubic regressions. lm lm mpg poly horsepower data auto subset train mean mpg predict lm auto train lm lm mpg poly horsepower data auto subset train mean mpg predict lm auto train these error rates are and respectively. if we choose a different training set instead then we will obtain somewhat different errors on the validation set. set seed train sample lm fit lm mpg horsepower subset train resampling methods mean mpg predict lm fit auto train lm lm mpg poly horsepower data auto subset train mean mpg predict lm auto train lm lm mpg poly horsepower data auto subset train mean mpg predict lm auto train using this split of the observations into a training set and a validation set we find that the validation set error rates for the models with linear quadratic and cubic terms are and respectively. these results are consistent with our previous findings a model that predicts mpg using a quadratic function of horsepower performs better than a model that involves only a linear function of horsepower and there is little evidence in favor of a model that uses a cubic function of horsepower. leave-one-out cross-validation the loocv estimate can be automatically computed for any generalized linear model using the glm and cv.glm functions. in the lab for chapter we used the glm function to perform logistic regression by passing in the familybinomial argument. but if we use glm to fit a model without passing in the family argument then it performs linear regression just like the lm function. so for instance glm fit glm mpg horsepower data auto cv.glm coef glm fit intercept horsepower and lm fit lm mpg horsepower data auto coef lm fit intercept horsepower yield identical linear regression models. in this lab we will perform linear regression using the glm function rather than the lm function because the former can be used together with cv the cv function is part of the boot library. library boot glm fit glm mpg horsepower data auto cv err cv glm auto glm fit cv errdelta the cv.glm function produces a list with several components. the two numbers in the delta vector contain the cross-validation results. in this lab cross-validation and the bootstrap case the numbers are identical to two decimal places and correspond to the loocv statistic given in below we discuss a situation in which the two numbers differ. our cross-validation estimate for the test error is approximately we can repeat this procedure for increasingly complex polynomial fits. to automate the process we use the for function to initiate a for loop which iteratively fits polynomial regressions for polynomials of order i to i computes the associated cross-validation error and stores it in the ith element of the vector cv.error. we begin by initializing the vector. this command will likely take a couple of minutes to run. for for loop cv error rep for i in glm fit glm mpg poly horsepower i data auto cv error i cv glm auto glm fit cv error as in figure we see a sharp drop in the estimated test mse between the linear and quadratic fits but then no clear improvement from using higher-order polynomials. k-fold cross-validation the cv.glm function can also be used to implement k-fold cv. below we use k a common choice for k on the auto data set. we once again set a random seed and initialize a vector in which we will store the cv errors corresponding to the polynomial fits of orders one to ten. set seed cv error rep for i in glm fit glm mpg poly horsepower i data auto cv error i cv glm auto glm fit k cv error notice that the computation time is much shorter than that of loocv. principle the computation time for loocv for a least squares linear model should be faster than for k-fold cv due to the availability of the formula for loocv however unfortunately the cv.glm function does not make use of this formula. we still see little evidence that using cubic or higher-order polynomial terms leads to lower test error than simply using a quadratic fit. we saw in section that the two numbers associated with delta are essentially the same when loocv is performed. when we instead perform k-fold cv then the two numbers associated with delta differ slightly. the resampling methods first is the standard k-fold cv estimate as in the second is a biascorrected version. on this data set the two estimates are very similar to each other. the bootstrap we illustrate the use of the bootstrap in the simple example of section as well as on an example involving estimating the accuracy of the linear regression model on the auto data set. estimating the accuracy of a statistic of interest one of the great advantages of the bootstrap approach is that it can be applied in almost all situations. no complicated mathematical calculations are required. performing a bootstrap analysis in r entails only two steps. first we must create a function that computes the statistic of interest. second we use the boot function which is part of the boot library to perform the bootstrap by repeatedly sampling observations from the data set with replacement. the portfolio data set in the islr package is described in section to illustrate the use of the bootstrap on this data we must first create a function alpha.fn which takes as input the y data as well as a vector indicating which observations should be used to estimate the function then outputs the estimate for based on the selected observations. alpha fn function data index x datax index y datay index return var y cov y var x var y cov y this function returns or outputs an estimate for based on applying to the observations indexed by the argument index. for instance the following command tells r to estimate using all observations. alpha fn portfolio the next command uses the sample function to randomly select observations from the range to with replacement. this is equivalent to constructing a new bootstrap data set and recomputing based on the new data set. set seed alpha fn portfolio sample replace t we can implement a bootstrap analysis by performing this command many times recording all of the corresponding estimates for and computing boot lab cross-validation and the bootstrap the resulting standard deviation. however the boot function automates this approach. below we produce r bootstrap estimates for boot boot portfolio alpha fn r ordinary n o n p a r a m e t r i c bootstrap call boot data portfolio statistic alpha fn r bootstrap statistics original bias e std error the final output shows that using the original data and that the bootstrap estimate for se is estimating the accuracy of a linear regression model the bootstrap approach can be used to assess the variability of the coefficient estimates and predictions from a statistical learning method. here we use the bootstrap approach in order to assess the variability of the estimates for and the intercept and slope terms for the linear regression model that uses horsepower to predict mpg in the auto data set. we will compare the estimates obtained using the bootstrap to those obtained using the formulas for se and se described in section we first create a simple function boot.fn which takes in the auto data set as well as a set of indices for the observations and returns the intercept and slope estimates for the linear regression model. we then apply this function to the full set of observations in order to compute the estimates of and on the entire data set using the usual linear regression coefficient estimate formulas from chapter note that we do not need the and at the beginning and end of the function because it is only one line long. boot fn function data index return coef lm mpg horsepower data data subset index boot fn auto intercept horsepower the boot.fn function can also be used in order to create bootstrap estimates for the intercept and slope terms by randomly sampling from among the observations with replacement. here we give two examples. set seed boot fn auto sample replace t intercept horsepower boot fn auto sample replace t intercept horsepower resampling methods next we use the boot function to compute the standard errors of bootstrap estimates for the intercept and slope terms. boot auto boot fn ordinary n o n p a r a m e t r i c bootstrap call boot data auto statistic boot fn r bootstrap statistics original bias std error this indicates that the bootstrap estimate for se is and that the bootstrap estimate for se is as discussed in section standard formulas can be used to compute the standard errors for the regression coefficients in a linear model. these can be obtained using the summary function. summary lm mpg horsepower data auto estimate std error t value intercept horsepowe r pr t e e the standard error estimates for and obtained using the formulas from section are for the intercept and for the slope. interestingly these are somewhat different from the estimates obtained using the bootstrap. does this indicate a problem with the bootstrap? in fact it suggests the opposite. recall that the standard formulas given in equation on page rely on certain assumptions. for example they depend on the unknown parameter the noise variance. we then estimate using the rss. now although the formula for the standard errors do not rely on the linear model being correct the estimate for does. we see in figure on page that there is a non-linear relationship in the data and so the residuals from a linear fit will be inflated and so will secondly the standard formulas assume unrealistically that the xi are fixed and all the variability comes from the variation in the errors the bootstrap approach does not rely on any of these assumptions and so it is likely giving a more accurate estimate of the standard errors of and than is the summary function. below we compute the bootstrap standard error estimates and the standard linear regression estimates that result from fitting the quadratic model to the data. since this model provides a good fit to the data there is now a better correspondence between the bootstrap estimates and the standard estimates of se se and se exercises boot fn function data index c o e f f i c i e n t s lm mpg horsepowe r i horsepower data data subset index set seed boot auto boot fn ordinary n o n p a r a m e t r i c bootstrap call boot data auto statistic boot fn r bootstrap statistics original bias std error e e e summary lm mpg horsepowe r i horsepower data auto intercept horsepowe r i horsepowe r estimate std error t value pr t e e e exercises conceptual using basic statistical properties of the variance as well as singlevariable calculus derive in other words prove that given by does indeed minimize var x we will now derive the probability that a given observation is part of a bootstrap sample. suppose that we obtain a bootstrap sample from a set of n observations. what is the probability that the first bootstrap observation is not the jth observation from the original sample? justify your answer. what is the probability that the second bootstrap observation argue that the probability that the jth observation is not in the is not the jth observation from the original sample? bootstrap sample is when n what is the probability that the jth observation is in the bootstrap sample? when n what is the probability that the jth observation is in the bootstrap sample? resampling methods when n what is the probability that the jth observa tion is in the bootstrap sample? create a plot that displays for each integer value of n from to the probability that the jth observation is in the bootstrap sample. comment on what you observe. we will now investigate numerically the probability that a bootstrap sample of size n contains the jth observation. here j we repeatedly create bootstrap samples and each time we record whether or not the fourth observation is contained in the bootstrap sample. store rep na for i in store i sum sample rep true mean store comment on the results obtained. we now review k-fold cross-validation. explain how k-fold cross-validation is implemented. what are the advantages and disadvantages of k-fold cross validation relative to i. the validation set approach? ii. loocv? suppose that we use some statistical learning method to make a prediction for the response y for a particular value of the predictor x. carefully describe how we might estimate the standard deviation of our prediction. applied in chapter we used logistic regression to predict the probability of default using income and balance on the default data set. we will now estimate the test error of this logistic regression model using the validation set approach. do not forget to set a random seed before beginning your analysis. fit a logistic regression model that uses income and balance to predict default. using the validation set approach estimate the test error of this model. in order to do this you must perform the following steps i. split the sample set into a training set and a validation set. exercises ii. fit a multiple logistic regression model using only the train ing observations. iii. obtain a prediction of default status for each individual in the validation set by computing the posterior probability of default for that individual and classifying the individual to the default category if the posterior probability is greater than iv. compute the validation set error which is the fraction of the observations in the validation set that are misclassified. repeat the process in three times using three different splits of the observations into a training set and a validation set. comment on the results obtained. now consider a logistic regression model that predicts the probability of default using income balance and a dummy variable for student. estimate the test error for this model using the validation set approach. comment on whether or not including a dummy variable for student leads to a reduction in the test error rate. we continue to consider the use of a logistic regression model to predict the probability of default using income and balance on the default data set. in particular we will now compute estimates for the standard errors of the income and balance logistic regression coefficients in two different ways using the bootstrap and using the standard formula for computing the standard errors in the glm function. do not forget to set a random seed before beginning your analysis. using the summary and glm functions determine the estimated standard errors for the coefficients associated with income and balance in a multiple logistic regression model that uses both predictors. write a function boot.fn that takes as input the default data set as well as an index of the observations and that outputs the coefficient estimates for income and balance in the multiple logistic regression model. use the boot function together with your boot.fn function to estimate the standard errors of the logistic regression coefficients for income and balance. comment on the estimated standard errors obtained using the glm function and using your bootstrap function. in sections and we saw that the cv.glm function can be used in order to compute the loocv test error estimate. alternatively one could compute those quantities using just the glm and resampling methods predict.glm functions and a for loop. you will now take this approach in order to compute the loocv error for a simple logistic regression model on the weekly data set. recall that in the context of classification problems the loocv error is given in fit a logistic regression model that predicts direction using and fit a logistic regression model that predicts direction using and using all but the first observation. use the model from to predict the direction of the first observation. you can do this by predicting that the first observation will go up if p was this observation correctly classified? write a for loop from i to i n where n is the number of observations in the data set that performs each of the following steps i. fit a logistic regression model using all but the ith obser vation to predict direction using and ii. compute the posterior probability of the market moving up for the ith observation. iii. use the posterior probability for the ith observation in order to predict whether or not the market moves up. iv. determine whether or not an error was made in predicting the direction for the ith observation. if an error was made then indicate this as a and otherwise indicate it as a take the average of the n numbers obtained in in order to obtain the loocv estimate for the test error. comment on the results. we will now perform cross-validation on a simulated data set. generate a simulated data set as follows set seed x rnorm y x rnorm in this data set what is n and what is p? write out the model used to generate the data in equation form. create a scatterplot of x against y comment on what you find. set a random seed and then compute the loocv errors that result from fitting the following four models using least squares exercises i. y ii. y iii. y iv. y note you may find it helpful to use the data.frame function to create a single data set containing both x and y repeat using another random seed and report your results. are your results the same as what you got in why? which of the models in had the smallest loocv error? is this what you expected? explain your answer. comment on the statistical significance of the coefficient estimates that results from fitting each of the models in using least squares. do these results agree with the conclusions drawn based on the cross-validation results? we will now consider the boston housing data set from the mass library. based on this data set provide an estimate for the population mean of medv. call this estimate provide an estimate of the standard error of interpret this result. hint we can compute the standard error of the sample mean by dividing the sample standard deviation by the square root of the number of observations. now estimate the standard error of using the bootstrap. how does this compare to your answer from based on your bootstrap estimate from provide a confidence interval for the mean of medv. compare it to the results obtained using t.testbostonmedv. hint you can approximate a confidence interval using the formula based on this data set provide an estimate med for the median value of medv in the population. we now would like to estimate the standard error of med. unfortunately there is no simple formula for computing the standard error of the median. instead estimate the standard error of the median using the bootstrap. comment on your findings. based on this data set provide an estimate for the tenth percentile of medv in boston suburbs. call this quantity can use the quantile function. use the bootstrap to estimate the standard error of com ment on your findings. linear model selection and regularization in the regression setting the standard linear model y pxp is commonly used to describe the relationship between a response y and a set of variables xp. we have seen in chapter that one typically fits this model using least squares. in the chapters that follow we consider some approaches for extending the linear model framework. in chapter we generalize in order to accommodate non-linear but still additive relationships while in chapter we consider even more general non-linear models. however the linear model has distinct advantages in terms of inference and on real-world problems is often surprisingly competitive in relation to non-linear methods. hence before moving to the non-linear world we discuss in this chapter some ways in which the simple linear model can be improved by replacing plain least squares fitting with some alternative fitting procedures. why might we want to use another fitting procedure instead of least squares? as we will see alternative fitting procedures can yield better prediction accuracy and model interpretability. prediction accuracy provided that the true relationship between the response and the predictors is approximately linear the least squares estimates will have low bias. if n p that is if n the number of observations is much larger than p the number of variables then the least squares estimates tend to also have low variance and hence will perform well on test observations. however if n is not much larger g. james et al. an introduction to statistical learning with applications in r springer texts in statistics doi springer sciencebusiness media new york linear model selection and regularization than p then there can be a lot of variability in the least squares fit resulting in overfitting and consequently poor predictions on future observations not used in model training. and if p n then there is no longer a unique least squares coefficient estimate the variance is infinite so the method cannot be used at all. by constraining or shrinking the estimated coefficients we can often substantially reduce the variance at the cost of a negligible increase in bias. this can lead to substantial improvements in the accuracy with which we can predict the response for observations not used in model training. model interpretability it is often the case that some or many of the variables used in a multiple regression model are in fact not associated with the response. including such irrelevant variables leads to unnecessary complexity in the resulting model. by removing these variables that is by setting the corresponding coefficient estimates to zero we can obtain a model that is more easily interpreted. now least squares is extremely unlikely to yield any coefficient estimates that are exactly zero. in this chapter we see some approaches for automatically performing feature selection or variable selection that is for excluding irrelevant variables from a multiple regression model. there are many alternatives both classical and modern to using least squares to fit in this chapter we discuss three important classes of methods. subset selection. this approach involves identifying a subset of the p predictors that we believe to be related to the response. we then fit a model using least squares on the reduced set of variables. shrinkage. this approach involves fitting a model involving all p predictors. however the estimated coefficients are shrunken towards zero relative to the least squares estimates. this shrinkage known as regularization has the effect of reducing variance. depending on what type of shrinkage is performed some of the coefficients may be estimated to be exactly zero. hence shrinkage methods can also perform variable selection. dimension reduction. this approach involves projecting the p predictors into a m subspace where m p. this is achieved by computing m different linear combinations or projections of the variables. then these m projections are used as predictors to fit a linear regression model by least squares. in the following sections we describe each of these approaches in greater detail along with their advantages and disadvantages. although this chapter describes extensions and modifications to the linear model for regression seen in chapter the same concepts apply to other methods such as the classification models seen in chapter feature selection variable selection subset selection subset selection in this section we consider some methods for selecting subsets of predictors. these include best subset and stepwise model selection procedures. best subset selection to perform best subset selection we fit a separate least squares regression for each possible combination of the p predictors. that is we fit all p models pp models that contain that contain exactly one predictor all exactly two predictors and so forth. we then look at all of the resulting models with the goal of identifying the one that is best. p the problem of selecting the best model from among the possibilities considered by best subset selection is not trivial. this is usually broken up into two stages as described in algorithm algorithm best subset selection let denote the null model which contains no predictors. this model simply predicts the sample mean for each observation. best subset selection for k p p k fit all models that contain exactly k predictors. pick the best among these models and call it mk. here best is defined as having the smallest rss or equivalently largest select a single best model from among using cross p k validated prediction error cp bic or adjusted in algorithm step identifies the best model the training data for each subset size in order to reduce the problem from one of possible models to one of p possible models. in figure these models form the lower frontier depicted in red. now in order to select a single best model we must simply choose among these p options. this task must be performed with care because the rss of these p models decreases monotonically and the increases monotonically as the number of features included in the models increases. therefore if we use these statistics to select the best model then we will always end up with a model involving all of the variables. the problem is that a low rss or a high indicates a model with a low training error whereas we wish to choose a model that has a low test error. shown in chapter in figures training error tends to be quite a bit smaller than test error and a low training error by no means guarantees a low test error. therefore in step we use cross-validated prediction linear model selection and regularization s e r a u q s f o m u s l i a u d s e r e e e e r number of predictors number of predictors figure for each possible model containing a subset of the ten predictors in the credit data set the rss and are displayed. the red frontier tracks the best model for a given number of predictors according to rss and though the data set contains only ten predictors the x-axis ranges from to since one of the variables is categorical and takes on three values leading to the creation of two dummy variables. error cp bic or adjusted in order to select among these approaches are discussed in section an application of best subset selection is shown in figure each plotted point corresponds to a least squares regression model fit using a different subset of the predictors in the credit data set discussed in chapter here the variable ethnicity is a three-level qualitative variable and so is represented by two dummy variables which are selected separately in this case. we have plotted the rss and statistics for each model as a function of the number of variables. the red curves connect the best models for each model size according to rss or the figure shows that as expected these quantities improve as the number of variables increases however from the three-variable model on there is little improvement in rss and as a result of including additional predictors. although we have presented best subset selection here for least squares regression the same ideas apply to other types of models such as logistic regression. in the case of logistic regression instead of ordering models by rss in step of algorithm we instead use the deviance a measure that plays the role of rss for a broader class of models. the deviance is negative two times the maximized log-likelihood the smaller the deviance the better the fit. while best subset selection is a simple and conceptually appealing approach it suffers from computational limitations. the number of possible models that must be considered grows rapidly as p increases. in general there are models that involve subsets of p predictors. so if p then there are approximately possible models to be considered and if deviance subset selection p then there are over one million possibilities! consequently best subset selection becomes computationally infeasible for values of p greater than around even with extremely fast modern computers. there are computational shortcuts so called branch-and-bound techniques for eliminating some choices but these have their limitations as p gets large. they also only work for least squares linear regression. we present computationally efficient alternatives to best subset selection next. stepwise selection for computational reasons best subset selection cannot be applied with very large p. best subset selection may also suffer from statistical problems when p is large. the larger the search space the higher the chance of finding models that look good on the training data even though they might not have any predictive power on future data. thus an enormous search space can lead to overfitting and high variance of the coefficient estimates. for both of these reasons stepwise methods which explore a far more restricted set of models are attractive alternatives to best subset selection. forward stepwise selection forward stepwise selection is a computationally efficient alternative to best subset selection. while the best subset selection procedure considers all possible models containing subsets of the p predictors forward stepwise considers a much smaller set of models. forward stepwise selection begins with a model containing no predictors and then adds predictors to the model one-at-a-time until all of the predictors are in the model. in particular at each step the variable that gives the greatest additional improvement to the fit is added to the model. more formally the forward stepwise selection procedure is given in algorithm forward stepwise selection algorithm forward stepwise selection let denote the null model which contains no predictors. for k p consider all p k models that augment the predictors in mk choose the best among these p k models and call it with one additional predictor. here best is defined as having smallest rss or highest select a single best model from among using cross validated prediction error cp bic or adjusted linear model selection and regularization unlike best subset selection which involved fitting models forward stepwise selection involves fitting one null model along with p k models in the kth iteration for k p this amounts to a total of k pp models. this is a substantial difference when p p best subset selection requires fitting models whereas forward stepwise selection requires fitting only among those p k that augment mk with one additional predictor. we can in step of algorithm we must identify the best model from do this by simply choosing the model with the lowest rss or the highest however in step we must identify the best model among a set of models with different numbers of variables. this is more challenging and is discussed in section forward stepwise selection s computational advantage over best subset selection is clear. though forward stepwise tends to do well in practice it is not guaranteed to find the best possible model out of all models containing subsets of the p predictors. for instance suppose that in a given data set with p predictors the best possible one-variable model contains and the best possible two-variable model instead contains and then forward stepwise selection will fail to select the best possible two-variable model because will contain so must also contain together with one additional variable. table which shows the first four selected models for best subset and forward stepwise selection on the credit data set illustrates this phenomenon. both best subset selection and forward stepwise selection choose rating for the best one-variable model and then include income and student for the two- and three-variable models. however best subset selection replaces rating by cards in the four-variable model while forward stepwise selection must maintain rating in its four-variable model. in this example figure indicates that there is not much difference between the threeand four-variable models in terms of rss so either of the four-variable models will likely be adequate. forward stepwise selection can be applied even in the high-dimensional setting where n p however in this case it is possible to construct submodels only since each submodel is fit using least squares which will not yield a unique solution if p n. backward stepwise selection like forward stepwise selection backward stepwise selection provides an efficient alternative to best subset selection. however unlike forward backward stepwise selection forward stepwise selection considers pp models it performs a guided search over model space and so the effective model space considered contains substantially more than pp models. subset selection variables best subset one two three four rating rating income rating income student cards income student limit forward stepwise rating rating income rating income student rating income student limit table the first four selected models for best subset selection and forward stepwise selection on the credit data set. the first three models are identical but the fourth models differ. stepwise selection it begins with the full least squares model containing all p predictors and then iteratively removes the least useful predictor one-at-a-time. details are given in algorithm algorithm backward stepwise selection let mp denote the full model which contains all p predictors. for k p p consider all k models that contain all but one of the predictors in mk for a total of k predictors. choose the best among these k models and call it mk here best is defined as having smallest rss or highest select a single best model from among using cross validated prediction error cp bic or adjusted like forward stepwise selection the backward selection approach searches through only pp models and so can be applied in settings where p is too large to apply best subset also like forward stepwise selection backward stepwise selection is not guaranteed to yield the best model containing a subset of the p predictors. backward selection requires that the number of samples n is larger than the number of variables p that the full model can be fit. in contrast forward stepwise can be used even when n p and so is the only viable subset method when p is very large. forward stepwise selection backward stepwise selection performs a guided search over model space and so effectively considers substantially more than models. linear model selection and regularization hybrid approaches the best subset forward stepwise and backward stepwise selection approaches generally give similar but not identical models. as another alternative hybrid versions of forward and backward stepwise selection are available in which variables are added to the model sequentially in analogy to forward selection. however after adding each new variable the method may also remove any variables that no longer provide an improvement in the model fit. such an approach attempts to more closely mimic best subset selection while retaining the computational advantages of forward and backward stepwise selection. choosing the optimal model best subset selection forward selection and backward selection result in the creation of a set of models each of which contains a subset of the p predictors. in order to implement these methods we need a way to determine which of these models is best. as we discussed in section the model containing all of the predictors will always have the smallest rss and the largest since these quantities are related to the training error. instead we wish to choose a model with a low test error. as is evident here and as we show in chapter the training error can be a poor estimate of the test error. therefore rss and are not suitable for selecting the best model among a collection of models with different numbers of predictors. in order to select the best model with respect to test error we need to estimate this test error. there are two common approaches we can indirectly estimate test error by making an adjustment to the training error to account for the bias due to overfitting. we can directly estimate the test error using either a validation set approach or a cross-validation approach as discussed in chapter we consider both of these approaches below. cp aic bic and adjusted we show in chapter that the training set mse is generally an underestimate of the test mse. that mse rssn. this is because when we fit a model to the training data using least squares we specifically estimate the regression coefficients such that the training rss not the test rss is as small as possible. in particular the training error will decrease as more variables are included in the model but the test error may not. therefore training set rss and training set cannot be used to select from among a set of models with different numbers of variables. however a number of techniques for adjusting the training error for the model size are available. these approaches can be used to select among a set subset selection p c c b i r d e t s u d a j number of predictors number of predictors number of predictors figure cp bic and adjusted are shown for the best models of each size for the credit data set lower frontier in figure cp and bic are estimates of test mse. in the middle plot we see that the bic estimate of test error shows an increase after four variables are selected. the other two plots are rather flat after four variables are included. of models with different numbers of variables. we now consider four such approaches cp akaike information criterion bayesian information criterion and adjusted figure displays cp bic and adjusted for the best model of each size produced by best subset selection on the credit data set. for a fitted least squares model containing d predictors the cp estimate of test mse is computed using the equation rss cp n where is an estimate of the variance of the error associated with each response measurement in typically is estimated using the full essentially the cp statistic adds a penalty model containing all predictors. of to the training rss in order to adjust for the fact that the training error tends to underestimate the test error. clearly the penalty increases as the number of predictors in the model increases this is intended to adjust for the corresponding decrease in training rss. though it is beyond the scope of this book one can show that if is an unbiased estimate of in then cp is an unbiased estimate of test mse. as a consequence the cp statistic tends to take on a small value for models with a low test error so when determining which of a set of models is best we choose the model with the lowest cp value. in figure cp selects the six-variable model containing the predictors income limit rating cards age and student. s cp is sometimes defined as c the definition given above in the sense that cp smallest cp also has smallest c p. p rss n. this is equivalent to p n and so the model with n cp akaike information criterion bayesian information criterion adjusted linear model selection and regularization the aic criterion is defined for a large class of models fit by maximum likelihood. in the case of the model with gaussian errors maximum likelihood and least squares are the same thing. in this case aic is given by rss aic n where for simplicity we have omitted an additive constant. hence for least squares models cp and aic are proportional to each other and so only cp is displayed in figure bic is derived from a bayesian point of view but ends up looking similar to cp aic as well. for the least squares model with d predictors the bic is up to irrelevant constants given by rss lognd bic n like cp the bic will tend to take on a small value for a model with a low test error and so generally we select the model that has the lowest bic value. notice that bic replaces the used by cp with a lognd term where n is the number of observations. since log n for any n the bic statistic generally places a heavier penalty on models with many variables and hence results in the selection of smaller models than cp. in figure we see that this is indeed the case for the credit data set bic chooses a model that contains only the four predictors income limit cards and student. in this case the curves are very flat and so there does not appear to be much difference in accuracy between the four-variable and six-variable models. the adjusted statistic is another popular approach for selecting among a set of models that contain different numbers of variables. recall from chapter that the usual is defined as rsstss where tss is the total sum of squares for the response. since rss always decreases as more variables are added to the model the always increases as more variables are added. for a least squares model with d variables the adjusted statistic is calculated as adjusted rssn d tssn unlike cp aic and bic for which a small value indicates a model with a low test error a large value of adjusted indicates a model with a small test error. maximizing the adjusted is equivalent to minimizing rss n d while rss always decreases as the number of variables in the model increases rss n d may increase or decrease due to the presence of d in the denominator. the intuition behind the adjusted is that once all of the correct variables have been included in the model adding additional noise variables subset selection will lead to only a very small decrease in rss. since adding noise variables leads to an increase in d such variables will lead to an increase in rss n d and consequently a decrease in the adjusted therefore in theory the model with the largest adjusted will have only correct variables and no noise variables. unlike the statistic the adjusted statistic pays a price for the inclusion of unnecessary variables in the model. figure displays the adjusted for the credit data set. using this statistic results in the selection of a model that contains seven variables adding gender to the model selected by cp and aic. cp aic and bic all have rigorous theoretical justifications that are beyond the scope of this book. these justifications rely on asymptotic arguments where the sample size n is very large. despite its popularity and even though it is quite intuitive the adjusted is not as well motivated in statistical theory as aic bic and cp. all of these measures are simple to use and compute. here we have presented the formulas for aic bic and cp in the case of a linear model fit using least squares however these quantities can also be defined for more general types of models. validation and cross-validation as an alternative to the approaches just discussed we can directly estimate the test error using the validation set and cross-validation methods discussed in chapter we can compute the validation set error or the cross-validation error for each model under consideration and then select the model for which the resulting estimated test error is smallest. this procedure has an advantage relative to aic bic cp and adjusted in that it provides a direct estimate of the test error and makes fewer assumptions about the true underlying model. it can also be used in a wider range of model selection tasks even in cases where it is hard to pinpoint the model degrees of freedom the number of predictors in the model or hard to estimate the error variance in the past performing cross-validation was computationally prohibitive for many problems with large p andor large n and so aic bic cp and adjusted were more attractive approaches for choosing among a set of models. however nowadays with fast computers the computations required to perform cross-validation are hardly ever an issue. thus crossvalidation is a very attractive approach for selecting from among a number of models under consideration. figure displays as a function of d the bic validation set errors and cross-validation errors on the credit data for the best d-variable model. the validation errors were calculated by randomly selecting three-quarters of the observations as the training set and the remainder as the validation set. the cross-validation errors were computed using k folds. in this case the validation and cross-validation methods both result in a linear model selection and regularization c b i f o t o o r e r a u q s r o r r e t e s n o i t a d i l a v number of predictors r o r r e n o i t a d i l a v s s o r c number of predictors number of predictors figure for the credit data set three quantities are displayed for the best model containing d predictors for d ranging from to the overall best model based on each of these quantities is shown as a blue cross. left square root of bic. center validation set errors. right cross-validation errors. six-variable model. however all three approaches suggest that the four- five- and six-variable models are roughly equivalent in terms of their test errors. in fact the estimated test error curves displayed in the center and righthand panels of figure are quite flat. while a three-variable model clearly has lower estimated test error than a two-variable model the estimated test errors of the to models are quite similar. furthermore if we repeated the validation set approach using a different split of the data into a training set and a validation set or if we repeated cross-validation using a different set of cross-validation folds then the precise model with the lowest estimated test error would surely change. in this setting we can select a model using the one-standard-error rule. we first calculate the onestandard error of the estimated test mse for each model size and then select the smallest model for which the estimated test error is within one standard error of the lowest point on the curve. the rationale here is that if a set of models appear to be more or less equally good then we might as well choose the simplest model that is the model with the smallest number of predictors. in this case applying the one-standard-error rule to the validation set or cross-validation approach leads to selection of the three-variable model. standarderror rule shrinkage methods the subset selection methods described in section involve using least squares to fit a linear model that contains a subset of the predictors. as an alternative we can fit a model containing all p predictors using a technique that constrains or regularizes the coefficient estimates or equivalently that shrinks the coefficient estimates towards zero. it may not be immediately shrinkage methods obvious why such a constraint should improve the fit but it turns out that shrinking the coefficient estimates can significantly reduce their variance. the two best-known techniques for shrinking the regression coefficients towards zero are ridge regression and the lasso. ridge regression recall from chapter that the least squares fitting procedure estimates p using the values that minimize rss yi jxij ridge regression is very similar to least squares except that the coefficients are estimated by minimizing a slightly different quantity. in particular the ridge regression coefficient estimates r are the values that minimize yi jxij j rss j j where is a tuning parameter to be determined separately. equation trades off two different criteria. as with least squares ridge regression seeks coefficient estimates that fit the data well by making the rss small. however the second term j called a shrinkage penalty is small when p are close to zero and so it has the effect of shrinking the estimates of j towards zero. the tuning parameter serves to control the relative impact of these two terms on the regression coefficient estimates. when the penalty term has no effect and ridge regression will produce the least squares estimates. however as the impact of the shrinkage penalty grows and the ridge regression coefficient estimates will approach zero. unlike least squares which generates only one set of coefficient estimates ridge regression will produce a different set of coefficient estimates r for each value of selecting a good value for is critical we defer this discussion to section where we use cross-validation. note that in the shrinkage penalty is applied to p but not to the intercept we want to shrink the estimated association of each variable with the response however we do not want to shrink the intercept which is simply a measure of the mean value of the response when xip if we assume that the variables that is the columns of the data matrix x have been centered to have mean zero before ridge regression is performed then the estimated intercept will take the form y n yin. ridge regression tuning parameter shrinkage penalty linear model selection and regularization i s t n e c i f f e o c d e z d r a d n a t s i income limit rating student i s t n e c i f f e o c d e z d r a d n a t s i r figure the standardized ridge regression coefficients are displayed for the credit data set as a function of and r an application to the credit data in figure the ridge regression coefficient estimates for the credit data set are displayed. in the left-hand panel each curve corresponds to the ridge regression coefficient estimate for one of the ten variables plotted as a function of for example the black solid line represents the ridge regression estimate for the income coefficient as is varied. at the extreme left-hand side of the plot is essentially zero and so the corresponding ridge coefficient estimates are the same as the usual least squares estimates. but as increases the ridge coefficient estimates shrink towards zero. when is extremely large then all of the ridge coefficient estimates are basically zero this corresponds to the null model that contains no predictors. in this plot the income limit rating and student variables are displayed in distinct colors since these variables tend to have by far the largest coefficient estimates. while the ridge coefficient estimates tend to decrease in aggregate as increases individual coefficients such as rating and income may occasionally increase as increases. the right-hand panel of figure displays the same ridge coefficient estimates as the left-hand panel but instead of displaying on the x-axis where denotes the vector of least squares we now display r coefficient estimates. the notation denotes the norm ell of a vector and is defined as it measures the distance of from zero. as increases the norm of r decrease and so will r in which case the ridge regression coefficient estimate is the same as the least squares estimate and so their norms are the same to in which case the ridge regression coefficient estimate is a vector of zeros with norm equal to zero. therefore we can think of the x-axis in the right-hand panel of figure as the amount that the ridge will always the latter quantity ranges from p j norm shrinkage methods regression coefficient estimates have been shrunken towards zero a small value indicates that they have been shrunken very close to zero. the standard least squares coefficient estimates discussed in chapter are scale equivariant multiplying xj by a constant c simply leads to a scaling of the least squares coefficient estimates by a factor of in other words regardless of how the jth predictor is scaled xj j will remain the same. in contrast the ridge regression coefficient estimates can change substantially when multiplying a given predictor by a constant. for instance consider the income variable which is measured in dollars. one could reasonably have measured income in thousands of dollars which would result in a reduction in the observed values of income by a factor of now due to the sum of squared coefficients term in the ridge regression formulation such a change in scale will not simply cause the ridge regression coefficient estimate for income to change by a factor of in other words xj r j will depend not only on the value of but also on the scaling of the jth predictor. in fact the value of xj r j may even depend on the scaling of the other predictors! therefore it is best to apply ridge regression after standardizing the predictors using the formula scale equivariant xij n xij n so that they are all on the same scale. in the denominator is the estimated standard deviation of the jth predictor. consequently all of the standardized predictors will have a standard deviation of one. as a result the final fit will not depend on the scale on which the predictors are measured. in figure the y-axis displays the standardized ridge regression coefficient estimates that is the coefficient estimates that result from performing ridge regression using standardized predictors. why does ridge regression improve over least squares? ridge regression s advantage over least squares is rooted in the bias-variance trade-off. as increases the flexibility of the ridge regression fit decreases leading to decreased variance but increased bias. this is illustrated in the left-hand panel of figure using a simulated data set containing p predictors and n observations. the green curve in the left-hand panel of figure displays the variance of the ridge regression predictions as a function of at the least squares coefficient estimates which correspond to ridge regression with the variance is high but there is no bias. but as increases the shrinkage of the ridge coefficient estimates leads to a substantial reduction in the variance of the predictions at the expense of a slight increase in bias. recall that the test mean squared error plotted in purple is a function of the variance plus the squared bias. for values linear model selection and regularization r o r r e d e r a u q s n a e m r o r r e d e r a u q s n a e m r figure squared bias variance and test mean squared error for the ridge regression predictions on a simulated data set as a the horizontal dashed lines indicate the minimum function of and r possible mse. the purple crosses indicate the ridge regression models for which the mse is smallest. of up to about the variance decreases rapidly with very little increase in bias plotted in black. consequently the mse drops considerably as increases from to beyond this point the decrease in variance due to increasing slows and the shrinkage on the coefficients causes them to be significantly underestimated resulting in a large increase in the bias. the minimum mse is achieved at approximately interestingly because of its high variance the mse associated with the least squares fit when is almost as high as that of the null model for which all coefficient estimates are zero when however for an intermediate value of the mse is considerably lower. the right-hand panel of figure displays the same curves as the lefthand panel this time plotted against the norm of the ridge regression coefficient estimates divided by the norm of the least squares estimates. now as we move from left to right the fits become more flexible and so the bias decreases and the variance increases. in general in situations where the relationship between the response and the predictors is close to linear the least squares estimates will have low bias but may have high variance. this means that a small change in the training data can cause a large change in the least squares coefficient estimates. in particular when the number of variables p is almost as large as the number of observations n as in the example in figure the least squares estimates will be extremely variable. and if p n then the least squares estimates do not even have a unique solution whereas ridge regression can still perform well by trading off a small increase in bias for a large decrease in variance. hence ridge regression works best in situations where the least squares estimates have high variance. ridge regression also has substantial computational advantages over best subset selection which requires searching through models. as we shrinkage methods discussed previously even for moderate values of p such a search can be computationally infeasible. in contrast for any fixed value of ridge regression only fits a single model and the model-fitting procedure can be performed quite quickly. in fact one can show that the computations required to solve simultaneously for all values of are almost identical to those for fitting a model using least squares. the lasso ridge regression does have one obvious disadvantage. unlike best subset forward stepwise and backward stepwise selection which will generally select models that involve just a subset of the variables ridge regression will include all p predictors in the final model. the penalty j in will shrink all of the coefficients towards zero but it will not set any of them exactly to zero this may not be a problem for prediction accuracy but it can create a challenge in model interpretation in settings in which the number of variables p is quite large. for example in the credit data set it appears that the most important variables are income limit rating and student. so we might wish to build a model including just these predictors. however ridge regression will always generate a model involving all ten predictors. increasing the value of will tend to reduce the magnitudes of the coefficients but will not result in exclusion of any of the variables. the lasso is a relatively recent alternative to ridge regression that over minimize the quantity comes this disadvantage. the lasso coefficients l lasso jxij j rss j. yi comparing to we see that the lasso and ridge regression have similar formulations. the only difference is that the j term in the ridge regression penalty has been replaced by j in the lasso penalty in statistical parlance the lasso uses an ell penalty instead of an penalty. the norm of a coefficient vector is given by j. as with ridge regression the lasso shrinks the coefficient estimates towards zero. however in the case of the lasso the penalty has the effect of forcing some of the coefficient estimates to be exactly equal to zero when the tuning parameter is sufficiently large. hence much like best subset selection the lasso performs variable selection. as a result models generated from the lasso are generally much easier to interpret than those produced by ridge regression. we say that the lasso yields sparse models that is sparse models that involve only a subset of the variables. as in ridge regression selecting a good value of for the lasso is critical we defer this discussion to section where we use cross-validation. linear model selection and regularization i s t n e c i f f e o c d e z d r a d n a t s i i s t n e c i f f e o c d e z d r a d n a t s i income limit rating student l figure the standardized lasso coefficients on the credit data set are shown as a function of and l as an example consider the coefficient plots in figure which are generated from applying the lasso to the credit data set. when then the lasso simply gives the least squares fit and when becomes sufficiently large the lasso gives the null model in which all coefficient estimates equal zero. however in between these two extremes the ridge regression and lasso models are quite different from each other. moving from left to right in the right-hand panel of figure we observe that at first the lasso results in a model that contains only the rating predictor. then student and limit enter the model almost simultaneously shortly followed by income. eventually the remaining variables enter the model. hence depending on the value of the lasso can produce a model involving any number of variables. in contrast ridge regression will always include all of the variables in the model although the magnitude of the coefficient estimates will depend on another formulation for ridge regression and the lasso one can show that the lasso and ridge regression coefficient estimates solve the problems yi subject to jxij minimize and minimize yi subject to jxij j s s j shrinkage methods respectively. in other words for every value of there is some s such that the equations and will give the same lasso coefficient estimates. similarly for every value of there is a corresponding s such that equations and will give the same ridge regression coefficient estimates. when p then indicates that the lasso coefficient estimates have the smallest rss out of all points that lie within the diamond defined by s. similarly the ridge regression estimates have the smallest rss out of all points that lie within the circle defined by we can think of as follows. when we perform the lasso we are trying to find the set of coefficient estimates that lead to the smallest rss subject to the constraint that there is a budget s for how large when s is extremely large then this budget is not very restrictive and so the coefficient estimates can be large. in fact if s is large enough that the least squares solution falls within the budget then will simply yield the least squares solution. in contrast if s is small then small in order to avoid violating the budget. similarly indicates that when we perform ridge regression we seek a set of coefficient estimates such that the rss is as small as possible subject to the requirement that j must be j can be. p the formulations and reveal a close connection between the j not exceed the budget s. s. p p lasso ridge regression and best subset selection. consider the problem subject to i j s. yi jxij minimize here i j is an indicator variable it takes on a value of if j and equals zero otherwise. then amounts to finding a set of coefficient estimates such that rss is as small as possible subject to the constraint that no more than s coefficients can be nonzero. the problem is equivalent to best subset selection. unfortunately solving is computationally infeasible when p is large since it requires considering all models containing s predictors. therefore we can interpret ridge regression and the lasso as computationally feasible alternatives to best subset selection that replace the intractable form of the budget in with forms that are much easier to solve. of course the lasso is much more closely related to best subset selection since only the lasso performs feature selection for s sufficiently small in p s the variable selection property of the lasso why is it that the lasso unlike ridge regression results in coefficient estimates that are exactly equal to zero? the formulations and can be used to shed light on the issue. figure illustrates the situation. the least squares solution is marked as while the blue diamond and linear model selection and regularization figure contours of the error and constraint functions for the lasso and ridge regression the solid blue areas are the constraint regions s and s while the red ellipses are the contours of the rss. circle represent the lasso and ridge regression constraints in and respectively. if s is sufficiently large then the constraint regions will contain and so the ridge regression and lasso estimates will be the same as the least squares estimates. a large value of s corresponds to in and however in figure the least squares estimates lie outside of the diamond and the circle and so the least squares estimates are not the same as the lasso and ridge regression estimates. the ellipses that are centered around represent regions of constant rss. in other words all of the points on a given ellipse share a common value of the rss. as the ellipses expand away from the least squares coefficient estimates the rss increases. equations and indicate that the lasso and ridge regression coefficient estimates are given by the first point at which an ellipse contacts the constraint region. since ridge regression has a circular constraint with no sharp points this intersection will not generally occur on an axis and so the ridge regression coefficient estimates will be exclusively non-zero. however the lasso constraint has corners at each of the axes and so the ellipse will often intersect the constraint region at an axis. when this occurs one of the coefficients will equal zero. in higher dimensions many of the coefficient estimates may equal zero simultaneously. in figure the intersection occurs at and so the resulting model will only include in figure we considered the simple case of p when p then the constraint region for ridge regression becomes a sphere and the constraint region for the lasso becomes a polyhedron. when p the r o r r e d e r a u q s n a e m shrinkage methods r o r r e d e r a u q s n a e m on training data figure left plots of squared bias variance and test mse for the lasso on a simulated data set. right comparison of squared bias variance and test mse between lasso and ridge both are plotted against their on the training data as a common form of indexing. the crosses in both plots indicate the lasso model for which the mse is smallest. constraint for ridge regression becomes a hypersphere and the constraint for the lasso becomes a polytope. however the key ideas depicted in figure still hold. in particular the lasso leads to feature selection when p due to the sharp corners of the polyhedron or polytope. comparing the lasso and ridge regression it is clear that the lasso has a major advantage over ridge regression in that it produces simpler and more interpretable models that involve only a subset of the predictors. however which method leads to better prediction accuracy? figure displays the variance squared bias and test mse of the lasso applied to the same simulated data as in figure clearly the lasso leads to qualitatively similar behavior to ridge regression in that as increases the variance decreases and the bias increases. in the right-hand panel of figure the dotted lines represent the ridge regression fits. here we plot both against their on the training data. this is another useful way to index models and can be used to compare models with different types of regularization as is the case here. in this example the lasso and ridge regression result in almost identical biases. however the variance of ridge regression is slightly lower than the variance of the lasso. consequently the minimum mse of ridge regression is slightly smaller than that of the lasso. however the data in figure were generated in such a way that all predictors were related to the response that is none of the true coefficients equaled zero. the lasso implicitly assumes that a number of the coefficients truly equal zero. consequently it is not surprising that ridge regression outperforms the lasso in terms of prediction error in this setting. figure illustrates a similar situation except that now the response is a linear model selection and regularization r o r r e d e r a u q s n a e m r o r r e d e r a u q s n a e m on training data figure left plots of squared bias variance and test mse for the lasso. the simulated data is similar to that in figure except that now only two predictors are related to the response. right comparison of squared bias variance and test mse between lasso and ridge both are plotted against their on the training data as a common form of indexing. the crosses in both plots indicate the lasso model for which the mse is smallest. function of only out of predictors. now the lasso tends to outperform ridge regression in terms of bias variance and mse. these two examples illustrate that neither ridge regression nor the lasso will universally dominate the other. in general one might expect the lasso to perform better in a setting where a relatively small number of predictors have substantial coefficients and the remaining predictors have coefficients that are very small or that equal zero. ridge regression will perform better when the response is a function of many predictors all with coefficients of roughly equal size. however the number of predictors that is related to the response is never known a priori for real data sets. a technique such as cross-validation can be used in order to determine which approach is better on a particular data set. as with ridge regression when the least squares estimates have excessively high variance the lasso solution can yield a reduction in variance at the expense of a small increase in bias and consequently can generate more accurate predictions. unlike ridge regression the lasso performs variable selection and hence results in models that are easier to interpret. there are very efficient algorithms for fitting both ridge and lasso models in both cases the entire coefficient paths can be computed with about the same amount of work as a single least squares fit. we will explore this further in the lab at the end of this chapter. a simple special case for ridge regression and the lasso in order to obtain a better intuition about the behavior of ridge regression and the lasso consider a simple special case with n p and x a diagonal matrix with s on the diagonal and s in all off-diagonal elements. to simplify the problem further assume also that we are performing regres shrinkage methods sion without an intercept. with these assumptions the usual least squares problem simplifies to finding p that minimize in this case the least squares solution is given by j yj. and in this setting ridge regression amounts to finding p such that j is minimized and the lasso amounts to finding the coefficients such that j is minimized. one can show that in this setting the ridge regression estimates take the form r j and the lasso estimates take the form l j yj yj if yj if yj if figure displays the situation. we can see that ridge regression and the lasso perform two very different types of shrinkage. in ridge regression each least squares coefficient estimate is shrunken by the same proportion. in contrast the lasso shrinks each least squares coefficient towards zero by a constant amount the least squares coefficients that are less than in absolute value are shrunken entirely to zero. the type of shrinkage performed by the lasso in this simple setting is known as softthresholding. the fact that some lasso coefficients are shrunken entirely to zero explains why the lasso performs feature selection. in the case of a more general data matrix x the story is a little more complicated than what is depicted in figure but the main ideas still hold approximately ridge regression more or less shrinks every dimension of the data by the same proportion whereas the lasso more or less shrinks all coefficients toward zero by a similar amount and sufficiently small coefficients are shrunken all the way to zero. softthresholding linear model selection and regularization e t a m i t s e i t n e c i f f e o c ridge least squares e t a m i t s e i t n e c i f f e o c lasso least squares yj yj figure the ridge regression and lasso coefficient estimates for a simple setting with n p and x a diagonal matrix with s on the diagonal. left the ridge regression coefficient estimates are shrunken proportionally towards zero relative to the least squares estimates. right the lasso coefficient estimates are soft-thresholded towards zero. bayesian interpretation for ridge regression and the lasso we now show that one can view ridge regression and the lasso through a bayesian lens. a bayesian viewpoint for regression assumes that the coefficient vector has some prior distribution say p where pt the likelihood of the data can be written as f where x xp. multiplying the prior distribution by the likelihood gives us to a proportionality constant the posterior distribution which takes the form posterior distribution p y f f where the proportionality above follows from bayes theorem and the equality above follows from the assumption that x is fixed. we assume the usual linear model y xp p and suppose that the errors are independent and drawn from a normal disp tribution. furthermore assume that p g j for some density function g. it turns out that ridge regression and the lasso follow naturally from two special cases of g if g is a gaussian distribution with mean zero and standard deviation a function of then it follows that the posterior mode for that is the most likely value for given the data is given by the ridge regression solution. fact the ridge regression solution is also the posterior mean. posterior mode shrinkage methods j j j j figure left ridge regression is the posterior mode for under a gaussian prior. right the lasso is the posterior mode for under a double-exponential prior. if g is a double-exponential distribution with mean zero and scale parameter a function of then it follows that the posterior mode for is the lasso solution. the lasso solution is not the posterior mean and in fact the posterior mean does not yield a sparse coefficient vector. the gaussian and double-exponential priors are displayed in figure therefore from a bayesian viewpoint ridge regression and the lasso follow directly from assuming the usual linear model with normal errors together with a simple prior distribution for notice that the lasso prior is steeply peaked at zero while the gaussian is flatter and fatter at zero. hence the lasso expects a priori that many of the coefficients are zero while ridge assumes the coefficients are randomly distributed about zero. selecting the tuning parameter just as the subset selection approaches considered in section require a method to determine which of the models under consideration is best implementing ridge regression and the lasso requires a method for selecting a value for the tuning parameter in and or equivalently the value of the constraint s in and cross-validation provides a simple way to tackle this problem. we choose a grid of values and compute the cross-validation error for each value of as described in chapter we then select the tuning parameter value for which the cross-validation error is smallest. finally the model is re-fit using all of the available observations and the selected value of the tuning parameter. figure displays the choice of that results from performing leaveone-out cross-validation on the ridge regression fits from the credit data set. the dashed vertical lines indicate the selected value of in this case the value is relatively small indicating that the optimal fit only involves a linear model selection and regularization r o r r e n o i t a d i l a v s s o r c s t i n e c i f f i e o c d e z d r a d n a s t figure left cross-validation errors that result from applying ridge regression to the credit data set with various value of right the coefficient estimates as a function of the vertical dashed lines indicate the value of selected by cross-validation. small amount of shrinkage relative to the least squares solution. in addition the dip is not very pronounced so there is rather a wide range of values that would give very similar error. in a case like this we might simply use the least squares solution. figure provides an illustration of ten-fold cross-validation applied to the lasso fits on the sparse simulated data from figure the left-hand panel of figure displays the cross-validation error while the right-hand panel displays the coefficient estimates. the vertical dashed lines indicate the point at which the cross-validation error is smallest. the two colored lines in the right-hand panel of figure represent the two predictors that are related to the response while the grey lines represent the unrelated predictors these are often referred to as signal and noise variables respectively. not only has the lasso correctly given much larger coefficient estimates to the two signal predictors but also the minimum crossvalidation error corresponds to a set of coefficient estimates for which only the signal variables are non-zero. hence cross-validation together with the lasso has correctly identified the two signal variables in the model even though this is a challenging setting with p variables and only n observations. in contrast the least squares solution displayed on the far right of the right-hand panel of figure assigns a large coefficient estimate to only one of the two signal variables. signal dimension reduction methods the methods that we have discussed so far in this chapter have controlled variance in two different ways either by using a subset of the original variables or by shrinking their coefficients toward zero. all of these methods dimension reduction methods r o r r e n o i t a d i l a v s s o r c s t i n e c i f f i e o c d e z d r a d n a s t l l dimension reduction linear combination figure left ten-fold cross-validation mse for the lasso applied to the sparse simulated data set from figure right the corresponding lasso coefficient estimates are displayed. the vertical dashed lines indicate the lasso fit for which the cross-validation error is smallest. are defined using the original predictors xp. we now explore a class of approaches that transform the predictors and then fit a least squares model using the transformed variables. we will refer to these techniques as dimension reduction methods. let zm represent m p linear combinations of our original p predictors. that is zm jmxj for some constants pm m m we can then fit the linear regression model yi mzim i n using least squares. note that in the regression coefficients are given by m if the constants pm are chosen wisely then such dimension reduction approaches can often outperform least squares regression. in other words fitting using least squares can lead to better results than fitting using least squares. the term dimension reduction comes from the fact that this approach reduces the problem of estimating the p coefficients p to the simpler problem of estimating the m coefficients m where m p. in other words the dimension of the problem has been reduced from p to m notice that from mzim m jmxij m jmxij jxij linear model selection and regularization i g n d n e p s d a population figure the population size and ad spending for different cities are shown as purple circles. the green solid line indicates the first principal component and the blue dashed line indicates the second principal component. where j m jm. hence can be thought of as a special case of the original linear regression model given by dimension reduction serves to constrain the estimated j coefficients since now they must take the form this constraint on the form of the coefficients has the potential to bias the coefficient estimates. however in situations where p is large relative to n selecting a value of m p can significantly reduce the variance of the fitted coefficients. if m p and all the zm are linearly independent then poses no constraints. in this case no dimension reduction occurs and so fitting is equivalent to performing least squares on the original p predictors. all dimension reduction methods work in two steps. first the transformed predictors zm are obtained. second the model is fit using these m predictors. however the choice of zm or equivalently the selection of the jm s can be achieved in different ways. in this chapter we will consider two approaches for this task principal components and partial least squares. principal components regression principal components analysis is a popular approach for deriving a low-dimensional set of features from a large set of variables. pca is discussed in greater detail as a tool for unsupervised learning in chapter here we describe its use as a dimension reduction technique for regression. principal components analysis dimension reduction methods an overview of principal components analysis pca is a technique for reducing the dimension of a n p data matrix x. the first principal component direction of the data is that along which the observations vary the most. for instance consider figure which shows population size in tens of thousands of people and ad spending for a particular company in thousands of dollars for cities. the green solid line represents the first principal component direction of the data. we can see by eye that this is the direction along which there is the greatest variability in the data. that is if we projected the observations onto this line shown in the left-hand panel of figure then the resulting projected observations would have the largest possible variance projecting the observations onto any other line would yield projected observations with lower variance. projecting a point onto a line simply involves finding the location on the line which is closest to the point. the first principal component is displayed graphically in figure but how can it be summarized mathematically? it is given by the formula pop ad. here and are the principal component loadings which define the direction referred to above. in pop indicates the mean of all pop values in this data set and ad indicates the mean of all advertising spending. the idea is that out of every possible linear combination of pop and ad such that this particular linear combination yields the highest variance i.e. this is the linear combination for which var pop ad is maximized. it is necessary to consider only linear combinations of the form since otherwise we could increase and arbitrarily in order to blow up the variance. in the two loadings are both positive and have similar size and so is almost an average of the two variables. since n pop and ad are vectors of length and so is in for instance pop ad. the values of are known as the principal component scores and can be seen in the right-hand panel of figure there is also another interpretation for pca the first principal component vector defines the line that is as close as possible to the data. for instance in figure the first principal component line minimizes the sum of the squared perpendicular distances between each point and the line. these distances are plotted as dashed line segments in the left-hand panel of figure in which the crosses represent the projection of each point onto the first principal component line. the first principal component has been chosen so that the projected observations are as close as possible to the original observations. linear model selection and regularization i g n d n e p s d a t n e n o p m o c l i a p c n i r p d n population principal component figure a subset of the advertising data. the mean pop and ad budgets are indicated with a blue circle. left the first principal component direction is shown in green. it is the dimension along which the data vary the most and it also defines the line that is closest to all n of the observations. the distances from each observation to the principal component are represented using the black dashed line segments. the blue dot represents ad. right the left-hand panel has been rotated so that the first principal component direction coincides with the x-axis. in the right-hand panel of figure the left-hand panel has been rotated so that the first principal component direction coincides with the x-axis. it is possible to show that the first principal component score for the ith observation given in is the distance in the x-direction of the ith cross from zero. so for example the point in the bottom-left corner of the left-hand panel of figure has a large negative principal component score while the point in the top-right corner has a large positive score these scores can be computed directly using we can think of the values of the principal component as singlenumber summaries of the joint pop and ad budgets for each location. in this example if pop ad then this indicates a city with below-average population size and belowaverage ad spending. a positive score suggests the opposite. how well can a single number represent both pop and ad? in this case figure indicates that pop and ad have approximately a linear relationship and so we might expect that a single-number summary will work well. figure displays versus both pop and ad. the plots show a strong relationship between the first principal component and the two features. in other words the first principal component appears to capture most of the information contained in the pop and ad predictors. so far we have concentrated on the first principal component. in general one can construct up to p distinct principal components. the second principal component is a linear combination of the variables that is uncorrelated with and has largest variance subject to this constraint. the second principal component direction is illustrated as a dashed blue line in figure it turns out that the zero correlation condition of with principal components were calculated after first standardizing both pop and ad a common approach. hence the x-axes on figures and are not on the same scale. dimension reduction methods n o i t l a u p o p i g n d n e p s d a principal component principal component figure plots of the first principal component scores versus pop and ad. the relationships are strong. is equivalent to the condition that the direction must be perpendicular or orthogonal to the first principal component direction. the second principal component is given by the formula pop ad. perpendicular orthogonal since the advertising data has two predictors the first two principal components contain all of the information that is in pop and ad. however by construction the first component will contain the most information. consider for example the much larger variability of x-axis versus y-axis in the right-hand panel of figure the fact that the second principal component scores are much closer to zero indicates that this component captures far less information. as another illustration figure displays versus pop and ad. there is little relationship between the second principal component and these two predictors again suggesting that in this case one only needs the first principal component in order to accurately represent the pop and ad budgets. with two-dimensional data such as in our advertising example we can construct at most two principal components. however if we had other predictors such as population age income level education and so forth then additional components could be constructed. they would successively maximize variance subject to the constraint of being uncorrelated with the preceding components. the principal components regression approach the predictors the principal components regression approach involves constructing the first m principal components zm and then using these components as is fit using least squares. the key idea is that often a small number of principal components suffice to explain most of the variability in the data as well as the relationship with the response. in other words we assume that the directions in which xp show the most variation are the directions that are associated with y while this assumption is not guaranteed regression model in a linear that principal components regression linear model selection and regularization n o i t l a u p o p i g n d n e p s d a principal component principal component figure plots of the second principal component scores versus pop and ad. the relationships are weak. r o r r e d e r a u q s n a e m r o r r e d e r a u q s n a e m squared bias test mse variance number of components number of components figure pcr was applied to two simulated data sets. left simulated data from figure right simulated data from figure to be true it often turns out to be a reasonable enough approximation to give good results. if the assumption underlying pcr holds then fitting a least squares model to zm will lead to better results than fitting a least squares model to xp since most or all of the information in the data that relates to the response is contained in zm and by estimating only m p coefficients we can mitigate overfitting. in the advertising data the first principal component explains most of the variance in both pop and ad so a principal component regression that uses this single variable to predict some response of interest such as sales will likely perform quite well. figure displays the pcr fits on the simulated data sets from figures and recall that both data sets were generated using n observations and p predictors. however while the response in the first data set was a function of all the predictors the response in the second data set was generated using only two of the predictors. the curves are plotted as a function of m the number of principal components used as predictors in the regression model. as more principal components are used in dimension reduction methods pcr ridge regression and lasso squared bias test mse variance r o r r e d e r a u q s n a e m r o r r e d e r a u q s n a e m number of components shrinkage factor figure pcr ridge regression and the lasso were applied to a simulated data set in which the first five principal components of x contain all the information about the response y in each panel the irreducible error var is shown as a horizontal dashed line. left results for pcr. right results for lasso and ridge regression the x-axis displays the shrinkage factor of the coefficient estimates defined as the norm of the shrunken coefficient estimates divided by the norm of the least squares estimate. the regression model the bias decreases but the variance increases. this results in a typical u-shape for the mean squared error. when m p then pcr amounts simply to a least squares fit using all of the original predictors. the figure indicates that performing pcr with an appropriate choice of m can result in a substantial improvement over least squares especially in the left-hand panel. however by examining the ridge regression and lasso results in figures and we see that pcr does not perform as well as the two shrinkage methods in this example. the relatively worse performance of pcr in figure is a consequence of the fact that the data were generated in such a way that many principal components are required in order to adequately model the response. in contrast pcr will tend to do well in cases when the first few principal components are sufficient to capture most of the variation in the predictors as well as the relationship with the response. the left-hand panel of figure illustrates the results from another simulated data set designed to be more favorable to pcr. here the response was generated in such a way that it depends exclusively on the first five principal components. now the bias drops to zero rapidly as m the number of principal components used in pcr increases. the mean squared error displays a clear minimum at m the right-hand panel of figure displays the results on these data using ridge regression and the lasso. all three methods offer a significant improvement over least squares. however pcr and ridge regression slightly outperform the lasso. we note that even though pcr provides a simple way to perform regression using m p predictors it is not a feature selection method. this is because each of the m principal components used in the regression linear model selection and regularization s t i n e c i f f i e o c d e z d r a d n a s t income limit rating student e s m n o i t a d i l a v s s o r c number of components number of components figure left pcr standardized coefficient estimates on the credit data set for different values of m right the ten-fold cross validation mse obtained using pcr as a function of m is a linear combination of all p of the original features. for instance in was a linear combination of both pop and ad. therefore while pcr often performs quite well in many practical settings it does not result in the development of a model that relies upon a small set of the original features. in this sense pcr is more closely related to ridge regression than to the lasso. in fact one can show that pcr and ridge regression are very closely related. one can even think of ridge regression as a continuous sion of pcr! in pcr the number of principal components m is typically chosen by cross-validation. the results of applying pcr to the credit data set are shown in figure the right-hand panel displays the cross-validation errors obtained as a function of m on these data the lowest crossvalidation error occurs when there are m components this corresponds to almost no dimension reduction at all since pcr with m is equivalent to simply performing least squares. when performing pcr we generally recommend standardizing each predictor using prior to generating the principal components. this standardization ensures that all variables are on the same scale. in the absence of standardization the high-variance variables will tend to play a larger role in the principal components obtained and the scale on which the variables are measured will ultimately have an effect on the final pcr model. however if the variables are all measured in the same units kilograms or inches then one might choose not to standardize them. more details can be found in section of elements of statistical learning by hastie tibshirani and friedman. dimension reduction methods i g n d n e p s d a population figure for the advertising data the first pls direction line and first pcr direction line are shown. partial least squares the pcr approach that we just described involves identifying linear combinations or directions that best represent the predictors xp. these directions are identified in an unsupervised way since the response y is not used to help determine the principal component directions. that is the response does not supervise the identification of the principal components. consequently pcr suffers from a drawback there is no guarantee that the directions that best explain the predictors will also be the best directions to use for predicting the response. unsupervised methods are discussed further in chapter we now present partial least squares a supervised alternative to pcr. like pcr pls is a dimension reduction method which first identifies a new set of features zm that are linear combinations of the original features and then fits a linear model via least squares using these m new features. but unlike pcr pls identifies these new features in a supervised way that is it makes use of the response y in order to identify new features that not only approximate the old features well but also that are related to the response. roughly speaking the pls approach attempts to find directions that help explain both the response and the predictors. we now describe how the first pls direction is computed. after standardizing the p predictors pls computes the first direction by setting each in equal to the coefficient from the simple linear regression of y onto xj. one can show that this coefficient is proportional to the corp relation between y and xj. hence in computing pls places the highest weight on the variables that are most strongly related to the response. partial least squares figure displays an example of pls on set with sales in each of regions as the response and two predictors population size and advertising spending. the solid green line indicates the first pls direction while the dotted line shows the first principal component direction. ad dimension per unit pls has chosen a direction that has less change in the a synthetic data dataset is distinct from the advertising data discussed in chapter linear model selection and regularization pop is ad. the pls direction not fit the predictors as closely as does pca but it does a better job change in the pop dimension relative to pca. this suggests that more highly correlated with the response than is does explaining the response. to identify the second pls direction we first adjust each of the variables for by regressing each variable on and taking residuals. these residuals can be interpreted as the remaining information that has not been explained by the first pls direction. we then compute using this orthogonalized data in exactly the same fashion as was computed based on the original data. this iterative approach can be repeated m times to identify multiple pls components zm finally at the end of this procedure we use least squares to fit a linear model to predict y using zm in exactly the same fashion as for pcr. as with pcr the number m of partial least squares directions used in pls is a tuning parameter that is typically chosen by cross-validation. we generally standardize the predictors and response before performing pls. pls is popular in the field of chemometrics where many variables arise from digitized spectrometry signals. in practice it often performs no better than ridge regression or pcr. while the supervised dimension reduction of pls can reduce bias it also has the potential to increase variance so that the overall benefit of pls relative to pcr is a wash. considerations in high dimensions high-dimensional data most traditional statistical techniques for regression and classification are intended for the low-dimensional setting in which n the number of observations is much greater than p the number of features. this is due in part to the fact that throughout most of the field s history the bulk of scientific problems requiring the use of statistics have been low-dimensional. for instance consider the task of developing a model to predict a patient s blood pressure on the basis of his or her age gender and body mass index there are three predictors or four if an intercept is included in the model and perhaps several thousand patients for whom blood pressure and age gender and bmi are available. hence n p and so the problem is low-dimensional. dimension here we are referring to the size of p. in the past years new technologies have changed the way that data are collected in fields as diverse as finance marketing and medicine. it is now commonplace to collect an almost unlimited number of feature measurements very large. while p can be extremely large the number of observations n is often limited due to cost sample availability or other considerations. two examples are as follows rather than predicting blood pressure on the basis of just age gender and bmi one might also collect measurements for half a million lowdimensional highdimensional considerations in high dimensions single nucleotide polymorphisms these are individual dna mutations that are relatively common in the population for inclusion in the predictive model. then n and p a marketing analyst interested in understanding people s online shopping patterns could treat as features all of the search terms entered by users of a search engine. this is sometimes known as the bag-ofwords model. the same researcher might have access to the search histories of only a few hundred or a few thousand search engine users who have consented to share their information with the researcher. for a given user each of the p search terms is scored present or absent creating a large binary feature vector. then n and p is much larger. data sets containing more features than observations are often referred to as high-dimensional. classical approaches such as least squares linear regression are not appropriate in this setting. many of the issues that arise in the analysis of high-dimensional data were discussed earlier in this book since they apply also when n p these include the role of the bias-variance trade-off and the danger of overfitting. though these issues are always relevant they can become particularly important when the number of features is very large relative to the number of observations. we have defined the high-dimensional setting as the case where the number of features p is larger than the number of observations n. but the considerations that we will now discuss certainly also apply if p is slightly smaller than n and are best always kept in mind when performing supervised learning. what goes wrong in high dimensions? in order to illustrate the need for extra care and specialized techniques for regression and classification when p n we begin by examining what can go wrong if we apply a statistical technique not intended for the highdimensional setting. for this purpose we examine least squares regression. but the same concepts apply to logistic regression linear discriminant analysis and other classical statistical approaches. when the number of features p is as large as or larger than the number of observations n least squares as described in chapter cannot rather should not be performed. the reason is simple regardless of whether or not there truly is a relationship between the features and the response least squares will yield a set of coefficient estimates that result in a perfect fit to the data such that the residuals are zero. an example is shown in figure with p feature an intercept in two cases when there are observations and when there are only two observations. when there are observations n p and the least linear model selection and regularization y y x x figure left least squares regression in the low-dimensional setting. right least squares regression with n observations and two parameters to be estimated intercept and a coefficient. squares regression line does not perfectly fit the data instead the regression line seeks to approximate the observations as well as possible. on the other hand when there are only two observations then regardless of the values of those observations the regression line will fit the data exactly. this is problematic because this perfect fit will almost certainly lead to overfitting of the data. in other words though it is possible to perfectly fit the training data in the high-dimensional setting the resulting linear model will perform extremely poorly on an independent test set and therefore does not constitute a useful model. in fact we can see that this happened in figure the least squares line obtained in the right-hand panel will perform very poorly on a test set comprised of the observations in the lefthand panel. the problem is simple when p n or p n a simple least squares regression line is too flexible and hence overfits the data. figure further illustrates the risk of carelessly applying least squares when the number of features p is large. data were simulated with n observations and regression was performed with between and features each of which was completely unrelated to the response. as shown in the figure the model increases to as the number of features included in the model increases and correspondingly the training set mse decreases to as the number of features increases even though the features are completely unrelated to the response. on the other hand the mse on an independent test set becomes extremely large as the number of features included in the model increases because including the additional predictors leads to a vast increase in the variance of the coefficient estimates. looking at the test set mse it is clear that the best model contains at most a few variables. however someone who carelessly examines only the or the training set mse might erroneously conclude that the model with the greatest number of variables is best. this indicates the importance of applying extra care r considerations in high dimensions e s m t s e t e s m g n n a r t i i number of variables number of variables number of variables figure on a simulated example with n training observations features that are completely unrelated to the outcome are added to the model. left the increases to as more features are included. center the training set mse decreases to as more features are included. right the test set mse increases as more features are included. when analyzing data sets with a large number of variables and of always evaluating model performance on an independent test set. in section we saw a number of approaches for adjusting the training set rss or in order to account for the number of variables used to fit a least squares model. unfortunately the cp aic and bic approaches are not appropriate in the high-dimensional setting because estimating is problematic. instance the formula for from chapter yields an estimate in this setting. similarly problems arise in the application of adjusted in the high-dimensional setting since one can easily obtain a model with an adjusted value of clearly alternative approaches that are better-suited to the high-dimensional setting are required. regression in high dimensions it turns out that many of the methods seen in this chapter for fitting less flexible least squares models such as forward stepwise selection ridge regression the lasso and principal components regression are particularly useful for performing regression in the high-dimensional setting. essentially these approaches avoid overfitting by using a less flexible fitting approach than least squares. figure illustrates the performance of the lasso in a simple simulated example. there are p or features of which are truly associated with the outcome. the lasso was performed on n training observations and the mean squared error was evaluated on an independent test set. as the number of features increases the test set error increases. when p the lowest validation set error was achieved when in was small however when p was larger then the lowest validation set error was achieved using a larger value of in each boxplot rather than reporting the values of used the degrees of freedom of the resulting linear model selection and regularization p p p degrees of freedom degrees of freedom degrees of freedom figure the lasso was performed with n observations and three values of p the number of features. of the p features were associated with the response. the boxplots show the test mses that result using three different values of the tuning parameter in for ease of interpretation rather than reporting the degrees of freedom are reported for the lasso this turns out to be simply the number of estimated non-zero coefficients. when p the lowest test mse was obtained with the smallest amount of regularization. when p the lowest test mse was achieved when there is a substantial amount of regularization. when p the lasso performed poorly regardless of the amount of regularization due to the fact that only of the features truly are associated with the outcome. lasso solution is displayed this is simply the number of non-zero coefficient estimates in the lasso solution and is a measure of the flexibility of the lasso fit. figure highlights three important points regularization or shrinkage plays a key role in high-dimensional problems appropriate tuning parameter selection is crucial for good predictive performance and the test error tends to increase as the dimensionality of the problem the number of features or predictors increases unless the additional features are truly associated with the response. the third point above is in fact a key principle in the analysis of highdimensional data which is known as the curse of dimensionality. one might think that as the number of features used to fit a model increases the quality of the fitted model will increase as well. however comparing the left-hand and right-hand panels in figure we see that this is not necessarily the case in this example the test set mse almost doubles as p increases from to in general adding additional signal features that are truly associated with the response will improve the fitted model in the sense of leading to a reduction in test set error. however adding noise features that are not truly associated with the response will lead to a deterioration in the fitted model and consequently an increased test set error. this is because noise features increase the dimensionality of the curse of dimensionality considerations in high dimensions problem exacerbating the risk of overfitting noise features may be assigned nonzero coefficients due to chance associations with the response on the training set without any potential upside in terms of improved test set error. thus we see that new technologies that allow for the collection of measurements for thousands or millions of features are a double-edged sword they can lead to improved predictive models if these features are in fact relevant to the problem at hand but will lead to worse results if the features are not relevant. even if they are relevant the variance incurred in fitting their coefficients may outweigh the reduction in bias that they bring. interpreting results in high dimensions when we perform the lasso ridge regression or other regression procedures in the high-dimensional setting we must be quite cautious in the way that we report the results obtained. in chapter we learned about multicollinearity the concept that the variables in a regression might be correlated with each other. in the high-dimensional setting the multicollinearity problem is extreme any variable in the model can be written as a linear combination of all of the other variables in the model. essentially this means that we can never know exactly which variables any truly are predictive of the outcome and we can never identify the best coefficients for use in the regression. at most we can hope to assign large regression coefficients to variables that are correlated with the variables that truly are predictive of the outcome. for instance suppose that we are trying to predict blood pressure on the basis of half a million snps and that forward stepwise selection indicates that of those snps lead to a good predictive model on the training data. it would be incorrect to conclude that these snps predict blood pressure more effectively than the other snps not included in the model. there are likely to be many sets of snps that would predict blood pressure just as well as the selected model. if we were to obtain an independent data set and perform forward stepwise selection on that data set we would likely obtain a model containing a different and perhaps even non-overlapping set of snps. this does not detract from the value of the model obtained for instance the model might turn out to be very effective in predicting blood pressure on an independent set of patients and might be clinically useful for physicians. but we must be careful not to overstate the results obtained and to make it clear that what we have identified is simply one of many possible models for predicting blood pressure and that it must be further validated on independent data sets. it is also important to be particularly careful in reporting errors and measures of model fit in the high-dimensional setting. we have seen that when p n it is easy to obtain a useless model that has zero residuals. therefore one should never use sum of squared errors p-values linear model selection and regularization statistics or other traditional measures of model fit on the training data as evidence of a good model fit in the high-dimensional setting. for instance as we saw in figure one can easily obtain a model with when p n. reporting this fact might mislead others into thinking that a statistically valid and useful model has been obtained whereas in fact this provides absolutely no evidence of a compelling model. it is important to instead report results on an independent test set or cross-validation errors. for instance the mse or on an independent test set is a valid measure of model fit but the mse on the training set certainly is not. lab subset selection methods best subset selection here we apply the best subset selection approach to the hitters data. we wish to predict a baseball player s salary on the basis of various statistics associated with performance in the previous year. first of all we note that the salary variable is missing for some of the players. the is.na function can be used to identify the missing observations. it returns a vector of the same length as the input vector with a true for any elements that are missing and a false for non-missing elements. the sum function can then be used to count all of the missing elements. is.na sum library islr fix hitters names hitters hits years crbi assists atbat walks cruns putouts dim hitters sum is na h i t t e r s s a l a r y hmrun catbat cwalks errors runs chits league salary rbi chmrun division newleague hence we see that salary is missing for players. the na.omit function removes all of the rows that have missing values in any variable. hitters na omit hitters dim hitters sum is na hitters the regsubsets function of the leaps library performs best subset selection by identifying the best model that contains a given number of predictors where best is quantified using rss. the syntax is the same as for lm. the summary command outputs the best set of variables for each model size. regsubsets lab subset selection methods library leaps regfit full regsubset s salary hitters summary regfit full subset selection object call regsubsets formula salary hitters and intercept variables subsets of each size up to selection algorithm exhaustive atbat hits hmrun runs rbi walks years catbat chits chmrun cruns crbi cwalks leaguen divisionw putouts assists errors newleaguen an asterisk indicates that a given variable is included in the corresponding model. for instance this output indicates that the best two-variable model contains only hits and crbi. by default regsubsets only reports results up to the best eight-variable model. but the nvmax option can be used in order to return as many variables as are desired. here we fit up to a model. regfit full regsubset s salary data hitters nvmax reg summary summary regfit full the summary function also returns rss adjusted cp and bic. we can examine these to try to select the best overall model. names reg summary which rsq outmat obj rss cp bic linear model selection and regularization for instance we see that the statistic increases from when only one variable is included in the model to almost when all variables are included. as expected the statistic increases monotonically as more variables are included. reg summaryr sq plotting rss adjusted cp and bic for all of the models at once will help us decide which model to select. note the typel option tells r to connect the plotted points with lines. par mfrow c plot reg summaryrss xlab number of variables ylab rss type l plot reg xlab number of variables ylab adjusted rsq type l the points command works like the plot command except that it puts points on a plot that has already been created instead of creating a new plot. the which.max function can be used to identify the location of the maximum point of a vector. we will now plot a red dot to indicate the model with the largest adjusted statistic. points which max reg s u m m a r y a d j r points reg s u m m a r y a d j r col red cex pch in a similar fashion we can plot the cp and bic statistics and indicate the models with the smallest statistic using which.min. which.min plot reg summarycp xlab number of variables ylab cp type l which min reg summarycp points reg summarycp col red cex pch which min reg summaryb i c plot reg summarybic xlab number of variables ylab bic type l points reg summaryb ic col red cex pch the regsubsets function has a built-in plot command which can be used to display the selected variables for the best model with a given number of predictors ranked according to the bic cp adjusted or aic. to find out more about this function type plot regfit full scale plot regfit full scale plot regfit full scale cp plot regfit full scale bic lab subset selection methods the top row of each plot contains a black square for each variable selected according to the optimal model associated with that statistic. for instance we see that several models share a bic close to however the model with the lowest bic is the six-variable model that contains only atbat hits walks crbi divisionw and putouts. we can use the coef function to see the coefficient estimates associated with this model. coef regfit full intercept divisionw atbat putouts hits walks crbi forward and backward stepwise selection we can also use the regsubsets function to perform forward stepwise or backward stepwise selection using the argument methodforward or methodbackward. regfit fwd regsubsets salary data hitters nvmax method forward summary regfit fwd regfit bwd regsubsets salary data hitters nvmax method backward summary regfit bwd for instance we see that using forward stepwise selection the best onevariable model contains only crbi and the best two-variable model additionally includes hits. for this data the best one-variable through sixvariable models are each identical for best subset and forward selection. however the best seven-variable models identified by forward stepwise selection backward stepwise selection and best subset selection are different. coef regfit full intercept chmrun hits divisionw coef regfit fwd intercept cwalks atbat divisionw coef regfit bwd intercept cwalks atbat divisionw walks putouts hits putouts hits putouts catbat chits walks crbi walks cruns linear model selection and regularization choosing among models using the validation set approach and cross-validation we just saw that it is possible to choose among a set of models of different sizes using cp bic and adjusted we will now consider how to do this using the validation set and cross-validation approaches. in order for these approaches to yield accurate estimates of the test error we must use only the training observations to perform all aspects of model-fitting including variable selection. therefore the determination of which model of a given size is best must be made using only the training observations. this point is subtle but important. if the full data set is used to perform the best subset selection step the validation set errors and cross-validation errors that we obtain will not be accurate estimates of the test error. in order to use the validation set approach we begin by splitting the observations into a training set and a test set. we do this by creating a random vector train of elements equal to true if the corresponding observation is in the training set and false otherwise. the vector test has a true if the observation is in the test set and a false otherwise. note the in the command to create test causes trues to be switched to falses and vice versa. we also set a random seed so that the user will obtain the same training settest set split. set seed train sample c true false nrow hitters rep true test train now we apply regsubsets to the training set in order to perform best subset selection. regfit best regsubset s salary data hitters train nvmax notice that we subset the hitters data frame directly in the call in order to access only the training subset of the data using the expression hitterstrain. we now compute the validation set error for the best model of each model size. we first make a model matrix from the test data. test mat model matrix salary data hitters test the model.matrix function is used in many regression packages for building an x matrix from data. now we run a loop and for each size i we extract the coefficients from regfit.best for the best model of that size multiply them into the appropriate columns of the test model matrix to form the predictions and compute the test mse. model. matrix val errors rep na for i in coefi coef regfit best id i lab subset selection methods pred test mat names coefi coefi val errors i mean h i t t e r s s a l a r y test pred we find that the best model is the one that contains ten variables. val errors which min val errors coef regfit best intercept chits putouts atbat chmrun hits cwalks walks leaguen catbat divisionw this was a little tedious partly because there is no predict method for regsubsets. since we will be using this function again we can capture our steps above and write our own predict method. predict regsubset s function object newdata id form as formula objectca l l mat model matrix form newdata coefi coef object id id xvars names coefi mat xvars coefi our function pretty much mimics what we did above. the only complex part is how we extracted the formula used in the call to regsubsets. we demonstrate how we use this function below when we do cross-validation. finally we perform best subset selection on the full data set and select the best ten-variable model. it is important that we make use of the full data set in order to obtain more accurate coefficient estimates. note that we perform best subset selection on the full data set and select the best tenvariable model rather than simply using the variables that were obtained from the training set because the best ten-variable model on the full data set may differ from the corresponding model on the training set. regfit best regsubset s salary data hitters nvmax coef regfit best intercept cruns assists atbat crbi hits cwalks walks divisionw catbat putouts linear model selection and regularization in fact we see that the best ten-variable model on the full data set has a different set of variables than the best ten-variable model on the training set. we now try to choose among the models of different sizes using crossvalidation. this approach is somewhat involved as we must perform best subset selection within each of the k training sets. despite this we see that with its clever subsetting syntax r makes this job quite easy. first we create a vector that allocates each observation to one of k folds and we create a matrix in which we will store the results. k set seed folds sample k nrow hitters replace true cv errors matrix na dimnames list null paste now we write a for loop that performs cross-validation. in the jth fold the elements of folds that equal j are in the test set and the remainder are in the training set. we make our predictions for each model size our new predict method compute the test errors on the appropriate subset and store them in the appropriate slot in the matrix cv.errors. for j in k best fit regsubsets salary data hitters folds j nvmax for i in pred predict best fit hitters folds j id i cv errors i mean h i t t e r s s a l a r y folds j pred this has given us a matrix of which the jth element corresponds to the test mse for the ith cross-validation fold for the best j-variable model. we use the apply function to average over the columns of this matrix in order to obtain a vector for which the jth element is the crossvalidation error for the j-variable model. apply mean cv errors apply cv errors mean mean cv errors par mfrow c plot mean cv errors type b we see that cross-validation selects an model. we now perform best subset selection on the full data set in order to obtain the model. reg best regsubset s salary data hitters nvmax coef reg best intercept atbat hits walks catbat glmnet lab ridge regression and the lasso cruns putouts crbi assists cwalks leaguen divisionw lab ridge regression and the lasso we will use the glmnet package in order to perform ridge regression and the lasso. the main function in this package is glmnet which can be used to fit ridge regression models lasso models and more. this function has slightly different syntax from other model-fitting functions that we have encountered thus far in this book. in particular we must pass in an x matrix as well as a y vector and we do not use the y x syntax. we will now perform ridge regression and the lasso in order to predict salary on the hitters data. before proceeding ensure that the missing values have been removed from the data as described in section x model matrix salary hitters y h i t t e r s s a l a r y the model.matrix function is particularly useful for creating x not only does it produce a matrix corresponding to the predictors but it also automatically transforms any qualitative variables into dummy variables. the latter property is important because glmnet can only take numerical quantitative inputs. ridge regression the glmnet function has an alpha argument that determines what type of model is fit. if then a ridge regression model is fit and if then a lasso model is fit. we first fit a ridge regression model. library glmnet grid seq length ridge mod glmnet alpha lambda grid by default the glmnet function performs ridge regression for an automatically selected range of values. however here we have chosen to implement esthe function over a grid of values ranging from to sentially covering the full range of scenarios from the null model containing only the intercept to the least squares fit. as we will see we can also compute model fits for a particular value of that is not one of the original grid values. note that by default the glmnet function standardizes the variables so that they are on the same scale. to turn off this default setting use the argument standardizefalse. associated with each value of is a vector of ridge regression coefficients stored in a matrix that can be accessed by coef. in this case it is a linear model selection and regularization matrix with rows for each predictor plus an intercept and columns for each value of dim coef ridge mod we expect the coefficient estimates to be much smaller in terms of norm when a large value of is used as compared to when a small value of is used. these are the coefficients when along with their norm ridge modlambd a coef ridge mod intercept rbi chmrun divisionw atbat walks cruns putouts hits years crbi assists hmrun catbat cwalks errors runs chits leaguen newleague n sqrt sum coef ridge mod in contrast here are the coefficients when along with their norm. note the much larger norm of the coefficients associated with this smaller value of ridge modlambd a coef ridge mod intercept rbi chmrun divisionw atbat walks cruns putouts hits years crbi assists hmrun catbat cwalks errors runs chits leaguen newleague n sqrt sum coef ridge mod we can use the predict function for a number of purposes. for instance we can obtain the ridge regression coefficients for a new value of say predict ridge mod s type c o e f f i c i e n t s intercept rbi chmrun divisionw hits years crbi assists atbat walks cruns putouts hmrun catbat cwalks errors runs chits leaguen newleague n lab ridge regression and the lasso we now split the samples into a training set and a test set in order to estimate the test error of ridge regression and the lasso. there are two common ways to randomly split a data set. the first is to produce a random vector of true false elements and select the observations corresponding to true for the training data. the second is to randomly choose a subset of numbers between and n these can then be used as the indices for the training observations. the two approaches work equally well. we used the former method in section here we demonstrate the latter approach. we first set a random seed so that the results obtained will be repro ducible. set seed train sample nrow x nrow x test train y test y test next we fit a ridge regression model on the training set and evaluate its mse on the test set using note the use of the predict function again. this time we get predictions for a test set by replacing typecoefficients with the newx argument. ridge mod glmnet x train y train alpha lambda grid thresh e ridge pred predict ridge mod s newx x test mean ridge pred y test the test mse is note that if we had instead simply fit a model with just an intercept we would have predicted each test observation using the mean of the training observations. in that case we could compute the test set mse like this mean mean y train y test we could also get the same result by fitting a ridge regression model with a very large value of note that means ridge pred predict ridge mod s newx x test mean ridge pred y test so fitting a ridge regression model with leads to a much lower test mse than fitting a model with just an intercept. we now check whether there is any benefit to performing ridge regression with instead of just performing least squares regression. recall that least squares is simply ridge regression with in order for glmnet to yield the exact least squares coefficients when we use the argument exactt when calling the predict function. otherwise the interpolate over the grid of values used in fitting the predict function will linear model selection and regularization ridge pred predict ridge mod s newx x test exact t mean ridge pred y test lm y x subset train predict ridge mod s exact type c o e f f i c i e n t s in general if we want to fit a least squares model then we should use the lm function since that function provides more useful outputs such as standard errors and p-values for the coefficients. in general instead of arbitrarily choosing it would be better to use cross-validation to choose the tuning parameter we can do this using the built-in cross-validation function cv.glmnet. by default the function performs ten-fold cross-validation though this can be changed using the argument nfolds. note that we set a random seed first so our results will be reproducible since the choice of the cross-validation folds is random. set seed cv out cv glmnet x train y train alpha plot cv out bestlam cv outlambda min bestlam therefore we see that the value of that results in the smallest crossvalidation error is what is the test mse associated with this value of ridge pred predict ridge mod s bestlam newx x test mean ridge pred y test this represents a further improvement over the test mse that we got using finally we refit our ridge regression model on the full data set using the value of chosen by cross-validation and examine the coefficient estimates. cv.glmnet out glmnet alpha predict out type c o e f f i c i e n t s s bestlam intercept rbi chmrun divisionw hits years crbi assists atbat walks cruns putouts hmrun catbat cwalks errors runs chits leaguen newleague n glmnet model yielding approximate results. when we use exactt there remains a slight discrepancy in the third decimal place between the output of glmnet when and the output of lm this is due to numerical approximation on the part of glmnet. lab ridge regression and the lasso as expected none of the coefficients are zero ridge regression does not perform variable selection! the lasso we saw that ridge regression with a wise choice of can outperform least squares as well as the null model on the hitters data set. we now ask whether the lasso can yield either a more accurate or a more interpretable model than ridge regression. in order to fit a lasso model we once again use the glmnet function however this time we use the argument other than that change we proceed just as we did in fitting a ridge model. lasso mod glmnet x train y train alpha lambda grid plot lasso mod we can see from the coefficient plot that depending on the choice of tuning parameter some of the coefficients will be exactly equal to zero. we now perform cross-validation and compute the associated test error. set seed cv out cv glmnet x train y train alpha plot cv out bestlam cv outlambda min lasso pred predict lasso mod s bestlam newx x test mean lasso pred y test this is substantially lower than the test set mse of the null model and of least squares and very similar to the test mse of ridge regression with chosen by cross-validation. however the lasso has a substantial advantage over ridge regression in that the resulting coefficient estimates are sparse. here we see that of the coefficient estimates are exactly zero. so the lasso model with chosen by cross-validation contains only seven variables. out glmnet alpha lambda grid lasso coef predict out type c o e f f i c i e n t s s bestlam lasso coef intercept rbi chmrun divisionw runs chits leaguen newleague n hmrun catbat cwalks errors atbat walks cruns putouts hits years crbi assists lasso coef lasso coef intercept leaguen hits divisionw walks putouts cruns crbi linear model selection and regularization lab pcr and pls regression principal components regression principal components regression can be performed using the pcr function which is part of the pls library. we now apply pcr to the hitters data in order to predict salary. again ensure that the missing values have been removed from the data as described in section pcr library pls set seed pcr fit pcr salary data hitters scale true validation cv the syntax for the pcr function is similar to that for lm with a few additional options. setting scaletrue has the effect of standardizing each predictor using prior to generating the principal components so that the scale on which each variable is measured will not have an effect. setting validationcv causes pcr to compute the ten-fold cross-validation error for each possible value of m the number of principal components used. the resulting fit can be examined using summary. summary pcr fit data x dimension y dimension fit method svdpc number of components considered validatio n rmsep cross validated using random segments intercept comps comps comps comps cv adjcv training variance explained comps comps comps comps comps comps x salary the cv score is provided for each possible number of components ranging from m onwards. have printed the cv output only up to m note that pcr reports the root mean squared error in order to obtain the usual mse we must square this quantity. for instance a root mean squared error of corresponds to an mse of one can also plot the cross-validation scores using the validationplot function. using val.typemsep will cause the cross-validation mse to be plotted. v a l i d a t i o n p l o t pcr fit val type msep validation plot lab pcr and pls regression we see that the smallest cross-validation error occurs when m components are used. this is barely fewer than m which amounts to simply performing least squares because when all of the components are used in pcr no dimension reduction occurs. however from the plot we also see that the cross-validation error is roughly the same when only one component is included in the model. this suggests that a model that uses just a small number of components might suffice. the summary function also provides the percentage of variance explained in the predictors and in the response using different numbers of components. this concept is discussed in greater detail in chapter briefly we can think of this as the amount of information about the predictors or the response that is captured using m principal components. for example setting m only captures of all the variance or information in the predictors. in contrast using m increases the value to if we were to use all m p components this would increase to we now perform pcr on the training data and evaluate its test set performance. set seed pcr fit pcr salary data hitters subset train scale true validation cv v a l i d a t i o n p l o t pcr fit val type msep now we find that the lowest cross-validation error occurs when m component are used. we compute the test mse as follows. pcr pred predict pcr fit x test ncomp mean pcr pred y test this test set mse is competitive with the results obtained using ridge regression and the lasso. however as a result of the way pcr is implemented the final model is more difficult to interpret because it does not perform any kind of variable selection or even directly produce coefficient estimates. finally we fit pcr on the full data set using m the number of components identified by cross-validation. pcr fit pcr y x scale true ncomp summary pcr fit data x dimension y dimension fit method svdpc number of components considered training variance explained comps comps comps comps comps comps comps x y x y linear model selection and regularization partial least squares we implement partial least squares using the plsr function also in the pls library. the syntax is just like that of the pcr function. plsr set seed pls fit plsr salary data hitters subset train scale true validation cv summary pls fit data x dimension y dimension fit method kernelpls number of components considered validatio n rmsep cross validated using random segments intercept comps comps comps comps cv adjcv training variance explained comps comps comps comps comps comps x salary v a l i d a t i o n p l o t pls fit val type msep the lowest cross-validation error occurs when only m partial least squares directions are used. we now evaluate the corresponding test set mse. pls pred predict pls fit x test ncomp mean pls pred y test the test mse is comparable to but slightly higher than the test mse obtained using ridge regression the lasso and pcr. finally we perform pls using the full data set using m the number of components identified by cross-validation. pls fit plsr salary data hitters scale true ncomp summary pls fit data x dimension y dimension fit method kernelpls number of components considered training variance explained x salary comps comps notice that the percentage of variance in salary that the two-component pls fit explains is almost as much as that explained using the exercises final seven-component model pcr fit this is because pcr only attempts to maximize the amount of variance explained in the predictors while pls searches for directions that explain variance in both the predictors and the response. exercises conceptual we perform best subset forward stepwise and backward stepwise selection on a single data set. for each approach we obtain p models containing p predictors. explain your answers which of the three models with k predictors has the smallest training rss? which of the three models with k predictors has the smallest test rss? true or false i. the predictors in the k-variable model identified by forward stepwise are a subset of the predictors in the model identified by forward stepwise selection. ii. the predictors in the k-variable model identified by backward stepwise are a subset of the predictors in the model identified by backward stepwise selection. iii. the predictors in the k-variable model identified by backward stepwise are a subset of the predictors in the model identified by forward stepwise selection. iv. the predictors in the k-variable model identified by forward stepwise are a subset of the predictors in the model identified by backward stepwise selection. v. the predictors in the k-variable model identified by best subset are a subset of the predictors in the model identified by best subset selection. for parts through indicate which of i. through iv. is correct. justify your answer. the lasso relative to least squares is i. more flexible and hence will give improved prediction accuracy when its increase in bias is less than its decrease in variance. ii. more flexible and hence will give improved prediction accuracy when its increase in variance is less than its decrease in bias. linear model selection and regularization iii. less flexible and hence will give improved prediction accuracy when its increase in bias is less than its decrease in variance. iv. less flexible and hence will give improved prediction accuracy when its increase in variance is less than its decrease in bias. repeat for ridge regression relative to least squares. repeat for non-linear methods relative to least squares. suppose we estimate the regression coefficients in a linear regression model by minimizing yi jxij subject to j s for a particular value of s. for parts through indicate which of i. through v. is correct. justify your answer. as we increase s from the training rss will i. increase initially and then eventually start decreasing in an inverted u shape. ii. decrease initially and then eventually start increasing in a u shape. iii. steadily increase. iv. steadily decrease. v. remain constant. repeat for test rss. repeat for variance. repeat for bias. repeat for the irreducible error. suppose we estimate the regression coefficients in a linear regression model by minimizing yi jxij j for a particular value of for parts through indicate which of i. through v. is correct. justify your answer. exercises as we increase from the training rss will i. increase initially and then eventually start decreasing in an inverted u shape. ii. decrease initially and then eventually start increasing in a u shape. iii. steadily increase. iv. steadily decrease. v. remain constant. repeat for test rss. repeat for variance. repeat for bias. repeat for the irreducible error. it is well-known that ridge regression tends to give similar coefficient values to correlated variables whereas the lasso may give quite different coefficient values to correlated variables. we will now explore this property in a very simple setting. suppose that n p furthermore suppose that and and so that the estimate for the intercept in a least squares ridge regression or lasso model is zero write out the ridge regression optimization problem in this set ting. argue that in this setting the ridge coefficient estimates satisfy write out the lasso optimization problem in this setting. argue that in this setting the lasso coefficients and are not unique in other words there are many possible solutions to the optimization problem in describe these solutions. we will now explore and further. consider with p for some choice of and plot as a function of your plot should confirm that is solved by consider with p for some choice of and plot as a function of your plot should confirm that is solved by linear model selection and regularization we will now derive the bayesian connection to the lasso and ridge regression discussed in section suppose that yi p xij j where are independent and identically distributed from a n distribution. write out the likelihood for the data. assume the following prior for p are independent and identically distributed according to a double-exponential distribution with mean and common scale parameter b i.e. p setting. exp write out the posterior for in this argue that the lasso estimate is the mode for under this pos terior distribution. now assume the following prior for p are independent and identically distributed according to a normal distribution with mean zero and variance c. write out the posterior for in this setting. argue that the ridge regression estimate is both the mode and the mean for under this posterior distribution. applied in this exercise we will generate simulated data and will then use this data to perform best subset selection. use the rnorm function to generate a predictor x of length n as well as a noise vector of length n generate a response vector y of length n according to the model y where and are constants of your choice. use the regsubsets function to perform best subset selection in order to choose the best model containing the predictors x x x what is the best model obtained according to cp bic and adjusted show some plots to provide evidence for your answer and report the coefficients of the best model obtained. note you will need to use the data.frame function to create a single data set containing both x and y exercises repeat using forward stepwise selection and also using backwards stepwise selection. how does your answer compare to the results in now fit a lasso model to the simulated data again using x x x as predictors. use cross-validation to select the optimal value of create plots of the cross-validation error as a function of report the resulting coefficient estimates and discuss the results obtained. now generate a response vector y according to the model y and perform best subset selection and the lasso. discuss the results obtained. in this exercise we will predict the number of applications received using the other variables in the college data set. split the data set into a training set and a test set. fit a linear model using least squares on the training set and report the test error obtained. fit a ridge regression model on the training set with chosen by cross-validation. report the test error obtained. fit a lasso model on the training set with chosen by crossvalidation. report the test error obtained along with the number of non-zero coefficient estimates. fit a pcr model on the training set with m chosen by crossvalidation. report the test error obtained along with the value of m selected by cross-validation. fit a pls model on the training set with m chosen by crossvalidation. report the test error obtained along with the value of m selected by cross-validation. comment on the results obtained. how accurately can we predict the number of college applications received? is there much difference among the test errors resulting from these five approaches? we have seen that as the number of features used in a model increases the training error will necessarily decrease but the test error may not. we will now explore this in a simulated data set. generate a data set with p features n observations and an associated quantitative response vector generated according to the model where has some elements that are exactly equal to zero. y x linear model selection and regularization split your data set into a training set containing observations and a test set containing observations. perform best subset selection on the training set and plot the training set mse associated with the best model of each size. plot the test set mse associated with the best model of each size. for which model size does the test set mse take on its minimum value? comment on your results. if it takes on its minimum value for a model containing only an intercept or a model containing all of the features then play around with the way that you are generating the data in until you come up with a scenario in which the test set mse is minimized for an intermediate model size. how does the model at which the test set mse is minimized compare to the true model used to generate the data? comment on the coefficient values. create a plot displaying j for a range of values of r where r j is the jth coefficient estimate for the best model containing r coefficients. comment on what you observe. how does this compare to the test mse plot from p j r we will now try to predict per capita crime rate in the boston data set. try out some of the regression methods explored in this chapter such as best subset selection the lasso ridge regression and pcr. present and discuss results for the approaches that you consider. propose a model set of models that seem to perform well on this data set and justify your answer. make sure that you are evaluating model performance using validation set error crossvalidation or some other reasonable alternative as opposed to using training error. does your chosen model involve all of the features in the data set? why or why not? moving beyond linearity so far in this book we have mostly focused on linear models. linear models are relatively simple to describe and implement and have advantages over other approaches in terms of interpretation and inference. however standard linear regression can have significant limitations in terms of predictive power. this is because the linearity assumption is almost always an approximation and sometimes a poor one. in chapter we see that we can improve upon least squares using ridge regression the lasso principal components regression and other techniques. in that setting the improvement is obtained by reducing the complexity of the linear model and hence the variance of the estimates. but we are still using a linear model which can only be improved so far! in this chapter we relax the linearity assumption while still attempting to maintain as much interpretability as possible. we do this by examining very simple extensions of linear models like polynomial regression and step functions as well as more sophisticated approaches such as splines local regression and generalized additive models. polynomial regression extends the linear model by adding extra predictors obtained by raising each of the original predictors to a power. for example a cubic regression uses three variables x x and x as predictors. this approach provides a simple way to provide a nonlinear fit to data. step functions cut the range of a variable into k distinct regions in order to produce a qualitative variable. this has the effect of fitting a piecewise constant function. g. james et al. an introduction to statistical learning with applications in r springer texts in statistics doi springer sciencebusiness media new york moving beyond linearity regression splines are more flexible than polynomials and step functions and in fact are an extension of the two. they involve dividing the range of x into k distinct regions. within each region a polynomial function is fit to the data. however these polynomials are constrained so that they join smoothly at the region boundaries or knots. provided that the interval is divided into enough regions this can produce an extremely flexible fit. smoothing splines are similar to regression splines but arise in a slightly different situation. smoothing splines result from minimizing a residual sum of squares criterion subject to a smoothness penalty. local regression is similar to splines but differs in an important way. the regions are allowed to overlap and indeed they do so in a very smooth way. generalized additive models allow us to extend the methods above to deal with multiple predictors. in sections we present a number of approaches for modeling the relationship between a response y and a single predictor x in a flexible way. in section we show that these approaches can be seamlessly integrated in order to model a response y as a function of several predictors xp. polynomial regression historically the standard way to extend linear regression to settings in which the relationship between the predictors and the response is nonlinear has been to replace the standard linear model yi with a polynomial function yi i i dxd i where is the error term. this approach is known as polynomial regression and in fact we saw an example of this method in section for large enough degree d a polynomial regression allows us to produce an extremely non-linear curve. notice that the coefficients in can be easily estimated using least squares linear regression because this is just a standard linear model with predictors xi i generally speaking it is unusual to use d greater than or because for large values of d the polynomial curve can become overly flexible and can take on some very strange shapes. this is especially true near the boundary of the x variable. i xd i polynomial regression polynomial regression degree polynomial e g a e g a w r p e g a w age age figure the wage data. left the solid blue curve is a polynomial of wage thousands of dollars as a function of age fit by least squares. the dotted curves indicate an estimated confidence interval. right we model the binary event using logistic regression again with a polynomial. the fitted posterior probability of wage exceeding is shown in blue along with an estimated confidence interval. the left-hand panel in figure is a plot of wage against age for the wage data set which contains income and demographic information for males who reside in the central atlantic region of the united states. we see the results of fitting a polynomial using least squares blue curve. even though this is a linear regression model like any other the individual coefficients are not of particular interest. instead we look at the entire fitted function across a grid of values for age from to in order to understand the relationship between age and wage. in figure a pair of dotted curves accompanies the fit these are standard error curves. let s see how these arise. suppose we have computed the fit at a particular value of age f what is the variance of the fit i.e. var f least squares returns variance estimates for each of the fitted coefficients j as well as the covariances between pairs of coefficient estimates. we can use these to compute the estimated variance of f the estimated pointwise standard error of f is the square-root of this variance. this computation is repeated c is the covariance matrix of the j and if then var f moving beyond linearity at each reference point and we plot the fitted curve as well as twice the standard error on either side of the fitted curve. we plot twice the standard error because for normally distributed error terms this quantity corresponds to an approximate confidence interval. it seems like the wages in figure are from two distinct populations there appears to be a high earners group earning more than per annum as well as a low earners group. we can treat wage as a binary variable by splitting it into these two groups. logistic regression can then be used to predict this binary response using polynomial functions of age as predictors. in other words we fit the model pryi exp exp i dxd i i dxd i the result is shown in the right-hand panel of figure the gray marks on the top and bottom of the panel indicate the ages of the high earners and the low earners. the solid blue curve indicates the fitted probabilities of being a high earner as a function of age. the estimated confidence interval is shown as well. we see that here the confidence intervals are fairly wide especially on the right-hand side. although the sample size for this data set is substantial there are only high earners which results in a high variance in the estimated coefficients and consequently wide confidence intervals. step functions using polynomial functions of the features as predictors in a linear model imposes a global structure on the non-linear function of x. we can instead use step functions in order to avoid imposing such a global structure. here we break the range of x into bins and fit a different constant in each bin. this amounts to converting a continuous variable into an ordered categorical variable. in greater detail we create cutpoints ck in the range of x and then construct k new variables step function ordered categorical variable ix x x ick x ck ick x ck ckx where i is an indicator function that returns a if the condition is true and returns a otherwise. for example ick x equals if ck x and indicator function e g a w step functions piecewise constant e g a e g a w r p age age figure the wage data. left the solid curve displays the fitted value from a least squares regression of wage thousands of dollars using step functions of age. the dotted curves indicate an estimated confidence interval. right we model the binary event using logistic regression again using step functions of age. the fitted posterior probability of wage exceeding is shown along with an estimated confidence interval. equals otherwise. these are sometimes called dummy variables. notice that for any value of x ck since x must be in exactly one of the k intervals. we then use least squares to fit a linear model using ck as yi kckxi for a given value of x at most one of ck can be non-zero. note that when x all of the predictors in are zero so can be interpreted as the mean value of y for x by comparison predicts a response of j for cj x so j represents the average increase in the response for x in cj x relative to x an example of fitting step functions to the wage data from figure is shown in the left-hand panel of figure we also fit the logistic regression model exclude as a predictor in because it is redundant with the intercept. this is similar to the fact that we need only two dummy variables to code a qualitative variable with three levels provided that the model will contain an intercept. the decision to exclude instead of some other ckx in is arbitrary. alternatively we could include ck and exclude the intercept. moving beyond linearity pryi exp kck exp kckxi in order to predict the probability that an individual is a high earner on the basis of age. the right-hand panel of figure displays the fitted posterior probabilities obtained using this approach. unfortunately unless there are natural breakpoints in the predictors piecewise-constant functions can miss the action. for example in the lefthand panel of figure the first bin clearly misses the increasing trend of wage with age. nevertheless step function approaches are very popular in biostatistics and epidemiology among other disciplines. for example age groups are often used to define the bins. basis functions polynomial and piecewise-constant regression models are in fact special cases of a basis function approach. the idea is to have at hand a family of functions or transformations that can be applied to a variable x bkx. instead of fitting a linear model in x we fit the model basis function yi kbkxi note that the basis functions bk are fixed and known. other words we choose the functions ahead of time. for polynomial regression the basis functions are bjxi xj i and for piecewise constant functions they are bjxi icj xi we can think of as a standard linear model with predictors bkxi. hence we can use least squares to estimate the unknown regression coefficients in importantly this means that all of the inference tools for linear models that are discussed in chapter such as standard errors for the coefficient estimates and f-statistics for the model s overall significance are available in this setting. thus far we have considered the use of polynomial functions and piecewise constant functions for our basis functions however many alternatives are possible. for instance we can use wavelets or fourier series to construct basis functions. in the next section we investigate a very common choice for a basis function regression splines. regression spline regression splines regression splines now we discuss a flexible class of basis functions that extends upon the polynomial regression and piecewise constant regression approaches that we have just seen. piecewise polynomials instead of fitting a high-degree polynomial over the entire range of x piecewise polynomial regression involves fitting separate low-degree polynomials over different regions of x. for example a piecewise cubic polynomial works by fitting a cubic regression model of the form piecewise polynomial regression yi i i where the coefficients and differ in different parts of the range of x. the points where the coefficients change are called knots. for example a piecewise cubic with no knots is just a standard cubic polynomial as in with d a piecewise cubic polynomial with a single knot at a point c takes the form knot yi i i i i if xi c if xi c. in other words we fit two different polynomial functions to the data one on the subset of the observations with xi c and one on the subset of the observations with xi c. the first polynomial function has coefficients and the second has coefficients each of these polynomial functions can be fit using least squares applied to simple functions of the original predictor. using more knots leads to a more flexible piecewise polynomial. in general if we place k different knots throughout the range of x then we will end up fitting k different cubic polynomials. note that we do not need to use a cubic polynomial. for example we can instead fit piecewise linear functions. in fact our piecewise constant functions of section are piecewise polynomials of degree the top left panel of figure shows a piecewise cubic polynomial fit to a subset of the wage data with a single knot at we immediately see a problem the function is discontinuous and looks ridiculous! since each polynomial has four parameters we are using a total of eight degrees of freedom in fitting this piecewise polynomial model. constraints and splines the top left panel of figure looks wrong because the fitted curve is just too flexible. to remedy this problem we can fit a piecewise polynomial degrees of freedom moving beyond linearity piecewise cubic continuous piecewise cubic e g a w e g a w e g a w age cubic spline age linear spline e g a w age age figure various piecewise polynomials are fit to a subset of the wage data with a knot at top left the cubic polynomials are unconstrained. top right the cubic polynomials are constrained to be continuous at bottom left the cubic polynomials are constrained to be continuous and to have continuous first and second derivatives. bottom right a linear spline is shown which is constrained to be continuous. under the constraint that the fitted curve must be continuous. in other words there cannot be a jump when the top right plot in figure shows the resulting fit. this looks better than the top left plot but the vshaped join looks unnatural. in the lower left plot we have added two additional constraints now both the first and second derivatives of the piecewise polynomials are continuous at in other words we are requiring that the piecewise polynomial be not only continuous when but also very smooth. each constraint that we impose on the piecewise cubic polynomials effectively frees up one degree of freedom by reducing the complexity of the resulting piecewise polynomial fit. so in the top left plot we are using eight degrees of freedom but in the bottom left plot we imposed three constraints continuity of the first derivative and continuity of the second derivative and so are left with five degrees of freedom. the curve in the bottom left derivative regression splines plot is called a cubic in general a cubic spline with k knots uses a total of k degrees of freedom. in figure the lower right plot is a linear spline which is continuous at the general definition of a degree-d spline is that it is a piecewise degree-d polynomial with continuity in derivatives up to degree d at each knot. therefore a linear spline is obtained by fitting a line in each region of the predictor space defined by the knots requiring continuity at each knot. in figure there is a single knot at of course we could add more knots and impose continuity at each. cubic spline linear spline the spline basis representation the regression splines that we just saw in the previous section may have seemed somewhat complex how can we fit a piecewise degree-d polynomial under the constraint that it possibly its first d derivatives be continuous? it turns out that we can use the basis model to represent a regression spline. a cubic spline with k knots can be modeled as yi for an appropriate choice of basis functions the model can then be fit using least squares. truncated power basis just as there were several ways to represent polynomials there are also many equivalent ways to represent cubic splines using different choices of basis functions in the most direct way to represent a cubic spline using is to start off with a basis for a cubic polynomial namely x and then add one truncated power basis function per knot. a truncated power basis function is defined as hx if x otherwise where is the knot. one can show that adding a term of the form to the model for a cubic polynomial will lead to a discontinuity in only the third derivative at the function will remain continuous with continuous first and second derivatives at each of the knots. in other words in order to fit a cubic spline to a data set with k knots we perform least squares regression with an intercept and k predictors of the form x x x hx hx hx k where k are the knots. this amounts to estimating a total of k regression coefficients for this reason fitting a cubic spline with k knots uses k degrees of freedom. splines are popular because most human eyes cannot detect the discontinuity at the knots. natural cubic spline cubic spline moving beyond linearity e g a w age figure a cubic spline and a natural cubic spline with three knots fit to a subset of the wage data. unfortunately splines can have high variance at the outer range of the predictors that is when x takes on either a very small or very large value. figure shows a fit to the wage data with three knots. we see that the confidence bands in the boundary region appear fairly wild. a natural spline is a regression spline with additional boundary constraints the function is required to be linear at the boundary the region where x is smaller than the smallest knot or larger than the largest knot. this additional constraint means that natural splines generally produce more stable estimates at the boundaries. in figure a natural cubic spline is also displayed as a red line. note that the corresponding confidence intervals are narrower. natural spline choosing the number and locations of the knots when we fit a spline where should we place the knots? the regression spline is most flexible in regions that contain a lot of knots because in those regions the polynomial coefficients can change rapidly. hence one option is to place more knots in places where we feel the function might vary most rapidly and to place fewer knots where it seems more stable. while this option can work well in practice it is common to place knots in a uniform fashion. one way to do this is to specify the desired degrees of freedom and then have the software automatically place the corresponding number of knots at uniform quantiles of the data. figure shows an example on the wage data. as in figure we have fit a natural cubic spline with three knots except this time the knot locations were chosen automatically as the and percentiles e g a w regression splines natural cubic spline e g a e g a w r p age age figure a natural cubic spline function with four degrees of freedom is fit to the wage data. left a spline is fit to wage thousands of dollars as a function of age. right logistic regression is used to model the binary event as a function of age. the fitted posterior probability of wage exceeding is shown. of age. this was specified by requesting four degrees of freedom. the argument by which four degrees of freedom leads to three interior knots is somewhat how many knots should we use or equivalently how many degrees of freedom should our spline contain? one option is to try out different numbers of knots and see which produces the best looking curve. a somewhat more objective approach is to use cross-validation as discussed in chapters and with this method we remove a portion of the data fit a spline with a certain number of knots to the remaining data and then use the spline to make predictions for the held-out portion. we repeat this process multiple times until each observation has been left out once and then compute the overall cross-validated rss. this procedure can be repeated for different numbers of knots k. then the value of k giving the smallest rss is chosen. are actually five knots including the two boundary knots. a cubic spline with five knots would have nine degrees of freedom. but natural cubic splines have two additional natural constraints at each boundary to enforce linearity resulting in degrees of freedom. since this includes a constant which is absorbed in the intercept we count it as four degrees of freedom. moving beyond linearity r o r r e d e r a u q s n a e m r o r r e d e r a u q s n a e m degrees of freedom of natural spline degrees of freedom of cubic spline figure ten-fold cross-validated mean squared errors for selecting the degrees of freedom when fitting splines to the wage data. the response is wage and the predictor age. left a natural cubic spline. right a cubic spline. figure shows ten-fold cross-validated mean squared errors for splines with various degrees of freedom fit to the wage data. the left-hand panel corresponds to a natural spline and the right-hand panel to a cubic spline. the two methods produce almost identical results with clear evidence that a one-degree fit linear regression is not adequate. both curves flatten out quickly and it seems that three degrees of freedom for the natural spline and four degrees of freedom for the cubic spline are quite adequate. in section we fit additive spline models simultaneously on several variables at a time. this could potentially require the selection of degrees of freedom for each variable. in cases like this we typically adopt a more pragmatic approach and set the degrees of freedom to a fixed number say four for all terms. comparison to polynomial regression regression splines often give superior results to polynomial regression. this is because unlike polynomials which must use a high degree in the highest monomial term e.g. x to produce flexible fits splines introduce flexibility by increasing the number of knots but keeping the degree fixed. generally this approach produces more stable estimates. splines also allow us to place more knots and hence flexibility over regions where the function f seems to be changing rapidly and fewer knots where f appears more stable. figure compares a natural cubic spline with degrees of freedom to a polynomial on the wage data set. the extra flexibility in the polynomial produces undesirable results at the boundaries while the natural cubic spline still provides a reasonable fit to the data. smoothing splines natural cubic spline polynomial e g a w age figure on the wage data set a natural cubic spline with degrees of freedom is compared to a polynomial. polynomials can show wild behavior especially near the tails. smoothing splines an overview of smoothing splines in the last section we discussed regression splines which we create by specifying a set of knots producing a sequence of basis functions and then using least squares to estimate the spline coefficients. we now introduce a somewhat different approach that also produces a spline. n to be small. however there is a problem in fitting a smooth curve to a set of data what we really want to do is find some function say gx that fits the observed data well that is we want rss with this approach. if we don t put any constraints on gxi then we can always make rss zero simply by choosing g such that it interpolates all of the yi. such a function would woefully overfit the data it would be far too flexible. what we really want is a function g that makes rss small but that is also smooth. how might we ensure that g is smooth? there are a number of ways to do this. a natural approach is to find the function g that minimizes g where is a nonnegative tuning parameter. the function g that minimizes is known as a smoothing spline. what does mean? equation takes the losspenalty formulation that we encounter in the context of ridge regression and the lasso in chapter the term ages g to fit the data well and the term is a loss function that is a penalty term g n smoothing spline loss function moving beyond linearity g will be close to constant and indicates the second that penalizes the variability in g. the notation g derivative of the function g. the first derivative g measures the slope of a function at t and the second derivative corresponds to the amount by which the slope is changing. hence broadly speaking the second derivative of a function is a measure of its roughness it is large in absolute value if gt is very wiggly near t and it is close to zero otherwise. second derivative of a straight line is zero note that a line is perfectly smooth. notation is an integral which we can think of as a summation over the is simply a measure of the total the range of t. in other words change in the function g over its entire range. if g is very smooth then will take on a small value. g will vary significantly and conversely if g is jumpy and variable then g encourages g to be smooth. the larger the value of the smoother g will be. when then the penalty term in has no effect and so the function g will be very jumpy and will exactly interpolate the training observations. when g will be perfectly smooth it will just be a straight line that passes as closely as possible to the training points. in fact in this case g will be the linear least squares line since the loss function in amounts to minimizing the residual sum of squares. for an intermediate value of g will approximate the training observations but will be somewhat smooth. we see that controls the bias-variance trade-off of the smoothing spline. will take on a large value. therefore in g g g the function gx that minimizes can be shown to have some special properties it is a piecewise cubic polynomial with knots at the unique values of xn and continuous first and second derivatives at each knot. furthermore it is linear in the region outside of the extreme knots. in other words the function gx that minimizes is a natural cubic spline with knots at xn! however it is not the same natural cubic spline that one would get if one applied the basis function approach described in section with knots at xn rather it is a shrunken version of such a natural cubic spline where the value of the tuning parameter in controls the level of shrinkage. choosing the smoothing parameter we have seen that a smoothing spline is simply a natural cubic spline with knots at every unique value of xi. it might seem that a smoothing spline will have far too many degrees of freedom since a knot at each data point allows a great deal of flexibility. but the tuning parameter controls the roughness of the smoothing spline and hence the effective degrees of freedom. it is possible to show that as increases from to the effective degrees of freedom which we write df decrease from n to in the context of smoothing splines why do we discuss effective degrees of freedom instead of degrees of freedom? usually degrees of freedom refer effective degrees of freedom smoothing splines to the number of free parameters such as the number of coefficients fit in a polynomial or cubic spline. although a smoothing spline has n parameters and hence n nominal degrees of freedom these n parameters are heavily constrained or shrunk down. hence df is a measure of the flexibility of the smoothing spline the higher it is the more flexible the lower-bias but higher-variance the smoothing spline. the definition of effective degrees of freedom is somewhat technical. we can write g s y where g is the solution to for a particular choice of that is it is a n-vector containing the fitted values of the smoothing spline at the training points xn. equation indicates that the vector of fitted values when applying a smoothing spline to the data can be written as a n n matrix s which there is a formula times the response vector y. then the effective degrees of freedom is defined to be df the sum of the diagonal elements of the matrix s in fitting a smoothing spline we do not need to select the number or location of the knots there will be a knot at each training observation xn. instead we have another problem we need to choose the value of it should come as no surprise that one possible solution to this problem is cross-validation. in other words we can find the value of that makes the cross-validated rss as small as possible. it turns out that the leaveone-out cross-validation error can be computed very efficiently for smoothing splines with essentially the same cost as computing a single fit using the following formula rsscv g i yi g the notation g i indicates the fitted value for this smoothing spline evaluated at xi where the fit uses all of the training observations except for the ith observation yi. in contrast g indicates the smoothing spline function fit to all of the training observations and evaluated at xi. this remarkable formula says that we can compute each of these leaveone-out fits using only g the original fit to all of the we have a very similar formula on page in chapter for least squares linear regression. using we can very quickly perform loocv for the regression splines discussed earlier in this chapter as well as for least squares regression using arbitrary basis functions. exact formulas for computing gxi and s are very technical however efficient algorithms are available for computing these quantities. moving beyond linearity smoothing spline degrees of freedom degrees of freedom e g a w age figure smoothing spline fits to the wage data. the red curve results from specifying effective degrees of freedom. for the blue curve was found automatically by leave-one-out cross-validation which resulted in effective degrees of freedom. figure shows the results from fitting a smoothing spline to the wage data. the red curve indicates the fit obtained from pre-specifying that we would like a smoothing spline with effective degrees of freedom. the blue curve is the smoothing spline obtained when is chosen using loocv in this case the value of chosen results in effective degrees of freedom using for this data there is little discernible difference between the two smoothing splines beyond the fact that the one with degrees of freedom seems slightly wigglier. since there is little difference between the two fits the smoothing spline fit with degrees of freedom is preferable since in general simpler models are better unless the data provides evidence in support of a more complex model. local regression local regression is a different approach for fitting flexible non-linear functions which involves computing the fit at a target point using only the nearby training observations. figure illustrates the idea on some simulated data with one target point near and another near the boundary at in this figure the blue line represents the function f from which the data were generated and the light orange line corresponds to the local regression estimate f local regression is described in algorithm note that in step of algorithm the weights will differ for each value of in other words in order to obtain the local regression fit at a new point we need to fit a new weighted least squares regression model by local regression local regression local regression o oo o oo o o o o o o o o o o o oo o o o o o o o o o o oo o o o o o o o oo o o oo oo o o o o oo o o o o o o o o ooo ooo o o o o o o o o o o o o o o o o o o o o oo oo o o o o o o o o o o o o oo o o o o o o o oo o o o o oo o o o o o oo oo o o oo oo o o o o o o o o o o o o o o o o o o o o oo oo o o o o o o o o o o o o o o o o o o o o oo oo o o o o o o o o o o o o o o oo oo o o o o oo oo oo oo o o o o o o o o oo o o o o o o ooo o o o o o o o o o o oo o o o o o o o o o oo o o o o o o o oo o o o o oo o o o figure local regression illustrated on some simulated data where the blue curve represents f from which the data were generated and the light orange curve corresponds to the local regression estimate f the orange colored points are local to the target point represented by the orange vertical line. the yellow bell-shape superimposed on the plot indicates weights assigned to each point decreasing to zero with distance from the target point. the fit f at is obtained by fitting a weighted linear regression line segment and using the fitted value at solid dot as the estimate f minimizing for a new set of weights. local regression is sometimes referred to as a memory-based procedure because like nearest-neighbors we need all the training data each time we wish to compute a prediction. we will avoid getting into the technical details of local regression here there are books written on the topic. in order to perform local regression there are a number of choices to be made such as how to define the weighting function k and whether to fit a linear constant or quadratic regression in step above. corresponds to a linear regression. while all of these choices make some difference the most important choice is the span s defined in step above. the span plays a role like that of the tuning parameter in smoothing splines it controls the flexibility of the non-linear fit. the smaller the value of s the more local and wiggly will be our fit alternatively a very large value of s will lead to a global fit to the data using all of the training observations. we can again use cross-validation to choose s or we can specify it directly. figure displays local linear regression fits on the wage data using two values of s and as expected the fit obtained using s is smoother than that obtained using s the idea of local regression can be generalized in many different ways. in a setting with multiple features xp one very useful generalization involves fitting a multiple linear regression model that is global in some variables but local in another such as time. such varying coefficient moving beyond linearity algorithm local regression at x gather the fraction s kn of training points whose xi are closest to assign a weight kxi to each point in this neighborhood so that the point furthest from has weight zero and the closest has the highest weight. all but these k nearest neighbors get weight zero. fit a weighted least squares regression of the yi on the xi using the aforementioned weights by finding and that minimize the fitted value at is given by f models are a useful way of adapting a model to the most recently gathered data. local regression also generalizes very naturally when we want to fit models that are local in a pair of variables and rather than one. we can simply use two-dimensional neighborhoods and fit bivariate linear regression models using the observations that are near each target point in two-dimensional space. theoretically the same approach can be implemented in higher dimensions using linear regressions fit to p-dimensional neighborhoods. however local regression can perform poorly if p is much larger than about or because there will generally be very few training observations close to nearest-neighbors regression discussed in chapter suffers from a similar problem in high dimensions. varying coefficient model generalized additive models in sections we present a number of approaches for flexibly predicting a response y on the basis of a single predictor x. these approaches can be seen as extensions of simple linear regression. here we explore the problem of flexibly predicting y on the basis of several predictors xp. this amounts to an extension of multiple linear regression. generalized additive models provide a general framework for extending a standard linear model by allowing non-linear functions of each of the variables while maintaining additivity. just like linear models gams can be applied with both quantitative and qualitative responses. we first examine gams for a quantitative response in section and then for a qualitative response in section generalized additive model additivity generalized additive models local linear regression span is degrees of freedom span is degrees of freedom e g a w age figure local linear fits to the wage data. the span specifies the fraction of the data used to compute the fit at each target point. gams for regression problems a natural way to extend the multiple linear regression model yi pxip in order to allow for non-linear relationships between each feature and the response is to replace each linear component jxij with a nonlinear function fjxij we would then write the model as yi fjxij fpxip this is an example of a gam. it is called an additive model because we calculate a separate fj for each xj and then add together all of their contributions. in sections we discuss many methods for fitting functions to a single variable. the beauty of gams is that we can use these methods as building blocks for fitting an additive model. in fact for most of the methods that we have seen so far in this chapter this can be done fairly trivially. take for example natural splines and consider the task of fitting the model wage moving beyond linearity hs coll r a e y f e g a f n o i t a c u d e f year age education figure for the wage data plots of the relationship between each feature and the response wage in the fitted model each plot displays the fitted function and pointwise standard errors. the first two functions are natural splines in year and age with four and five degrees of freedom respectively. the third function is a step function fit to the qualitative variable education. on the wage data. here year and age are quantitative variables and education is a qualitative variable with five levels hs coll referring to the amount of high school or college education that an individual has completed. we fit the first two functions using natural splines. we fit the third function using a separate constant for each level via the usual dummy variable approach of section figure shows the results of fitting the model using least squares. this is easy to do since as discussed in section natural splines can be constructed using an appropriately chosen set of basis functions. hence the entire model is just a big regression onto spline basis variables and dummy variables all packed into one big regression matrix. figure can be easily interpreted. the left-hand panel indicates that holding age and education fixed wage tends to increase slightly with year this may be due to inflation. the center panel indicates that holding education and year fixed wage tends to be highest for intermediate values of age and lowest for the very young and very old. the right-hand panel indicates that holding year and age fixed wage tends to increase with education the more educated a person is the higher their salary on average. all of these findings are intuitive. figure shows a similar triple of plots but this time and are smoothing splines with four and five degrees of freedom respectively. fitting a gam with a smoothing spline is not quite as simple as fitting a gam with a natural spline since in the case of smoothing splines least squares cannot be used. however standard software such as the gam function in r can be used to fit gams using smoothing splines via an approach known as backfitting. this method fits a model involving multiple predictors by backfitting generalized additive models hs coll r a e y f e g a f n o i t a c u d e f year age education figure details are as in figure but now and are smoothing splines with four and five degrees of freedom respectively. repeatedly updating the fit for each predictor in turn holding the others fixed. the beauty of this approach is that each time we update a function we simply apply the fitting method for that variable to a partial the fitted functions in figures and look rather similar. in most situations the differences in the gams obtained using smoothing splines versus natural splines are small. we do not have to use splines as the building blocks for gams we can just as well use local regression polynomial regression or any combination of the approaches seen earlier in this chapter in order to create a gam. gams are investigated in further detail in the lab at the end of this chapter. pros and cons of gams before we move on let us summarize the advantages and limitations of a gam. gams allow us to fit a non-linear fj to each xj so that we can automatically model non-linear relationships that standard linear regression will miss. this means that we do not need to manually try out many different transformations on each variable individually. the non-linear fits can potentially make more accurate predictions for the response y because the model is additive we can still examine the effect of each xj on y individually while holding all of the other variables fixed. hence if we are interested in inference gams provide a useful representation. partial residual for for example has the form ri yi if we know and then we can fit by treating this residual as a response in a non-linear regression on moving beyond linearity the smoothness of the function fj for the variable xj can be sum marized via degrees of freedom. the main limitation of gams is that the model is restricted to be additive. with many variables important interactions can be missed. however as with linear regression we can manually add interaction terms to the gam model by including additional predictors of the form xj xk. in addition we can add low-dimensional interaction functions of the form fjkxj xk into the model such terms can be fit using two-dimensional smoothers such as local regression or two-dimensional splines covered here. for fully general models we have to look for even more flexible approaches such as random forests and boosting described in chapter gams provide a useful compromise between linear and fully nonparametric models. gams for classification problems gams can also be used in situations where y is qualitative. for simplicity here we will assume y takes on values zero or one and let px pry be the conditional probability the predictors that the response equals one. recall the logistic regression model log px px pxp. this logit is the log of the odds of p versus p which represents as a linear function of the predictors. a natural way to extend to allow for non-linear relationships is to use the model log px px fpxp. equation is a logistic regression gam. it has all the same pros and cons as discussed in the previous section for quantitative responses. we fit a gam to the wage data in order to predict the probability that an individual s income exceeds per year. the gam that we fit takes the form year px px log where px prwage age education. lab non-linear modeling hs coll r a e y f e g a f n o i t a c u d e f year age education figure for the wage data the logistic regression gam given in is fit to the binary response each plot displays the fitted function and pointwise standard errors. the first function is linear in year the second function a smoothing spline with five degrees of freedom in age and the third a step function for education. there are very wide standard errors for the first level of education. once again is fit using a smoothing spline with five degrees of freedom and is fit as a step function by creating dummy variables for each of the levels of education. the resulting fit is shown in figure the last panel looks suspicious with very wide confidence intervals for level in fact there are no ones for that category no individuals with less than a high school education make more than per year. hence we refit the gam excluding the individuals with less than a high school education. the resulting model is shown in figure as in figures and all three panels have the same vertical scale. this allows us to visually assess the relative contributions of each of the variables. we observe that age and education have a much larger effect than year on the probability of being a high earner. lab non-linear modeling in this lab we re-analyze the wage data considered in the examples throughout this chapter in order to illustrate the fact that many of the complex non-linear fitting procedures discussed can be easily implemented in r. we begin by loading the islr library which contains the data. library islr attach wage moving beyond linearity hs coll r a e y f e g a f n o i t a c u d e f ryea age education figure the same model is fit as in figure this time excluding the observations for which education is now we see that increased education tends to be associated with higher salaries. polynomial regression and step functions we now examine how figure was produced. we first fit the model using the following command fit lm wage poly age data wage coef summary fit intercept poly age poly age poly age poly age estimate std error t value pr t this syntax fits a linear model using the lm function in order to predict wage using a fourth-degree polynomial in age the poly command allows us to avoid having to write out a long formula with powers of age. the function returns a matrix whose columns are a basis of orthogonal polynomials which essentially means that each column is a linear combination of the variables age and however we can also use poly to obtain age and directly if we prefer. we can do this by using the rawtrue argument to the poly function. later we see that this does not affect the model in a meaningful way though the choice of basis clearly affects the coefficient estimates it does not affect the fitted values obtained. lm wage poly age raw t data wage coef summary orthogonal polynomial e intercept poly age raw t e poly age raw t e estimate std error t value pr t e e e lab non-linear modeling poly age raw t e poly age raw t e e e there are several other equivalent ways of fitting this model which show case the flexibility of the formula language in r. for example lm wage age i age i age i age data wage coef intercept e age e i age e i age e i age e this simply creates the polynomial basis functions on the fly taking care to protect terms like via the wrapper function i symbol has wrapper a special meaning in formulas. lm wage cbind age age age age data wage this does the same more compactly using the cbind function for building a matrix from a collection of vectors any function call such as cbind inside a formula also serves as a wrapper. we now create a grid of values for age at which we want predictions and then call the generic predict function specifying that we want standard errors as well. agelims range age age grid seq from agelims to agelims preds predict fit newdata list age age grid se true se bands cbind predsfit predsse fit predsfit predsse fit finally we plot the data and add the fit from the polynomial. par mfrow c mar c oma c plot age wage xlim agelims cex col darkgrey title degree polynomial outer t lines age grid predsfit lwd col blue matlines age grid se bands lwd col blue lty here the mar and oma arguments to par allow us to control the margins of the plot and the title function creates a figure title that spans both subplots. we mentioned earlier that whether or not an orthogonal set of basis functions is produced in the poly function will not affect the model obtained in a meaningful way. what do we mean by this? the fitted values obtained in either case are identical title predict newdata list age age grid se true max abs predsfit e in performing a polynomial regression we must decide on the degree of the polynomial to use. one way to do this is by using hypothesis tests. we now fit models ranging from linear to a polynomial and seek to determine the simplest model which is sufficient to explain the relationship moving beyond linearity anova analysis of variance between wage and age. we use the anova function which performs an analysis of variance using an f-test in order to test the null hypothesis that a model is sufficient to explain the data against the alternative hypothesis that a more complex model is required. in order to use the anova function and must be nested models the predictors in must be a subset of the predictors in in this case we fit five different models and sequentially compare the simpler model to the more complex model. fit lm wage age data wage fit lm wage poly age data wage fit lm wage poly age data wage fit lm wage poly age data wage fit lm wage poly age data wage anova fit fit fit fit fit analysis of variance table model wage age model wage poly age model wage poly age model wage poly age model wage poly age res df rss df sum of sq f pr f codes the p-value comparing the linear model to the quadratic model is indicating that a linear fit is not sufficient. simessentially zero ilarly the p-value comparing the quadratic model to the cubic model is very low so the quadratic fit is also insufficient. the p-value comparing the cubic and polynomials model and model is approximately while the polynomial model seems unnecessary because its p-value is hence either a cubic or a quartic polynomial appear to provide a reasonable fit to the data but lower- or higher-order models are not justified. in this case instead of using the anova function we could have obtained these p-values more succinctly by exploiting the fact that poly creates orthogonal polynomials. coef summary fit estimate std error intercept poly age poly age poly age t value pr t e e e e lab non-linear modeling poly age poly age e e notice that the p-values are the same and in fact the square of the t-statistics are equal to the f-statistics from the anova function for example however the anova method works whether or not we used orthogonal polynomials it also works when we have other terms in the model as well. for example we can use anova to compare these three models fit lm wage education age data wage fit lm wage education poly age data wage fit lm wage education poly age data wage anova fit fit fit as an alternative to using hypothesis tests and anova we could choose the polynomial degree using cross-validation as discussed in chapter next we consider the task of predicting whether an individual earns more than per year. we proceed much as before except that first we create the appropriate response vector and then apply the glm function using familybinomial in order to fit a polynomial logistic regression model. fit glm i wage poly age data wage family binomial note that we again use the wrapper i to create this binary response variable on the fly. the expression evaluates to a logical variable containing trues and falses which glm coerces to binary by setting the trues to and the falses to once again we make predictions using the predict function. preds predict fit newdata list age age grid se t however calculating the confidence intervals is slightly more involved than in the linear regression case. the default prediction type for a glm model is typelink which is what we use here. this means we get predictions for the logit that is we have fit a model of the form log pry pry x and the predictions given are of the form x the standard errors given are also of this form. in order to obtain confidence intervals for pry we use the transformation pry expx expx moving beyond linearity pfit exp predsfit exp predsfit se bands logit cbind predsfit predsse fit predsfit predsse fit se bands exp se bands logit exp se bands logit note that we could have directly computed the probabilities by selecting the typeresponse option in the predict function. preds predict fit newdata list age age grid type response se t however the corresponding confidence intervals would not have been sensible because we would end up with negative probabilities! finally the right-hand plot from figure was made as follows plot age i wage xlim agelims type n ylim c points jitter age i wage cex pch col darkgrey lines age grid pfit lwd col blue matlines age grid se bands lwd col blue lty we have drawn the age values corresponding to the observations with wage values above as gray marks on the top of the plot and those with wage values below are shown as gray marks on the bottom of the plot. we used the jitter function to jitter the age values a bit so that observations with the same age value do not cover each other up. this is often called a rug plot. in order to fit a step function as discussed in section we use the cut function. jitter rug plot cut table cut age fit lm wage cut age data wage coef summary fit intercept cut age cut age cut age estimate std error t value pr t e e e e here cut automatically picked the cutpoints at and years of age. we could also have specified our own cutpoints directly using the breaks option. the function cut returns an ordered categorical variable the lm function then creates a set of dummy variables for use in the regression. the category is left out so the intercept coefficient of can be interpreted as the average salary for those under years of age and the other coefficients can be interpreted as the average additional salary for those in the other age groups. we can produce predictions and plots just as we did in the case of the polynomial fit. lab non-linear modeling splines in order to fit regression splines in r we use the splines library. in section we saw that regression splines can be fit by constructing an appropriate matrix of basis functions. the bs function generates the entire matrix of basis functions for splines with the specified set of knots. by default cubic splines are produced. fitting wage to age using a regression spline is simple bs library splines fit lm wage bs age knots c data wage pred predict fit newdata list age age grid se t plot age wage col gray lines age grid predfit lwd lines age grid predfit predse lty dashed lines age grid predfit predse lty dashed here we have prespecified knots at ages and this produces a spline with six basis functions. that a cubic spline with three knots has seven degrees of freedom these degrees of freedom are used up by an intercept plus six basis functions. we could also use the df option to produce a spline with knots at uniform quantiles of the data. dim bs age knots c dim bs age df attr bs age df knots in this case r chooses knots at ages and which correspond to the and percentiles of age. the function bs also has a degree argument so we can fit splines of any degree rather than the default degree of yields a cubic spline. in order to instead fit a natural spline we use the ns function. here we fit a natural spline with four degrees of freedom. lm wage ns age df data wage predict newdata list age age grid se t lines age grid col red lwd ns as with the bs function we could instead specify the knots directly using the knots option. in order to fit a smoothing spline we use the smooth.spline function. figure was produced with the following code smooth. spline plot age wage xlim agelims cex col darkgrey title smoothing spline fit smooth spline age wage df smooth spline age wage cv true lines fit col red lwd moving beyond linearity lines col blue lwd legend topright legend c df df col c red blue lty lwd cex notice that in the first call to smooth.spline we specified the function then determines which value of leads to degrees of freedom. in the second call to smooth.spline we select the smoothness level by crossvalidation this results in a value of that yields degrees of freedom. in order to perform local regression we use the loess function. loess plot age wage xlim agelims cex col darkgrey title local regression fit loess wage age span data wage loess wage age span data wage lines age grid predict fit data frame age age grid col red lwd lines age grid predict data frame age age grid col blue lwd legend topright legend c span span col c red blue lty lwd cex here we have performed local linear regression using spans of and that is each neighborhood consists of or of the observations. the larger the span the smoother the fit. the locfit library can also be used for fitting local regression models in r. gams we now fit a gam to predict wage using natural spline functions of year and age treating education as a qualitative predictor as in since this is just a big linear regression model using an appropriate choice of basis functions we can simply do this using the lm function. lm wage ns year ns age education data wage we now fit the model using smoothing splines rather than natural splines. in order to fit more general sorts of gams using smoothing splines or other components that cannot be expressed in terms of basis functions and then fit using least squares regression we will need to use the gam library in r. the s function which is part of the gam library is used to indicate that we would like to use a smoothing spline. we specify that the function of year should have degrees of freedom and that the function of age will have degrees of freedom. since education is qualitative we leave it as is and it is converted into four dummy variables. we use the gam function in order to fit a gam using these components. all of the terms in are fit simultaneously taking each other into account to explain the response. s gam library gam gam gam wage s year s age education data wage lab non-linear modeling in order to produce figure we simply call the plot function par mfrow c plot gam se true col blue the generic plot function recognizes that is an object of class gam and invokes the appropriate plot.gam method. conveniently even though is not of class gam but rather of class lm we can still use plot.gam on it. figure was produced using the following expression plot.gam plot gam se true col red notice here we had to use plot.gam rather than the generic plot function. in these plots the function of year looks rather linear. we can perform a series of anova tests in order to determine which of these three models is best a gam that excludes year a gam that uses a linear function of year or a gam that uses a spline function of year gam gam wage s age education data wage gam gam wage year s age education data wage anova gam gam gam test f analysis of deviance table model wage s age education model wage year s age education model wage s year s age education resid df resid dev df deviance f pr f codes we find that there is compelling evidence that a gam with a linear function of year is better than a gam that does not include year at all however there is no evidence that a non-linear function of year is needed in other words based on the results of this anova is preferred. the summary function produces a summary of the gam fit. summary gam call gam formula wage s year s age education data wage deviance residuals min q median q max dispersion parameter for gaussian family taken to be null deviance on degrees of freedom residual deviance on degrees of freedom moving beyond linearity aic number of local scoring iterations df for terms and f values for n o n p a r a m e t r i c effects df npar df npar f pr f intercept s year s age education codes the p-values for year and age correspond to a null hypothesis of a linear relationship versus the alternative of a non-linear relationship. the large p-value for year reinforces our conclusion from the anova test that a linear function is adequate for this term. however there is very clear evidence that a non-linear term is required for age. we can make predictions from gam objects just like from lm objects using the predict method for the class gam. here we make predictions on the training set. preds predict gam newdata wage we can also use local regression fits as building blocks in a gam using the lo function. gam lo gam wage s year df lo age span education lo data wage plot gam gam lo se true col green here we have used local regression for the age term with a span of we can also use the lo function to create interactions before calling the gam function. for example gam lo i gam wage lo year age span education data wage fits a two-term model in which the first term is an interaction between year and age fit by a local regression surface. we can plot the resulting two-dimensional surface if we first install the akima package. library akima plot gam lo i in order to fit a logistic regression gam we once again use the i function in constructing the binary response variable and set familybinomial. gam lr gam i wage year s age df education family binomial data wage par mfrow c plot gam lr se col green it is easy to see that there are no high earners in the category exercises table education i wage education hs grad hs grad some college college grad advanced degree false true hence we fit a logistic regression gam using all but this category. this provides more sensible results. gam lr s gam i wage year s age df education family binomial data wage subset education hs grad plot gam lr se col green exercises conceptual it was mentioned in the chapter that a cubic regression spline with one knot at can be obtained using a basis of the form x if x and equals otherwise. we will now show that a function of the form where f is indeed a cubic regression spline regardless of the values of find a cubic polynomial such that f for all x express in terms of find a cubic polynomial such that f for all x express in terms of we have now established that f is a piecewise polynomial. show that that is f is continuous at show that f is continuous at that is f f moving beyond linearity show that f f that is f is continuous at therefore f is indeed a cubic spline. hint parts and of this problem require knowledge of singlevariable calculus. as a reminder given a cubic polynomial the first derivative takes the form f and the second derivative takes the form f suppose that a curve g is computed to smoothly fit a set of n points using the following formula g arg min g gmx dx where gm represents the mth derivative of g g. provide example sketches of g in each of the following scenarios. m m m m m suppose we fit a curve with basis functions x that ix equals for x and otherwise. we fit the linear regression model y and obtain coefficient estimates sketch the estimated curve between x and x note the intercepts slopes and other relevant information. suppose we fit a curve with basis functions x x x x we fit the linear regression model y and obtain coefficient estimates sketch the estimated curve between x and x note the intercepts slopes and other relevant information. consider two curves and defined by arg min g arg min g exercises dx dx where gm represents the mth derivative of g. as will or have the smaller training rss? as will or have the smaller test rss? for will or have the smaller training and test rss? applied in this exercise you will further analyze the wage data set considered throughout this chapter. perform polynomial regression to predict wage using age. use cross-validation to select the optimal degree d for the polynomial. what degree was chosen and how does this compare to the results of hypothesis testing using anova? make a plot of the resulting polynomial fit to the data. fit a step function to predict wage using age and perform crossvalidation to choose the optimal number of cuts. make a plot of the fit obtained. the wage data set contains a number of other features not explored in this chapter such as marital status job class and others. explore the relationships between some of these other predictors and wage and use non-linear fitting techniques in order to fit flexible models to the data. create plots of the results obtained and write a summary of your findings. fit some of the non-linear models investigated in this chapter to the auto data set. is there evidence for non-linear relationships in this data set? create some informative plots to justify your answer. this question uses the variables dis weighted mean of distances to five boston employment centers and nox oxides concentration in parts per million from the boston data. we will treat dis as the predictor and nox as the response. use the poly function to fit a cubic polynomial regression to predict nox using dis. report the regression output and plot the resulting data and polynomial fits. moving beyond linearity plot the polynomial fits for a range of different polynomial degrees from to and report the associated residual sum of squares. perform cross-validation or another approach to select the opti mal degree for the polynomial and explain your results. use the bs function to fit a regression spline to predict nox using dis. report the output for the fit using four degrees of freedom. how did you choose the knots? plot the resulting fit. now fit a regression spline for a range of degrees of freedom and plot the resulting fits and report the resulting rss. describe the results obtained. perform cross-validation or another approach in order to select the best degrees of freedom for a regression spline on this data. describe your results. this question relates to the college data set. split the data into a training set and a test set. using out-of-state tuition as the response and the other variables as the predictors perform forward stepwise selection on the training set in order to identify a satisfactory model that uses just a subset of the predictors. fit a gam on the training data using out-of-state tuition as the response and the features selected in the previous step as the predictors. plot the results and explain your findings. evaluate the model obtained on the test set and explain the results obtained. for which variables if any is there evidence of a non-linear relationship with the response? in section it was mentioned that gams are generally fit using a backfitting approach. the idea behind backfitting is actually quite simple. we will now explore backfitting in the context of multiple linear regression. suppose that we would like to perform multiple linear regression but we do not have software to do so. instead we only have software to perform simple linear regression. therefore we take the following iterative approach we repeatedly hold all but one coefficient estimate fixed at its current value and update only that coefficient estimate using a simple linear regression. the process is continued until convergence that is until the coefficient estimates stop changing. we now try this out on a toy example. exercises generate a response y and two predictors and with n initialize to take on a value of your choice. it does not matter what value you choose. keeping fixed fit the model y you can do this as follows a lm a keeping fixed fit the model y you can do this as follows a lm a write a for loop to repeat and times. report the estimates of and at each iteration of the for loop. create a plot in which each of these values is displayed with and each shown in a different color. compare your answer in to the results of simply performing multiple linear regression to predict y using and use the abline function to overlay those multiple linear regression coefficient estimates on the plot obtained in on this data set how many backfitting iterations were required in order to obtain a good approximation to the multiple regression coefficient estimates? this problem is a continuation of the previous exercise. in a toy example with p show that one can approximate the multiple linear regression coefficient estimates by repeatedly performing simple linear regression in a backfitting procedure. how many backfitting iterations are required in order to obtain a good approximation to the multiple regression coefficient estimates? create a plot to justify your answer. tree-based methods in this chapter we describe tree-based methods for regression and classification. these involve stratifying or segmenting the predictor space into a number of simple regions. in order to make a prediction for a given observation we typically use the mean or the mode of the training observations in the region to which it belongs. since the set of splitting rules used to segment the predictor space can be summarized in a tree these types of approaches are known as decision tree methods. tree-based methods are simple and useful for interpretation. however they typically are not competitive with the best supervised learning approaches such as those seen in chapters and in terms of prediction accuracy. hence in this chapter we also introduce bagging random forests and boosting. each of these approaches involves producing multiple trees which are then combined to yield a single consensus prediction. we will see that combining a large number of trees can often result in dramatic improvements in prediction accuracy at the expense of some loss in interpretation. decision tree the basics of decision trees decision trees can be applied to both regression and classification problems. we first consider regression problems and then move on to classification. g. james et al. an introduction to statistical learning with applications in r springer texts in statistics doi springer sciencebusiness media new york tree-based methods years hits figure for the hitters data a regression tree for predicting the log salary of a baseball player based on the number of years that he has played in the major leagues and the number of hits that he made in the previous year. at a given internal node the label the form xj tk indicates the left-hand branch emanating from that split and the right-hand branch corresponds to xj tk. for instance the split at the top of the tree results in two large branches. the left-hand branch corresponds to and the right-hand branch corresponds to the tree has two internal nodes and three terminal nodes or leaves. the number in each leaf is the mean of the response for the observations that fall there. regression trees in order to motivate regression trees we begin with a simple example. regression tree predicting baseball players salaries using regression trees we use the hitters data set to predict a baseball player s salary based on years number of years that he has played in the major leagues and hits number of hits that he made in the previous year. we first remove observations that are missing salary values and log-transform salary so that its distribution has more of a typical bell-shape. that salary is measured in thousands of dollars. figure shows a regression tree fit to this data. it consists of a series of splitting rules starting at the top of the tree. the top split assigns observations having to the left the predicted salary years and hits are integers in these data the tree function in r labels the splits at the midpoint between two adjacent values. the basics of decision trees s t i h years figure the three-region partition for the hitters data set from the regression tree illustrated in figure for these players is given by the mean response value for the players in the data set with for such players the mean log salary is and so we make a prediction of thousands of dollars i.e. for these players. players with are assigned to the right branch and then that group is further subdivided by hits. overall the tree stratifies or segments the players into three regions of predictor space players who have played for four or fewer years players who have played for five or more years and who made fewer than hits last year and players who have played for five or more years and who made at least hits last year. these three regions can be written as and figure illustrates the regions as a function of years and hits. the predicted salaries for these three groups are and respectively. in keeping with the tree analogy the regions and are known as terminal nodes or leaves of the tree. as is the case for figure decision trees are typically drawn upside down in the sense that the leaves are at the bottom of the tree. the points along the tree where the predictor space is split are referred to as internal nodes. in figure the two internal nodes are indicated by the text and we refer to the segments of the trees that connect the nodes as branches. we might interpret the regression tree displayed in figure as follows years is the most important factor in determining salary and players with less experience earn lower salaries than more experienced players. given that a player is less experienced the number of hits that he made in the previous year seems to play little role in his salary. but among players who terminal node leaf internal node branch tree-based methods have been in the major leagues for five or more years the number of hits made in the previous year does affect salary and players who made more hits last year tend to have higher salaries. the regression tree shown in figure is likely an over-simplification of the true relationship between hits years and salary. however it has advantages over other types of regression models as those seen in chapters and it is easier to interpret and has a nice graphical representation. prediction via stratification of the feature space we now discuss the process of building a regression tree. roughly speaking there are two steps. we divide the predictor space that is the set of possible values for xp into j distinct and non-overlapping regions rj for every observation that falls into the region rj we make the same prediction which is simply the mean of the response values for the training observations in rj. for instance suppose that in step we obtain two regions and and that the response mean of the training observations in the first region is while the response mean of the training observations in the second region is then for a given observation x x if x we will predict a value of and if x we will predict a value of we now elaborate on step above. how do we construct the regions rj in theory the regions could have any shape. however we choose to divide the predictor space into high-dimensional rectangles or boxes for simplicity and for ease of interpretation of the resulting predictive model. the goal is to find boxes rj that minimize the rss given by yrj i rj where yrj is the mean response for the training observations within the jth box. unfortunately it is computationally infeasible to consider every possible partition of the feature space into j boxes. for this reason we take a top-down greedy approach that is known as recursive binary splitting. the approach is top-down because it begins at the top of the tree which point all observations belong to a single region and then successively splits the predictor space each split is indicated via two new branches further down on the tree. it is greedy because at each step of the tree-building process the best split is made at that particular step rather than looking ahead and picking a split that will lead to a better tree in some future step. recursive binary splitting the basics of decision trees in order to perform recursive binary splitting we first select the predictor xj and the cutpoint s such that splitting the predictor space into the regions s and s leads to the greatest possible reduction in rss. notation s means the region of predictor space in which xj takes on a value less than s. that is we consider all predictors xp and all possible values of the cutpoint s for each of the predictors and then choose the predictor and cutpoint such that the resulting tree has the lowest rss. in greater detail for any j and s we define the pair of half-planes s s and s s and we seek the value of j and s that minimize the equation i xi i xi where is the mean response for the training observations in s and is the mean response for the training observations in s. finding the values of j and s that minimize can be done quite quickly especially when the number of features p is not too large. next we repeat the process looking for the best predictor and best cutpoint in order to split the data further so as to minimize the rss within each of the resulting regions. however this time instead of splitting the entire predictor space we split one of the two previously identified regions. we now have three regions. again we look to split one of these three regions further so as to minimize the rss. the process continues until a stopping criterion is reached for instance we may continue until no region contains more than five observations. once the regions rj have been created we predict the response for a given test observation using the mean of the training observations in the region to which that test observation belongs. a five-region example of this approach is shown in figure tree pruning the process described above may produce good predictions on the training set but is likely to overfit the data leading to poor test set performance. this is because the resulting tree might be too complex. a smaller tree with fewer splits is fewer regions rj might lead to lower variance and better interpretation at the cost of a little bias. one possible alternative to the process described above is to build the tree only so long as the decrease in the rss due to each split exceeds some threshold. this strategy will result in smaller trees but is too short-sighted since a seemingly worthless split early on in the tree might be followed by a very good split that is a split that leads to a large reduction in rss later on. tree-based methods x x y x figure top left a partition of two-dimensional feature space that could not result from recursive binary splitting. top right the output of recursive binary splitting on a two-dimensional example. bottom left a tree corresponding to the partition in the top right panel. bottom right a perspective plot of the prediction surface corresponding to that tree. therefore a better strategy is to grow a very large tree and then prune it back in order to obtain a subtree. how do we determine the best prune way to prune the tree? intuitively our goal is to select a subtree that subtree leads to the lowest test error rate. given a subtree we can estimate its test error using cross-validation or the validation set approach. however estimating the cross-validation error for every possible subtree would be too cumbersome since there is an extremely large number of possible subtrees. instead we need a way to select a small set of subtrees for consideration. cost complexity pruning also known as weakest link pruning gives us a way to do just this. rather than considering every possible subtree we consider a sequence of trees indexed by a nonnegative tuning parameter cost complexity pruning weakest link pruning the basics of decision trees algorithm building a regression tree use recursive binary splitting to grow a large tree on the training data stopping only when each terminal node has fewer than some minimum number of observations. apply cost complexity pruning to the large tree in order to obtain a sequence of best subtrees as a function of use k-fold cross-validation to choose that is divide the training observations into k folds. for each k k repeat steps and on all but the kth fold of the training data. evaluate the mean squared prediction error on the data in the left-out kth fold as a function of average the results for each value of and pick to minimize the average error. return the subtree from step that corresponds to the chosen value of for each value of there corresponds a subtree t such that i xi rm is as small as possible. here indicates the number of terminal nodes of the tree t rm is the rectangle the subset of predictor space corresponding to the mth terminal node and yrm is the predicted response associated with rm that is the mean of the training observations in rm. the tuning parameter controls a trade-off between the subtree s complexity and its fit to the training data. when then the subtree t will simply equal because then just measures the training error. however as increases there is a price to pay for having a tree with many terminal nodes and so the quantity will tend to be minimized for a smaller subtree. equation is reminiscent of the lasso from chapter in which a similar formulation was used in order to control the complexity of a linear model. it turns out that as we increase from zero in branches get pruned from the tree in a nested and predictable fashion so obtaining the whole sequence of subtrees as a function of is easy. we can select a value of using a validation set or using cross-validation. we then return to the full data set and obtain the subtree corresponding to this process is summarized in algorithm tree-based methods years rbi hits putouts years years walks walks runs rbi years figure regression tree analysis for the hitters data. the unpruned tree that results from top-down greedy splitting on the training data is shown. figures and display the results of fitting and pruning a regression tree on the hitters data using nine of the features. first we randomly divided the data set in half yielding observations in the training set and observations in the test set. we then built a large regression tree on the training data and varied in in order to create subtrees with different numbers of terminal nodes. finally we performed six-fold crossvalidation in order to estimate the cross-validated mse of the trees as a function of chose to perform six-fold cross-validation because is an exact multiple of six. the unpruned regression tree is shown in figure the green curve in figure shows the cv error as a function of the number of while the orange curve indicates the test error. also shown are standard error bars around the estimated errors. for reference the training error curve is shown in black. the cv error is a reasonable approximation of the test error the cv error takes on its cv error is computed as a function of it is convenient to display the result as a function of the number of leaves this is based on the relationship between and in the original tree grown to all the training data. the basics of decision trees training cross validation test r o r r e d e r a u q s n a e m tree size figure regression tree analysis for the hitters data. the training cross-validation and test mse are shown as a function of the number of terminal nodes in the pruned tree. standard error bands are displayed. the minimum cross-validation error occurs at a tree size of three. minimum for a three-node tree while the test error also dips down at the three-node tree it takes on its lowest value at the ten-node tree. the pruned tree containing three terminal nodes is shown in figure classification trees a classification tree is very similar to a regression tree except that it is used to predict a qualitative response rather than a quantitative one. recall that for a regression tree the predicted response for an observation is given by the mean response of the training observations that belong to the same terminal node. in contrast for a classification tree we predict that each observation belongs to the most commonly occurring class of training observations in the region to which it belongs. in interpreting the results of a classification tree we are often interested not only in the class prediction corresponding to a particular terminal node region but also in the class proportions among the training observations that fall into that region. the task of growing a classification tree is quite similar to the task of growing a regression tree. just as in the regression setting we use recursive binary splitting to grow a classification tree. however in the classification setting rss cannot be used as a criterion for making the binary splits. a natural alternative to rss is the classification error rate. since we plan to assign an observation in a given region to the most commonly occurring class of training observations in that region the classification error rate is simply the fraction of the training observations in that region that do not belong to the most common class classification tree classification error rate tree-based methods e max k pmk. here pmk represents the proportion of training observations in the mth region that are from the kth class. however it turns out that classification error is not sufficiently sensitive for tree-growing and in practice two other measures are preferable. the gini index is defined by g pmk gini index entropy a measure of total variance across the k classes. it is not hard to see that the gini index takes on a small value if all of the pmk s are close to zero or one. for this reason the gini index is referred to as a measure of node purity a small value indicates that a node contains predominantly observations from a single class. an alternative to the gini index is entropy given by d pmk log pmk. since pmk it follows that pmk log pmk. one can show that the entropy will take on a value near zero if the pmk s are all near zero or near one. therefore like the gini index the entropy will take on a small value if the mth node is pure. in fact it turns out that the gini index and the entropy are quite similar numerically. when building a classification tree either the gini index or the entropy are typically used to evaluate the quality of a particular split since these two approaches are more sensitive to node purity than is the classification error rate. any of these three approaches might be used when pruning the tree but the classification error rate is preferable if prediction accuracy of the final pruned tree is the goal. figure shows an example on the heart data set. these data contain a binary outcome hd for patients who presented with chest pain. an outcome value of yes indicates the presence of heart disease based on an angiographic test while no means no heart disease. there are predictors including age sex chol cholesterol measurement and other heart and lung function measurements. cross-validation results in a tree with six terminal nodes. in our discussion thus far we have assumed that the predictor variables take on continuous values. however decision trees can be constructed even in the presence of qualitative predictor variables. for instance in the heart data some of the predictors such as sex thal stress test and chestpain are qualitative. therefore a split on one of these variables amounts to assigning some of the qualitative values to one branch and the basics of decision trees thala ca ca maxhr chestpainbc age thalb restecg slope oldpeak yes no no chestpaina yes yes yes no yes maxhr maxhr no no restbp chol no chol sex yes no no no yes no yes r o r r e training cross validation test thala ca ca maxhr chestpainbc yes yes no no no yes tree size figure heart data. top the unpruned tree. bottom left cross error training and test error for different sizes of the pruned tree. bottom right the pruned tree corresponding to the minimal cross-validation error. assigning the remaining to the other branch. in figure some of the internal nodes correspond to splitting qualitative variables. for instance the top internal node corresponds to splitting thal. the text thala indicates that the left-hand branch coming out of that node consists of observations with the first value of the thal variable and the right-hand node consists of the remaining observations or reversible defects. the text chestpainbc two splits down the tree on the left indicates that the left-hand branch coming out of that node consists of observations with the second and third values of the chestpain variable where the possible values are typical angina atypical angina non-anginal pain and asymptomatic. tree-based methods figure has a surprising characteristic some of the splits yield two terminal nodes that have the same predicted value. for instance consider the split near the bottom right of the unpruned tree. regardless of the value of restecg a response value of yes is predicted for those observations. why then is the split performed at all? the split is performed because it leads to increased node purity. that is all of the observations corresponding to the right-hand leaf have a response value of yes whereas of those corresponding to the left-hand leaf have a response value of yes. why is node purity important? suppose that we have a test observation that belongs to the region given by that right-hand leaf. then we can be pretty certain that its response value is yes. in contrast if a test observation belongs to the region given by the left-hand leaf then its response value is probably yes but we are much less certain. even though the split does not reduce the classification error it improves the gini index and the entropy which are more sensitive to node purity. trees versus linear models regression and classification trees have a very different flavor from the more classical approaches for regression and classification presented in chapters and in particular linear regression assumes a model of the form f xj j cm rm whereas regression trees assume a model of the form f where rm represent a partition of feature space as in figure which model is better? it depends on the problem at hand. if the relationship between the features and the response is well approximated by a linear model as in then an approach such as linear regression will likely work well and will outperform a method such as a regression tree that does not exploit this linear structure. if instead there is a highly non-linear and complex relationship between the features and the response as indicated by model then decision trees may outperform classical approaches. an illustrative example is displayed in figure the relative performances of tree-based and classical approaches can be assessed by estimating the test error using either cross-validation or the validation set approach of course other considerations beyond simply test error may come into play in selecting a statistical learning method for instance in certain settings prediction using a tree may be preferred for the sake of interpretability and visualization. the basics of decision trees x x x x figure top row a two-dimensional classification example in which the true decision boundary is linear and is indicated by the shaded regions. a classical approach that assumes a linear boundary will outperform a decision tree that performs splits parallel to the axes bottom row here the true decision boundary is non-linear. here a linear model is unable to capture the true decision boundary whereas a decision tree is successful advantages and disadvantages of trees decision trees for regression and classification have a number of advantages over the more classical approaches seen in chapters and trees are very easy to explain to people. in fact they are even easier to explain than linear regression! some people believe that decision trees more closely mirror human decision-making than do the regression and classification approaches seen in previous chapters. trees can be displayed graphically and are easily interpreted even by a non-expert if they are small. trees can easily handle qualitative predictors without the need to create dummy variables. tree-based methods unfortunately trees generally do not have the same level of predictive accuracy as some of the other regression and classification approaches seen in this book. additionally trees can be very non-robust. in other words a small change in the data can cause a large change in the final estimated tree. however by aggregating many decision trees using methods like bagging random forests and boosting the predictive performance of trees can be substantially improved. we introduce these concepts in the next section. bagging random forests boosting bagging random forests and boosting use trees as building blocks to construct more powerful prediction models. bagging the bootstrap introduced in chapter is an extremely powerful idea. it is used in many situations in which it is hard or even impossible to directly compute the standard deviation of a quantity of interest. we see here that the bootstrap can be used in a completely different context in order to improve statistical learning methods such as decision trees. the decision trees discussed in section suffer from high variance. this means that if we split the training data into two parts at random and fit a decision tree to both halves the results that we get could be quite different. in contrast a procedure with low variance will yield similar results if applied repeatedly to distinct data sets linear regression tends to have low variance if the ratio of n to p is moderately large. bootstrap aggregation or bagging is a general-purpose procedure for reducing the variance of a statistical learning method we introduce it here because it is particularly useful and frequently used in the context of decision trees. recall that given a set of n independent observations zn each with variance the variance of the mean z of the observations is given by in other words averaging a set of observations reduces variance. hence a natural way to reduce the variance and hence increase the prediction accuracy of a statistical learning method is to take many training sets from the population build a separate prediction model using each training set and average the resulting predictions. in other words we could calculate f f f bx using b separate training sets and average them in order to obtain a single low-variance statistical learning model bagging bagging random forests boosting given by favgx b f bx. of course this is not practical because we generally do not have access to multiple training sets. instead we can bootstrap by taking repeated samples from the training data set. in this approach we generate b different bootstrapped training data sets. we then train our method on bx and finally average the bth bootstrapped training set in order to get f all the predictions to obtain fbagx b bx. f this is called bagging. while bagging can improve predictions for many regression methods it is particularly useful for decision trees. to apply bagging to regression trees we simply construct b regression trees using b bootstrapped training sets and average the resulting predictions. these trees are grown deep and are not pruned. hence each individual tree has high variance but low bias. averaging these b trees reduces the variance. bagging has been demonstrated to give impressive improvements in accuracy by combining together hundreds or even thousands of trees into a single procedure. thus far we have described the bagging procedure in the regression context to predict a quantitative outcome y how can bagging be extended to a classification problem where y is qualitative? in that situation there are a few possible approaches but the simplest is as follows. for a given test observation we can record the class predicted by each of the b trees and take a majority vote the overall prediction is the most commonly occurring class among the b predictions. figure shows the results from bagging trees on the heart data. the test error rate is shown as a function of b the number of trees constructed using bootstrapped training data sets. we see that the bagging test error rate is slightly lower in this case than the test error rate obtained from a single tree. the number of trees b is not a critical parameter with bagging using a very large value of b will not lead to overfitting. in practice we use a value of b sufficiently large that the error has settled down. using b is sufficient to achieve good performance in this example. out-of-bag error estimation it turns out that there is a very straightforward way to estimate the test error of a bagged model without the need to perform cross-validation or the validation set approach. recall that the key to bagging is that trees are repeatedly fit to bootstrapped subsets of the observations. one can show majority vote tree-based methods r o r r e test bagging test randomforest oob bagging oob randomforest number of trees figure bagging and random forest results for the heart data. the test error and orange is shown as a function of b the number of bootstrapped p. the dashed line training sets used. random forests were applied with m indicates the test error resulting from a single classification tree. the green and blue traces show the oob error which in this case is considerably lower. that on average each bagged tree makes use of around two-thirds of the the remaining one-third of the observations not used to fit a given bagged tree are referred to as the out-of-bag observations. we can predict the response for the ith observation using each of the trees in which that observation was oob. this will yield around predictions for the ith observation. in order to obtain a single prediction for the ith observation we can average these predicted responses regression is the goal or can take a majority vote classification is the goal. this leads to a single oob prediction for the ith observation. an oob prediction can be obtained in this way for each of the n observations from which the overall oob mse a regression problem or classification error a classification problem can be computed. the resulting oob error is a valid estimate of the test error for the bagged model since the response for each observation is predicted using only the trees that were not fit using that observation. figure displays the oob error on the heart data. it can be shown that with b sufficiently large oob error is virtually equivalent to leave-one-out cross-validation error. the oob approach for estimating out-of-bag relates to exercise of chapter bagging random forests boosting the test error is particularly convenient when performing bagging on large data sets for which cross-validation would be computationally onerous. variable importance measures as we have discussed bagging typically results in improved accuracy over prediction using a single tree. unfortunately however it can be difficult to interpret the resulting model. recall that one of the advantages of decision trees is the attractive and easily interpreted diagram that results such as the one displayed in figure however when we bag a large number of trees it is no longer possible to represent the resulting statistical learning procedure using a single tree and it is no longer clear which variables are most important to the procedure. thus bagging improves prediction accuracy at the expense of interpretability. although the collection of bagged trees is much more difficult to interpret than a single tree one can obtain an overall summary of the importance of each predictor using the rss bagging regression trees or the gini index bagging classification trees. in the case of bagging regression trees we can record the total amount that the rss is decreased due to splits over a given predictor averaged over all b trees. a large value indicates an important predictor. similarly in the context of bagging classification trees we can add up the total amount that the gini index is decreased by splits over a given predictor averaged over all b trees. a graphical representation of the variable importances in the heart data is shown in figure we see the mean decrease in gini index for each variable relative to the largest. the variables with the largest mean decrease in gini index are thal ca and chestpain. random forests random forests provide an improvement over bagged trees by way of a small tweak that decorrelates the trees. as in bagging we build a number of decision trees on bootstrapped training samples. but when building these decision trees each time a split in a tree is considered a random sample of m predictors is chosen as split candidates from the full set of p predictors. the split is allowed to use only one of those m predictors. a fresh sample of p that is the number of predictors considered at each split is approximately equal to the square root of the total number of predictors out of the for the heart data. m predictors is taken at each split and typically we choose m in other words in building a random forest at each split in the tree the algorithm is not even allowed to consider a majority of the available predictors. this may sound crazy but it has a clever rationale. suppose that there is one very strong predictor in the data set along with a number of other moderately strong predictors. then in the collection of bagged variable importance random forest tree-based methods fbs restecg exang sex slope chol age restbp maxhr oldpeak chestpain ca thal variable importance figure a variable importance plot for the heart data. variable importance is computed using the mean decrease in gini index and expressed relative to the maximum. trees most or all of the trees will use this strong predictor in the top split. consequently all of the bagged trees will look quite similar to each other. hence the predictions from the bagged trees will be highly correlated. unfortunately averaging many highly correlated quantities does not lead to as large of a reduction in variance as averaging many uncorrelated quantities. in particular this means that bagging will not lead to a substantial reduction in variance over a single tree in this setting. random forests overcome this problem by forcing each split to consider only a subset of the predictors. therefore on average mp of the splits will not even consider the strong predictor and so other predictors will have more of a chance. we can think of this process as decorrelating the trees thereby making the average of the resulting trees less variable and hence more reliable. the main difference between bagging and random forests is the choice of predictor subset size m. for instance if a random forest is built using m p then this amounts simply to bagging. on the heart data random p leads to a reduction in both test error and oob error forests using m over bagging using a small value of m in building a random forest will typically be helpful when we have a large number of correlated predictors. we applied random forests to a high-dimensional biological data set consisting of expression measurements of genes measured on tissue samples from patients. there are around genes in humans and individual genes bagging random forests boosting have different levels of activity or expression in particular cells tissues and biological conditions. in this data set each of the patient samples has a qualitative label with different levels either normal or of different types of cancer. our goal was to use random forests to predict cancer type based on the genes that have the largest variance in the training set. we randomly divided the observations into a training and a test set and applied random forests to the training set for three different values of the number of splitting variables m. the results are shown in figure the error rate of a single tree is and the null rate is we see that using trees is sufficient to give good performance and that the choice m p gave a small improvement in test error over bagging p in this example. as with bagging random forests will not overfit if we increase b so in practice we use a value of b sufficiently large for the error rate to have settled down. boosting we now discuss boosting yet another approach for improving the predictions resulting from a decision tree. like bagging boosting is a general approach that can be applied to many statistical learning methods for regression or classification. here we restrict our discussion of boosting to the context of decision trees. recall that bagging involves creating multiple copies of the original training data set using the bootstrap fitting a separate decision tree to each copy and then combining all of the trees in order to create a single predictive model. notably each tree is built on a bootstrap data set independent of the other trees. boosting works in a similar way except that the trees are grown sequentially each tree is grown using information from previously grown trees. boosting does not involve bootstrap sampling instead each tree is fit on a modified version of the original data set. consider first the regression setting. like bagging boosting involves combining a large number of decision trees f f b. boosting is described in algorithm what is the idea behind this procedure? unlike fitting a single large decision tree to the data which amounts to fitting the data hard and potentially overfitting the boosting approach instead learns slowly. given the current model we fit a decision tree to the residuals from the model. that is we fit a tree using the current residuals rather than the outcome y as the response. we then add this new decision tree into the fitted function in order to update the residuals. each of these trees can be rather small with just a few terminal nodes determined by the parameter d in the algorithm. by null rate results from simply classifying each observation to the dominant class overall which is in this case the normal class. boosting tree-based methods mp m p r o r r e n o i t a c i f i s s a c l t s e t number of trees figure results from random forests for the gene expression data set with p predictors. the test error is displayed as a function of the number of trees. each colored line corresponds to a different value of m the number of predictors available for splitting at each interior tree node. random forests p lead to a slight improvement over bagging p. a single classification tree has an error rate of fitting small trees to the residuals we slowly improve f in areas where it does not perform well. the shrinkage parameter slows the process down even further allowing more and different shaped trees to attack the residuals. in general statistical learning approaches that learn slowly tend to perform well. note that in boosting unlike in bagging the construction of each tree depends strongly on the trees that have already been grown. we have just described the process of boosting regression trees. boosting classification trees proceeds in a similar but slightly more complex way and the details are omitted here. boosting has three tuning parameters the number of trees b. unlike bagging and random forests boosting can overfit if b is too large although this overfitting tends to occur slowly if at all. we use cross-validation to select b. the shrinkage parameter a small positive number. this controls the rate at which boosting learns. typical values are or and the right choice can depend on the problem. very small can require using a very large value of b in order to achieve good performance. the number d of splits in each tree which controls the complexity of the boosted ensemble. often d works well in which case each tree is a stump consisting of a single split. in this case the boosted ensemble is fitting an additive model since each term involves only a single variable. more generally d is the interaction depth and controls stump interaction depth lab decision trees algorithm boosting for regression trees set f and ri yi for all i in the training set. for b b repeat fit a tree f b with d splits terminal nodes to the training data r. update f by adding in a shrunken version of the new tree f f f bx. update the residuals ri ri f bxi. output the boosted model f f bx. the interaction order of the boosted model since d splits can involve at most d variables. in figure we applied boosting to the cancer gene expression data set in order to develop a classifier that can distinguish the normal class from the cancer classes. we display the test error as a function of the total number of trees and the interaction depth d. we see that simple stumps with an interaction depth of one perform well if enough of them are included. this model outperforms the depth-two model and both outperform a random forest. this highlights one difference between boosting and random forests in boosting because the growth of a particular tree takes into account the other trees that have already been grown smaller trees are typically sufficient. using smaller trees can aid in interpretability as well for instance using stumps leads to an additive model. lab decision trees fitting classification trees the tree library is used to construct classification and regression trees. library tree tree-based methods r o r r e n o i t a c i f i s s a c l t s e t boosting boosting randomforest m p number of trees figure results from performing boosting and random forests on the gene expression data set in order to predict cancer versus normal. the test error is displayed as a function of the number of trees. for the two boosted models trees slightly outperform trees and both outperform the random forest although the standard errors are around making none of these differences significant. the test error rate for a single tree is we first use classification trees to analyze the carseats data set. in these data sales is a continuous variable and so we begin by recoding it as a binary variable. we use the ifelse function to create a variable called high which takes on a value of yes if the sales variable exceeds and takes on a value of no otherwise. ifelse library islr attach carseats high ifelse sales no yes finally we use the data.frame function to merge high with the rest of the carseats data. carseats data frame carseats high we now use the tree function to fit a classification tree in order to predict high using all variables but sales. the syntax of the tree function is quite similar to that of the lm function. tree carseats tree high sales carseats tree the summary function lists the variables that are used as internal nodes in the tree the number of terminal nodes and the error rate. summary tree carseats c l a s s i f i c a t i o n tree tree formula high sales data carseats variables actually used in tree c o n s t r u c t i o n shelveloc income price compprice lab decision trees populatio n number of terminal nodes residual mean deviance m i s c l a s s i f i c a t i o n error rate advertisi n g age us we see that the training error rate is for classification trees the deviance reported in the output of summary is given by nmk log pmk m k where nmk is the number of observations in the mth terminal node that belong to the kth class. a small deviance indicates a tree that provides a good fit to the data. the residual mean deviance reported is simply the deviance divided by n which in this case is one of the most attractive properties of trees is that they can be graphically displayed. we use the plot function to display the tree structure and the text function to display the node labels. the argument instructs r to include the category names for any qualitative predictors rather than simply displaying a letter for each category. plot tree carseats text tree carseats pretty the most important indicator of sales appears to be shelving location since the first branch differentiates good locations from bad and medium locations. if we just type the name of the tree object r prints output corresponding to each branch of the tree. r displays the split criterion the number of observations in that branch the deviance the overall prediction for the branch or no and the fraction of observations in that branch that take on values of yes and no. branches that lead to terminal nodes are indicated using asterisks. tree carseats node split n deviance yval yprob denotes terminal node root no shelveloc bad medium no price income yes no in order to properly evaluate the performance of a classification tree on these data we must estimate the test error rather than simply computing the training error. we split the observations into a training set and a test set build the tree using the training set and evaluate its performance on the test data. the predict function can be used for this purpose. in the case of a classification tree the argument typeclass instructs r to return the actual class prediction. this approach leads to correct predictions for around of the locations in the test data set. tree-based methods set seed train sample nrow carseats carseats test carseats train high test high train tree carseats tree high sales carseats subset train tree pred predict tree carseats carseats test type class table tree pred high test high test tree pred no yes no yes next we consider whether pruning the tree might lead to improved results. the function cv.tree performs cross-validation in order to determine the optimal level of tree complexity cost complexity pruning is used in order to select a sequence of trees for consideration. we use the argument funprune.misclass in order to indicate that we want the classification error rate to guide the cross-validation and pruning process rather than the default for the cv.tree function which is deviance. the cv.tree function reports the number of terminal nodes of each tree considered as well as the corresponding error rate and the value of the cost-complexity parameter used which corresponds to in cv.tree set seed cv carseats cv tree tree carseats fun prune misclass names cv carseats size cv carseats method dev k inf misclass attr class prune tree sequence note that despite the name dev corresponds to the cross-validation error rate in this instance. the tree with terminal nodes results in the lowest cross-validation error rate with cross-validation errors. we plot the error rate as a function of both size and k. par mfrow c lab decision trees plot cv carseatssize cv carseatsdev type b plot cv carseatsk cv carseatsdev type b we now apply the prune.misclass function in order to prune the tree to prune. obtain the nine-node tree. misclass prune carseats prune misclass tree carseats best plot prune carseats text prune carseats pretty how well does this pruned tree perform on the test data set? once again we apply the predict function. tree pred predict prune carseats carseats test type class table tree pred high test high test tree pred no yes no yes now of the test observations are correctly classified so not only has the pruning process produced a more interpretable tree but it has also improved the classification accuracy. if we increase the value of best we obtain a larger pruned tree with lower classification accuracy prune carseats prune misclass tree carseats best plot prune carseats text prune carseats pretty tree pred predict prune carseats carseats test type class table tree pred high test high test tree pred no yes no yes fitting regression trees here we fit a regression tree to the boston data set. first we create a training set and fit the tree to the training data. library mass set seed train sample nrow boston nrow boston tree boston tree medv boston subset train summary tree boston regressio n tree tree formula medv data boston subset train tree-based methods variables actually used in tree c o n s t r u c t i o n lstat rm dis number of terminal nodes residual mean deviance d i s t r i b u t i o n of residuals median min st qu mean rd qu max notice that the output of summary indicates that only three of the variables have been used in constructing the tree. in the context of a regression tree the deviance is simply the sum of squared errors for the tree. we now plot the tree. plot tree boston text tree boston pretty the variable lstat measures the percentage of individuals with lower socioeconomic status. the tree indicates that lower values of lstat correspond to more expensive houses. the tree predicts a median house price of for larger homes in suburbs in which residents have high socioeconomic status and now we use the cv.tree function to see whether pruning the tree will improve performance. cv boston cv tree tree boston plot cv bostonsize cv bostondev type b in this case the most complex tree is selected by cross-validation. however if we wish to prune the tree we could do so as follows using the prune.tree function prune.tree prune boston prune tree tree boston best plot prune boston text prune boston pretty in keeping with the cross-validation results we use the unpruned tree to make predictions on the test set. yhat predict tree boston newdata boston train boston test boston train medv plot yhat boston test abline mean yhat boston test in other words the test set mse associated with the regression tree is the square root of the mse is therefore around indicating that this model leads to test predictions that are within around of the true median home value for the suburb. bagging and random forests here we apply bagging and random forests to the boston data using the randomforest package in r. the exact results obtained in this section may lab decision trees depend on the version of r and the version of the randomforest package installed on your computer. recall that bagging is simply a special case of a random forest with m p. therefore the randomforest function can be used to perform both random forests and bagging. we perform bagging as follows random forest library r a n d o m f o r e s t set seed bag boston r a n d o m f o r e s t medv data boston subset train mtry importanc e true bag boston call r a n d o m f o r e s t formula medv data boston mtry importance true subset train type of random forest regression number of trees no of variables tried at each split mean of squared residuals var explained the argument indicates that all predictors should be considered for each split of the tree in other words that bagging should be done. how well does this bagged model perform on the test set? yhat bag predict bag boston newdata boston train plot yhat bag boston test abline mean yhat bag boston test the test set mse associated with the bagged regression tree is almost half that obtained using an optimally-pruned single tree. we could change the number of trees grown by randomforest using the ntree argument bag boston r a n d o m f o r e s t medv data boston subset train mtry ntree yhat bag predict bag boston newdata boston train mean yhat bag boston test growing a random forest proceeds in exactly the same way except that we use a smaller value of the mtry argument. by default randomforest uses variables when building a random forest of regression trees and p variables when building a random forest of classification trees. here we use mtry set seed rf boston r a n d o m f o r e s t medv data boston subset train mtry importance true yhat rf predict rf boston newdata boston train mean yhat rf boston test tree-based methods the test set mse is this indicates that random forests yielded an improvement over bagging in this case. using the importance function we can view the importance of each variable. importanc e rf boston crim zn indus chas nox rm age dis rad tax ptratio black lstat incmse i n c n o d e p u r i t y importance two measures of variable importance are reported. the former is based upon the mean decrease of accuracy in predictions on the out of bag samples when a given variable is excluded from the model. the latter is a measure of the total decrease in node impurity that results from splits over that variable averaged over all trees was plotted in figure in the case of regression trees the node impurity is measured by the training rss and for classification trees by the deviance. plots of these importance measures can be produced using the varimpplot function. varimpplo t rf boston the results indicate that across all of the trees considered in the random forest the wealth level of the community and the house size are by far the two most important variables. varimpplot boosting here we use the gbm package and within it the gbm function to fit boosted regression trees to the boston data set. we run gbm with the option distributiongaussian since this is a regression problem if it were a binary classification problem we would use distributionbernoulli. the argument indicates that we want trees and the option limits the depth of each tree. gbm library gbm set seed boost boston gbm medv data boston train d i s t r i b u t i o n gaussian n trees interactio n depth the summary function produces a relative influence plot and also outputs the relative influence statistics. lab decision trees summary boost boston var lstat rm dis crim nox ptratio black age tax indus chas rad zn rel inf we see that lstat and rm are by far the most important variables. we can also produce partial dependence plots for these two variables. these plots illustrate the marginal effect of the selected variables on the response after integrating out the other variables. in this case as we might expect median house prices are increasing with rm and decreasing with lstat. partial dependence plot par mfrow c plot boost boston i rm plot boost boston i lstat we now use the boosted model to predict medv on the test set yhat boost predict boost boston newdata boston train n trees mean yhat boost boston test the test mse obtained is similar to the test mse for random forests and superior to that for bagging. if we want to we can perform boosting with a different value of the shrinkage parameter in the default value is but this is easily modified. here we take boost boston gbm medv data boston train d i s t r i b u t i o n gaussian n trees interacti on depth shrinkage verbose f yhat boost predict boost boston newdata boston train n trees mean yhat boost boston test in this case using leads to a slightly lower test mse than tree-based methods exercises conceptual draw an example your own invention of a partition of twodimensional feature space that could result from recursive binary splitting. your example should contain at least six regions. draw a decision tree corresponding to this partition. be sure to label all aspects of your figures including the regions the cutpoints and so forth. hint your result should look something like figures and it is mentioned in section that boosting using depth-one trees stumps leads to an additive model that is a model of the form f fjxj. explain why this is the case. you can begin with in algorithm consider the gini index classification error and entropy in a simple classification setting with two classes. create a single plot that displays each of these quantities as a function of the xaxis should display ranging from to and the y-axis should display the value of the gini index classification error and entropy. hint in a setting with two classes you could make this plot by hand but it will be much easier to make in r. this question relates to the plots in figure sketch the tree corresponding to the partition of the predictor space illustrated in the left-hand panel of figure the numbers inside the boxes indicate the mean of y within each region. create a diagram similar to the left-hand panel of figure using the tree illustrated in the right-hand panel of the same figure. you should divide up the predictor space into the correct regions and indicate the mean for each region. suppose we produce ten bootstrapped samples from a data set containing red and green classes. we then apply a classification tree to each bootstrapped sample and for a specific value of x produce estimates of p is redx and exercises figure left a partition of the predictor space corresponding to exercise right a tree corresponding to exercise there are two common ways to combine these results together into a single class prediction. one is the majority vote approach discussed in this chapter. the second approach is to classify based on the average probability. in this example what is the final classification under each of these two approaches? provide a detailed explanation of the algorithm that is used to fit a regression tree. applied in the lab we applied random forests to the boston data using and using and create a plot displaying the test error resulting from random forests on this data set for a more comprehensive range of values for mtry and ntree. you can model your plot after figure describe the results obtained. in the lab a classification tree was applied to the carseats data set after converting sales into a qualitative response variable. now we will seek to predict sales using regression trees and related approaches treating the response as a quantitative variable. split the data set into a training set and a test set. fit a regression tree to the training set. plot the tree and inter pret the results. what test mse do you obtain? use cross-validation in order to determine the optimal level of tree complexity. does pruning the tree improve the test mse? use the bagging approach in order to analyze this data. what test mse do you obtain? use the importance function to determine which variables are most important. tree-based methods use random forests to analyze this data. what test mse do you obtain? use the importance function to determine which variables are most important. describe the effect of m the number of variables rate obtained. considered at error each split on the this problem involves the oj data set which is part of the islr package. create a training set containing a random sample of obser vations and a test set containing the remaining observations. fit a tree to the training data with purchase as the response and the other variables as predictors. use the summary function to produce summary statistics about the tree and describe the results obtained. what is the training error rate? how many terminal nodes does the tree have? type in the name of the tree object in order to get a detailed text output. pick one of the terminal nodes and interpret the information displayed. create a plot of the tree and interpret the results. predict the response on the test data and produce a confusion matrix comparing the test labels to the predicted test labels. what is the test error rate? apply the cv.tree function to the training set in order to determine the optimal tree size. produce a plot with tree size on the x-axis and cross-validated classification error rate on the y-axis. which tree size corresponds to the lowest cross-validated classi fication error rate? produce a pruned tree corresponding to the optimal tree size obtained using cross-validation. if cross-validation does not lead to selection of a pruned tree then create a pruned tree with five terminal nodes. compare the training error rates between the pruned and un pruned trees. which is higher? compare the test error rates between the pruned and unpruned trees. which is higher? we now use boosting to predict salary in the hitters data set. remove the observations for whom the salary information is unknown and then log-transform the salaries. exercises create a training set consisting of the first observations and a test set consisting of the remaining observations. perform boosting on the training set with trees for a range of values of the shrinkage parameter produce a plot with different shrinkage values on the x-axis and the corresponding training set mse on the y-axis. produce a plot with different shrinkage values on the x-axis and the corresponding test set mse on the y-axis. compare the test mse of boosting to the test mse that results the regression approaches seen in from applying two of chapters and which variables appear to be the most important predictors in the boosted model? now apply bagging to the training set. what is the test set mse for this approach? this question uses the caravan data set. create a training set consisting of the first observations and a test set consisting of the remaining observations. fit a boosting model to the training set with purchase as the response and the other variables as predictors. use trees and a shrinkage value of which predictors appear to be the most important? use the boosting model to predict the response on the test data. predict that a person will make a purchase if the estimated probability of purchase is greater than form a confusion matrix. what fraction of the people predicted to make a purchase do in fact make one? how does this compare with the results obtained from applying knn or logistic regression to this data set? apply boosting bagging and random forests to a data set of your choice. be sure to fit the models on a training set and to evaluate their performance on a test set. how accurate are the results compared to simple methods like linear or logistic regression? which of these approaches yields the best performance? support vector machines in this chapter we discuss the support vector machine an approach for classification that was developed in the computer science community in the and that has grown in popularity since then. svms have been shown to perform well in a variety of settings and are often considered one of the best out of the box classifiers. the support vector machine is a generalization of a simple and intuitive classifier called the maximal margin classifier which we introduce in section though it is elegant and simple we will see that this classifier unfortunately cannot be applied to most data sets since it requires that the classes be separable by a linear boundary. in section we introduce the support vector classifier an extension of the maximal margin classifier that can be applied in a broader range of cases. section introduces the support vector machine which is a further extension of the support vector classifier in order to accommodate non-linear class boundaries. support vector machines are intended for the binary classification setting in which there are two classes in section we discuss extensions of support vector machines to the case of more than two classes. in section we discuss the close connections between support vector machines and other statistical methods such as logistic regression. people often loosely refer to the maximal margin classifier the support vector classifier and the support vector machine as support vector machines to avoid confusion we will carefully distinguish between these three notions in this chapter. g. james et al. an introduction to statistical learning with applications in r springer texts in statistics doi springer sciencebusiness media new york support vector machines maximal margin classifier in this section we define a hyperplane and introduce the concept of an optimal separating hyperplane. what is a hyperplane? in a p-dimensional space a hyperplane is a flat affine subspace of dimension p for instance in two dimensions a hyperplane is a flat one-dimensional subspace in other words a line. in three dimensions a hyperplane is a flat two-dimensional subspace that is a plane. in p dimensions it can be hard to visualize a hyperplane but the notion of a flat subspace still applies. the mathematical definition of a hyperplane is quite simple. in two di mensions a hyperplane is defined by the equation hyperplane for parameters and when we say that defines the hyperplane we mean that any x for which holds is a point on the hyperplane. note that is simply the equation of a line since indeed in two dimensions a hyperplane is a line. equation can be easily extended to the p-dimensional setting pxp defines a p-dimensional hyperplane again in the sense that if a point x xpt in p-dimensional space a vector of length p satisfies then x lies on the hyperplane. now suppose that x does not satisfy rather pxp then this tells us that x lies to one side of the hyperplane. on the other hand if pxp then x lies on the other side of the hyperplane. so we can think of the hyperplane as dividing p-dimensional space into two halves. one can easily determine on which side of the hyperplane a point lies by simply calculating the sign of the left hand side of a hyperplane in two-dimensional space is shown in figure word affine indicates that the subspace need not pass through the origin. maximal margin classifier x figure the hyperplane is shown. the blue region is the set of points for which and the purple region is the set of points for which classification using a separating hyperplane now suppose that we have a n p data matrix x that consists of n training observations in p-dimensional space xn xnp and that these observations fall into two classes that is yn where represents one class and the other class. we also have a test observation a p-vector of observed features x our goal is to develop a classifier based on the training data that will correctly classify the test observation using its feature measurements. we have seen a number of approaches for this task such as linear discriminant analysis and logistic regression in chapter and classification trees bagging and boosting in chapter we will now see a new approach that is based upon the concept of a separating hyperplane. x p x suppose that it is possible to construct a hyperplane that separates the training observations perfectly according to their class labels. examples of three such separating hyperplanes are shown in the left-hand panel of figure we can label the observations from the blue class as yi and separating hyperplane support vector machines x x figure left there are two classes of observations shown in blue and in purple each of which has measurements on two variables. three separating hyperplanes out of many possible are shown in black. right a separating hyperplane is shown in black. the blue and purple grid indicates the decision rule made by a classifier based on this separating hyperplane a test observation that falls in the blue portion of the grid will be assigned to the blue class and a test observation that falls into the purple portion of the grid will be assigned to the purple class. those from the purple class as yi then a separating hyperplane has the property that pxip if yi and pxip if yi equivalently a separating hyperplane has the property that yi pxip for all i n. if a separating hyperplane exists we can use it to construct a very natural classifier a test observation is assigned a class depending on which side of the hyperplane it is located. the right-hand panel of figure shows an example of such a classifier. that is we classify the test observation x based on the sign of f is positive then we assign the test observation to class and if f is negative then we assign it to class we can also make use of the magnitude of f if f lies far from the hyperplane and so we can be confident about our class assignment for x on the other p. if f px is far from zero then this means that x maximal margin classifier is close to zero then x hand if f is located near the hyperplane and so we are less certain about the class assignment for x not surprisingly and as we see in figure a classifier that is based on a separating hyperplane leads to a linear decision boundary. the maximal margin classifier in general if our data can be perfectly separated using a hyperplane then there will in fact exist an infinite number of such hyperplanes. this is because a given separating hyperplane can usually be shifted a tiny bit up or down or rotated without coming into contact with any of the observations. three possible separating hyperplanes are shown in the left-hand panel of figure in order to construct a classifier based upon a separating hyperplane we must have a reasonable way to decide which of the infinite possible separating hyperplanes to use. a natural choice is the maximal margin hyperplane known as the optimal separating hyperplane which is the separating hyperplane that is farthest from the training observations. that is we can compute the distance from each training observation to a given separating hyperplane the smallest such distance is the minimal distance from the observations to the hyperplane and is known as the margin. the maximal margin hyperplane is the separating hyperplane for which the margin is largest that is it is the hyperplane that has the farthest minimum distance to the training observations. we can then classify a test observation based on which side of the maximal margin hyperplane it lies. this is known as the maximal margin classifier. we hope that a classifier that has a large margin on the training data will also have a large margin on the test data and hence will classify the test observations correctly. although the maximal margin classifier is often successful it can also lead to overfitting when p is large. maximal margin hyperplane optimal separating hyperplane margin maximal margin classifier if p are the coefficients of the maximal margin hyperplane based then the maximal margin classifier classifies the test observation x on the sign of f px p. figure shows the maximal margin hyperplane on the data set of figure comparing the right-hand panel of figure to figure we see that the maximal margin hyperplane shown in figure does indeed result in a greater minimal distance between the observations and the separating hyperplane that is a larger margin. in a sense the maximal margin hyperplane represents the mid-line of the widest slab that we can insert between the two classes. examining figure we see that three training observations are equidistant from the maximal margin hyperplane and lie along the dashed lines indicating the width of the margin. these three observations are known as support vector machines x figure there are two classes of observations shown in blue and in purple. the maximal margin hyperplane is shown as a solid line. the margin is the distance from the solid line to either of the dashed lines. the two blue points and the purple point that lie on the dashed lines are the support vectors and the distance from those points to the hyperplane is indicated by arrows. the purple and blue grid indicates the decision rule made by a classifier based on this separating hyperplane. support vectors since they are vectors in p-dimensional space figure p and they support the maximal margin hyperplane in the sense that if these points were moved slightly then the maximal margin hyperplane would move as well. interestingly the maximal margin hyperplane depends directly on the support vectors but not on the other observations a movement to any of the other observations would not affect the separating hyperplane provided that the observation s movement does not cause it to cross the boundary set by the margin. the fact that the maximal margin hyperplane depends directly on only a small subset of the observations is an important property that will arise later in this chapter when we discuss the support vector classifier and support vector machines. support vector construction of the maximal margin classifier we now consider the task of constructing the maximal margin hyperplane based on a set of n training observations xn rp and associated class labels yn briefly the maximal margin hyperplane is the solution to the optimization problem maximal margin classifier j maximize p m subject to yi pxip m i n. this optimization problem is actually simpler than it looks. first of all the constraint in that yi pxip m i n guarantees that each observation will be on the correct side of the hyperplane provided that m is positive. for each observation to be on the correct side of the hyperplane we would simply need yi pxip so the constraint in in fact requires that each observation be on the correct side of the hyperplane with some cushion provided that m is positive. second note that is not really a constraint on the hyperplane since if pxip defines a hyperplane then so does k pxip for any k however adds meaning to one can show that with this constraint the perpendicular distance from the ith observation to the hyperplane is given by yi pxip. therefore the constraints and ensure that each observation is on the correct side of the hyperplane and at least a distance m from the hyperplane. hence m represents the margin of our hyperplane and the optimization problem chooses p to maximize m this is exactly the definition of the maximal margin hyperplane! the problem can be solved efficiently but details of this optimization are outside of the scope of this book. the non-separable case the maximal margin classifier is a very natural way to perform classification if a separating hyperplane exists. however as we have hinted in many cases no separating hyperplane exists and so there is no maximal margin classifier. in this case the optimization problem has no solution with m an example is shown in figure in this case we cannot exactly separate the two classes. however as we will see in the next section we can extend the concept of a separating hyperplane in order to develop a hyperplane that almost separates the classes using a so-called soft margin. the generalization of the maximal margin classifier to the non-separable case is known as the support vector classifier. support vector machines x figure there are two classes of observations shown in blue and in purple. in this case the two classes are not separable by a hyperplane and so the maximal margin classifier cannot be used. support vector classifiers overview of the support vector classifier in figure we see that observations that belong to two classes are not necessarily separable by a hyperplane. in fact even if a separating hyperplane does exist then there are instances in which a classifier based on a separating hyperplane might not be desirable. a classifier based on a separating hyperplane will necessarily perfectly classify all of the training observations this can lead to sensitivity to individual observations. an example is shown in figure the addition of a single observation in the right-hand panel of figure leads to a dramatic change in the maximal margin hyperplane. the resulting maximal margin hyperplane is not satisfactory for one thing it has only a tiny margin. this is problematic because as discussed previously the distance of an observation from the hyperplane can be seen as a measure of our confidence that the observation was correctly classified. moreover the fact that the maximal margin hyperplane is extremely sensitive to a change in a single observation suggests that it may have overfit the training data. in this case we might be willing to consider a classifier based on a hyperplane that does not perfectly separate the two classes in the interest of support vector classifiers x x figure left two classes of observations are shown in blue and in purple along with the maximal margin hyperplane. right an additional blue observation has been added leading to a dramatic shift in the maximal margin hyperplane shown as a solid line. the dashed line indicates the maximal margin hyperplane that was obtained in the absence of this additional point. greater robustness to individual observations and better classification of most of the training observations. that is it could be worthwhile to misclassify a few training observations in order to do a better job in classifying the remaining observations. the support vector classifier sometimes called a soft margin classifier does exactly this. rather than seeking the largest possible margin so that every observation is not only on the correct side of the hyperplane but also on the correct side of the margin we instead allow some observations to be on the incorrect side of the margin or even the incorrect side of the hyperplane. margin is soft because it can be violated by some of the training observations. an example is shown in the left-hand panel of figure most of the observations are on the correct side of the margin. however a small subset of the observations are on the wrong side of the margin. an observation can be not only on the wrong side of the margin but also on the wrong side of the hyperplane. in fact when there is no separating hyperplane such a situation is inevitable. observations on the wrong side of the hyperplane correspond to training observations that are misclassified by the support vector classifier. the right-hand panel of figure illustrates such a scenario. details of the support vector classifier the support vector classifier classifies a test observation depending on which side of a hyperplane it lies. the hyperplane is chosen to correctly support vector classifier soft margin classifier support vector machines x x figure left a support vector classifier was fit to a small data set. the hyperplane is shown as a solid line and the margins are shown as dashed lines. purple observations observations and are on the correct side of the margin observation is on the margin and observation is on the wrong side of the margin. blue observations observations and are on the correct side of the margin observation is on the margin and observation is on the wrong side of the margin. no observations are on the wrong side of the hyperplane. right same as left panel with two additional points and these two observations are on the wrong side of the hyperplane and the wrong side of the margin. separate most of the training observations into the two classes but may misclassify a few observations. it is the solution to the optimization problem maximize m subject to j yi pxip m c where c is a nonnegative tuning parameter. as in m is the width of the margin we seek to make this quantity as large as possible. in are slack variables that allow individual observations to be on the wrong side of the margin or the hyperplane we will explain them in greater detail momentarily. once we have solved we classify a test observation x as before by simply determining on which side of the hyperplane it lies. that is we classify the test observation based on the sign of f px p. the problem seems complex but insight into its behavior can be made through a series of simple observations presented below. first of all the slack variable tells us where the ith observation is located relative to the hyperplane and relative to the margin. if then the ith slack variable support vector classifiers observation is on the correct side of the margin as we saw in section if then the ith observation is on the wrong side of the margin and we say that the ith observation has violated the margin. if then it is on the wrong side of the hyperplane. we now consider the role of the tuning parameter c. in c bounds the sum of the s and so it determines the number and severity of the violations to the margin to the hyperplane that we will tolerate. we can think of c as a budget for the amount that the margin can be violated by the n observations. if c then there is no budget for violations to the margin and it must be the case that in which case simply amounts to the maximal margin hyperplane optimization problem course a maximal margin hyperplane exists only if the two classes are separable. for c no more than c observations can be on the wrong side of the hyperplane because if an observation is on the wrong side of the hyperplane then and requires that violations to the margin and so the margin will widen. conversely as c decreases we become less tolerant of violations to the margin and so the margin narrows. an example in shown in figure c. as the budget c increases we become more tolerant of n in practice c is treated as a tuning parameter that is generally chosen via cross-validation. as with the tuning parameters that we have seen throughout this book c controls the bias-variance trade-off of the statistical learning technique. when c is small we seek narrow margins that are rarely violated this amounts to a classifier that is highly fit to the data which may have low bias but high variance. on the other hand when c is larger the margin is wider and we allow more violations to it this amounts to fitting the data less hard and obtaining a classifier that is potentially more biased but may have lower variance. the optimization problem has a very interesting property it turns out that only observations that either lie on the margin or that violate the margin will affect the hyperplane and hence the classifier obtained. in other words an observation that lies strictly on the correct side of the margin does not affect the support vector classifier! changing the position of that observation would not change the classifier at all provided that its position remains on the correct side of the margin. observations that lie directly on the margin or on the wrong side of the margin for their class are known as support vectors. these observations do affect the support vector classifier. the fact that only support vectors affect the classifier is in line with our previous assertion that c controls the bias-variance trade-off of the support vector classifier. when the tuning parameter c is large then the margin is wide many observations violate the margin and so there are many support vectors. in this case many observations are involved in determining the hyperplane. the top left panel in figure illustrates this setting this classifier has low variance many observations are support vectors support vector machines x x x x figure a support vector classifier was fit using four different values of the tuning parameter c in the largest value of c was used in the top left panel and smaller values were used in the top right bottom left and bottom right panels. when c is large then there is a high tolerance for observations being on the wrong side of the margin and so the margin will be large. as c decreases the tolerance for observations being on the wrong side of the margin decreases and the margin narrows. but potentially high bias. in contrast if c is small then there will be fewer support vectors and hence the resulting classifier will have low bias but high variance. the bottom right panel in figure illustrates this setting with only eight support vectors. the fact that the support vector classifier s decision rule is based only on a potentially small subset of the training observations support vectors means that it is quite robust to the behavior of observations that are far away from the hyperplane. this property is distinct from some of the other classification methods that we have seen in preceding chapters such as linear discriminant analysis. recall that the lda classification rule support vector machines x x figure left the observations fall into two classes with a non-linear boundary between them. right the support vector classifier seeks a linear boundary and consequently performs very poorly. depends on the mean of all of the observations within each class as well as the within-class covariance matrix computed using all of the observations. in contrast logistic regression unlike lda has very low sensitivity to observations far from the decision boundary. in fact we will see in section that the support vector classifier and logistic regression are closely related. support vector machines we first discuss a general mechanism for converting a linear classifier into one that produces non-linear decision boundaries. we then introduce the support vector machine which does this in an automatic way. classification with non-linear decision boundaries the support vector classifier is a natural approach for classification in the two-class setting if the boundary between the two classes is linear. however in practice we are sometimes faced with non-linear class boundaries. for instance consider the data in the left-hand panel of figure it is clear that a support vector classifier or any linear classifier will perform poorly here. indeed the support vector classifier shown in the right-hand panel of figure is useless here. in chapter we are faced with an analogous situation. we see there that the performance of linear regression can suffer when there is a nonlinear relationship between the predictors and the outcome. in that case we consider enlarging the feature space using functions of the predictors support vector machines such as quadratic and cubic terms in order to address this non-linearity. in the case of the support vector classifier we could address the problem of possibly non-linear boundaries between classes in a similar way by enlarging the feature space using quadratic cubic and even higher-order polynomial functions of the predictors. for instance rather than fitting a support vector classifier using p features xp we could instead fit a support vector classifier using features x x xp x p then would become m maximize m ij subject to yi c jk for j j why does this lead to a non-linear decision boundary? in the enlarged feature space the decision boundary that results from is in fact linear. but in the original feature space the decision boundary is of the form qx where q is a quadratic polynomial and its solutions are generally non-linear. one might additionally want to enlarge the feature space with higher-order polynomial terms or with interaction terms of the form alternatively other functions of the predictors could be considered rather than polynomials. it is not hard to see that there are many possible ways to enlarge the feature space and that unless we are careful we could end up with a huge number of features. then computations would become unmanageable. the support vector machine which we present next allows us to enlarge the feature space used by the support vector classifier in a way that leads to efficient computations. the support vector machine the support vector machine is an extension of the support vector classifier that results from enlarging the feature space in a specific way using kernels. we will now discuss this extension the details of which are somewhat complex and beyond the scope of this book. however the main idea is described in section we may want to enlarge our feature space support vector machine kernel support vector machines in order to accommodate a non-linear boundary between the classes. the kernel approach that we describe here is simply an efficient computational approach for enacting this idea. we have not discussed exactly how the support vector classifier is computed because the details become somewhat technical. however it turns out that the solution to the support vector classifier problem involves only the inner products of the observations opposed to the observations themselves. the inner product of two r-vectors a and b is defined as r aibi. thus the inner product of two observations xi is given by xij it can be shown that the linear support vector classifier can be represented as f where there are n parameters i observation. to estimate the parameters n and all we need are the inner products between all pairs of training observations. means nn and gives the number of pairs i n one per training n n notation among a set of n items. notice that in in order to evaluate the function f we need to compute the inner product between the new point x and each of the training points xi. however it turns out that i is nonzero only for the support vectors in the solution that is if a training observation is not a support vector then its i equals zero. so if s is the collection of indices of these support points we can rewrite any solution function of the form as f i s which typically involves far fewer terms than in to summarize in representing the linear classifier f and in computing its coefficients all we need are inner products. now suppose that every time the inner product appears in the representation or in a calculation of the solution for the support expanding each of the inner products in it is easy to see that f is a linear function of the coordinates of x. doing so also establishes the correspondence between the i and the original parameters j. support vector machines vector classifier we replace it with a generalization of the inner product of the form kxi where k is some function that we will refer to as a kernel. a kernel is a function that quantifies the similarity of two observations. for instance we could simply take kernel kxi xij which would just give us back the support vector classifier. equation is known as a linear kernel because the support vector classifier is linear in the features the linear kernel essentially quantifies the similarity of a pair of observations using pearson correlation. but one could instead choose another form for for instance one could replace every instance of p xij with the quantity kxi xij this is known as a polynomial kernel of degree d where d is a positive integer. using such a kernel with d instead of the standard linear kernel in the support vector classifier algorithm leads to a much more flexible decision boundary. it essentially amounts to fitting a support vector classifier in a higher-dimensional space involving polynomials of degree d rather than in the original feature space. when the support vector classifier is combined with a non-linear kernel such as the resulting classifier is known as a support vector machine. note that in this case the function has the form f ikx xi. i s the left-hand panel of figure shows an example of an svm with a polynomial kernel applied to the non-linear data from figure the fit is a substantial improvement over the linear support vector classifier. when d then the svm reduces to the support vector classifier seen earlier in this chapter. the polynomial kernel shown in is one example of a possible non-linear kernel but alternatives abound. another popular choice is the radial kernel which takes the form kxi exp polynomial kernel radial kernel support vector machines x x figure left an svm with a polynomial kernel of degree is applied to the non-linear data from figure resulting in a far more appropriate decision rule. right an svm with a radial kernel is applied. in this example either kernel is capable of capturing the decision boundary. in is a positive constant. the right-hand panel of figure shows an example of an svm with a radial kernel on this non-linear data it also does a good job in separating the two classes. p j how does the radial kernel actually work? if a given test obser pt is far from a training observation xi in terms of x vation x will be large and so kxi euclidean distance then exp xij will be very tiny. this means that in xi p j will play virtually no role in f recall that the predicted class label for the test observation x in other words training observations that are far from x will play essentially no role in the predicted class label for x this means that the radial kernel has very local behavior in the sense that only nearby training observations have an effect on the class label of a test observation. is based on the sign of f what is the advantage of using a kernel rather than simply enlarging the feature space using functions of the original features as in one advantage is computational and it amounts to the fact that using kernels one need only compute kxi for all this can be done without explicitly working in the enlarged feature space. this is important because in many applications of svms the enlarged feature space is so large that computations are intractable. for some kernels such as the radial kernel the feature space is implicit and infinite-dimensional so we could never do the computations there anyway! distinct pairs i i n support vector machines e t a r e v i t i s o p e u r t e t a r e v i t i s o p e u r t support vector classifier lda support vector classifier svm svm svm false positive rate false positive rate figure roc curves for the heart data training set. left the support vector classifier and lda are compared. right the support vector classifier is compared to an svm using a radial basis kernel with and an application to the heart disease data in chapter we apply decision trees and related methods to the heart data. the aim is to use predictors such as age sex and chol in order to predict whether an individual has heart disease. we now investigate how an svm compares to lda on this data. after removing missing observations the data consist of subjects which we randomly split into training and test observations. we first fit lda and the support vector classifier to the training data. note that the support vector classifier is equivalent to a svm using a polynomial kernel of degree d the left-hand panel of figure displays roc curves in section for the training set predictions for both lda and the support vector classifier. both classifiers compute scores of the form f pxp for each observation. for any given cutoff t we classify observations into the heart disease or no heart disease categories depending on whether f t or f t. the roc curve is obtained by forming these predictions and computing the false positive and true positive rates for a range of values of t. an optimal classifier will hug the top left corner of the roc plot. in this instance lda and the support vector classifier both perform well though there is a suggestion that the support vector classifier may be slightly superior. the right-hand panel of figure displays roc curves for svms using a radial kernel with various values of as increases and the fit becomes appears to give more non-linear the roc curves improve. using an almost perfect roc curve. however these curves represent training error rates which can be misleading in terms of performance on new test data. figure displays roc curves computed on the test observa svms with more than two classes e t a r e v i t i s o p e u r t e t a r e v i t i s o p e u r t support vector classifier lda support vector classifier svm svm svm false positive rate false positive rate figure roc curves for the test set of the heart data. left the support vector classifier and lda are compared. right the support vector classifier is compared to an svm using a radial basis kernel with and tions. we observe some differences from the training roc curves. in the left-hand panel of figure the support vector classifier appears to have a small advantage over lda these differences are not statisti which cally significant. in the right-hand panel the svm using showed the best results on the training data produces the worst estimates on the test data. this is once again evidence that while a more flexible method will often produce lower training error rates this does not neces sarily lead to improved performance on test data. the svms with perform comparably to the support vector classifier and all and three outperform the svm with svms with more than two classes so far our discussion has been limited to the case of binary classification that is classification in the two-class setting. how can we extend svms to the more general case where we have some arbitrary number of classes? it turns out that the concept of separating hyperplanes upon which svms are based does not lend itself naturally to more than two classes. though a number of proposals for extending svms to the k-class case have been made the two most popular are the one-versus-one and one-versus-all approaches. we briefly discuss those two approaches here. one-versus-one classification suppose that we would like to perform classification using svms and there are k classes. a one-versus-one or all-pairs approach constructs k one-versusone support vector machines svms each of which compares a pair of classes. for example one such svm might compare the kth class coded as to the k th class coded as we classify a test observation using each of the k classifiers and we tally the number of times that the test observation is assigned to each of the k classes. the final classification is performed by assigning the test observation to the class to which it was most frequently assigned in these k pairwise classifications. one-versus-all classification the one-versus-all approach is an alternative procedure for applying svms one-versusin the case of k classes. we fit k svms each time comparing one of the k classes to the remaining k classes. let pk denote the parameters that result from fitting an svm comparing the kth class as to the others as let x denote a test observation. we assign the observation to the class for which pkx p is largest as this amounts to a high level of confidence that the test observation belongs to the kth class rather than to any of the other classes. all relationship to logistic regression when svms were first introduced in the they made quite a splash in the statistical and machine learning communities. this was due in part to their good performance good marketing and also to the fact that the underlying approach seemed both novel and mysterious. the idea of finding a hyperplane that separates the data as well as possible while allowing some violations to this separation seemed distinctly different from classical approaches for classification such as logistic regression and linear discriminant analysis. moreover the idea of using a kernel to expand the feature space in order to accommodate non-linear class boundaries appeared to be a unique and valuable characteristic. however since that time deep connections between svms and other more classical statistical methods have emerged. it turns out that one can rewrite the criterion for fitting the support vector classifier f pxp as max yif j minimize p relationship to logistic regression where is a nonnegative tuning parameter. when is large then p are small more violations to the margin are tolerated and a low-variance but high-bias classifier will result. when is small then few violations to the margin will occur this amounts to a high-variance but low-bias classifier. thus a small value of in amounts to a small value of c in note that the j term in is the ridge penalty term from section and plays a similar role in controlling the bias-variance trade-off for the support vector classifier. p now takes the loss penalty form that we have seen repeatedly throughout this book minimize p y p in lx y is some loss function quantifying the extent to which the model parametrized by fits the data y and p is a penalty function on the parameter vector whose effect is controlled by a nonnegative tuning parameter for instance ridge regression and the lasso both take this form with yi xij j j for p lx y p and with p the lasso. in the case of the loss function instead takes the form j for ridge regression and p lx y max yi pxip hinge loss this is known as hinge loss and is depicted in figure however it turns out that the hinge loss function is closely related to the loss function used in logistic regression also shown in figure an interesting characteristic of the support vector classifier is that only support vectors play a role in the classifier obtained observations on the correct side of the margin do not affect it. this is due to the fact that the loss function shown in figure is exactly zero for observations for which yi pxip these correspond to observations that are on the correct side of the in contrast the loss function for logistic regression shown in figure is not exactly zero anywhere. but it is very small for observations that are far from the decision boundary. due to the similarities between their loss functions logistic regression and the support vector classifier often give very similar results. when the classes are well separated svms tend to behave better than logistic regression in more overlapping regimes logistic regression is often preferred. this hinge-loss penalty representation the margin corresponds to the value one and the width of the margin is determined by j support vector machines s s o l svm loss logistic regression loss yi pxip figure the svm and logistic regression loss functions are compared as a function of yi pxip. when yi pxip is greater than then the svm loss is zero since this corresponds to an observation that is on the correct side of the margin. overall the two loss functions have quite similar behavior. when the support vector classifier and svm were first introduced it was thought that the tuning parameter c in was an unimportant nuisance parameter that could be set to some default value like however the loss penalty formulation for the support vector classifier indicates that this is not the case. the choice of tuning parameter is very important and determines the extent to which the model underfits or overfits the data as illustrated for example in figure we have established that the support vector classifier is closely related to logistic regression and other preexisting statistical methods. is the svm unique in its use of kernels to enlarge the feature space to accommodate non-linear class boundaries? the answer to this question is no we could just as well perform logistic regression or many of the other classification methods seen in this book using non-linear kernels this is closely related to some of the non-linear approaches seen in chapter however for historical reasons the use of non-linear kernels is much more widespread in the context of svms than in the context of logistic regression or other methods. though we have not addressed it here there is in fact an extension of the svm for regression for a quantitative rather than a qualitative response called support vector regression. in chapter we saw that least squares regression seeks coefficients p such that the sum of squared residuals is as small as possible. from chapter that residuals are defined as yi pxip. support vector regression instead seeks coefficients that minimize a different type of loss where only residuals larger in absolute value than some positive constant support vector regression lab support vector machines contribute to the loss function. this is an extension of the margin used in support vector classifiers to the regression setting. lab support vector machines we use the library in r to demonstrate the support vector classifier and the svm. another option is the liblinear library which is useful for very large linear problems. svm support vector classifier the library contains implementations for a number of statistical learning methods. in particular the svm function can be used to fit a support vector classifier when the argument kernellinear is used. this function uses a slightly different formulation from and for the support vector classifier. a cost argument allows us to specify the cost of a violation to the margin. when the cost argument is small then the margins will be wide and many support vectors will be on the margin or will violate the margin. when the cost argument is large then the margins will be narrow and there will be few support vectors on the margin or violating the margin. we now use the svm function to fit the support vector classifier for a given value of the cost parameter. here we demonstrate the use of this function on a two-dimensional example so that we can plot the resulting decision boundary. we begin by generating the observations which belong to two classes and checking whether the classes are linearly separable. set seed x matrix rnorm ncol y c rep rep x y x y plot col y they are not. next we fit the support vector classifier. note that in order for the svm function to perform classification opposed to svm-based regression we must encode the response as a factor variable. we now create a data frame with the response coded as a factor. dat data frame x y as factor y library svmfit svm y data dat kernel linear cost scale false support vector machines the argument scalefalse tells the svm function not to scale each feature to have mean zero or standard deviation one depending on the application one might prefer to use scaletrue. we can now plot the support vector classifier obtained plot svmfit dat note that the two arguments to the plot.svm function are the output of the call to svm as well as the data used in the call to svm. the region of feature space that will be assigned to the class is shown in light blue and the region that will be assigned to the class is shown in purple. the decision boundary between the two classes is linear we used the argument kernellinear though due to the way in which the plotting function is implemented in this library the decision boundary looks somewhat jagged in the plot.note that here the second feature is plotted on the x-axis and the first feature is plotted on the y-axis in contrast to the behavior of the usual plot function in r. the support vectors are plotted as crosses and the remaining observations are plotted as circles we see here that there are seven support vectors. we can determine their identities as follows s v m f i t i n d e x we can obtain some basic information about the support vector classifier fit using the summary command summary svmfit call svm formula y data dat kernel linear cost scale false parameter s svm type svm kernel cost gamma c c l a s s i f i c a t i o n linear number of support vectors number of classes levels this tells us for instance that a linear kernel was used with and that there were seven support vectors four in one class and three in the other. what if we instead used a smaller value of the cost parameter? svmfit svm y data dat kernel linear cost scale false plot svmfit dat s v m f i t i n d e x lab support vector machines now that a smaller value of the cost parameter is being used we obtain a larger number of support vectors because the margin is now wider. unfortunately the svm function does not explicitly output the coefficients of the linear decision boundary obtained when the support vector classifier is fit nor does it output the width of the margin. the library includes a built-in function tune to perform crossvalidation. by default tune performs ten-fold cross-validation on a set of models of interest. in order to use this function we pass in relevant information about the set of models that are under consideration. the following command indicates that we want to compare svms with a linear kernel using a range of values of the cost parameter. set seed tune out tune svm y data dat kernel linear ranges list cost c we can easily access the cross-validation errors for each of these models using the summary command tune summary tune out parameter tuning of svm sampling method fold cross validation best parameters cost best performan c e detailed performa nc e results cost error dispersio n e e e e e e e we see that results in the lowest cross-validation error rate. the tune function stores the best model obtained which can be accessed as follows bestmod tune outbest model summary bestmod the predict function can be used to predict the class label on a set of test observations at any given value of the cost parameter. we begin by generating a test data set. xtest matrix rnorm ncol ytest sample c rep true xtest ytest xtest ytest testdat data frame x xtest y as factor ytest now we predict the class labels of these test observations. here we use the best model obtained through cross-validation in order to make predictions. support vector machines ypred predict bestmod testdat table predict ypred truth testdaty truth predict thus with this value of cost of the test observations are correctly classified. what if we had instead used svmfit svm y data dat kernel linear cost scale false ypred predict svmfit testdat table predict ypred truth testdaty truth predict in this case one additional observation is misclassified. now consider a situation in which the two classes are linearly separable. then we can find a separating hyperplane using the svm function. we first further separate the two classes in our simulated data so that they are linearly separable x y x y plot col y pch now the observations are just barely linearly separable. we fit the support vector classifier and plot the resulting hyperplane using a very large value of cost so that no observations are misclassified. dat data frame x y as factor y svmfit svm y data dat kernel linear cost summary svmfit call svm formula y data dat kernel linear cost e parameter s svm type svm kernel cost gamma c c l a s s i f i c a t i o n linear e number of support vectors number of classes levels plot svmfit dat no training errors were made and only three support vectors were used. however we can see from the figure that the margin is very narrow the observations that are not support vectors indicated as circles are very lab support vector machines close to the decision boundary. it seems likely that this model will perform poorly on test data. we now try a smaller value of cost svmfit svm y data dat kernel linear cost summary svmfit plot svmfit dat using we misclassify a training observation but we also obtain a much wider margin and make use of seven support vectors. it seems likely that this model will perform better on test data than the model with support vector machine in order to fit an svm using a non-linear kernel we once again use the svm function. however now we use a different value of the parameter kernel. to fit an svm with a polynomial kernel we use kernelpolynomial and to fit an svm with a radial kernel we use kernelradial. in the former case we also use the degree argument to specify a degree for the polynomial kernel is d in and in the latter case we use gamma to specify a value of for the radial basis kernel we first generate some data with a non-linear class boundary as follows set seed x matrix rnorm ncol x x x x y c rep rep dat data frame x y as factor y plotting the data makes it clear that the class boundary is indeed nonlinear plot col y the data is randomly split into training and testing groups. we then fit the training data using the svm function with a radial kernel and train sample svmfit svm y data dat train kernel radial gamma cost plot svmfit dat train the plot shows that the resulting svm has a decidedly non-linear boundary. the summary function can be used to obtain some information about the svm fit summary svmfit call svm formula y data dat kernel radial gamma cost parameter s svm type c c l a s s i f i c a t i o n support vector machines svm kernel cost gamma radial number of support vectors number of classes levels we can see from the figure that there are a fair number of training errors in this svm fit. if we increase the value of cost we can reduce the number of training errors. however this comes at the price of a more irregular decision boundary that seems to be at risk of overfitting the data. svmfit svm y data dat train kernel radial gamma cost plot svmfit dat train we can perform cross-validation using tune to select the best choice of and cost for an svm with a radial kernel set seed tune out tune svm y data dat train kernel radial ranges list cost c gamma c summary tune out parameter tuning of svm sampling method fold cross validation best parameters cost gamma best performan c e detailed performa nc e results cost gamma error dispersion e e e e e therefore the best choice of parameters involves and we can view the test set predictions for this model by applying the predict function to the data. notice that to do this we subset the dataframe dat using as an index set. table true dat train y pred predict tune outbest model newdata dat train of test observations are misclassified by this svm. lab support vector machines roc curves the rocr package can be used to produce roc curves such as those in figures and we first write a short function to plot an roc curve given a vector containing a numerical score for each observation pred and a vector containing the class label for each observation truth. library rocr rocplot function pred truth predob prediction pred truth perf performa nc e predob tpr fpr plot perf svms and support vector classifiers output class labels for each observation. however it is also possible to obtain fitted values for each observation which are the numerical scores used to obtain the class labels. for instance in the case of a support vector classifier the fitted value for an observation x xpt takes the form pxp. for an svm with a non-linear kernel the equation that yields the fitted value is given in in essence the sign of the fitted value determines on which side of the decision boundary the observation lies. therefore the relationship between the fitted value and the class prediction for a given observation is simple if the fitted value exceeds zero then the observation is assigned to one class and if it is less than zero then it is assigned to the other. in order to obtain the fitted values for a given svm model fit we use decision.valuestrue when fitting svm. then the predict function will output the fitted values. svmfit opt svm y data dat train kernel radial gamma cost decision values t fitted attributes predict svmfit opt dat train decision values true values now we can produce the roc plot. par mfrow c rocplot fitted dat train y main training data svm appears to be producing accurate predictions. by increasing we can produce a more flexible fit and generate further improvements in accuracy. svmfit flex svm y data dat train kernel radial gamma cost decision values t fitted attributes predict svmfit flex dat train decision values t values rocplot fitted dat train y add col red however these roc curves are all on the training data. we are really more interested in the level of prediction accuracy on the test data. when we compute the roc curves on the test data the model with appears to provide the most accurate results. support vector machines fitted attributes predict svmfit opt dat train decision values t values rocplot fitted dat train y main test data fitted attributes predict svmfit flex dat train decision values t values rocplot fitted dat train y add col red svm with multiple classes if the response is a factor containing more than two levels then the svm function will perform multi-class classification using the one-versus-one approach. we explore that setting here by generating a third class of observations. set seed x rbind matrix rnorm ncol y c y rep x y x y dat data frame x y as factor y par mfrow c plot col y we now fit an svm to the data svmfit svm y data dat kernel radial cost gamma plot svmfit dat the library can also be used to perform support vector regression if the response vector that is passed in to svm is numerical rather than a factor. application to gene expression data we now examine the khan data set which consists of a number of tissue samples corresponding to four distinct types of small round blue cell tumors. for each tissue sample gene expression measurements are available. the data set consists of training data xtrain and ytrain and testing data xtest and ytest. we examine the dimension of the data xtest ytrain ytest xtrain library islr names khan dim khanxtra in dim khanxtest length khanytra in length khanytest lab support vector machines this data set consists of expression measurements for genes. the training and test sets consist of and observations respectively. table khanytra i n table khanytes t we will use a support vector approach to predict cancer subtype using gene expression measurements. in this data set there are a very large number of features relative to the number of observations. this suggests that we should use a linear kernel because the additional flexibility that will result from using a polynomial or radial kernel is unnecessary. dat data frame x khanxtrain y as factor khanytra in out svm y data dat kernel linear cost summary out call svm formula y data dat kernel linear cost parameter s svm type svm kernel cost gamma c c l a s s i f i c a t i o n linear number of support vectors number of classes levels table outfitted daty we see that there are no training errors. in fact this is not surprising because the large number of variables relative to the number of observations implies that it is easy to find hyperplanes that fully separate the classes. we are most interested not in the support vector classifier s performance on the training observations but rather its performance on the test observations. dat te data frame x khanxtest y as factor khanytes t pred te predict out newdata dat te table pred te dat tey pred te support vector machines we see that using yields two test set errors on this data. exercises conceptual this problem involves hyperplanes in two dimensions. sketch the hyperplane indicate the set of points for which as well as the set of points for which on the same plot sketch the hyperplane indicate the set of points for which as well as the set of points for which we have seen that in p dimensions a linear decision boundary takes the form we now investigate a non-linear decision boundary. sketch the curve on your sketch indicate the set of points for which as well as the set of points for which suppose that a classifier assigns an observation to the blue class if and to the red class otherwise. to what class is the observation classified? argue that while the decision boundary in is not linear in and terms of and it is linear in terms of x x here we explore the maximal margin classifier on a toy data set. we are given n observations in p dimensions. for each observation there is an associated class label. obs. exercises y red red red red blue blue blue sketch the observations. sketch the optimal separating hyperplane and provide the equa tion for this hyperplane the form describe the classification rule for the maximal margin classifier. it should be something along the lines of classify to red if and classify to blue otherwise. provide the values for and on your sketch indicate the margin for the maximal margin hyperplane. indicate the support vectors for the maximal margin classifier. argue that a slight movement of the seventh observation would not affect the maximal margin hyperplane. sketch a hyperplane that is not the optimal separating hyper plane and provide the equation for this hyperplane. draw an additional observation on the plot so that the two classes are no longer separable by a hyperplane. applied generate a simulated two-class data set with observations and two features in which there is a visible but non-linear separation between the two classes. show that in this setting a support vector machine with a polynomial kernel degree greater than or a radial kernel will outperform a support vector classifier on the training data. which technique performs best on the test data? make plots and report training and test error rates in order to back up your assertions. we have seen that we can fit an svm with a non-linear kernel in order to perform classification using a non-linear decision boundary. we will now see that we can also obtain a non-linear decision boundary by performing logistic regression using non-linear transformations of the features. support vector machines generate a data set with n and p such that the observations belong to two classes with a quadratic decision boundary between them. for instance you can do this as follows runif runif y plot the observations colored according to their class labels. your plot should display on the x-axis and on the yaxis. fit a logistic regression model to the data using and as predictors. apply this model to the training data in order to obtain a predicted class label for each training observation. plot the observations colored according to the predicted class labels. the decision boundary should be linear. now fit a logistic regression model to the data using non-linear functions of and as predictors x and so forth. apply this model to the training data in order to obtain a predicted class label for each training observation. plot the observations colored according to the predicted class labels. the decision boundary should be obviously non-linear. if it is not then repeat until you come up with an example in which the predicted class labels are obviously non-linear. fit a support vector classifier to the data with and as predictors. obtain a class prediction for each training observation. plot the observations colored according to the predicted class labels. fit a svm using a non-linear kernel to the data. obtain a class prediction for each training observation. plot the observations colored according to the predicted class labels. comment on your results. at the end of section it is claimed that in the case of data that is just barely linearly separable a support vector classifier with a small value of cost that misclassifies a couple of training observations may perform better on test data than one with a huge value of cost that does not misclassify any training observations. you will now investigate this claim. generate two-class data with p in such a way that the classes are just barely linearly separable. exercises compute the cross-validation error rates for support vector classifiers with a range of cost values. how many training errors are misclassified for each value of cost considered and how does this relate to the cross-validation errors obtained? generate an appropriate test data set and compute the test errors corresponding to each of the values of cost considered. which value of cost leads to the fewest test errors and how does this compare to the values of cost that yield the fewest training errors and the fewest cross-validation errors? discuss your results. in this problem you will use support vector approaches in order to predict whether a given car gets high or low gas mileage based on the auto data set. create a binary variable that takes on a for cars with gas mileage above the median and a for cars with gas mileage below the median. fit a support vector classifier to the data with various values of cost in order to predict whether a car gets high or low gas mileage. report the cross-validation errors associated with different values of this parameter. comment on your results. now repeat this time using svms with radial and polynomial basis kernels with different values of gamma and degree and cost. comment on your results. make some plots to back up your assertions in and hint in the lab we used the plot function for svm objects only in cases with p when p you can use the plot function to create plots displaying pairs of variables at a time. essentially instead of typing plot svmfit dat where svmfit contains your fitted model and dat is a data frame containing your data you can type plot svmfit dat in order to plot just the first and fourth variables. however you must replace and with the correct variable names. to find out more type this problem involves the oj data set which is part of the islr package. support vector machines create a training set containing a random sample of remaining containing the observations and a test observations. set fit a support vector classifier to the training data using with purchase as the response and the other variables as predictors. use the summary function to produce summary statistics and describe the results obtained. what are the training and test error rates? use the tune function to select an optimal cost. consider val ues in the range to compute the training and test error rates using this new value for cost. repeat parts through using a support vector machine with a radial kernel. use the default value for gamma. repeat parts through using a support vector machine with a polynomial kernel. set overall which approach seems to give the best results on this data? unsupervised learning this book concerns such as most of regression and classification. in the supervised learning setting we typically have access to a set of p features xp measured on n observations and a response y also measured on those same n observations. the goal is then to predict y using xp. supervised learning methods this chapter will instead focus on unsupervised learning a set of statistical tools intended for the setting in which we have only a set of features xp measured on n observations. we are not interested in prediction because we do not have an associated response variable y rather the goal is to discover interesting things about the measurements on xp. is there an informative way to visualize the data? can we discover subgroups among the variables or among the observations? unsupervised learning refers to a diverse set of techniques for answering questions such as these. in this chapter we will focus on two particular types of unsupervised learning principal components analysis a tool used for data visualization or data pre-processing before supervised techniques are applied and clustering a broad class of methods for discovering unknown subgroups in data. the challenge of unsupervised learning supervised learning is a well-understood area. in fact if you have read the preceding chapters in this book then you should by now have a good g. james et al. an introduction to statistical learning with applications in r springer texts in statistics doi springer sciencebusiness media new york exploratory data analysis unsupervised learning grasp of supervised learning. for instance if you are asked to predict a binary outcome from a data set you have a very well developed set of tools at your disposal as logistic regression linear discriminant analysis classification trees support vector machines and more as well as a clear understanding of how to assess the quality of the results obtained cross-validation validation on an independent test set and so forth. in contrast unsupervised learning is often much more challenging. the exercise tends to be more subjective and there is no simple goal for the analysis such as prediction of a response. unsupervised learning is often performed as part of an exploratory data analysis. furthermore it can be hard to assess the results obtained from unsupervised learning methods since there is no universally accepted mechanism for performing crossvalidation or validating results on an independent data set. the reason for this difference is simple. if we fit a predictive model using a supervised learning technique then it is possible to check our work by seeing how well our model predicts the response y on observations not used in fitting the model. however in unsupervised learning there is no way to check our work because we don t know the true answer the problem is unsupervised. techniques for unsupervised learning are of growing importance in a number of fields. a cancer researcher might assay gene expression levels in patients with breast cancer. he or she might then look for subgroups among the breast cancer samples or among the genes in order to obtain a better understanding of the disease. an online shopping site might try to identify groups of shoppers with similar browsing and purchase histories as well as items that are of particular interest to the shoppers within each group. then an individual shopper can be preferentially shown the items in which he or she is particularly likely to be interested based on the purchase histories of similar shoppers. a search engine might choose what search results to display to a particular individual based on the click histories of other individuals with similar search patterns. these statistical learning tasks and many more can be performed via unsupervised learning techniques. principal components analysis principal components are discussed in section in the context of principal components regression. when faced with a large set of correlated variables principal components allow us to summarize this set with a smaller number of representative variables that collectively explain most of the variability in the original set. the principal component directions are presented in section as directions in feature space along which the original data are highly variable. these directions also define lines and subspaces that are as close as possible to the data cloud. to perform principal components analysis principal components regression we simply use principal components as predictors in a regression model in place of the original larger set of variables. principal component analysis refers to the process by which principal components are computed and the subsequent use of these components in understanding the data. pca is an unsupervised approach since it involves only a set of features xp and no associated response y apart from producing derived variables for use in supervised learning problems pca also serves as a tool for data visualization of the observations or visualization of the variables. we now discuss pca in greater detail focusing on the use of pca as a tool for unsupervised data exploration in keeping with the topic of this chapter. principal component analysis what are principal components? p suppose that we wish to visualize n observations with measurements on a set of p features xp as part of an exploratory data analysis. we could do this by examining two-dimensional scatterplots of the data each of which contains the n observations measurements on two of the pp such scatterplots for example features. however there are with p there are plots! if p is large then it will certainly not be possible to look at all of them moreover most likely none of them will be informative since they each contain just a small fraction of the total information present in the data set. clearly a better method is required to visualize the n observations when p is large. in particular we would like to find a low-dimensional representation of the data that captures as much of the information as possible. for instance if we can obtain a two-dimensional representation of the data that captures most of the information then we can plot the observations in this low-dimensional space. pca provides a tool to do just this. it finds a low-dimensional representation of a data set that contains as much as possible of the variation. the idea is that each of the n observations lives in p-dimensional space but not all of these dimensions are equally interesting. pca seeks a small number of dimensions that are as interesting as possible where the concept of interesting is measured by the amount that the observations vary along each dimension. each of the dimensions found by pca is a linear combination of the p features. we now explain the manner in which these dimensions or principal components are found. the first principal component of a set of features xp is the normalized linear combination of the features that has the largest variance. by normalized we mean that we refer to the elements as the loadings of the first principal p loading unsupervised learning component together the loadings make up the principal component loading vector we constrain the loadings so that their sum of squares is equal to one since otherwise setting these elements to be arbitrarily large in absolute value could result in an arbitrarily large variance. given a n p data set x how do we compute the first principal component? since we are only interested in variance we assume that each of the variables in x has been centered to have mean zero is the column means of x are zero. we then look for the linear combination of the sample feature values of the form that has largest sample variance subject to the constraint that in other words the first principal component loading vector solves the optimization problem p n subject to maximize from we can write the objective in as since n n xij the average of the will be zero as well. hence n the objective that we are maximizing in is just the sample variance of the n values of we refer to as the scores of the first princi- score pal component. problem can be solved via an eigen decomposition a standard technique in linear algebra but details are outside of the scope of this book. n there is a nice geometric interpretation for the first principal component. the loading vector with elements defines a direction in feature space along which the data vary the most. if we project the n data points xn onto this direction the projected values are the principal component scores themselves. for instance figure on page displays the first principal component loading vector solid line on an advertising data set. in these data there are only two features and so the observations as well as the first principal component loading vector can be easily displayed. as can be seen from in that data set and after the first principal component of the features has been determined we can find the second principal component the second principal component is the linear combination of xp that has maximal variance out of all linear combinations that are uncorrelated with the second principal component scores take the form principal components analysis murder assault urbanpop rape table the principal component loading vectors and for the usarrests data. these are also displayed in figure where is the second principal component loading vector with elements it turns out that constraining to be uncorrelated with is equivalent to constraining the direction to be orthogonal to the direction in the example in figure the observations lie in two-dimensional space p and so once we have found there is only one possibility for which is shown as a blue dashed line. section we know that and but in a larger data set with p variables there are multiple distinct principal components and they are defined in a similar manner. to find we solve a problem similar to with replacing and with the additional constraint that is orthogonal to once we have computed the principal components we can plot them against each other in order to produce low-dimensional views of the data. for instance we can plot the score vector against against against and so forth. geometrically this amounts to projecting the original data down onto the subspace spanned by and and plotting the projected points. we illustrate the use of pca on the usarrests data set. for each of the states in the united states the data set contains the number of arrests per residents for each of three crimes assault murder and rape. we also record urbanpop percent of the population in each state living in urban areas. the principal component score vectors have length n and the principal component loading vectors have length p pca was performed after standardizing each variable to have mean zero and standard deviation one. figure plots the first two principal components of these data. the figure represents both the principal component scores and the loading vectors in a single biplot display. the loadings are also given in table in figure we see that the first loading vector places approximately equal weight on assault murder and rape with much less weight on biplot a technical note the principal component directions are the ordered sequence of eigenvectors of the matrix xt x and the variances of the components are the eigenvalues. there are at most minn p principal components. unsupervised learning urbanpop t n e n o p m o c l i a p c n i r p d n o c e s hawaii rhode island utah massachusetts new jersey connecticut washington wisconsin minnesota pennsylvania ohio oregon delaware nebraska kansas oklahoma indiana missouri new hampshire iowa maine rth dakota idaho virginia wyoming montana south dakota kentucky vermont west virginia arkansas alabama alaska georgia murder tennessee louisiana colorado illinois new york arizona rape texas michigan new mexico maryland assault california nevada florida south carolina north carolina mississippi first principal component figure the first two principal components for the usarrests data. the blue state names represent the scores for the first two principal components. the orange arrows indicate the first two principal component loading vectors axes on the top and right. for example the loading for rape on the first component is and its loading on the second principal component word rape is centered at the point this figure is known as a biplot because it displays both the principal component scores and the principal component loadings. urbanpop. hence this component roughly corresponds to a measure of overall rates of serious crimes. the second loading vector places most of its weight on urbanpop and much less weight on the other three features. hence this component roughly corresponds to the level of urbanization of the state. overall we see that the crime-related variables assault and rape are located close to each other and that the urbanpop variable is far from the other three. this indicates that the crime-related variables are correlated with each other states with high murder rates tend to have high assault and rape rates and that the urbanpop variable is less correlated with the other three. principal components analysis we can examine differences between the states via the two principal component score vectors shown in figure our discussion of the loading vectors suggests that states with large positive scores on the first component such as california nevada and florida have high crime rates while states like north dakota with negative scores on the first component have low crime rates. california also has a high score on the second component indicating a high level of urbanization while the opposite is true for states like mississippi. states close to zero on both components such as indiana have approximately average levels of both crime and urbanization. another interpretation of principal components the first two principal component loading vectors in a simulated threedimensional data set are shown in the left-hand panel of figure these two loading vectors span a plane along which the observations have the highest variance. in the previous section we describe the principal component loading vectors as the directions in feature space along which the data vary the most and the principal component scores as projections along these directions. however an alternative interpretation for principal components can also be useful principal components provide low-dimensional linear surfaces that are closest to the observations. we expand upon that interpretation here. the first principal component loading vector has a very special property it is the line in p-dimensional space that is closest to the n observations average squared euclidean distance as a measure of closeness. this interpretation can be seen in the left-hand panel of figure the dashed lines indicate the distance between each observation and the first principal component loading vector. the appeal of this interpretation is clear we seek a single dimension of the data that lies as close as possible to all of the data points since such a line will likely provide a good summary of the data. the notion of principal components as the dimensions that are closest to the n observations extends beyond just the first principal component. for instance the first two principal components of a data set span the plane that is closest to the n observations in terms of average squared euclidean distance. an example is shown in the left-hand panel of figure the first three principal components of a data set span the three-dimensional hyperplane that is closest to the n observations and so forth. using this interpretation together the first m principal component score vectors and the first m principal component loading vectors provide the best m approximation terms of euclidean distance to the ith observation xij this representation can be written unsupervised learning t n e n o p m o c l i a p c n i r p d n o c e s first principal component figure ninety observations simulated in three dimensions. left the first two principal component directions span the plane that best fits the data. it minimizes the sum of squared distances from each point to the plane. right the first two principal component score vectors give the coordinates of the projection of the observations onto the plane. the variance in the plane is maximized. xij zim jm the original data matrix x is column-centered. in other words together the m principal component score vectors and m principal component loading vectors can give a good approximation to the data when m is sufficiently large. when m minn p then the representation is exact xij m zim jm. more on pca scaling the variables we have already mentioned that before pca is performed the variables should be centered to have mean zero. furthermore the results obtained when we perform pca will also depend on whether the variables have been individually scaled multiplied by a different constant. this is in contrast to some other supervised and unsupervised learning techniques such as linear regression in which scaling the variables has no effect. linear regression multiplying a variable by a factor of c will simply lead to multiplication of the corresponding coefficient estimate by a factor of and thus will have no substantive effect on the model obtained. for instance figure was obtained after scaling each of the variables to have standard deviation one. this is reproduced in the left-hand plot in figure why does it matter that we scaled the variables? in these data principal components analysis scaled urbanpop t n e n o p m o c i l a p c n i r p d n o c e s t n e n o p m o c i l a p c n i r p d n o c e s rape assault murder unscaled urbanpop rape murder assau first principal component first principal component figure two principal component biplots for the usarrests data. left the same as figure with the variables scaled to have unit standard deviations. right principal components using unscaled data. assault has by far the largest loading on the first principal component because it has the highest variance among the four variables. in general scaling the variables to have standard deviation one is recommended. the variables are measured in different units murder rape and assault are reported as the number of occurrences per people and urbanpop is the percentage of the state s population that lives in an urban area. these four variables have variance and respectively. consequently if we perform pca on the unscaled variables then the first principal component loading vector will have a very large loading for assault since that variable has by far the highest variance. the righthand plot in figure displays the first two principal components for the usarrests data set without scaling the variables to have standard deviation one. as predicted the first principal component loading vector places almost all of its weight on assault while the second principal component loading vector places almost all of its weight on urpanpop. comparing this to the left-hand plot we see that scaling does indeed have a substantial effect on the results obtained. however this result is simply a consequence of the scales on which the variables were measured. for instance if assault were measured in units of the number of occurrences per people than number of occurrences per people then this would amount to dividing all of the elements of that variable by then the variance of the variable would be tiny and so the first principal component loading vector would have a very small value for that variable. because it is undesirable for the principal components obtained to depend on an arbitrary choice of scaling we typically scale each variable to have standard deviation one before we perform pca. unsupervised learning in certain settings however the variables may be measured in the same units. in this case we might not wish to scale the variables to have standard deviation one before performing pca. for instance suppose that the variables in a given data set correspond to expression levels for p genes. then since expression is measured in the same units for each gene we might choose not to scale the genes to each have standard deviation one. uniqueness of the principal components each principal component loading vector is unique up to a sign flip. this means that two different software packages will yield the same principal component loading vectors although the signs of those loading vectors may differ. the signs may differ because each principal component loading vector specifies a direction in p-dimensional space flipping the sign has no effect as the direction does not change. figure the principal component loading vector is a line that extends in either direction and flipping its sign would have no effect. similarly the score vectors are unique up to a sign flip since the variance of z is the same as the variance of z. it is worth noting that when we use to approximate xij we multiply zim by jm. hence if the sign is flipped on both the loading and score vectors the final product of the two quantities is unchanged. the proportion of variance explained in figure we performed pca on a three-dimensional data set panel and projected the data onto the first two principal component loading vectors in order to obtain a two-dimensional view of the data the principal component score vectors right-hand panel. we see that this two-dimensional representation of the three-dimensional data does successfully capture the major pattern in the data the orange green and cyan observations that are near each other in three-dimensional space remain nearby in the two-dimensional representation. similarly we have seen on the usarrests data set that we can summarize the observations and variables using just the first two principal component score vectors and the first two principal component loading vectors. we can now ask a natural question how much of the information in a given data set is lost by projecting the observations onto the first few principal components? that is how much of the variance in the data is not contained in the first few principal components? more generally we are interested in knowing the proportion of variance explained by each principal component. the total variance present in a data set that the variables have been centered to have mean zero is defined as varxj n ij proportion of variance explained principal components analysis i l d e n a p x e e c n a i r a v p o r p i l d e n a p x e e c n a i r a v p o r p e v i t a u m u c l principal component principal component figure left a scree plot depicting the proportion of variance explained by each of the four principal components in the usarrests data. right the cumulative proportion of variance explained by the four principal components in the usarrests data. and the variance explained by the mth principal component is n im n jmxij therefore the pve of the mth principal component is given by n p p jmxij n ij the pve of each principal component is a positive quantity. in order to compute the cumulative pve of the first m principal components we can simply sum over each of the first m pves. in total there are minn p principal components and their pves sum to one. in the usarrests data the first principal component explains of the variance in the data and the next principal component explains of the variance. together the first two principal components explain almost of the variance in the data and the last two principal components explain only of the variance. this means that figure provides a pretty accurate summary of the data using just two dimensions. the pve of each principal component as well as the cumulative pve is shown in figure the left-hand panel is known as a scree plot and will be discussed next. deciding how many principal components to use in general a n p data matrix x has minn p distinct principal components. however we usually are not interested in all of them rather scree plot unsupervised learning we would like to use just the first few principal components in order to visualize or interpret the data. in fact we would like to use the smallest number of principal components required to get a good understanding of the data. how many principal components are needed? unfortunately there is no single simple! answer to this question. we typically decide on the number of principal components required to visualize the data by examining a scree plot such as the one shown in the left-hand panel of figure we choose the smallest number of principal components that are required in order to explain a sizable amount of the variation in the data. this is done by eyeballing the scree plot and looking for a point at which the proportion of variance explained by each subsequent principal component drops off. this is often referred to as an elbow in the scree plot. for instance by inspection of figure one might conclude that a fair amount of variance is explained by the first two principal components and that there is an elbow after the second component. after all the third principal component explains less than ten percent of the variance in the data and the fourth principal component explains less than half that and so is essentially worthless. however this type of visual analysis is inherently ad hoc. unfortunately there is no well-accepted objective way to decide how many principal components are enough. in fact the question of how many principal components are enough is inherently ill-defined and will depend on the specific area of application and the specific data set. in practice we tend to look at the first few principal components in order to find interesting patterns in the data. if no interesting patterns are found in the first few principal components then further principal components are unlikely to be of interest. conversely if the first few principal components are interesting then we typically continue to look at subsequent principal components until no further interesting patterns are found. this is admittedly a subjective approach and is reflective of the fact that pca is generally used as a tool for exploratory data analysis. on the other hand if we compute principal components for use in a supervised analysis such as the principal components regression presented in section then there is a simple and objective way to determine how many principal components to use we can treat the number of principal component score vectors to be used in the regression as a tuning parameter to be selected via cross-validation or a related approach. the comparative simplicity of selecting the number of principal components for a supervised analysis is one manifestation of the fact that supervised analyses tend to be more clearly defined and more objectively evaluated than unsupervised analyses. clustering clustering methods other uses for principal components we saw in section that we can perform regression using the principal component score vectors as features. in fact many statistical techniques such as regression classification and clustering can be easily adapted to use the n m matrix whose columns are the first m p principal component score vectors rather than using the full n p data matrix. this can lead to less noisy results since it is often the case that the signal opposed to the noise in a data set is concentrated in its first few principal components. clustering methods clustering refers to a very broad set of techniques for finding subgroups or clusters in a data set. when we cluster the observations of a data set we seek to partition them into distinct groups so that the observations within each group are quite similar to each other while observations in different groups are quite different from each other. of course to make this concrete we must define what it means for two or more observations to be similar or different. indeed this is often a domain-specific consideration that must be made based on knowledge of the data being studied. for instance suppose that we have a set of n observations each with p features. the n observations could correspond to tissue samples for patients with breast cancer and the p features could correspond to measurements collected for each tissue sample these could be clinical measurements such as tumor stage or grade or they could be gene expression measurements. we may have a reason to believe that there is some heterogeneity among the n tissue samples for instance perhaps there are a few different unknown subtypes of breast cancer. clustering could be used to find these subgroups. this is an unsupervised problem because we are trying to discover structure in this case distinct clusters on the basis of a data set. the goal in supervised problems on the other hand is to try to predict some outcome vector such as survival time or response to drug treatment. both clustering and pca seek to simplify the data via a small number of summaries but their mechanisms are different pca looks to find a low-dimensional representation of the observa tions that explain a good fraction of the variance clustering looks to find homogeneous subgroups among the observa tions. another application of clustering arises in marketing. we may have access to a large number of measurements median household income occupation distance from nearest urban area and so forth for a large k-means clustering hierarchical clustering dendrogram unsupervised learning number of people. our goal is to perform market segmentation by identifying subgroups of people who might be more receptive to a particular form of advertising or more likely to purchase a particular product. the task of performing market segmentation amounts to clustering the people in the data set. since clustering is popular in many fields there exist a great number of clustering methods. in this section we focus on perhaps the two best-known clustering approaches k-means clustering and hierarchical clustering. in k-means clustering we seek to partition the observations into a pre-specified number of clusters. on the other hand in hierarchical clustering we do not know in advance how many clusters we want in fact we end up with a tree-like visual representation of the observations called a dendrogram that allows us to view at once the clusterings obtained for each possible number of clusters from to n. there are advantages and disadvantages to each of these clustering approaches which we highlight in this chapter. in general we can cluster observations on the basis of the features in order to identify subgroups among the observations or we can cluster features on the basis of the observations in order to discover subgroups among the features. in what follows for simplicity we will discuss clustering observations on the basis of the features though the converse can be performed by simply transposing the data matrix. k-means clustering k-means clustering is a simple and elegant approach for partitioning a data set into k distinct non-overlapping clusters. to perform k-means clustering we must first specify the desired number of clusters k then the k-means algorithm will assign each observation to exactly one of the k clusters. figure shows the results obtained from performing k-means clustering on a simulated example consisting of observations in two dimensions using three different values of k. the k-means clustering procedure results from a simple and intuitive mathematical problem. we begin by defining some notation. let ck denote sets containing the indices of the observations in each cluster. these sets satisfy two properties ck n. in other words each observation belongs to at least one of the k clusters. ck for all k k in other words the clusters are non overlapping no observation belongs to more than one cluster. for instance if the ith observation is in the kth cluster then i ck. the idea behind k-means clustering is that a good clustering is one for which the within-cluster variation is as small as possible. the within-cluster variation clustering methods figure a simulated data set with observations in two-dimensional space. panels show the results of applying k-means clustering with different values of k the number of clusters. the color of each observation indicates the cluster to which it was assigned using the k-means clustering algorithm. note that there is no ordering of the clusters so the cluster coloring is arbitrary. these cluster labels were not used in clustering instead they are the outputs of the clustering procedure. for cluster ck is a measure w of the amount by which the observations within a cluster differ from each other. hence we want to solve the problem minimize w in words this formula says that we want to partition the observations into k clusters such that the total within-cluster variation summed over all k clusters is as small as possible. solving seems like a reasonable idea but in order to make it actionable we need to define the within-cluster variation. there are many possible ways to define this concept but by far the most common choice involves squared euclidean distance. that is we define w ck where denotes the number of observations in the kth cluster. in other words the within-cluster variation for the kth cluster is the sum of all of the pairwise squared euclidean distances between the observations in the kth cluster divided by the total number of observations in the kth cluster. combining and gives the optimization problem that defines k-means clustering minimize ck unsupervised learning now we would like to find an algorithm to solve that is a method to partition the observations into k clusters such that the objective of is minimized. this is in fact a very difficult problem to solve precisely since there are almost k n ways to partition n observations into k clusters. this is a huge number unless k and n are tiny! fortunately a very simple algorithm can be shown to provide a local optimum a pretty good solution to the k-means optimization problem this approach is laid out in algorithm algorithm k-means clustering randomly assign a number from to k to each of the observations. these serve as initial cluster assignments for the observations. iterate until the cluster assignments stop changing for each of the k clusters compute the cluster centroid. the kth cluster centroid is the vector of the p feature means for the observations in the kth cluster. assign each observation to the cluster whose centroid is closest closest is defined using euclidean distance. algorithm is guaranteed to decrease the value of the objective at each step. to understand why the following identity is illuminating ck i ck xkj i ck xij where xkj is the mean for feature j in cluster ck. in step the cluster means for each feature are the constants that minimize the sum-of-squared deviations and in step reallocating the observations can only improve this means that as the algorithm is run the clustering obtained will continually improve until the result no longer changes the objective of will never increase. when the result no longer changes a local optimum has been reached. figure shows the progression of the algorithm on the toy example from figure k-means clustering derives its name from the fact that in step the cluster centroids are computed as the mean of the observations assigned to each cluster. because the k-means algorithm finds a local rather than a global optimum the results obtained will depend on the initial cluster assignment of each observation in step of algorithm for this reason it is important to run the algorithm multiple times from different random data step iteration step clustering methods iteration step iteration step final results figure the progress of the k-means algorithm on the example of figure with top left the observations are shown. top center in step of the algorithm each observation is randomly assigned to a cluster. top right in step the cluster centroids are computed. these are shown as large colored disks. initially the centroids are almost completely overlapping because the initial cluster assignments were chosen at random. bottom left in step each observation is assigned to the nearest centroid. bottom center step is once again performed leading to new cluster centroids. bottom right the results obtained after ten iterations. initial configurations. then one selects the best solution i.e. that for which the objective is smallest. figure shows the local optima obtained by running k-means clustering six times using six different initial cluster assignments using the toy data from figure in this case the best clustering is the one with an objective value of as we have seen to perform k-means clustering we must decide how many clusters we expect in the data. the problem of selecting k is far from simple. this issue along with other practical considerations that arise in performing k-means clustering is addressed in section unsupervised learning figure k-means clustering performed six times on the data from figure with k each time with a different random assignment of the observations in step of the k-means algorithm. above each plot is the value of the objective three different local optima were obtained one of which resulted in a smaller value of the objective and provides better separation between the clusters. those labeled in red all achieved the same best solution with an objective value of hierarchical clustering one potential disadvantage of k-means clustering is that it requires us to pre-specify the number of clusters k. hierarchical clustering is an alternative approach which does not require that we commit to a particular choice of k. hierarchical clustering has an added advantage over k-means clustering in that it results in an attractive tree-based representation of the observations called a dendrogram. in this section we describe bottom-up or agglomerative clustering. this is the most common type of hierarchical clustering and refers to the fact that a dendrogram depicted as an upside-down tree see bottom-up agglomerative clustering methods x figure forty-five observations generated in two-dimensional space. in reality there are three distinct classes shown in separate colors. however we will treat these class labels as unknown and will seek to cluster the observations in order to discover the classes from the data. figure is built starting from the leaves and combining clusters up to the trunk. we will begin with a discussion of how to interpret a dendrogram and then discuss how hierarchical clustering is actually performed that is how the dendrogram is built. interpreting a dendrogram we begin with the simulated data set shown in figure consisting of observations in two-dimensional space. the data were generated from a three-class model the true class labels for each observation are shown in distinct colors. however suppose that the data were observed without the class labels and that we wanted to perform hierarchical clustering of the data. hierarchical clustering complete linkage to be discussed later yields the result shown in the left-hand panel of figure how can we interpret this dendrogram? in the left-hand panel of figure each leaf of the dendrogram represents one of the observations in figure however as we move up the tree some leaves begin to fuse into branches. these correspond to observations that are similar to each other. as we move higher up the tree branches themselves fuse either with leaves or other branches. the earlier in the tree fusions occur the more similar the groups of observations are to each other. on the other hand observations that fuse later the top of the tree can be quite different. in fact this statement can be made precise for any two observations we can look for the point in the tree where branches containing those two observations are first fused. the height of this fusion as measured on the vertical axis indicates how unsupervised learning figure left dendrogram obtained from hierarchically clustering the data from figure with complete linkage and euclidean distance. center the dendrogram from the left-hand panel cut at a height of nine by the dashed line. this cut results in two distinct clusters shown in different colors. right the dendrogram from the left-hand panel now cut at a height of five. this cut results in three distinct clusters shown in different colors. note that the colors were not used in clustering but are simply used for display purposes in this figure. different the two observations are. thus observations that fuse at the very bottom of the tree are quite similar to each other whereas observations that fuse close to the top of the tree will tend to be quite different. this highlights a very important point in interpreting dendrograms that is often misunderstood. consider the left-hand panel of figure which shows a simple dendrogram obtained from hierarchically clustering nine observations. one can see that observations and are quite similar to each other since they fuse at the lowest point on the dendrogram. observations and are also quite similar to each other. however it is tempting but incorrect to conclude from the figure that observations and are quite similar to each other on the basis that they are located near each other on the dendrogram. in fact based on the information contained in the dendrogram observation is no more similar to observation than it is to observations and can be seen from the right-hand panel of figure in which the raw data are displayed. to put it mathematically there are possible reorderings of the dendrogram where n is the number of leaves. this is because at each of the n points where fusions occur the positions of the two fused branches could be swapped without affecting the meaning of the dendrogram. therefore we cannot draw conclusions about the similarity of two observations based on their proximity along the horizontal axis. rather we draw conclusions about the similarity of two observations based on the location on the vertical axis where branches containing those two observations first are fused. clustering methods x figure an illustration of how to properly interpret a dendrogram with nine observations in two-dimensional space. left a dendrogram generated using euclidean distance and complete linkage. observations and are quite similar to each other as are observations and however observation is no more similar to observation than it is to observations and even though observations and are close together in terms of horizontal distance. this is because observations and all fuse with observation at the same height approximately right the raw data used to generate the dendrogram can be used to confirm that indeed observation is no more similar to observation than it is to observations and now that we understand how to interpret the left-hand panel of figure we can move on to the issue of identifying clusters on the basis of a dendrogram. in order to do this we make a horizontal cut across the dendrogram as shown in the center and right-hand panels of figure the distinct sets of observations beneath the cut can be interpreted as clusters. in the center panel of figure cutting the dendrogram at a height of nine results in two clusters shown in distinct colors. in the right-hand panel cutting the dendrogram at a height of five results in three clusters. further cuts can be made as one descends the dendrogram in order to obtain any number of clusters between to no cut and n to a cut at height so that each observation is in its own cluster. in other words the height of the cut to the dendrogram serves the same role as the k in k-means clustering it controls the number of clusters obtained. figure therefore highlights a very attractive aspect of hierarchical clustering one single dendrogram can be used to obtain any number of clusters. in practice people often look at the dendrogram and select by eye a sensible number of clusters based on the heights of the fusion and the number of clusters desired. in the case of figure one might choose to select either two or three clusters. however often the choice of where to cut the dendrogram is not so clear. unsupervised learning the term hierarchical refers to the fact that clusters obtained by cutting the dendrogram at a given height are necessarily nested within the clusters obtained by cutting the dendrogram at any greater height. however on an arbitrary data set this assumption of hierarchical structure might be unrealistic. for instance suppose that our observations correspond to a group of people with a split of males and females evenly split among americans japanese and french. we can imagine a scenario in which the best division into two groups might split these people by gender and the best division into three groups might split them by nationality. in this case the true clusters are not nested in the sense that the best division into three groups does not result from taking the best division into two groups and splitting up one of those groups. consequently this situation could not be well-represented by hierarchical clustering. due to situations such as this one hierarchical clustering can sometimes yield worse less accurate results than k-means clustering for a given number of clusters. the hierarchical clustering algorithm the hierarchical clustering dendrogram is obtained via an extremely simple algorithm. we begin by defining some sort of dissimilarity measure between each pair of observations. most often euclidean distance is used we will discuss the choice of dissimilarity measure later in this chapter. the algorithm proceeds iteratively. starting out at the bottom of the dendrogram each of the n observations is treated as its own cluster. the two clusters that are most similar to each other are then fused so that there now are n clusters. next the two clusters that are most similar to each other are fused again so that there now are n clusters. the algorithm proceeds in this fashion until all of the observations belong to one single cluster and the dendrogram is complete. figure depicts the first few steps of the algorithm for the data from figure to summarize the hierarchical clustering algorithm is given in algorithm this algorithm seems simple enough but one issue has not been addressed. consider the bottom right panel in figure how did we determine that the cluster should be fused with the cluster we have a concept of the dissimilarity between pairs of observations but how do we define the dissimilarity between two clusters if one or both of the clusters contains multiple observations? the concept of dissimilarity between a pair of observations needs to be extended to a pair of groups of observations. this extension is achieved by developing the notion of linkage which defines the dissimilarity between two groups of observations. the four most common types of linkage complete average single and centroid are briefly described in table average complete and single linkage are most popular among statisticians. average and complete linkage algorithm hierarchical clustering clustering methods begin with n observations and a measure as euclidean dis nn pairwise dissimilarities. treat each tance of all the observation as its own cluster. n for i n n examine all pairwise inter-cluster dissimilarities among the i clusters and identify the pair of clusters that are least dissimilar is most similar. fuse these two clusters. the dissimilarity between these two clusters indicates the height in the dendrogram at which the fusion should be placed. the i remaining clusters. compute the new pairwise inter-cluster dissimilarities among linkage complete single average centroid description maximal intercluster dissimilarity. compute all pairwise dissimilarities between the observations in cluster a and the observations in cluster b and record the largest of these dissimilarities. minimal intercluster dissimilarity. compute all pairwise dissimilarities between the observations in cluster a and the observations in cluster b and record the smallest of these dissimilarities. single linkage can result in extended trailing clusters in which single observations are fused one-at-a-time. mean intercluster dissimilarity. compute all pairwise dissimilarities between the observations in cluster a and the observations in cluster b and record the average of these dissimilarities. dissimilarity between the centroid for cluster a mean vector of length p and the centroid for cluster b. centroid linkage can result in undesirable inversions. table a summary of the four most commonly-used types of linkage in hierarchical clustering. linkage are generally preferred over single linkage as they tend to yield more balanced dendrograms. centroid linkage is often used in genomics but suffers from a major drawback in that an inversion can occur whereby two clusters are fused at a height below either of the individual clusters in the dendrogram. this can lead to difficulties in visualization as well as in interpretation of the dendrogram. the dissimilarities computed in step of the hierarchical clustering algorithm will depend on the type of linkage used as well as on the choice of dissimilarity measure. hence the resulting inversion unsupervised learning x x x x figure an illustration of the first few steps of the hierarchical clustering algorithm using the data from figure with complete linkage and euclidean distance. top left initially there are nine distinct clusters top right the two clusters that are closest together and are fused into a single cluster. bottom left the two clusters that are closest together and are fused into a single cluster. bottom right the two clusters that are closest together using complete linkage and the cluster are fused into a single cluster. dendrogram typically depends quite strongly on the type of linkage used as is shown in figure choice of dissimilarity measure thus far the examples in this chapter have used euclidean distance as the dissimilarity measure. but sometimes other dissimilarity measures might be preferred. for example correlation-based distance considers two observations to be similar if their features are highly correlated even though the observed values may be far apart in terms of euclidean distance. this is average linkage complete linkage single linkage clustering methods figure average complete and single linkage applied to an example data set. average and complete linkage tend to yield more balanced clusters. an unusual use of correlation which is normally computed between variables here it is computed between the observation profiles for each pair of observations. figure illustrates the difference between euclidean and correlation-based distance. correlation-based distance focuses on the shapes of observation profiles rather than their magnitudes. the choice of dissimilarity measure is very important as it has a strong effect on the resulting dendrogram. in general careful attention should be paid to the type of data being clustered and the scientific question at hand. these considerations should determine what type of dissimilarity measure is used for hierarchical clustering. for instance consider an online retailer interested in clustering shoppers based on their past shopping histories. the goal is to identify subgroups of similar shoppers so that shoppers within each subgroup can be shown items and advertisements that are particularly likely to interest them. suppose the data takes the form of a matrix where the rows are the shoppers and the columns are the items available for purchase the elements of the data matrix indicate the number of times a given shopper has purchased a given item a if the shopper has never purchased this item a if the shopper has purchased it once etc. what type of dissimilarity measure should be used to cluster the shoppers? if euclidean distance is used then shoppers who have bought very few items overall infrequent users of the online shopping site will be clustered together. this may not be desirable. on the other hand if correlation-based distance is used then shoppers with similar preferences shoppers who have bought items a and b but unsupervised learning observation observation observation variable index figure three observations with measurements on variables are shown. observations and have similar values for each variable and so there is a small euclidean distance between them. but they are very weakly correlated so they have a large correlation-based distance. on the other hand observations and have quite different values for each variable and so there is a large euclidean distance between them. but they are highly correlated so there is a small correlation-based distance between them. never items c or d will be clustered together even if some shoppers with these preferences are higher-volume shoppers than others. therefore for this application correlation-based distance may be a better choice. in addition to carefully selecting the dissimilarity measure used one must also consider whether or not the variables should be scaled to have standard deviation one before the dissimilarity between the observations is computed. to illustrate this point we continue with the online shopping example just described. some items may be purchased more frequently than others for instance a shopper might buy ten pairs of socks a year but a computer very rarely. high-frequency purchases like socks therefore tend to have a much larger effect on the inter-shopper dissimilarities and hence on the clustering ultimately obtained than rare purchases like computers. this may not be desirable. if the variables are scaled to have standard deviation one before the inter-observation dissimilarities are computed then each variable will in effect be given equal importance in the hierarchical clustering performed. we might also want to scale the variables to have standard deviation one if they are measured on different scales otherwise the choice of units centimeters versus kilometers for a particular variable will greatly affect the dissimilarity measure obtained. it should come as no surprise that whether or not it is a good decision to scale the variables before computing the dissimilarity measure depends on the application at hand. an example is shown in figure we note that the issue of whether or not to scale the variables before performing clustering applies to k-means clustering as well. clustering methods socks computers socks computers socks computers figure an eclectic online retailer sells two items socks and computers. left the number of pairs of socks and computers purchased by eight online shoppers is displayed. each shopper is shown in a different color. if inter-observation dissimilarities are computed using euclidean distance on the raw variables then the number of socks purchased by an individual will drive the dissimilarities obtained and the number of computers purchased will have little effect. this might be undesirable since computers are more expensive than socks and so the online retailer may be more interested in encouraging shoppers to buy computers than socks and a large difference in the number of socks purchased by two shoppers may be less informative about the shoppers overall shopping preferences than a small difference in the number of computers purchased. center the same data is shown after scaling each variable by its standard deviation. now the number of computers purchased will have a much greater effect on the inter-observation dissimilarities obtained. right the same data are displayed but now the y-axis represents the number of dollars spent by each online shopper on socks and on computers. since computers are much more expensive than socks now computer purchase history will drive the inter-observation dissimilarities obtained. practical issues in clustering clustering can be a very useful tool for data analysis in the unsupervised setting. however there are a number of issues that arise in performing clustering. we describe some of these issues here. small decisions with big consequences in order to perform clustering some decisions must be made. should the observations or features first be standardized in some way? for instance maybe the variables should be centered to have mean zero and scaled to have standard deviation one. unsupervised learning in the case of hierarchical clustering what dissimilarity measure should be used? what type of linkage should be used? where should we cut the dendrogram in order to obtain clusters? in the case of k-means clustering how many clusters should we look for in the data? each of these decisions can have a strong impact on the results obtained. in practice we try several different choices and look for the one with the most useful or interpretable solution. with these methods there is no single right answer any solution that exposes some interesting aspects of the data should be considered. validating the clusters obtained any time clustering is performed on a data set we will find clusters. but we really want to know whether the clusters that have been found represent true subgroups in the data or whether they are simply a result of clustering the noise. for instance if we were to obtain an independent set of observations then would those observations also display the same set of clusters? this is a hard question to answer. there exist a number of techniques for assigning a p-value to a cluster in order to assess whether there is more evidence for the cluster than one would expect due to chance. however there has been no consensus on a single best approach. more details can be found in hastie et al. other considerations in clustering both k-means and hierarchical clustering will assign each observation to a cluster. however sometimes this might not be appropriate. for instance suppose that most of the observations truly belong to a small number of subgroups and a small subset of the observations are quite different from each other and from all other observations. then since kmeans and hierarchical clustering force every observation into a cluster the clusters found may be heavily distorted due to the presence of outliers that do not belong to any cluster. mixture models are an attractive approach for accommodating the presence of such outliers. these amount to a soft version of k-means clustering and are described in hastie et al. in addition clustering methods generally are not very robust to perturbations to the data. for instance suppose that we cluster n observations and then cluster the observations again after removing a subset of the n observations at random. one would hope that the two sets of clusters obtained would be quite similar but often this is not the case! lab principal components analysis a tempered approach to interpreting the results of clustering we have described some of the issues associated with clustering. however clustering can be a very useful and valid statistical tool if used properly. we mentioned that small decisions in how clustering is performed such as how the data are standardized and what type of linkage is used can have a large effect on the results. therefore we recommend performing clustering with different choices of these parameters and looking at the full set of results in order to see what patterns consistently emerge. since clustering can be non-robust we recommend clustering subsets of the data in order to get a sense of the robustness of the clusters obtained. most importantly we must be careful about how the results of a clustering analysis are reported. these results should not be taken as the absolute truth about a data set. rather they should constitute a starting point for the development of a scientific hypothesis and further study preferably on an independent data set. lab principal components analysis in this lab we perform pca on the usarrests data set which is part of the base r package. the rows of the data set contain the states in alphabetical order. states row names usarrests states the columns of the data set contain the four variables. names usarrests murder assault urbanpop rape we first briefly examine the data. we notice that the variables have vastly different means. apply usarrests mean murder assault urbanpop rape note that the apply function allows us to apply a function in this case the mean function to each row or column of the data set. the second input here denotes whether we wish to compute the mean of the rows or the columns we see that there are on average three times as many rapes as murders and more than eight times as many assaults as rapes. we can also examine the variances of the four variables using the apply function. apply usarrests var assault urbanpop murder rape prcomp unsupervised learning not surprisingly the variables also have vastly different variances the urbanpop variable measures the percentage of the population in each state living in an urban area which is not a comparable number to the number of rapes in each state per individuals. if we failed to scale the variables before performing pca then most of the principal components that we observed would be driven by the assault variable since it has by far the largest mean and variance. thus it is important to standardize the variables to have mean zero and standard deviation one before performing pca. we now perform principal components analysis using the prcomp func tion which is one of several functions in r that perform pca. pr out prcomp usarrests scale true by default the prcomp function centers the variables to have mean zero. by using the option scaletrue we scale the variables to have standard deviation one. the output from prcomp contains a number of useful quantities. names pr out sdev rotation center scale x the center and scale components correspond to the means and standard deviations of the variables that were used for scaling prior to implementing pca. pr outcente r murder assault urbanpop rape pr outscale murder assault urbanpop rape the rotation matrix provides the principal component loadings each column of pr.outrotation contains the corresponding principal component loading pr o u t r o t a t i o n murder assault urbanpop rape we see that there are four distinct principal components. this is to be expected because there are in general minn p informative principal components in a data set with n observations and p variables. function names it the rotation matrix because when we matrix-multiply the x matrix by pr.outrotation it gives us the coordinates of the data in the rotated coordinate system. these coordinates are the principal component scores. lab principal components analysis using the prcomp function we do not need to explicitly multiply the data by the principal component loading vectors in order to obtain the principal component score vectors. rather the matrix x has as its columns the principal component score vectors. that is the kth column is the kth principal component score vector. dim pr outx we can plot the first two principal components as follows biplot pr out scale the argument to biplot ensures that the arrows are scaled to represent the loadings other values for scale give slightly different biplots with different interpretations. notice that this figure is a mirror image of figure recall that the principal components are only unique up to a sign change so we can reproduce figure by making a few small changes biplot pr o u t r o t a t i o n pr o u t r o t a t i o n pr outx pr outx biplot pr out scale the prcomp function also outputs the standard deviation of each principal component. for instance on the usarrests data set we can access these standard deviations as follows pr outsdev the variance explained by each principal component is obtained by squaring these pr var pr outsdev pr var to compute the proportion of variance explained by each principal component we simply divide the variance explained by each principal component by the total variance explained by all four principal components pve pr var sum pr var pve we see that the first principal component explains of the variance in the data the next principal component explains of the variance and so forth. we can plot the pve explained by each component as well as the cumulative pve as follows plot pve xlab principal component ylab proportio n of variance explained ylim c type b plot cumsum pve xlab principal component ylab cumulative proportio n of variance explained ylim c type b unsupervised learning the result is shown in figure note that the function cumsum computes the cumulative sum of the elements of a numeric vector. for instance cumsum a c cumsum a lab clustering k-means clustering the function kmeans performs k-means clustering in r. we begin with a simple simulated example in which there truly are two clusters in the data the first observations have a mean shift relative to the next observations. kmeans set seed x matrix rnorm ncol x x x x we now perform k-means clustering with k km out kmeans nstart the cluster assignments of km.outcluster. km outclust e r the observations are contained in the k-means clustering perfectly separated the observations into two clusters even though we did not supply any group information to kmeans. we can plot the data with each observation colored according to its cluster assignment. plot col km outclust er main k means clustering results with k xlab ylab pch cex here the observations can be easily plotted because they are two-dimensional. if there were more than two variables then we could instead perform pca and plot the first two principal components score vectors. in this example we knew that there really were two clusters because we generated the data. however for real data in general we do not know the true number of clusters. we could instead have performed k-means clustering on this example with k set seed km out kmeans nstart km out k means clusterin g with clusters of sizes lab clustering cluster means clustering vector within cluster sum of squares by cluster between_s s total_ss available components cluster centers tot withinss betweenss totss size withinss plot col km outclust er main k means clustering results with k xlab ylab pch cex when k k-means clustering splits up the two clusters. to run the kmeans function in r with multiple initial cluster assignments we use the nstart argument. if a value of nstart greater than one is used then k-means clustering will be performed using multiple random assignments in step of algorithm and the kmeans function will report only the best results. here we compare using to set seed km out kmeans nstart km outtot withinss km out kmeans nstart km outtot withinss note that km.outtot.withinss is the total within-cluster sum of squares which we seek to minimize by performing k-means clustering the individual within-cluster sum-of-squares are contained in the vector km.outwithinss. we strongly recommend always running k-means clustering with a large value of nstart such as or since otherwise an undesirable local optimum may be obtained. when performing k-means clustering in addition to using multiple initial cluster assignments it is also important to set a random seed using the set.seed function. this way the initial cluster assignments in step can be replicated and the k-means output will be fully reproducible. unsupervised learning hierarchical clustering the hclust function implements hierarchical clustering in r. in the following example we use the data from section to plot the hierarchical clustering dendrogram using complete single and average linkage clustering with euclidean distance as the dissimilarity measure. we begin by clustering observations using complete linkage. the dist function is used to compute the inter-observation euclidean distance matrix. hclust dist hc complete hclust dist x method complete we could just as easily perform hierarchical clustering with average or single linkage instead hc average hclust dist x method average hc single hclust dist x method single we can now plot the dendrograms obtained using the usual plot function. the numbers at the bottom of the plot identify each observation. par mfrow c plot hc complete main complete linkage xlab sub cex plot hc average main average linkage xlab sub cex plot hc single main single linkage xlab sub cex to determine the cluster labels for each observation associated with a given cut of the dendrogram we can use the cutree function cutree cutree hc complete cutree hc average cutree hc single for this data complete and average linkage generally separate the observations into their correct groups. however single linkage identifies one point as belonging to its own cluster. a more sensible answer is obtained when four clusters are selected although there are still two singletons. cutree hc single to scale the variables before performing hierarchical clustering of the observations we use the scale function scale xsc scale x plot hclust dist xsc method complete main h i e r a r c h i c a l clustering with scaled features lab data example correlation-based distance can be computed using the as.dist function which converts an arbitrary square symmetric matrix into a form that the hclust function recognizes as a distance matrix. however this only makes sense for data with at least three features since the absolute correlation between any two observations with measurements on two features is always hence we will cluster a three-dimensional data set. as.dist x matrix rnorm ncol dd as dist cor t x plot hclust dd method complete main complete linkage with correlation based distance xlab sub lab data example unsupervised techniques are often used in the analysis of genomic data. in particular pca and hierarchical clustering are popular tools. we illustrate these techniques on the cancer cell line microarray data which consists of gene expression measurements on cancer cell lines. library islr nci labs s nci data a each cell line is labeled with a cancer type. we do not make use of the cancer types in performing pca and clustering as these are unsupervised techniques. but after performing pca and clustering we will check to see the extent to which these cancer types agree with the results of these unsupervised techniques. the data has rows and columns. dim nci data we begin by examining the cancer types for the cell lines. nci labs cns cns table nci labs nci labs cns renal breast ovarian leukemia repro repro renal prostate melanoma unknown cns colon repro repro nsclc unsupervised learning pca on the data we first perform pca on the data after scaling the variables to have standard deviation one although one could reasonably argue that it is better not to scale the genes. pr out prcomp nci data scale true we now plot the first few principal component score vectors in order to visualize the data. the observations lines corresponding to a given cancer type will be plotted in the same color so that we can see to what extent the observations within a cancer type are similar to each other. we first create a simple function that assigns a distinct color to each element of a numeric vector. the function will be used to assign a color to each of the cell lines based on the cancer type to which it corresponds. cols function vec cols rainbow length unique vec return cols as numeric as factor vec note that the rainbow function takes as its argument a positive integer and returns a vector containing that number of distinct colors. we now can plot the principal component score vectors. rainbow par mfrow c plot pr outx col cols nci labs pch xlab ylab plot pr outx c col cols nci labs pch xlab ylab the resulting plots are shown in figure on the whole cell lines corresponding to a single cancer type do tend to have similar values on the first few principal component score vectors. this indicates that cell lines from the same cancer type tend to have pretty similar gene expression levels. we can obtain a summary of the proportion of variance explained of the first few principal components using the summary method for a prcomp object have truncated the printout summary pr out importanc e of component s standard deviation proportio n of variance cumulativ e proportio n using the plot function we can also plot the variance explained by the first few principal components. plot pr out note that the height of each bar in the bar plot is given by squaring the corresponding element of pr.outsdev. however it is more informative to lab data example z z figure projections of the cancer cell lines onto the first three principal components other words the scores for the first three principal components. on the whole observations belonging to a single cancer type tend to lie near each other in this low-dimensional space. it would not have been possible to visualize the data without using a dimension reduction method such as pca possible scatterplots none of since based on the full data set there are which would have been particularly informative. plot the pve of each principal component a scree plot and the cumulative pve of each principal component. this can be done with just a little work. pve pr outsdev sum pr outsdev par mfrow c plot pve type o ylab pve xlab principal component col blue plot cumsum pve type o ylab cumulative pve xlab principal component col that the elements of pve can also be computed directly from the summary and the elements of cumsumpve are given by the resulting plots are shown in figure we see that together the first seven principal components explain around of the variance in the data. this is not a huge amount of the variance. however looking at the scree plot we see that while each of the first seven principal components explain a substantial amount of variance there is a marked decrease in the variance explained by further principal components. that is there is an elbow in the plot after approximately the seventh principal component. this suggests that there may be little benefit to examining more than seven or so principal components even examining seven principal components may be difficult. unsupervised learning e v p e v p e v i t l a u m u c principal component principal component figure the pve of the principal components of the cancer cell line microarray data set. left the pve of each principal component is shown. right the cumulative pve of the principal components is shown. together all principal components explain of the variance. clustering the observations of the data we now proceed to hierarchically cluster the cell lines in the data with the goal of finding out whether or not the observations cluster into distinct types of cancer. to begin we standardize the variables to have mean zero and standard deviation one. as mentioned earlier this step is optional and should be performed only if we want each gene to be on the same scale. sd data scale nci data we now perform hierarchical clustering of the observations using complete single and average linkage. euclidean distance is used as the dissimilarity measure. par mfrow c data dist dist sd data plot hclust data dist labels nci labs main complete linkage xlab sub ylab plot hclust data dist method average labels nci labs main average linkage xlab sub ylab plot hclust data dist method single labels nci labs main single linkage xlab sub ylab the results are shown in figure we see that the choice of linkage certainly does affect the results obtained. typically single linkage will tend to yield trailing clusters very large clusters onto which individual observations attach one-by-one. on the other hand complete and average linkage tend to yield more balanced attractive clusters. for this reason complete and average linkage are generally preferred to single linkage. clearly cell lines within a single cancer type do tend to cluster together although the lab data example complete linkage l a n e r s n c s n c c l c s n t s a e r b t s a e r b t s a e r b i i n a r a v o n a r a v o c l c s n l a n e r a m o n a l e m i n a r a v o n o l o c n o l o c i n a r a v o e t a t s o r p c l c s n c l c s n c l c s n l a n e r c l c s n e t a t s o r p a m o n a l e m i n a r a v o l a n e r l a n e r c l c s n c l c s n s n c c l c s n s n c s n c l a n e r l a n e r l a n e r l a n e r i n a r a v o n w o n k n u n o l o c n o l o c t s a e r b n o l o c n o l o c n o l o c a m o n a l e m a m o n a l e m a m o n a l e m a m o n a l e m a m o n a l e m a m o n a l e m t s a e r b t s a e r b i a m e k u e l i i a m e k u e l a m e k u e l i a m e k u e l i a m e k u e ol r p e r a k i a m e k u e l o r p e r b k t s a e r b o r p e r a f c m o r p e r d f c m average linkage l a n e r c l c s n c l c s n t s a e r b t s a e r b i a m e k u e l i a m e k u e l i a m e k u e l i i a m e k u e l a m e k u e l i a m e k u e l o r p e r b k o r p e r a k t s a e r b o r p e r a f c m o r p e r d f c m n o l o c n o l o c n o l o c l a n e r a m o n a l e m a m o n a l e m c l c s n i i n a r a v o n a r a v o i n a r a v o i n a r a v o n w o n k n u a m o n a l e m a m o n a l e m a m o n a l e m a m o n a l e m a m o n a l e m t s a e r b t s a e r b s n c c l c s n a m o n a l e m l a n e r l a n e r l a n e r l a n e r l a n e r s n c s n c l a n e r l a n e r c l c s n c l c s n e t a t s o r p c l c s n n o l o c n o l o c c l c s n c l c s n i n a r a v o e t a t s o r p i n a r a v o n o l o c n o l o c s n c s n c t s a e r b t s a e r b single linkage s n c c l c s n c l c s n i i n a r a v o a m e k u e l c l c s n t s a e r b n o l o c t s a e r b i n a r a v o l a n e r t s a e r b i a m e k u e l s n c i a m e k u e l i i a m e k u e l a m e k u e l i a m e k u e l o r p e r b k o r p e r a k c l c s n c l c s n n o l o c i n a r a v o e t a t s o r p a m o n a l e m c l c s n l a n e r n o l o c e t a t s o r p n o l o c i n a r a v o n o l o c n o l o c c l c s n c l c s n l a n e r c l c s n l a n e r l a n e r l a n e r l a n e r l a n e r s n c s n c s n c l a n e r a m o n a l e m a m o n a l e m n o l o c t s a e r b i n a r a v o a m o n a l e m a m o n a l e m a m o n a l e m a m o n a l e m a m o n a l e m t s a e r b t s a e r b i n a r a v o n w o n k n u t s a e r b o r p e r a f c m o r p e r d f c m figure the cancer cell line microarray data clustered with average complete and single linkage and using euclidean distance as the dissimilarity measure. complete and average linkage tend to yield evenly sized clusters whereas single linkage tends to yield extended clusters to which single leaves are fused one by one. unsupervised learning clustering is not perfect. we will use complete linkage hierarchical clustering for the analysis that follows. we can cut the dendrogram at the height that will yield a particular number of clusters say four hc out hclust dist sd data hc clusters cutree hc out table hc clusters nci labs there are some clear patterns. all the leukemia cell lines fall in cluster while the breast cancer cell lines are spread out over three different clusters. we can plot the cut on the dendrogram that produces these four clusters par mfrow c plot hc out labels nci labs abline h col red the abline function draws a straight line on top of any existing plot in r. the argument plots a horizontal line at height on the dendrogram this is the height that results in four distinct clusters. it is easy to verify that the resulting clusters are the same as the ones we obtained using printing the output of hclust gives a useful brief summary of the object hc out call hclust d dist dat cluster method distance number of objects complete euclidean we claimed earlier in section that k-means clustering and hierarchical clustering with the dendrogram cut to obtain the same number of clusters can yield very different results. how do these hierarchical clustering results compare to what we get if we perform k-means clustering with k set seed km out kmeans sd data nstart km clusters km outcluste r table km clusters hc clusters hc clusters km clusters we see that the four clusters obtained using hierarchical clustering and kmeans clustering are somewhat different. cluster in k-means clustering is identical to cluster in hierarchical clustering. however the other clusters exercises differ for instance cluster in k-means clustering contains a portion of the observations assigned to cluster by hierarchical clustering as well as all of the observations assigned to cluster by hierarchical clustering. rather than performing hierarchical clustering on the entire data matrix we can simply perform hierarchical clustering on the first few principal component score vectors as follows hc out hclust dist pr outx plot hc out labels nci labs main hier clust on first five score vectors table cutree hc out nci labs not surprisingly these results are different from the ones that we obtained when we performed hierarchical clustering on the full data set. sometimes performing clustering on the first few principal component score vectors can give better results than performing clustering on the full data. in this situation we might view the principal component step as one of denoising the data. we could also perform k-means clustering on the first few principal component score vectors rather than the full data set. exercises conceptual this problem involves the k-means clustering algorithm. prove on the basis of this identity argue that the k-means clustering algorithm decreases the objective at each iteration. suppose that we have four observations for which we compute a dissimilarity matrix given by for instance the dissimilarity between the first and second observations is and the dissimilarity between the second and fourth observations is on the basis of this dissimilarity matrix sketch the dendrogram that results from hierarchically clustering these four observations using complete linkage. be sure to indicate on the plot the height at which each fusion occurs as well as the observations corresponding to each leaf in the dendrogram. unsupervised learning repeat this time using single linkage clustering. suppose that we cut the dendogram obtained in such that two clusters result. which observations are in each cluster? suppose that we cut the dendogram obtained in such that two clusters result. which observations are in each cluster? it is mentioned in the chapter that at each fusion in the dendrogram the position of the two clusters being fused can be swapped without changing the meaning of the dendrogram. draw a dendrogram that is equivalent to the dendrogram in for which two or more of the leaves are repositioned but for which the meaning of the dendrogram is the same. in this problem you will perform k-means clustering manually with k on a small example with n observations and p features. the observations are as follows. obs. plot the observations. randomly assign a cluster label to each observation. you can use the sample command in r to do this. report the cluster labels for each observation. compute the centroid for each cluster. assign each observation to the centroid to which it is closest in terms of euclidean distance. report the cluster labels for each observation. repeat and until the answers obtained stop changing. in your plot from color the observations according to the cluster labels obtained. suppose that for a particular data set we perform hierarchical clustering using single linkage and using complete linkage. we obtain two dendrograms. at a certain point on the single linkage dendrogram the clusters and fuse. on the complete linkage dendrogram the clusters and also fuse at a certain point. which fusion will occur higher on the tree or will they fuse at the same height or is there not enough information to tell? exercises at a certain point on the single linkage dendrogram the clusters and fuse. on the complete linkage dendrogram the clusters and also fuse at a certain point. which fusion will occur higher on the tree or will they fuse at the same height or is there not enough information to tell? in words describe the results that you would expect if you performed k-means clustering of the eight shoppers in figure on the basis of their sock and computer purchases with k give three answers one for each of the variable scalings displayed. explain. a researcher collects expression measurements for genes in tissue samples. the data can be written as a matrix which we call x in which each row represents a gene and each column a tissue sample. each tissue sample was processed on a different day and the columns of x are ordered so that the samples that were processed earliest are on the left and the samples that were processed later are on the right. the tissue samples belong to two groups control and treatment the c and t samples were processed in a random order across the days. the researcher wishes to determine whether each gene s expression measurements differ between the treatment and control groups. as a pre-analysis comparing t versus c the researcher performs a principal component analysis of the data and finds that the first principal component vector of length has a strong linear trend from left to right and explains of the variation. the researcher now remembers that each patient sample was run on one of two machines a and b and machine a was used more often in the earlier times while b was used more often later. the researcher has a record of which sample was run on which machine. explain what it means that the first principal component ex plains of the variation the researcher decides to replace the ith element of x with xji where is the ith score and is the jth loading for the first principal component. he will then perform a two-sample t-test on each gene in this new data set in order to determine whether its expression differs between the two conditions. critique this idea and suggest a better approach. principal component analysis is performed on xt design and run a small simulation experiment to demonstrate the superiority of your idea. unsupervised learning applied in the chapter we mentioned the use of correlation-based distance and euclidean distance as dissimilarity measures for hierarchical clustering. it turns out that these two measures are almost equivalent if each observation has been centered to have mean zero and standard deviation one and if we let rij denote the correlation between the ith and jth observations then the quantity rij is proportional to the squared euclidean distance between the ith and jth observations. on the usarrests data show that this proportionality holds. hint the euclidean distance can be calculated using the dist function and correlations can be calculated using the cor function. in section a formula for calculating pve was given in equation we also saw that the pve can be obtained using the sdev output of the prcomp function. on the usarrests data calculate pve in two ways using the sdev output of the prcomp function as was done in section by applying equation directly. that is use the prcomp function to compute the principal component loadings. then use those loadings in equation to obtain the pve. these two approaches should give the same results. hint you will only obtain the same results in and if the same data is used in both cases. for instance if in you performed prcomp using centered and scaled variables then you must center and scale the variables before applying equation in consider the usarrests data. we will now perform hierarchical clus tering on the states. using hierarchical clustering with complete linkage and euclidean distance cluster the states. cut the dendrogram at a height that results in three distinct clusters. which states belong to which clusters? hierarchically cluster the states using complete linkage and euclidean distance after scaling the variables to have standard deviation one. what effect does scaling the variables have on the hierarchical clustering obtained? in your opinion should the variables be scaled before the inter-observation dissimilarities are computed? provide a justification for your answer. in this problem you will generate simulated data and then perform pca and k-means clustering on the data. exercises generate a simulated data set with observations in each of three classes observations total and variables. hint there are a number of functions in r that you can use to generate data. one example is the rnorm function runif is another option. be sure to add a mean shift to the observations in each class so that there are three distinct classes. perform pca on the observations and plot the first two principal component score vectors. use a different color to indicate the observations in each of the three classes. if the three classes appear separated in this plot then continue on to part if not then return to part and modify the simulation so that there is greater separation between the three classes. do not continue to part until the three classes show at least some separation in the first two principal component score vectors. perform k-means clustering of the observations with k how well do the clusters that you obtained in k-means clustering compare to the true class labels? hint you can use the table function in r to compare the true class labels to the class labels obtained by clustering. be careful how you interpret the results k-means clustering will arbitrarily number the clusters so you cannot simply check whether the true class labels and clustering labels are the same. perform k-means clustering with k describe your results. now perform k-means clustering with k and describe your results. now perform k-means clustering with k on the first two principal component score vectors rather than on the raw data. that is perform k-means clustering on the matrix of which the first column is the first principal component score vector and the second column is the second principal component score vector. comment on the results. using the scale function perform k-means clustering with k on the data after scaling each variable to have standard deviation one. how do these results compare to those obtained in explain. on the book website www.statlearning.com there is a gene expression data set that consists of tissue samples with measurements on genes. the first samples are from healthy patients while the second are from a diseased group. unsupervised learning load in the data using read.csv. you will need to select headerf. apply hierarchical clustering to the samples using correlationbased distance and plot the dendrogram. do the genes separate the samples into the two groups? do your results depend on the type of linkage used? your collaborator wants to know which genes differ the most across the two groups. suggest a way to answer this question and apply it here. index cp norm norm additive additivity adjusted advertising data set agglomerative clustering akaike information criterion alternative hypothesis analysis of variance area under the curve argument auc auto data set backfitting backward stepwise selection bagging baseline basis function bayes classifier decision boundary error bayes theorem bayesian bayesian information criterion best subset selection bias bias-variance decomposition trade-off binary biplot g. james et al. an introduction to statistical learning with applications in r springer texts in statistics doi springer sciencebusiness media new york index boolean boosting bootstrap cross-validation k-fold leave-one-out boston data set curse of dimensionality bottom-up clustering boxplot branch caravan data set carseats data set categorical classification error rate tree classifier cluster analysis clustering k-means agglomerative bottom-up hierarchical coefficient college data set collinearity conditional probability confidence interval confounding confusion matrix continuous contour plot contrast correlation credit data set data frame data sets advertising auto boston caravan carseats college credit default heart hitters income khan oj portfolio smarket usarrests wage weekly decision tree default data set degrees of freedom dendrogram density function dependent variable derivative deviance dimension reduction discriminant function dissimilarity distance correlation-based euclidean double-exponential distribution dummy variable effective degrees of freedom elbow entropy error irreducible rate reducible term euclidean distance expected value exploratory data analysis f-statistic factor false discovery proportion index false negative false positive false positive rate feature feature selection fisher s linear discriminant fit fitted value flexible for loop forward stepwise selection function gaussian distribution generalized additive model generalized linear model gini index heart data set heatmap heteroscedasticity hierarchical clustering dendrogram inversion linkage hierarchical principle high-dimensional hinge loss histogram hitters data set hold-out set hyperplane hypothesis test income data set independent variable indicator function inference index inner product input variable integral interaction intercept interpretability inversion irreducible error k-means clustering k-nearest neighbors classifier regression kernel linear non-linear polynomial radial khan data set knot laplace distribution lasso leaf least squares line weighted level leverage likelihood function linear linear combination linear discriminant analysis linear kernel linear model linear regression multiple simple linkage average centroid complete single local regression logistic function logistic regression multiple logit loss function low-dimensional main effects majority vote mallow s cp margin matrix multiplication maximal margin classifier hyperplane maximum likelihood mean squared error misclassification error missing data mixed selection model assessment model selection multicollinearity multivariate gaussian multivariate normal natural spline data set negative predictive value node internal purity terminal noise non-linear decision boundary kernel non-parametric normal distribution null hypothesis model odds oj data set one-standard-error rule one-versus-all one-versus-one optimal separating hyperplane optimism of training error ordered categorical variable orthogonal basis out-of-bag outlier output variable overfitting p-value parameter parametric partial least squares path algorithm perpendicular polynomial kernel regression population regression line portfolio data set positive predictive value index posterior distribution mode probability power precision prediction interval predictor principal components analysis loading vector proportion of variance explained regression score vector scree plot prior distribution probability projection pruning cost complexity weakest link quadratic quadratic discriminant analysis qualitative variable quantitative r functions abline anova apply as.dist as.factor attach biplot boot index bs c cbind coef confint contour contrasts cor cumsum cut cutree cv.glm cv.glmnet cv.tree data.frame dev.off dim dist fix for gam gbm glm glmnet hatvalues hclust hist i identify ifelse image importance is.na jitter jpeg kmeans knn lda legend length library lines lm lo loadhistory loess ls matrix mean median model.matrix na.omit names ns pairs par pcr pdf persp plot plot.gam plot.svm plsr points poly prcomp predict print prune.misclass prune.tree q qda quantile rainbow randomforest range read.csv read.table regsubsets residuals return rm rnorm rstudent runif s sample savehistory scale sd seq set.seed smooth.spline sqrt sum summary svm table text title tree tune update var varimpplot vif which.max which.min write.table radial kernel random forest recall receiver operating characteristic recursive binary splitting index reducible error regression local piecewise polynomial polynomial spline tree regularization replacement resampling residual plot standard error studentized sum of squares residuals response ridge regression robust roc curve rug plot scale equivariant scatterplot scatterplot matrix scree plot elbow seed semi-supervised learning sensitivity separating hyperplane shrinkage penalty signal slack variable slope smarket data set smoother smoothing spline soft margin classifier index soft-thresholding sparse sparsity specificity spline cubic linear natural regression smoothing thin-plate standard error standardize statistical model step function stepwise model selection stump subset selection subtree supervised learning support vector classifier machine regression synergy systematic t-distribution t-statistic test error mse observations set time series total sum of squares tracking train training data error mse tree tree-based method true negative true positive true positive rate truncated power basis tuning parameter type i error type ii error unsupervised learning usarrests data set validation set approach variable dependent dummy importance independent indicator input output qualitative selection variance inflation factor varying coefficient model vector wage data set weakest link pruning weekly data set weighted least squares within class covariance workspace wrapper