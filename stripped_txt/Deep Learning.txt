deep learning ian goodfellow yoshua bengio aaron courville contents website acknowledgments notation introduction who should read this book? historical trends in deep learning i applied math and machine learning basics linear algebra scalars vectors matrices and tensors multiplying matrices and vectors identity and inverse matrices linear dependence and span norms special kinds of matrices and vectors eigendecomposition singular value decomposition the moore-penrose pseudoinverse the trace operator the determinant example principal components analysis probability and information theory why probability? i vii viii xi contents random variables probability distributions marginal probability conditional probability the chain rule of conditional probabilities independence and conditional independence expectation variance and covariance common probability distributions useful properties of common functions bayes rule technical details of continuous variables information theory structured probabilistic models numerical computation overflow and underflow poor conditioning gradient-based optimization constrained optimization example linear least squares machine learning basics learning algorithms capacity overfitting and underfitting hyperparameters and validation sets estimators bias and variance maximum likelihood estimation bayesian statistics supervised learning algorithms unsupervised learning algorithms stochastic gradient descent building a machine learning algorithm challenges motivating deep learning ii deep networks modern practices deep feedforward networks example learning xor gradient-based learning ii contents hidden units architecture design back-propagation and other differentiation algorithms historical notes regularization for deep learning parameter norm penalties norm penalties as constrained optimization regularization and under-constrained problems dataset augmentation noise robustness semi-supervised learning multi-task learning early stopping parameter tying and parameter sharing sparse representations bagging and other ensemble methods dropout adversarial training tangent distance tangent prop and manifold tangent classifier optimization for training deep models how learning differs from pure optimization challenges in neural network optimization basic algorithms parameter initialization strategies algorithms with adaptive learning rates approximate second-order methods optimization strategies and meta-algorithms convolutional networks the convolution operation motivation pooling convolution and pooling as an infinitely strong prior variants of the basic convolution function structured outputs data types efficient convolution algorithms random or unsupervised features iii contents the neuroscientific basis for convolutional networks convolutional networks and the history of deep learning sequence modeling recurrent and recursive nets unfolding computational graphs recurrent neural networks bidirectional rnns encoder-decoder sequence-to-sequence architectures deep recurrent networks recursive neural networks the challenge of long-term dependencies echo state networks leaky units and other strategies for multiple time scales the long short-term memory and other gated rnns optimization for long-term dependencies explicit memory practical methodology performance metrics default baseline models determining whether to gather more data selecting hyperparameters debugging strategies example multi-digit number recognition applications large-scale deep learning computer vision speech recognition natural language processing other applications iii deep learning research linear factor models probabilistic pca and factor analysis independent component analysis slow feature analysis sparse coding iv contents manifold interpretation of pca autoencoders undercomplete autoencoders regularized autoencoders representational power layer size and depth stochastic encoders and decoders denoising autoencoders learning manifolds with autoencoders contractive autoencoders predictive sparse decomposition applications of autoencoders representation learning greedy layer-wise unsupervised pretraining transfer learning and domain adaptation semi-supervised disentangling of causal factors distributed representation exponential gains from depth providing clues to discover underlying causes structured probabilistic models for deep learning the challenge of unstructured modeling using graphs to describe model structure sampling from graphical models advantages of structured modeling learning about dependencies inference and approximate inference the deep learning approach to structured probabilistic models monte carlo methods sampling and monte carlo methods importance sampling markov chain monte carlo methods gibbs sampling the challenge of mixing between separated modes confronting the partition function the log-likelihood gradient stochastic maximum likelihood and contrastive divergence v contents pseudolikelihood score matching and ratio matching denoising score matching noise-contrastive estimation estimating the partition function approximate inference inference as optimization expectation maximization map inference and sparse coding variational inference and learning learned approximate inference deep generative models boltzmann machines restricted boltzmann machines deep belief networks deep boltzmann machines boltzmann machines for real-valued data convolutional boltzmann machines boltzmann machines for structured or sequential outputs other boltzmann machines back-propagation through random operations directed generative nets drawing samples from autoencoders generative stochastic networks other generation schemes evaluating generative models conclusion bibliography index vi website www.deeplearningbook.org this book is accompanied by the above website. the website provides a variety of supplementary material including exercises lecture slides corrections of mistakes and other resources that should be useful to both readers and instructors. vii acknowledgments this book would not have been possible without the contributions of many people. we would like to thank those who commented on our proposal for the book and helped plan its contents and organization guillaume alain kyunghyun cho a lar g l ehre david krueger hugo larochelle razvan pascanu and thomas roh e. we would like to thank the people who offered feedback on the content of the book itself. some offered feedback on many chapters mart n abadi guillaume alain ion androutsopoulos fred bertsch olexa bilaniuk ufuk can bi ici matko bo njak john boersma greg brockman alexandre de br bisson pierre luc carrier sarath chandar pawel chilinski mark daoust oleg dashevskii laurent dinh stephan dreseitl jim fan miao fan meire fortunato fr d ric francis nando de freitas a lar g l ehre jurgen van gael javier alonso garc a jonathan hunt gopi jeyaram chingiz kabytayev lukasz kaiser varun kanade asifullah khan akiel khan john king diederik p. kingma yann lecun rudolf mathey mat as mattamala abhinav maurya kevin murphy oleg m rk roman novak augustus q. odena simon pavlik karl pichotta eddie pierce kari pulli roussel rahman tapani raiko anurag ranjan johannes roith mihaela rosca halis sak c sar salgado grigory sapunov yoshinori sasaki mike schuster julian serban nir shabat ken shirriff andre simpelo scott stanley david sussillo ilya sutskever carles gelada s ez graham taylor valentin tolmer massimiliano tomassoli an tran shubhendu trivedi alexey umnov vincent vanhoucke marco visentini-scarzanella martin vita david warde-farley dustin webb kelvin xu wei xue ke yang li yao zygmunt zaj c and ozan a layan. we would also like to thank those who provided us with useful feedback on individual chapters notation zhang yuanhang. chapter introduction yusuf akgul sebastien bratieres samira ebrahimi viii contents charlie gorichanaz brendan loudermilk eric morris cosmin p rvulescu and alfredo solano. linear algebra chapter amjad almahairi nikola bani kevin bennett philippe castonguay oscar chang eric fosler-lussier andrey khalyavin sergey oreshkov istv n petr s dennis prangle thomas roh e gitanjali gulve sehgal colby toland alessandro vitale and bob welland. probability and information theory chapter john philip anderson kai arulkumaran vincent dumoulin rui fa stephan gouws artem oboturov antti rasmus alexey surkov and volker tresp. chapter yuhuang. numerical computation tran lam anian fischer and hu machine learning basics chapter dzmitry bahdanau justin domingue nikhil garg makoto otsuka bob pepin philip popien emmanuel rayner peter shepard kee-bong song zheng sun and andy wu. chapter deep feedforward networks uriel berdugo fabrizio bottarel elizabeth burl ishan durugkar jeff hlywa jong wook kim david krueger and aditya kumar praharaj. chapter inkyu lee sunil mohan hai phong phan and joshua salisbury. regularization for deep learning morten kolb k kshitij lauria chapter optimization for training deep models marcel ackermann peter armitage rowel atienza andrew brock tegan maharaj james martens kashif rasul klaus strobl and nicholas turner. chapter convolutional networks mart n arjovsky eugene brevdo konstantin divilov eric jensen mehdi mirza alex paino marjorie sayer ryan stout and wentao wu. chapter sequence modeling recurrent and recursive nets g k en eraslan steven hickson razvan pascanu lorenzo von ritter rui rodrigues dmitriy serdyuk dongyu shi and kaiyu yang. chapter chapter roscher. practical methodology daniel beckstein. applications george dahl vladimir nekrasov and ribana chapter linear factor models jayanth koushik. ix contents chapter representation learning kunal ghosh. chapter and anton varfolom. structured probabilistic models for deep learning minh l chapter confronting the partition function sam bowman. chapter approximate inference yujia bao. chapter wenming ma fady medhat shakir mohamed and gr goire montavon. deep generative models nicolas chapados daniel galvez bibliography lukas michelbacher and leslie n. smith. we also want to thank those who allowed us to reproduce images figures or data from their publications. we indicate their contributions in the figure captions throughout the text. we would like to thank lu wang for writing which we used to make the web version of the book and for offering support to improve the quality of the resulting html. we would like to thank ian s wife daniela flori goodfellow for patiently supporting ian during the writing of the book as well as for help with proofreading. we would like to thank the google brain team for providing an intellectual environment where ian could devote a tremendous amount of time to writing this book and receive feedback and guidance from colleagues. we would especially like to thank ian s former manager greg corrado and his current manager samy bengio for their support of this project. finally we would like to thank geoffrey hinton for encouragement when writing was difficult. x notation this section provides a concise reference describing the notation used throughout this book. if you are unfamiliar with any of the corresponding mathematical concepts we describe most of these ideas in chapters a a a a in i e numbers and arrays a scalar or real a vector a matrix a tensor identity matrix with n rows and n columns identity matrix with dimensionality implied by context standard basis vector with a at position i diag a square diagonal matrix with diagonal entries given by a a scalar random variable a vector-valued random variable a matrix-valued random variable a a a xi contents a a set sets and graphs r n b b a b g the set of real numbers the set containing and the set of all integers between and n the real interval including a and b the real interval excluding a but including b set subtraction i.e. the set containing the elements of that are not in a b a graph p agxi the parents of xi in g indexing ai a i aij element i of vector a with indexing starting at all elements of vector a except for element i element i j of matrix a ai row of matrix i a ai column of matrix i a aijk element i j k of a tensor a a ai a a a b slice of a tensor element of the random vector i a linear algebra operations transpose of matrix a moore-penrose pseudoinverse of a element-wise product of anda b det determinant of a xii contents dy dx y x xy x y y x f x xf calculus derivative of with respect to y x partial derivative of with respect to y x gradient of with respect to y x matrix derivatives of with respect to y x tensor containing derivatives of y with respect to x jacobian matrix j m n r m r n of f r the hessian matrix of f at input point x x or h f f x d definite integral over the entire domain of x f x d definite integral with respect to x over the set s s a b a b c p p a p probability and information theory the random variables a and b are independent they are conditionally independent given c a probability distribution over a discrete variable a probability distribution over a continuous variable or over a variable whose type has not been specified random variable a has distribution p p ex f x or ef x expectation of f x with respect to p x var f x variance of f x under x p cov f x g x h p q dkl n x covariance of f x and g x under x p shannon entropy of the random variable x kullback-leibler divergence of p and q gaussian distribution over x with mean and covariance xiii contents g f a f functions b the function with domain f and range b a composition of the functions f and g f a function of x parametrized by we write fx and omit the argument to lighten notation log x x x x p x x natural logarithm of x logistic sigmoid exp x softplus exp x lp norm of x norm of x positive part of x i.e. x is if the condition is true otherwise sometimes we use a function f whose argument is a scalar but apply it to a vector matrix or tensor f fx or f this denotes the application of f to the array element-wise. for example if c then c ijk for all valid values of and k i j pdata pdata x x y or y x datasets and distributions the data generating distribution the empirical distribution defined by the training set a set of training examples the example from a dataset i the target associated with x for supervised learning the m n xi matrix with input example x in row xiv chapter introduction inventors have long dreamed of creating machines that think. this desire dates back to at least the time of ancient greece. the mythical figures pygmalion daedalus and hephaestus may all be interpreted as legendary inventors and galatea talos and pandora may all be regarded as artificial life ovid and martin sparkes tandy when programmable computers were first conceived people wondered whether such machines might become intelligent over a hundred years before one was built today artificial intelligence is a thriving field with many practical applications and active research topics. we look to intelligent software to automate routine labor understand speech or images make diagnoses in medicine and support basic scientific research. in the early days of artificial intelligence the field rapidly tackled and solved problems that are intellectually difficult for human beings but relatively straightforward for computers problems that can be described by a list of formal mathematical rules. the true challenge to artificial intelligence proved to be solving the tasks that are easy for people to perform but hard for people to describe formally problems that we solve intuitively that feel automatic like recognizing spoken words or faces in images. this book is about a solution to these more intuitive problems. this solution is to allow computers to learn from experience and understand the world in terms of a hierarchy of concepts with each concept defined in terms of its relation to simpler concepts. by gathering knowledge from experience this approach avoids the need for human operators to formally specify all of the knowledge that the computer needs. the hierarchy of concepts allows the computer to learn complicated concepts by building them out of simpler ones. if we draw a graph showing how these chapter introduction concepts are built on top of each other the graph is deep with many layers. for this reason we call this approach to ai deep learning many of the early successes of ai took place in relatively sterile and formal environments and did not require computers to have much knowledge about the world. for example ibm s deep blue chess-playing system defeated world champion garry kasparov in chess is of course a very simple world containing only sixty-four locations and thirty-two pieces that can move in only rigidly circumscribed ways. devising a successful chess strategy is a tremendous accomplishment but the challenge is not due to the difficulty of describing the set of chess pieces and allowable moves to the computer. chess can be completely described by a very brief list of completely formal rules easily provided ahead of time by the programmer. hsu ironically abstract and formal tasks that are among the most difficult mental undertakings for a human being are among the easiest for a computer. computers have long been able to defeat even the best human chess player but are only recently matching some of the abilities of average human beings to recognize objects or speech. a person s everyday life requires an immense amount of knowledge about the world. much of this knowledge is subjective and intuitive and therefore difficult to articulate in a formal way. computers need to capture this same knowledge in order to behave in an intelligent way. one of the key challenges in artificial intelligence is how to get this informal knowledge into a computer. several artificial intelligence projects have sought to hard-code knowledge about the world in formal languages. a computer can reason about statements in these formal languages automatically using logical inference rules. this is known as the knowledge base approach to artificial intelligence. none of these projects has led to a major success. one of the most famous such projects is cyc lenat and guha cyc is an inference engine and a database of statements in a language called cycl. these statements are entered by a staff of human supervisors. it is an unwieldy process. people struggle to devise formal rules with enough complexity to accurately describe the world. for example cyc failed to understand a story about a person named fred shaving in the morning its inference engine detected an inconsistency in the story it knew that people do not have electrical parts but because fred was holding an electric razor it believed the entity fredwhileshaving contained electrical parts. it therefore asked whether fred was still a person while he was shaving. linde the difficulties faced by systems relying on hard-coded knowledge suggest that ai systems need the ability to acquire their own knowledge by extracting patterns from raw data. this capability is known as machine learning. the chapter introduction introduction of machine learning allowed computers to tackle problems involving knowledge of the real world and make decisions that appear subjective. a simple machine learning algorithm called logistic regression can determine whether to recommend cesarean delivery a simple machine learning algorithm called naive bayes can separate legitimate e-mail from spam e-mail. et al. the performance of these simple machine learning algorithms depends heavily on the representation of the data they are given. for example when logistic regression is used to recommend cesarean delivery the ai system does not examine the patient directly. instead the doctor tells the system several pieces of relevant information such as the presence or absence of a uterine scar. each piece of information included in the representation of the patient is known as a feature. logistic regression learns how each of these features of the patient correlates with various outcomes. however it cannot influence the way that the features are defined in any way. if logistic regression was given an mri scan of the patient rather than the doctor s formalized report it would not be able to make useful predictions. individual pixels in an mri scan have negligible correlation with any complications that might occur during delivery. this dependence on representations is a general phenomenon that appears throughout computer science and even daily life. in computer science operations such as searching a collection of data can proceed exponentially faster if the collection is structured and indexed intelligently. people can easily perform arithmetic on arabic numerals but find arithmetic on roman numerals much more time-consuming. it is not surprising that the choice of representation has an enormous effect on the performance of machine learning algorithms. for a simple visual example see figure many artificial intelligence tasks can be solved by designing the right set of features to extract for that task then providing these features to a simple machine learning algorithm. for example a useful feature for speaker identification from sound is an estimate of the size of speaker s vocal tract. it therefore gives a strong clue as to whether the speaker is a man woman or child. however for many tasks it is difficult to know what features should be extracted. for example suppose that we would like to write a program to detect cars in photographs. we know that cars have wheels so we might like to use the presence of a wheel as a feature. unfortunately it is difficult to describe exactly what a wheel looks like in terms of pixel values. a wheel has a simple geometric shape but its image may be complicated by shadows falling on the wheel the sun glaring off the metal parts of the wheel the fender of the car or an object in the foreground obscuring part of the wheel and so on. chapter introduction figure example of different representations suppose we want to separate two categories of data by drawing a line between them in a scatterplot. in the plot on the left we represent some data using cartesian coordinates and the task is impossible. in the plot on the right we represent the data with polar coordinates and the task becomes simple to solve with a vertical line. figure produced in collaboration with david warde-farley. one solution to this problem is to use machine learning to discover not only the mapping from representation to output but also the representation itself. this approach is known as representation learning. learned representations often result in much better performance than can be obtained with hand-designed representations. they also allow ai systems to rapidly adapt to new tasks with minimal human intervention. a representation learning algorithm can discover a good set of features for a simple task in minutes or a complex task in hours to months. manually designing features for a complex task requires a great deal of human time and effort it can take decades for an entire community of researchers. the quintessential example of a representation learning algorithm is the autoencoder. an autoencoder is the combination of an encoder function that converts the input data into a different representation and a decoder function that converts the new representation back into the original format. autoencoders are trained to preserve as much information as possible when an input is run through the encoder and then the decoder but are also trained to make the new representation have various nice properties. different kinds of autoencoders aim to achieve different kinds of properties. when designing features or algorithms for learning features our goal is usually to separate the factors of variation that explain the observed data. in this context we use the word factors simply to refer to separate sources of influence the factors are usually not combined by multiplication. such factors are often not chapter introduction quantities that are directly observed. instead they may exist either as unobserved objects or unobserved forces in the physical world that affect observable quantities. they may also exist as constructs in the human mind that provide useful simplifying explanations or inferred causes of the observed data. they can be thought of as concepts or abstractions that help us make sense of the rich variability in the data. when analyzing a speech recording the factors of variation include the speaker s age their sex their accent and the words that they are speaking. when analyzing an image of a car the factors of variation include the position of the car its color and the angle and brightness of the sun. a major source of difficulty in many real-world artificial intelligence applications is that many of the factors of variation influence every single piece of data we are able to observe. the individual pixels in an image of a red car might be very close to black at night. the shape of the car s silhouette depends on the viewing angle. most applications require us to the factors of variation and discard the ones that we do not care about. disentangle of course it can be very difficult to extract such high-level abstract features from raw data. many of these factors of variation such as a speaker s accent can be identified only using sophisticated nearly human-level understanding of the data. when it is nearly as difficult to obtain a representation as to solve the original problem representation learning does not at first glance seem to help us. deep learning solves this central problem in representation learning by introducing representations that are expressed in terms of other simpler representations. deep learning allows the computer to build complex concepts out of simpler concepts. figure shows how a deep learning system can represent the concept of an image of a person by combining simpler concepts such as corners and contours which are in turn defined in terms of edges. the quintessential example of a deep learning model is the feedforward deep network or multilayer perceptron a multilayer perceptron is just a mathematical function mapping some set of input values to output values. the function is formed by composing many simpler functions. we can think of each application of a different mathematical function as providing a new representation of the input. the idea of learning the right representation for the data provides one perspective on deep learning. another perspective on deep learning is that depth allows the computer to learn a multi-step computer program. each layer of the representation can be thought of as the state of the computer s memory after executing another set of instructions in parallel. networks with greater depth can execute more instructions in sequence. sequential instructions offer great power because later chapter introduction car person animal output identity hidden layer parts hidden layer and contours hidden layer visible layer pixels figure illustration of a deep learning model. it is difficult for a computer to understand the meaning of raw sensory input data such as this image represented as a collection of pixel values. the function mapping from a set of pixels to an object identity is very complicated. learning or evaluating this mapping seems insurmountable if tackled directly. deep learning resolves this difficulty by breaking the desired complicated mapping into a series of nested simple mappings each described by a different layer of the model. the input is presented at the visible layer so named because it contains the variables that we are able to observe. then a series of hidden layers extracts increasingly abstract features from the image. these layers are called hidden because their values are not given in the data instead the model must determine which concepts are useful for explaining the relationships in the observed data. the images here are visualizations of the kind of feature represented by each hidden unit. given the pixels the first layer can easily identify edges by comparing the brightness of neighboring pixels. given the first hidden layer s description of the edges the second hidden layer can easily search for corners and extended contours which are recognizable as collections of edges. given the second hidden layer s description of the image in terms of corners and contours the third hidden layer can detect entire parts of specific objects by finding specific collections of contours and corners. finally this description of the image in terms of the object parts it contains can be used to recognize the objects present in the image. images reproduced with permission from zeiler and fergus chapter introduction element set logistic logistic regression regression element set ww xx figure illustration of computational graphs mapping an input to an output where each node performs an operation. depth is the length of the longest path from input to output but depends on the definition of what constitutes a possible computational step. the computation depicted in these graphs is the output of a logistic regression model x where is the logistic sigmoid function. if we use addition multiplication and logistic sigmoids as the elements of our computer language then this model has depth three. if we view logistic regression as an element itself then this model has depth one. instructions can refer back to the results of earlier instructions. according to this view of deep learning not all of the information in a layer s activations necessarily encodes factors of variation that explain the input. the representation also stores state information that helps to execute a program that can make sense of the input. this state information could be analogous to a counter or pointer in a traditional computer program. it has nothing to do with the content of the input specifically but it helps the model to organize its processing. there are two main ways of measuring the depth of a model. the first view is based on the number of sequential instructions that must be executed to evaluate the architecture. we can think of this as the length of the longest path through a flow chart that describes how to compute each of the model s outputs given its inputs. just as two equivalent computer programs will have different lengths depending on which language the program is written in the same function may be drawn as a flowchart with different depths depending on which functions we allow to be used as individual steps in the flowchart. figure illustrates how this choice of language can give two different measurements for the same architecture. another approach used by deep probabilistic models regards the depth of a model as being not the depth of the computational graph but the depth of the graph describing how concepts are related to each other. in this case the depth chapter introduction of the flowchart of the computations needed to compute the representation of each concept may be much deeper than the graph of the concepts themselves. this is because the system s understanding of the simpler concepts can be refined given information about the more complex concepts. for example an ai system observing an image of a face with one eye in shadow may initially only see one eye. after detecting that a face is present it can then infer that a second eye is probably present as well. in this case the graph of concepts only includes two layers a layer for eyes and a layer for faces but the graph of computations includes layers if we refine our estimate of each concept given the other times. n because it is not always clear which of these two views the depth of the computational graph or the depth of the probabilistic modeling graph is most relevant and because different people choose different sets of smallest elements from which to construct their graphs there is no single correct value for the depth of an architecture just as there is no single correct value for the length of a computer program. nor is there a consensus about how much depth a model requires to qualify as deep. however deep learning can safely be regarded as the study of models that either involve a greater amount of composition of learned functions or learned concepts than traditional machine learning does. to summarize deep learning the subject of this book is an approach to ai. specifically it is a type of machine learning a technique that allows computer systems to improve with experience and data. according to the authors of this book machine learning is the only viable approach to building ai systems that can operate in complicated real-world environments. deep learning is a particular kind of machine learning that achieves great power and flexibility by learning to represent the world as a nested hierarchy of concepts with each concept defined in relation to simpler concepts and more abstract representations computed in terms of less abstract ones. figure illustrates the relationship between these different ai disciplines. figure gives a high-level schematic of how each works. who should read this book? this book can be useful for a variety of readers but we wrote it with two main target audiences in mind. one of these target audiences is university students or graduate learning about machine learning including those who are beginning a career in deep learning and artificial intelligence research. the other target audience is software engineers who do not have a machine learning or statistics background but want to rapidly acquire one and begin using deep learning in their product or platform. deep learning has already proven useful in chapter introduction deep learning example mlps example shallow autoencoders example logistic regression example knowledge bases representation learning machine learning ai figure a venn diagram showing how deep learning is a kind of representation learning which is in turn a kind of machine learning which is used for many but not all approaches to ai. each section of the venn diagram includes an example of an ai technology. chapter introduction output output output mapping from features output mapping from mapping from layers of more additional features features abstract features hand designed program hand designed features features simple features input input input input rule-based systems classic machine learning deep learning representation learning figure flowcharts showing how the different parts of an ai system relate to each other within different ai disciplines. shaded boxes indicate components that are able to learn from data. chapter introduction many software disciplines including computer vision speech and audio processing natural language processing robotics bioinformatics and chemistry video games search engines online advertising and finance. this book has been organized into three parts in order to best accommodate a introduces basic mathematical tools and machine learning describes the most established deep learning algorithms that are describes more speculative ideas that are variety of readers. part concepts. part essentially solved technologies. part widely believed to be important for future research in deep learning. iii ii i readers should feel free to skip parts that are not relevant given their interests or background. readers familiar with linear algebra probability and fundamental machine learning concepts can skip part for example while readers who just want to implement a working system need not read beyond part to help choose which provides a flowchart showing the high-level organization chapters to read figure of the book. ii i we do assume that all readers come from a computer science background. we assume familiarity with programming a basic understanding of computational performance issues complexity theory introductory level calculus and some of the terminology of graph theory. historical trends in deep learning it is easiest to understand deep learning with some historical context. rather than providing a detailed history of deep learning we identify a few key trends deep learning has had a long and rich history but has gone by many names reflecting different philosophical viewpoints and has waxed and waned in popularity. deep learning has become more useful as the amount of available training data has increased. deep learning models have grown in size over time as computer infrastructure hardware and software for deep learning has improved. deep learning has solved increasingly complicated applications with increasing accuracy over time. chapter introduction introduction part i applied math and machine learning basics linear algebra probability and information theory numerical computation machine learning basics part ii deep networks modern practices deep feedforward networks regularization optimization cnns rnns practical methodology applications part iii deep learning research linear factor models autoencoders representation learning structured probabilistic models inference monte carlo methods partition function deep generative models figure the high-level organization of the book. an arrow from one chapter to another indicates that the former chapter is prerequisite material for understanding the latter. chapter introduction the many names and changing fortunes of neural net works we expect that many readers of this book have heard of deep learning as an exciting new technology and are surprised to see a mention of history in a book about an emerging field. in fact deep learning dates back to the deep learning only appears to be new because it was relatively unpopular for several years preceding its current popularity and because it has gone through many different names and has only recently become called deep learning. the field has been rebranded many times reflecting the influence of different researchers and different perspectives. a comprehensive history of deep learning is beyond the scope of this textbook. however some basic context is useful for understanding deep learning. broadly speaking there have been three waves of development of deep learning deep learning known as cybernetics in the deep learning known as connectionism in the and the current resurgence under the name deep learning beginning in this is quantitatively illustrated in figure some of the earliest learning algorithms we recognize today were intended to be computational models of biological learning i.e. models of how learning happens or could happen in the brain. as a result one of the names that deep learning has gone by is artificial neural networks the corresponding perspective on deep learning models is that they are engineered systems inspired by the biological brain the human brain or the brain of another animal. while the kinds of neural networks used for machine learning have sometimes been used to understand brain function they are generally not designed to be realistic models of biological function. the neural perspective on deep learning is motivated by two main ideas. one idea is that the brain provides a proof by example that intelligent behavior is possible and a conceptually straightforward path to building intelligence is to reverse engineer the computational principles behind the brain and duplicate its functionality. another perspective is that it would be deeply interesting to understand the brain and the principles that underlie human intelligence so machine learning models that shed light on these basic scientific questions are useful apart from their ability to solve engineering applications. hinton and shallice the modern term deep learning goes beyond the neuroscientific perspective on the current breed of machine learning models. it appeals to a more general principle of learning multiple levels of composition which can be applied in machine learning frameworks that are not necessarily neurally inspired. chapter introduction e s a r h p r o d r o w f o y c n e u q e r f cybernetics neural networks year mcculloch and pitts hebb figure the figure shows two of the three historical waves of artificial neural nets research as measured by the frequency of the phrases cybernetics and connectionism or neural networks according to google books third wave is too recent to appear. the first wave started with cybernetics in the with the development of theories of biological learning and implementations of the first models such as the perceptron allowing the training of a single neuron. the second wave started with the connectionist approach of the period with back-propagation to train a neural network with one or two hidden layers. the current and third wave deep learning started around and is just now appearing in book et al. form as of the other two waves similarly appeared in book form much later than the corresponding scientific activity occurred. ranzato rumelhart et al. et al. bengio et al. chapter introduction the earliest predecessors of modern deep learning were simple linear models motivated from a neuroscientific perspective. these models were designed to take a set of n input values xn and associate them with an output y. these models would learn a set of weights wn and compute their output fx w xnwn. this first wave of neural networks research was known as cybernetics as illustrated in figure mcculloch and pitts the mcculloch-pitts neuron was an early model of brain function. this linear model could recognize two different categories of inputs by testing whether f w is positive or negative. of course for the model to correspond to the desired definition of the categories the weights needed to be set correctly. these weights could be set by the human operator. in the the perceptron became the first model that could learn the weights defining the categories given examples of inputs from each category. the adaptive linear element which dates from about the same time simply returned the value of f itself to predict a real number and hoff and could also learn to predict these numbers from data. these simple learning algorithms greatly affected the modern landscape of machine learning. the training algorithm used to adapt the weights of the adaline was a special case of an algorithm called stochastic gradient descent. slightly modified versions of the stochastic gradient descent algorithm remain the dominant training algorithms for deep learning models today. models based on the fx w used by the perceptron and adaline are called linear models. these models remain some of the most widely used machine learning models though in many cases they are trained in different ways than the original models were trained. linear models have many limitations. most famously they cannot learn the xor function where f w and w but w and f w critics who observed these flaws in linear models caused a backlash against biologically inspired learning in general and papert this was the first major dip in the popularity of neural networks. today neuroscience is regarded as an important source of inspiration for deep learning researchers but it is no longer the predominant guide for the field. the main reason for the diminished role of neuroscience in deep learning research today is that we simply do not have enough information about the brain to use it as a guide. to obtain a deep understanding of the actual algorithms used by the brain we would need to be able to monitor the activity of the very least thousands of interconnected neurons simultaneously. because we are not able to do this we are far from understanding even some of the most simple and chapter introduction well-studied parts of the brain olshausen and field neuroscience has given us a reason to hope that a single deep learning algorithm can solve many different tasks. neuroscientists have found that ferrets can learn to see with the auditory processing region of their brain if their brains are rewired to send visual signals to that area melchner this suggests that much of the mammalian brain might use a single algorithm to solve most of the different tasks that the brain solves. before this hypothesis machine learning research was more fragmented with different communities of researchers studying natural language processing vision motion planning and speech recognition. today these application communities are still separate but it is common for deep learning research groups to study many or even all of these application areas simultaneously. et al. lecun et al. we are able to draw some rough guidelines from neuroscience. the basic idea of having many computational units that become intelligent only via their interactions with each other is inspired by the brain. the neocognitron introduced a powerful model architecture for processing images that was inspired by the structure of the mammalian visual system and later became the basis for the modern convolutional network as we will see in most neural networks today are based on a model neuron called section the rectified linear unit. the original cognitron introduced a more complicated version that was highly inspired by our knowledge of brain function. the simplified modern version was developed incorporating ideas from many viewpoints with citing neuroscience as an influence and citing more engineeringoriented influences. while neuroscience is an important source of inspiration it need not be taken as a rigid guide. we know that actual neurons compute very different functions than modern rectified linear units but greater neural realism has not yet led to an improvement in machine learning performance. also while neuroscience has successfully inspired several neural network architectures we do not yet know enough about biological learning for neuroscience to offer much guidance for the learning algorithms we use to train these architectures. nair and hinton jarrett et al. glorot et al. and media accounts often emphasize the similarity of deep learning to the brain. while it is true that deep learning researchers are more likely to cite the brain as an influence than researchers working in other machine learning fields such as kernel machines or bayesian statistics one should not view deep learning as an attempt to simulate the brain. modern deep learning draws inspiration from many fields especially applied math fundamentals like linear algebra probability information theory and numerical optimization. while some deep learning researchers cite neuroscience as an important source of inspiration others are not concerned with chapter introduction neuroscience at all. it is worth noting that the effort to understand how the brain works on an algorithmic level is alive and well. this endeavor is primarily known as computational neuroscience and is a separate field of study from deep learning. it is common for researchers to move back and forth between both fields. the field of deep learning is primarily concerned with how to build computer systems that are able to successfully solve tasks requiring intelligence while the field of computational neuroscience is primarily concerned with building more accurate models of how the brain actually works. rumelhart et al. mcclelland et al. in the the second wave of neural network research emerged in great part via a movement called connectionism or parallel distributed processing connectionism arose in the context of cognitive science. cognitive science is an interdisciplinary approach to understanding the mind combining multiple different levels of analysis. during the early most cognitive scientists studied models of symbolic reasoning. despite their popularity symbolic models were difficult to explain in terms of how the brain could actually implement them using neurons. the connectionists began to study models of cognition that could actually be grounded in neural implementations and minton reviving many ideas dating back to the work of psychologist donald hebb in the hebb the central idea in connectionism is that a large number of simple computational units can achieve intelligent behavior when networked together. this insight applies equally to neurons in biological nervous systems and to hidden units in computational models. several key concepts arose during the connectionism movement of the that remain central to today s deep learning. one of these concepts is that of distributed representation et al. this is the idea that each input to a system should be represented by many features and each feature should be involved in the representation of many possible inputs. for example suppose we have a vision system that can recognize cars trucks and birds and these objects can each be red green or blue. one way of representing these inputs would be to have a separate neuron or hidden unit that activates for each of the nine possible combinations red truck red car red bird green truck and so on. this requires nine different neurons and each neuron must independently learn the concept of color and object identity. one way to improve on this situation is to use a distributed representation with three neurons describing the color and three neurons describing the object identity. this requires only six neurons total instead of nine and the neuron describing redness is able to chapter introduction learn about redness from images of cars trucks and birds not only from images of one specific category of objects. the concept of distributed representation is central to this book and will be described in greater detail in chapter another major accomplishment of the connectionist movement was the successful use of back-propagation to train deep neural networks with internal representations and the popularization of the back-propagation algorithm et al. this algorithm has waxed and waned in popularity but as of this writing is currently the dominant approach to training deep models. lecun hochreiter during the researchers made important advances in modeling sequences identified some of with neural networks. the fundamental mathematical difficulties in modeling long sequences described in section introduced the long short-term memory or lstm network to resolve some of these difficulties. today the lstm is widely used for many sequence modeling tasks including many natural language processing tasks at google. hochreiter and schmidhuber bengio et al. and the second wave of neural networks research lasted until the ventures based on neural networks and other ai technologies began to make unrealistically ambitious claims while seeking investments. when ai research did not fulfill these unreasonable expectations investors were disappointed. simultaneously other fields of machine learning made advances. kernel machines boser et al. cortes and vapnik sch lkopf jor both achieved good results on many important tasks. these two factors dan led to a decline in the popularity of neural networks that lasted until and graphical models et al. lecun et al. bengio et al. during this time neural networks continued to obtain impressive performance the canadian institute on some tasks for advanced research helped to keep neural networks research alive via its neural computation and adaptive perception research initiative. this program united machine learning research groups led by geoffrey hinton at university of toronto yoshua bengio at university of montreal and yann lecun at new york university. the cifar ncap research initiative had a multi-disciplinary nature that also included neuroscientists and experts in human and computer vision. at this point in time deep networks were generally believed to be very difficult to train. we now know that algorithms that have existed since the work quite well but this was not apparent circa the issue is perhaps simply that these algorithms were too computationally costly to allow much experimentation with the hardware available at the time. the third wave of neural networks research began with a breakthrough in chapter introduction et al. hinton et al. which will be described in more detail in section geoffrey hinton showed that a kind of neural network called a deep belief network could be efficiently trained using a strategy called greedy layer-wise pretraining the other cifar-affiliated research groups quickly showed that the same strategy could be used to train many other kinds of deep networks bengio et al. ranzato and systematically helped to improve generalization on test examples. this wave of neural networks research popularized the use of the term deep learning to emphasize that researchers were now able to train deeper neural networks than had been possible before and to focus attention on the theoretical importance of depth bengio and lecun delalleau and bengio pascanu at this time deep neural networks outperformed competing ai systems based on other machine learning technologies as well as hand-designed functionality. this third wave of popularity of neural networks continues to the time of this writing though the focus of deep learning research has changed dramatically within the time of this wave. the third wave began with a focus on new unsupervised learning techniques and the ability of deep models to generalize well from small datasets but today there is more interest in much older supervised learning algorithms and the ability of deep models to leverage large labeled datasets. et al. montufar et al. increasing dataset sizes one may wonder why deep learning has only recently become recognized as a crucial technology though the first experiments with artificial neural networks were conducted in the deep learning has been successfully used in commercial applications since the but was often regarded as being more of an art than a technology and something that only an expert could use until recently. it is true that some skill is required to get good performance from a deep learning algorithm. fortunately the amount of skill required reduces as the amount of training data increases. the learning algorithms reaching human performance on complex tasks today are nearly identical to the learning algorithms that struggled to solve toy problems in the though the models we train with these algorithms have undergone changes that simplify the training of very deep architectures. the most important new development is that today we can provide these algorithms with the resources they need to succeed. figure shows how the size of benchmark datasets has increased remarkably over time. this trend is driven by the increasing digitization of society. as more and more of our activities take place on computers more and more of what we do is recorded. as our computers are increasingly networked together it becomes easier to centralize these records and curate them chapter introduction into a dataset appropriate for machine learning applications. the age of big data has made machine learning much easier because the key burden of statistical estimation generalizing well to new data after observing only a small amount of data has been considerably lightened. as of a rough rule of thumb is that a supervised deep learning algorithm will generally achieve acceptable performance with around labeled examples per category and will match or exceed human performance when trained with a dataset containing at least million labeled examples. working successfully with datasets smaller than this is an important research area focusing in particular on how we can take advantage of large quantities of unlabeled examples with unsupervised or semi-supervised learning. increasing model sizes another key reason that neural networks are wildly successful today after enjoying comparatively little success since the is that we have the computational resources to run much larger models today. one of the main insights of connectionism is that animals become intelligent when many of their neurons work together. an individual neuron or small collection of neurons is not particularly useful. biological neurons are not especially densely connected. as seen in figure our machine learning models have had a number of connections per neuron that was within an order of magnitude of even mammalian brains for decades. in terms of the total number of neurons neural networks have been astonishingly small until quite recently as shown in figure since the introduction of hidden units artificial neural networks have doubled in size roughly every years. this growth is driven by faster computers with larger memory and by the availability of larger datasets. larger networks are able to achieve higher accuracy on more complex tasks. this trend looks set to continue for decades. unless new technologies allow faster scaling artificial neural networks will not have the same number of neurons as the human brain until at least the biological neurons may represent more complicated functions than current artificial neurons so biological neural networks may be even larger than this plot portrays. in retrospect it is not particularly surprising that neural networks with fewer neurons than a leech were unable to solve sophisticated artificial intelligence problems. even today s networks which we consider quite large from a computational systems point of view are smaller than the nervous system of even relatively primitive vertebrate animals like frogs. the increase in model size over time due to the availability of faster cpus chapter introduction s e l p m a x e r e b m u n e z i s t e s a t a d canadian hansard wmt public svhn criminals imagenet ilsvrc mnist t vs. g vs. f rotated t vs. c iris year et al. figure dataset sizes have increased greatly over time. in the early statisticians studied datasets using hundreds or thousands of manually compiled measurements garson in the through the pioneers gosset anderson fisher of biologically inspired machine learning often worked with small synthetic datasets such as low-resolution bitmaps of letters that were designed to incur low computational cost and demonstrate that neural networks were able to learn specific kinds of functions and hoff rumelhart in the and machine learning became more statistical in nature and began to leverage larger datasets containing tens of thousands of examples such as the mnist dataset in figure of scans of handwritten numbers in the first decade of the more sophisticated datasets of this same size such as the dataset and hinton continued to be produced. toward the end of that decade and throughout the first half of the significantly larger datasets containing hundreds of thousands to tens of millions of examples completely changed what was possible with deep learning. these datasets included the public street view house numbers dataset netzer et al. various versions of the imagenet dataset deng et al. russakovsky at the top of the et al. graph we see that datasets of translated sentences such as ibm s dataset constructed from the canadian hansard and the wmt english to french dataset are typically far ahead of other dataset sizes. and the dataset lecun et al. brown et al. et al. karpathy chapter introduction figure example inputs from the mnist dataset. the nist stands for national institute of standards and technology the agency that originally collected this data. the m stands for modified since the data has been preprocessed for easier use with machine learning algorithms. the mnist dataset consists of scans of handwritten digits and associated labels describing which digit is contained in each image. this simple classification problem is one of the simplest and most widely used tests in deep learning research. it remains popular despite being quite easy for modern techniques to solve. geoffrey hinton has described it as the drosophila of machine learning meaning that it allows machine learning researchers to study their algorithms in controlled laboratory conditions much as biologists often study fruit flies. chapter introduction faster network the advent of general purpose gpus in section connectivity and better software infrastructure for distributed computing is one of the most important trends in the history of deep learning. this trend is generally expected to continue well into the future. increasing accuracy complexity and real-world impact since the deep learning has consistently improved in its ability to provide accurate recognition or prediction. moreover deep learning has consistently been applied with success to broader and broader sets of applications. rumelhart et al. the earliest deep models were used to recognize individual objects in tightly cropped extremely small images since then there has been a gradual increase in the size of images neural networks could process. modern object recognition networks process rich high-resolution photographs and do not have a requirement that the photo be cropped near the object to be recognized krizhevsky et al. similarly the earliest networks could only recognize two kinds of objects in some cases the absence or presence of a single kind of object while these modern networks typically recognize at least different categories of objects. the largest contest in object recognition is the imagenet large scale visual recognition challenge held each year. a dramatic moment in the meteoric rise of deep learning came when a convolutional network won this challenge for the first time and by a wide margin bringing down the state-of-the-art error rate from to krizhevsky et al. meaning that the convolutional network produces a ranked list of possible categories for each image and the correct category appeared in the first five entries of this list for all but of the test examples. since then these competitions are consistently won by deep convolutional nets and as of this writing advances in deep learning have brought the latest error rate in this contest down to as shown in figure deep learning has also had a dramatic impact on speech recognition. after improving throughout the the error rates for speech recognition stagnated starting in about the introduction of deep learning dahl et al. deng et al. to speech recognition resulted in a sudden drop of error rates with some error rates cut in half. we will explore this history in more detail in section hinton seide et al. et al. deep networks have also had spectacular successes for pedestrian detection and image segmentation et al. and yielded superhuman performance in traffic sign classification sermanet et al. farabet couprie et al. chapter introduction n o r u e n r e p s n o i t c e n n o c human cat mouse fruit fly year figure initially the number of connections between neurons in artificial neural networks was limited by hardware capabilities. today the number of connections between neurons is mostly a design consideration. some artificial neural networks have nearly as many connections per neuron as a cat and it is quite common for other neural networks to have as many connections per neuron as smaller mammals like mice. even the human brain does not have an exorbitant amount of connections per neuron. biological neural network sizes from wikipedia adaptive linear element widrow and hoff neocognitron gpu-accelerated convolutional network chellapilla et al. deep boltzmann machine and hinton unsupervised convolutional network jarrett et al. gpu-accelerated multilayer perceptron ciresan et al. distributed autoencoder le et al. multi-gpu convolutional network krizhevsky et al. cots hpc unsupervised convolutional network coates et al. googlenet szegedy et al. chapter introduction et al. at the same time that the scale and accuracy of deep networks has increased so has the complexity of the tasks that they can solve. goodfellow et al. showed that neural networks could learn to output an entire sequence of characters transcribed from an image rather than just identifying a single object. previously it was widely believed that this kind of learning required labeling of the individual elements of the sequence recurrent neural networks such as the lstm sequence model mentioned above are now used to model relationships between sequences rather than just fixed inputs. this sequence-to-sequence learning seems to be on the cusp of revolutionizing another application machine translation et al. g l ehre and bengio bahdanau and other sequences et al. this trend of increasing complexity has been pushed to its logical conclusion with the introduction of neural turing machines that learn to read from memory cells and write arbitrary content to memory cells. such neural networks can learn simple programs from examples of desired behavior. for example they can learn to sort lists of numbers given examples of scrambled and sorted sequences. this self-programming technology is in its infancy but in the future could in principle be applied to nearly any task. et al. another crowning achievement of deep learning is its extension to the domain of reinforcement learning. in the context of reinforcement learning an autonomous agent must learn to perform a task by trial and error without any guidance from the human operator. deepmind demonstrated that a reinforcement learning system based on deep learning is capable of learning to play atari video games reaching human-level performance on many tasks deep learning has also significantly improved the performance of reinforcement learning for robotics finn et al. mnih et al. many of these applications of deep learning are highly profitable. deep learning is now used by many top technology companies including google microsoft facebook ibm baidu apple adobe netflix nvidia and nec. advances in deep learning have also depended heavily on advances in software bergstra et al. bastien and have all supported important research projects or infrastructure. software libraries such as theano et al. distbelief tensorflow commercial products. collobert et al. chen et al. dean et al. torch mxnet abadi et al. et al. goodfellow caffe jia deep learning has also made contributions back to other sciences. modern convolutional networks for object recognition provide a model of visual processing chapter introduction dicarlo deep learning also provides useful that neuroscientists can study tools for processing massive amounts of data and making useful predictions in scientific fields. it has been successfully used to predict how molecules will interact in order to help pharmaceutical companies design new drugs to search for subatomic particles and to automatically parse microscope images used to construct a map of the human brain we expect deep learning to appear in more and more scientific fields in the future. baldi et al. dahl et al. et al. in summary deep learning is an approach to machine learning that has drawn heavily on our knowledge of the human brain statistics and applied math as it developed over the past several decades. in recent years it has seen tremendous growth in its popularity and usefulness due in large part to more powerful computers larger datasets and techniques to train deeper networks. the years ahead are full of challenges and opportunities to improve deep learning even further and bring it to new frontiers. chapter introduction e l a c s c i m h t i r a g o l s n o r u e n f o r e b m u n year human octopus frog bee ant leech roundworm sponge figure since the introduction of hidden units artificial neural networks have doubled in size roughly every years. biological neural network sizes from wikipedia perceptron rosenblatt adaptive linear element widrow and hoff neocognitron early back-propagation network rumelhart et al. recurrent neural network for speech recognition and fallside multilayer perceptron for speech recognition mean field sigmoid belief network saul et al. bengio et al. lecun et al. echo state network jaeger and haas deep belief network hinton et al. gpu-accelerated convolutional network chellapilla et al. deep boltzmann machine and hinton gpu-accelerated deep belief network unsupervised convolutional network raina et al. jarrett et al. gpu-accelerated multilayer perceptron ciresan et al. network coates and ng distributed autoencoder le et al. multi-gpu convolutional network krizhevsky et al. cots hpc unsupervised convolutional network coates et al. googlenet szegedy et al. chapter introduction e t a r r o r r e n o i t a c fi i s s a l c c r v s l i year figure since deep networks reached the scale necessary to compete in the imagenet large scale visual recognition challenge they have consistently won the competition every year and yielded lower and lower error rates each time. data from russakovsky et al. and he et al. part i applied math and machine learning basics this part of the book introduces the basic mathematical concepts needed to understand deep learning. we begin with general ideas from applied math that allow us to define functions of many variables find the highest and lowest points on these functions and quantify degrees of belief. next we describe the fundamental goals of machine learning. we describe how to accomplish these goals by specifying a model that represents certain beliefs designing a cost function that measures how well those beliefs correspond with reality and using a training algorithm to minimize that cost function. this elementary framework is the basis for a broad variety of machine learning algorithms including approaches to machine learning that are not deep. in the subsequent parts of the book we develop deep learning algorithms within this framework. chapter linear algebra linear algebra is a branch of mathematics that is widely used throughout science and engineering. however because linear algebra is a form of continuous rather than discrete mathematics many computer scientists have little experience with it. a good understanding of linear algebra is essential for understanding and working with many machine learning algorithms especially deep learning algorithms. we therefore precede our introduction to deep learning with a focused presentation of the key linear algebra prerequisites. if you are already familiar with linear algebra feel free to skip this chapter. if you have previous experience with these concepts but need a detailed reference sheet to review key formulas we recommend the matrix cookbook and pedersen if you have no exposure at all to linear algebra this chapter will teach you enough to read this book but we highly recommend that you also consult another resource focused exclusively on teaching linear algebra such as shilov this chapter will completely omit many important linear algebra topics that are not essential for understanding deep learning. scalars vectors matrices and tensors the study of linear algebra involves several types of mathematical objects scalars a scalar is just a single number in contrast to most of the other objects studied in linear algebra which are usually arrays of multiple numbers. we write scalars in italics. we usually give scalars lower-case variable names. when we introduce them we specify what kind of number they are. for chapter linear algebra example we might say let s real-valued scalar or let n natural number scalar. r be the slope of the line while defining a n be the number of units while defining a vectors a vector is an array of numbers. the numbers are arranged in order. we can identify each individual number by its index in that ordering. typically we give vectors lower case names written in bold typeface such as x. the elements of the vector are identified by writing its name in italic typeface with a subscript. the first element of x is the second element is and so on. we also need to say what kind of numbers are stored in the vector. if each element is in r and the vector has n elements then the vector lies in the set formed by taking the cartesian product of r n times n. when we need to explicitly identify the elements of a vector denoted as r we write them as a column enclosed in square brackets x xn we can think of vectors as identifying points in space with each element giving the coordinate along a different axis. sometimes we need to index a set of elements of a vector. in this case we define a set containing the indices and write the set as a subscript. for example to access and we define the set s and write xs. we use the is the vector containing all elements of x except for and x s is the vector containing all of the elements of and sign to index the complement of a set. for example x except for x matrices a matrix is a array of numbers so each element is identified by two indices instead of just one. we usually give matrices upper-case variable names with bold typeface such as a. if a real-valued matrix a has a height of m and a width of n then we say that a we usually identify the elements of a matrix using its name in italic but not bold font and the indices are listed with separating commas. for example is the upper left entry of a and amn is the bottom right entry. we can identify all of the numbers with vertical coordinate i by writing a for the horizontal coordinate. for example ai denotes the horizontal cross section of a with vertical coordinate i. this is known as the i-th row of a. likewise ai is m n r chapter linear algebra a a figure the transpose of the matrix can be thought of as a mirror image across the main diagonal. i column a the a matrix we write them as an array enclosed in square brackets when we need to explicitly identify the elements of of a a sometimes we may need to index matrix-valued expressions that are not just a single letter. in this case we use subscripts after the expression but do not convert anything to lower case. for example f gives element j of the matrix computed by applying the function f a to tensors in some cases we will need an array with more than two axes. in the general case an array of numbers arranged on a regular grid with a variable number of axes is known as a tensor. we denote a tensor named a with this typeface a. we identify the element of a at coordinates j k by writing aijk. one important operation on matrices is the transpose. the transpose of a matrix is the mirror image of the matrix across a diagonal line called the main diagonal running down and to the right starting from its upper left corner. see figure for a graphical depiction of this operation. we denote the transpose of a matrix and it is defined such that asa a aji. vectors can be thought of as matrices that contain only one column. the transpose of a vector is therefore a matrix with only one row. sometimes we chapter linear algebra define a vector by writing out its elements in the text inline as a row matrix then using the transpose operator to turn it into a standard column vector e.g. x a scalar can be thought of as a matrix with only a single entry. from this we can see that a scalar is its own transpose a a we can add matrices to each other as long as they have the same shape just by adding their corresponding elements c a b where cij aij b ij. we can also add a scalar to a matrix or multiply a matrix by a scalar just b c where by performing that operation on each element of a matrix d a dij a b ij c. in the context of deep learning we also use some less conventional notation. we allow the addition of matrix and a vector yielding another matrix c a b where cij aij bj. in other words the vector b is added to each row of the matrix. this shorthand eliminates the need to define a matrix with b copied into each row before doing the addition. this implicit copying of b to many locations is called broadcasting multiplying matrices and vectors one of the most important operations involving matrices is multiplication of two matrices. the matrix product of matrices a and b is a third matrix c in order for this product to be defined a must have the same number of columns as b has rows. if a is of shape m n p then c is of shape m p we can write the matrix product just by placing two or more matrices together e.g. and b is of shape n c ab the product operation is defined by cij aikbkj. k note that the standard product of two matrices is just a matrix containing the product of the individual elements. such an operation exists and is called the element-wise product hadamard product and is denoted as a b not or the dot product between two vectors x and y of the same dimensionality y. we can think of the matrix product c ab as is the matrix product x computing cij as the dot product between row of and column j b of i a chapter linear algebra matrix product operations have many useful properties that make mathematical analysis of matrices more convenient. for example matrix multiplication is distributive a b c ab ac it is also associative a bc ab c ab ba does not matrix multiplication is always hold unlike scalar multiplication. however the dot product between two vectors is commutative commutative condition not the transpose of a matrix product has a simple form x y y x. b a this allows us to demonstrate equation of such a product is a scalar and therefore equal to its own transpose by exploiting the fact that the value x y y x y x. since the focus of this textbook is not linear algebra we do not attempt to develop a comprehensive list of useful properties of the matrix product here but the reader should be aware that many more exist. we now know enough linear algebra notation to write down a system of linear equations m n ax b r is a known matrix b n is a where a vector of unknown variables we would like to solve for. each element xi of x is one of these unknown variables. each row of a and each element of b provide another constraint. we can rewrite equation m is a known vector and x as r r x x amx bm or even more explicitly as chapter linear algebra figure example identity matrix this is i a a mnxn bm matrix-vector product notation provides a more compact representation for equations of this form. identity and inverse matrices linear algebra offers a powerful tool called matrix inversion that allows us to analytically solve equation for many values of a to describe matrix inversion we first need to define the concept of an identity matrix. an identity matrix is a matrix that does not change any vector when we multiply that vector by that matrix. we denote the identity matrix that preserves n-dimensional vectors as in. formally i n n n and r x r n inx x the structure of the identity matrix is simple all of the entries along the main diagonal are while all of the other entries are zero. see figure for an example. and it is defined as the matrix the matrix inverse of a is denoted as a such that i n. a we can now solve equation by the following steps a ax b a inx a chapter linear algebra x a we discuss of course this process depends on it being possible to find a in the following section. the conditions for the existence of a exists several different algorithms exist for finding it in closed form. when a in theory the same inverse matrix can then be used to solve the equation many is primarily useful as a theoretical times for different values of b. however a tool and should not actually be used in practice for most software applications. can be represented with only limited precision on a digital computer because a algorithms that make use of the value of b can usually obtain more accurate estimates of linear dependence and span to exist equation in order for a must have exactly one solution for every value of b. however it is also possible for the system of equations to have no solutions or infinitely many solutions for some values of b. it is not possible to have more than one but less than infinitely many solutions for a particular b if both are solutions then and x y y is also a solution for any real z x to analyze how many solutions the equation has we can think of the columns of a as specifying different directions we can travel from the origin point specified by the vector of all zeros and determine how many ways there are of reaching b. in this view each element of x specifies how far we should travel in each of these directions with xi specifying how far to move in the direction of column ax xiai. i in general this kind of operation is called a linear combination. formally a linear combination of some set of vectors is given by multiplying each vector v by a corresponding scalar coefficient and adding the results v civ i the span of a set of vectors is the set of all points obtainable by linear combination of the original vectors. chapter linear algebra determining whether ax b has a solution thus amounts to testing whether b is in the span of the columns of a. this particular span is known as the column space range or the of r m. if any point in r m m in order for the system ax b to have a solution for all values of b we therefore require that the column space of a be all of r is excluded from the column space that point is a potential value of b that has no solution. the requirement that the column space of a be all of r m implies immediately that a must have at least m columns i.e. n m otherwise the dimensionality of the column space would be less than m. for example consider a matrix. the target b is but x is only so modifying the value of x the equation has a solution at best allows us to trace out a plane within r if and only if lies on that plane. b having n m is only a necessary condition for every point to have a solution. it is not a sufficient condition because it is possible for some of the columns to matrix where both of the columns are identical. be redundant. consider a this has the same column space as a matrix containing only one copy of the replicated column. in other words the column space is still just a line and fails to encompass all of r even though there are two columns. formally this kind of redundancy is known as linear dependence. a set of vectors is linearly independent if no vector in the set is a linear combination of the other vectors. if we add a vector to a set that is a linear combination of the other vectors in the set the new vector does not add any points to the set s m span. this means that for the column space of the matrix to encompass all of r the matrix must contain at least one set of m linearly independent columns. this condition is both necessary and sufficient for equation to have a solution for every value of b. note that the requirement is for a set to have exactly m linear independent columns not at least m. no set of m-dimensional vectors can have more than m mutually linearly independent columns but a matrix with more than m columns may have more than one such set. in order for the matrix to have an inverse we additionally need to ensure that b. to do so we need to equation ensure that the matrix has at most m columns. otherwise there is more than one way of parametrizing each solution. one solution for each value of at most has together this means that the matrix must be square that is we require that m n and that all of the columns must be linearly independent. a square matrix with linearly dependent columns is known as singular if a is not square or is square but singular it can still be possible to solve the equation. however we can not use the method of matrix inversion to find the chapter linear algebra solution. so far we have discussed matrix inverses as being multiplied on the left. it is also possible to define an inverse that is multiplied on the right i. aa for square matrices the left inverse and right inverse are equal. norms sometimes we need to measure the size of a vector. in machine learning we usually measure the size of vectors using a function called a norm formally the lp norm is given by x p x i p p p r for p i norms including the lp norm are functions mapping vectors to non-negative values. on an intuitive level the norm of a vector x measures the distance from the origin to the point x. more rigorously a norm is any function f that satisfies the following properties x f f x y x f f r f x f triangle inequality the norm with p is known as the euclidean norm. it is simply the euclidean distance from the origin to the point identified by x. the l norm is x with used so frequently in machine learning that it is often denoted simply as omitted. it is also common to measure the size of a vector using the subscript the squared norm which can be calculated simply as x x. the squared norm is more convenient to work with mathematically and computationally than the l norm itself. for example the derivatives of the squared norm with respect to each element of x each depend only on the corresponding element of x while all of the derivatives of the norm depend on the entire vector. in many contexts the squared norm may be undesirable in several machine learning because it increases very slowly near the origin. chapter linear algebra applications it is important to discriminate between elements that are exactly zero and elements that are small but nonzero. in these cases we turn to a function that grows at the same rate in all locations but retains mathematical simplicity the norm. the norm may be simplified to x xi the norm is commonly used in machine learning when the difference between zero and nonzero elements is very important. every time an element of x moves away from by the norm increases by i we sometimes measure the size of the vector by counting its number of nonzero elements. some authors refer to this function as the norm but this is incorrect terminology. the number of non-zero entries in a vector is not a norm because scaling the vector by does not change the number of nonzero entries. the norm is often used as a substitute for the number of nonzero entries. one other norm that commonly arises in machine learning is the l norm also known as the max norm. this norm simplifies to the absolute value of the element with the largest magnitude in the vector x max xi i a f sometimes we may also wish to measure the size of a matrix. in the context of deep learning the most common way to do this is with the otherwise obscure frobenius norm a ij ij which is analogous to the l norm of a vector. the dot product of two vectors can be rewritten in terms of norms. specifically x y x y cos where is the angle between x and y special kinds of matrices and vectors some special kinds of matrices and vectors are particularly useful. diagonal matrices consist mostly of zeros and have non-zero entries only along the main diagonal. formally a matrix d is diagonal if and only if dij for chapter linear algebra all i j we have already seen one example of a diagonal matrix the identity matrix where all of the diagonal entries are we write diagv to denote a square diagonal matrix whose diagonal entries are given by the entries of the vector v. diagonal matrices are of interest in part because multiplying by a diagonal matrix is very computationally efficient. to compute diagvx we only need to scale each element xi by vi. in other words diagvx v x inverting a square diagonal matrix is also efficient. the inverse exists only if every diagonal entry is nonzero and in that case diagv in many cases we may derive some very general machine learning algorithm in terms of arbitrary matrices but obtain a less expensive less descriptive algorithm by restricting some matrices to be diagonal. not all diagonal matrices need be square. it is possible to construct a rectangular diagonal matrix. non-square diagonal matrices do not have inverses but it is still possible to multiply by them cheaply. for a non-square diagonal matrix d the product dx will involve scaling each element of x and either concatenating some zeros to the result if d is taller than it is wide or discarding some of the last elements of the vector if is wider than it is tall. d a symmetric matrix is any matrix that is equal to its own transpose a a symmetric matrices often arise when the entries are generated by some function of two arguments that does not depend on the order of the arguments. for example if a is a matrix of distance measurements with aij giving the distance from point i to point aij aji because distance functions are symmetric. then j a unit vector is a vector with unit norm x a vector x and a vector y are orthogonal to each other if x y if both vectors have nonzero norm this means that they are at a degree angle to each n at most n vectors may be mutually orthogonal with nonzero norm. other. in r if the vectors are not only orthogonal but also have unit norm we call them orthonormal. an orthogonal matrix is a square matrix whose rows are mutually orthonor mal and whose columns are mutually orthonormal a aa a i. chapter linear algebra this implies that a a so orthogonal matrices are of interest because their inverse is very cheap to compute. pay careful attention to the definition of orthogonal matrices. counterintuitively their rows are not merely orthogonal but fully orthonormal. there is no special term for a matrix whose rows or columns are orthogonal but not orthonormal. eigendecomposition many mathematical objects can be understood better by breaking them into constituent parts or finding some properties of them that are universal not caused by the way we choose to represent them. for example integers can be decomposed into prime factors. the way we will change depending on whether we write it in base ten from this representation is not divisible by or that any represent the number or in binary but it will always be true that we can conclude useful properties such as that integer multiple of will be divisible by much as we can discover something about the true nature of an integer by decomposing it into prime factors we can also decompose matrices in ways that show us information about their functional properties that is not obvious from the representation of the matrix as an array of elements. one of the most widely used kinds of matrix decomposition is called eigendecomposition in which we decompose a matrix into a set of eigenvectors and eigenvalues. an eigenvector of a square matrix a is a non-zero vector v such that multi plication by a alters only the scale of v av v the scalar is known as the eigenvalue corresponding to this eigenvector. can also find a left eigenvector such that v but we are usually concerned with right eigenvectors. a v if v is an eigenvector of a then so is any rescaled vector sv for s moreover sv still has the same eigenvalue. for this reason we usually only look for unit eigenvectors. s r suppose that a matrix a has n linearly independent eigenvectors v with corresponding eigenvalues we may concatenate all of the n chapter linear algebra figure an example of the effect of eigenvectors and eigenvalues. here we have a matrix a with two orthonormal eigenvectors with eigenvalue and v with eigenvalue plot the set of all unit vectors u as a unit circle. plot the set of all points au. by observing the way that a distorts the unit circle we can see that it scales space in direction v by i. r eigenvectors to form a matrix v with one eigenvector per column v v likewise we can concatenate the eigenvalues to form a vector n the eigendecomposition a is then given by of a v diag v we have seen that constructing matrices with specific eigenvalues and eigenvectors allows us to stretch space in desired directions. however we often want to decompose matrices into their eigenvalues and eigenvectors. doing so can help us to analyze certain properties of the matrix much as decomposing an integer into its prime factors can help us understand the behavior of that integer. not every matrix can be decomposed into eigenvalues and eigenvectors. in some chapter linear algebra cases the decomposition exists but may involve complex rather than real numbers. fortunately in this book we usually need to decompose only a specific class of matrices that have a simple decomposition. specifically every real symmetric matrix can be decomposed into an expression using only real-valued eigenvectors and eigenvalues a q q where q is an orthogonal matrix composed of eigenvectors of a and is a diagonal matrix. the eigenvalue ii is associated with the eigenvector in column i of q denoted as qi. because q is an orthogonal matrix we can think of a as scaling space by i in direction v see figure for an example. while any real symmetric matrix a is guaranteed to have an eigendecomposition the eigendecomposition may not be unique. if any two or more eigenvectors share the same eigenvalue then any set of orthogonal vectors lying in their span are also eigenvectors with that eigenvalue and we could equivalently choose a q using those eigenvectors instead. by convention we usually sort the entries of in descending order. under this convention the eigendecomposition is unique only if all of the eigenvalues are unique. the eigendecomposition of a matrix tells us many useful facts about the matrix. the matrix is singular if and only if any of the eigenvalues are zero. the eigendecomposition of a real symmetric matrix can also be used to optimize quadratic expressions of the form fx x x whenever x is equal to an eigenvector of a f takes on the value of the corresponding eigenvalue. the maximum value of f within the constraint region is the maximum eigenvalue and its minimum value within the constraint region is the minimum eigenvalue. ax subject to a matrix whose eigenvalues are all positive is called positive definite. a matrix whose eigenvalues are all positive or zero-valued is called positive semidefinite. likewise if all eigenvalues are negative the matrix is negative definite and if all eigenvalues are negative or zero-valued it is negative semidefinite. positive semidefinite matrices are interesting because they guarantee that positive definite matrices additionally guarantee that x x x ax ax x singular value decomposition in section we saw how to decompose a matrix into eigenvectors and eigenvalues. the singular value decomposition provides another way to factorize a matrix into singular vectors and singular values. the svd allows us to discover some of the same kind of information as the eigendecomposition. however chapter linear algebra the svd is more generally applicable. every real matrix has a singular value decomposition but the same is not true of the eigenvalue decomposition. for example if a matrix is not square the eigendecomposition is not defined and we must use a singular value decomposition instead. recall that the eigendecomposition involves analyzing a matrix a to discover a matrix v of eigenvectors and a vector of eigenvalues such that we can rewrite a as a v diag v the singular value decomposition is similar except this time we will write a as a product of three matrices a u dv suppose that a is an m n to be an matrix and m n d matrix. then u is defined to be an m m v to be an matrix. n n matrix each of these matrices is defined to have a special structure. the matrices u and v are both defined to be orthogonal matrices. the matrix d is defined to be a diagonal matrix. note that is not necessarily square. d the elements along the diagonal of d are known as the singular values of the matrix a. the columns of u are known as the left-singular vectors. the columns of right-singular vectors. are known as as the v we can actually interpret the singular value decomposition of a in terms of the eigendecomposition of functions of a the left-singular vectors of a are the a. the right-singular vectors of a are the eigenvectors of a eigenvectors of aa the non-zero singular values of a are the square roots of the eigenvalues of a a. the same is true for aa perhaps the most useful feature of the svd is that we can use it to partially generalize matrix inversion to non-square matrices as we will see in the next section. the moore-penrose pseudoinverse matrix inversion is not defined for matrices that are not square. suppose we want to make a left-inverse so that we can solve a linear equation of a matrix a b ax y chapter linear algebra by left-multiplying each side to obtain x by depending on the structure of the problem it may not be possible to design a unique mapping from to a b if a is taller than it is wide then it is possible for this equation to have no solution. if a is wider than it is tall then there could be multiple possible solutions. the moore-penrose pseudoinverse allows us to make some headway in these cases. the pseudoinverse of a is defined as a matrix a lim a i practical algorithms for computing the pseudoinverse are not based on this definition but rather the formula a v d where u d and v are the singular value decomposition of a and the pseudoinverse d of a diagonal matrix d is obtained by taking the reciprocal of its non-zero elements then taking the transpose of the resulting matrix. when a has more columns than rows then solving a linear equation using the pseudoinverse provides one of the many possible solutions. specifically it provides the solution x a y with minimal euclidean norm x among all possible solutions. when a has more rows than columns it is possible for there to be no solution. in this case using the pseudoinverse gives us the x for which ax is as close as possible to in terms of euclidean norm ax y y the trace operator the trace operator gives the sum of all of the diagonal entries of a matrix tr aii. i the trace operator is useful for a variety of reasons. some operations that are difficult to specify without resorting to summation notation can be specified using chapter linear algebra matrix products and the trace operator. for example the trace operator provides an alternative way of writing the frobenius norm of a matrix a f traa writing an expression in terms of the trace operator opens up opportunities to manipulate the expression using many useful identities. for example the trace operator is invariant to the transpose operator a tr tr a the trace of a square matrix composed of many factors is also invariant to moving the last factor into the first position if the shapes of the corresponding matrices allow the resulting product to be defined tr abc tr cab tr bca or more generally n n tr f trf f this invariance to cyclic permutation holds even if the resulting product has a different shape. for example for a we have m n n m and b r r even though ab m m r tr ab tr ba n n r and ba another useful fact to keep in mind is that a scalar is its own trace a tra. the determinant the determinant of a square matrix denoted deta is a function mapping matrices to real scalars. the determinant is equal to the product of all the eigenvalues of the matrix. the absolute value of the determinant can be thought of as a measure of how much multiplication by the matrix expands or contracts space. if the determinant is then space is contracted completely along at least one dimension causing it to lose all of its volume. if the determinant is then the transformation preserves volume. chapter linear algebra example principal components analysis one simple machine learning algorithm principal components analysis or pca can be derived using only knowledge of basic linear algebra. suppose we have a collection of m points n. suppose we would like to apply lossy compression to these points. lossy compression means storing the points in a way that requires less memory but may lose some precision. we would like to lose as little precision as possible. in r x one way we can encode these points is to represent a lower-dimensional version l. of them. for each point x if l is smaller than n it will take less memory to store the code points than the original data. we will want to find some encoding function that produces the code for an input fx c and a decoding function that produces the reconstructed input given its code n we will find a corresponding code vector c g f x x r r pca is defined by our choice of the decoding function. specifically to make the decoder very simple we choose to use matrix multiplication to map the code back into r is the matrix defining the decoding. c dc where g n. let n l d r computing the optimal code for this decoder could be a difficult problem. to keep the encoding problem easy pca constrains the columns of d to be orthogonal to each other. that d is still not technically an orthogonal matrix unless l n with the problem as described so far many solutions are possible because we can increase the scale of di if we decrease ci proportionally for all points. to give the problem a unique solution we constrain all of the columns of to have unit norm. d in order to turn this basic idea into an algorithm we can implement the first thing we need to do is figure out how to generate the optimal code point c for each input point x. one way to do this is to minimize the distance between the input point x and its reconstruction gc we can measure this distance using a norm. in the principal components algorithm we use the norm c arg min c x g we can switch to the squared l norm instead of the norm itself because both are minimized by the same value of c. both are minimized by the same value of c because the norm is non-negative and the squaring operation is chapter linear algebra monotonically increasing for non-negative arguments. x g arg min c c the function being minimized simplifies to x x g c g c the definition of the norm equation x x x g g x c g the distributive property x x x g g g the scalar g x is equal to the transpose of itself. we can now change the function being minimized again to omit the first term since this term does not depend on arg min c g g g c to make further progress we must substitute in the definition of c arg min c arg min c dc d c dc dc c il c the orthogonality and unit norm constraints on dc c c arg min c g we can solve this optimization problem using vector calculus section if you do not know how to do this c x dc c c x c c d x. chapter linear algebra this makes the algorithm efficient we can optimally encode x just using a matrix-vector operation. to encode a vector we apply the encoder function f x d x. using a further matrix multiplication we can also define the pca reconstruction operation r x g f x dd x. next we need to choose the encoding matrix d. to do so we revisit the idea of minimizing the l distance between inputs and reconstructions. since we will use the same matrix d to decode all of the points we can no longer consider the points in isolation. instead we must minimize the frobenius norm of the matrix of errors computed over all dimensions and all points d arg min d ij x j rx subject to d d i l to derive the algorithm for finding d we will start by considering the case where l in this case d is just a single vector d. substituting equation into equation into the problem reduces to and simplifying d d d arg min d i x x dd subject to d the above formulation is the most direct way of performing the substitution but is not the most stylistically pleasing way to write the equation. it places the x on the right of the vector d. it is more conventional to write scalar value d scalar coefficients on the left of vector they operate on. we therefore usually write such a formula as d arg min d x d x d subject to d i or exploiting the fact that a scalar is its own transpose as d x x dd arg min subject to d d i the reader should aim to become familiar with such cosmetic rearrangements. chapter linear algebra at this point it can be helpful to rewrite the problem in terms of a single design matrix of examples rather than as a sum over separate example vectors. this will allow us to use more compact notation. let x be the matrix defined by stacking all of the vectors describing the points such that xi x we can now rewrite the problem as x xdd f subject to d arg min m n d d r disregarding the constraint for the moment we can simplify the frobenius norm portion as follows d f x xdd arg min d x xdd x xdd xdd x arg min d tr equation arg min trx d arg min d trx arg min trx x x x tr x xdd xdd tr dd tr x x dd dd x x xdd x trdd xdd dd x trdd x xdd x d terms not involving trx arg min d do not affect the xdd trdd x xdd arg min d we can cycle the order of the matrices inside a trace equation trx xdd trx xdd dd arg min d the same property again at this point we re-introduce the constraint xdd trx trx arg min d arg min trx xdd dd subject to d d xdd trx subject to d xdd d d to the constraint arg min d xdd subject to d d trx chapter linear algebra xdd x xd trx trd subject to d d subject to d d arg max d arg max d this optimization problem may be solved using eigendecomposition. specifically x corresponding to the largest the optimal d is given by the eigenvector of x eigenvalue. this derivation is specific to the case of l and recovers only the first principal component. more generally when we wish to recover a basis of principal components the matrix d is given by the l eigenvectors corresponding to the largest eigenvalues. this may be shown using proof by induction. we recommend writing this proof as an exercise. linear algebra is one of the fundamental mathematical disciplines that is necessary to understand deep learning. another key area of mathematics that is ubiquitous in machine learning is probability theory presented next. chapter probability and information theory in this chapter we describe probability theory and information theory. probability theory is a mathematical framework for representing uncertain statements. it provides a means of quantifying uncertainty and axioms for deriving new uncertain statements. in artificial intelligence applications we use probability theory in two major ways. first the laws of probability tell us how ai systems should reason so we design our algorithms to compute or approximate various expressions derived using probability theory. second we can use probability and statistics to theoretically analyze the behavior of proposed ai systems. probability theory is a fundamental tool of many disciplines of science and engineering. we provide this chapter to ensure that readers whose background is primarily in software engineering with limited exposure to probability theory can understand the material in this book. while probability theory allows us to make uncertain statements and reason in the presence of uncertainty information theory allows us to quantify the amount of uncertainty in a probability distribution. if you are already familiar with probability theory and information theory you may wish to skip all of this chapter except for section which describes the graphs we use to describe structured probabilistic models for machine learning. if you have absolutely no prior experience with these subjects this chapter should be sufficient to successfully carry out deep learning research projects but we do suggest that you consult an additional resource such as jaynes chapter probability and information theory why probability? many branches of computer science deal mostly with entities that are entirely deterministic and certain. a programmer can usually safely assume that a cpu will execute each machine instruction flawlessly. errors in hardware do occur but are rare enough that most software applications do not need to be designed to account for them. given that many computer scientists and software engineers work in a relatively clean and certain environment it can be surprising that machine learning makes heavy use of probability theory. this is because machine learning must always deal with uncertain quantities and sometimes may also need to deal with stochastic quantities. uncertainty and stochasticity can arise from many sources. researchers have made compelling arguments for quantifying uncertainty using probability since at least the many of the arguments presented here are summarized from or inspired by pearl nearly all activities require some ability to reason in the presence of uncertainty. in fact beyond mathematical statements that are true by definition it is difficult to think of any proposition that is absolutely true or any event that is absolutely guaranteed to occur. there are three possible sources of uncertainty inherent stochasticity in the system being modeled. for example most interpretations of quantum mechanics describe the dynamics of subatomic particles as being probabilistic. we can also create theoretical scenarios that we postulate to have random dynamics such as a hypothetical card game where we assume that the cards are truly shu ed into a random order. incomplete observability. even deterministic systems can appear stochastic when we cannot observe all of the variables that drive the behavior of the system. for example in the monty hall problem a game show contestant is asked to choose between three doors and wins a prize held behind the chosen door. two doors lead to a goat while a third leads to a car. the outcome given the contestant s choice is deterministic but from the contestant s point of view the outcome is uncertain. incomplete modeling. when we use a model that must discard some of the information we have observed the discarded information results in uncertainty in the model s predictions. for example suppose we build a robot that can exactly observe the location of every object around it. if the chapter probability and information theory robot discretizes space when predicting the future location of these objects then the discretization makes the robot immediately become uncertain about the precise position of objects each object could be anywhere within the discrete cell that it was observed to occupy. in many cases it is more practical to use a simple but uncertain rule rather than a complex but certain one even if the true rule is deterministic and our modeling system has the fidelity to accommodate a complex rule. for example the simple rule most birds fly is cheap to develop and is broadly useful while a rule of the form birds fly except for very young birds that have not yet learned to fly sick or injured birds that have lost the ability to fly flightless species of birds including the cassowary ostrich and kiwi. is expensive to develop maintain and communicate and after all of this effort is still very brittle and prone to failure. while it should be clear that we need a means of representing and reasoning about uncertainty it is not immediately obvious that probability theory can provide all of the tools we want for artificial intelligence applications. probability theory was originally developed to analyze the frequencies of events. it is easy to see how probability theory can be used to study events like drawing a certain hand of cards in a game of poker. these kinds of events are often repeatable. when we say that an outcome has a probability p of occurring it means that if we repeated the experiment draw a hand of cards infinitely many times then proportion p of the repetitions would result in that outcome. this kind of reasoning does not seem immediately applicable to propositions that are not repeatable. if a doctor analyzes a patient and says that the patient has a chance of having the flu this means something very different we can not make infinitely many replicas of the patient nor is there any reason to believe that different replicas of the patient would present with the same symptoms yet have varying underlying conditions. in the case of the doctor diagnosing the patient we use probability to represent a degree of belief with indicating absolute certainty that the patient has the flu and indicating absolute certainty that the patient does not have the flu. the former kind of probability related directly to the rates at which events occur is known as frequentist probability while the latter related to qualitative levels of certainty is known as bayesian probability. if we list several properties that we expect common sense reasoning about uncertainty to have then the only way to satisfy those properties is to treat bayesian probabilities as behaving exactly the same as frequentist probabilities. for example if we want to compute the probability that a player will win a poker game given that she has a certain set of cards we use exactly the same formulas as when we compute the probability that a patient has a disease given that she chapter probability and information theory has certain symptoms. for more details about why a small set of common sense assumptions implies that the same axioms must control both kinds of probability see ramsey probability can be seen as the extension of logic to deal with uncertainty. logic provides a set of formal rules for determining what propositions are implied to be true or false given the assumption that some other set of propositions is true or false. probability theory provides a set of formal rules for determining the likelihood of a proposition being true given the likelihood of other propositions. random variables a random variable is a variable that can take on different values randomly. we typically denote the random variable itself with a lower case letter in plain typeface and the values it can take on with lower case script letters. for example and are both possible values that the random variable x can take on. for vector-valued variables we would write the random variable as x and one of its values as x. on its own a random variable is just a description of the states that are possible it must be coupled with a probability distribution that specifies how likely each of these states are. random variables may be discrete or continuous. a discrete random variable is one that has a finite or countably infinite number of states. note that these states are not necessarily the integers they can also just be named states that are not considered to have any numerical value. a continuous random variable is associated with a real value. probability distributions a probability distribution is a description of how likely a random variable or set of random variables is to take on each of its possible states. the way we describe probability distributions depends on whether the variables are discrete or continuous. discrete variables and probability mass functions a probability distribution over discrete variables may be described using a probability mass function we typically denote probability mass functions with a capital p often we associate each random variable with a different probability chapter probability and information theory mass function and the reader must infer which probability mass function to use based on the identity of the random variable rather than the name of the function p is usually not the same as p the probability mass function maps from a state of a random variable to the probability of that random variable taking on that state. the probability that x x is denoted as p with a probability of indicating that x x is certain and a probability of indicating that x x is impossible. sometimes to disambiguate which pmf to use we write the name of the random variable explicitly p x. sometimes we define a variable first then use notation to specify which distribution it follows later x x p probability mass functions can act on many variables at the same time. such a probability distribution over many variables is known as a joint probability distribution. p x y y denotes the probability that x x and y y simultaneously. we may also write for brevity. p x y to be a probability mass function on a random variable x a function p must satisfy the following properties the domain of must be the set of all possible states of x. p x x p an impossible event has probability and no state can be less probable than that. likewise an event that is guaranteed to happen has probability and no state can have a greater chance of occurring. x x p we refer to this property as being normalized. without this property we could obtain probabilities greater than one by computing the probability of one of many events occurring. for example consider a single discrete random variable x with k different states. we can place a uniform distribution on x that is make each of its states equally likely by setting its probability mass function to p x x i k for all i. we can see that this fits the requirements for a probability mass function. the value k is a positive integer. we also see that is positive because k p x i x i i k k k so the distribution is properly normalized. chapter probability and information theory continuous variables and probability density functions when working with continuous random variables we describe probability distributions using a probability density function rather than a probability mass function. to be a probability density function a function p must satisfy the following properties the domain of must be the set of all possible states of x. p note that we do not require p x x x p x p x dx a probability density function px does not give the probability of a specific state directly instead the probability of landing inside an infinitesimal region with volume is given by p x x x we can integrate the density function to find the actual probability mass of a set of points. specifically the probability that x lies in some set s is given by the integral of p over that set. in the univariate example the probability that x lies in the interval is given by p x dx b for an example of a probability density function corresponding to a specific probability density over a continuous random variable consider a uniform distribution on an interval of the real numbers. we can do this with a function ux a b where a and b are the endpoints of the interval with b a. the notation means parametrized by we consider x to be the argument of the function while a and b are parameters that define the function. to ensure that there is no probability mass outside the interval we say ux a b for all x within a b we can see that this is nonnegative everywhere. additionally it u x a b b a integrates to we often denote that x follows the uniform distribution on b by writing x u a b b marginal probability sometimes we know the probability distribution over a set of variables and we want to know the probability distribution over just a subset of them. the probability distribution over the subset is known as the distribution. marginal probability for example suppose we have discrete random variables x and y and we know p y we can find x with the sum rule p x x p x p x x y y y chapter probability and information theory the name marginal probability comes from the process of computing marginal probabilities on paper. when the values of p y are written in a grid with different values of x in rows and different values of y in columns it is natural to sum across a row of the grid then write px in the margin of the paper just to the right of the row. for continuous variables we need to use integration instead of summation p x p x y dy. conditional probability in many cases we are interested in the probability of some event given that some other event has happened. this is called a conditional probability. we denote x x. this the conditional probability that y y given x x as py y conditional probability can be computed with the formula p y y x x p y y x x x p x the conditional probability is only defined when px x we cannot compute the conditional probability conditioned on an event that never happens. it is important not to confuse conditional probability with computing what would happen if some action were undertaken. the conditional probability that a person is from germany given that they speak german is quite high but if a randomly selected person is taught to speak german their country of origin does not change. computing the consequences of an action is called making an intervention query. intervention queries are the domain of causal modeling which we do not explore in this book. the chain rule of conditional probabilities any joint probability distribution over many random variables may be decomposed into conditional distributions over only one variable i x p x n this observation is known as the chain rule or product rule of probability. it follows immediately from the definition of conditional probability in equation chapter probability and information theory for example applying the definition twice we get p b c c p p b c p p p b c c p b c p b c b p c p independence and conditional independence two random variables x and y are independent if their probability distribution can be expressed as a product of two factors one involving only x and one involving only y x x y y p x p p x y x y y two random variables x and y are conditionally independent given a random variable z if the conditional probability distribution over x and y factorizes in this way for every value of z x x y y z z p x y z x y p x z x z z p y z y we can denote independence and conditional independence with compact means that x means that x and y are independent while x y z notation x y and y are conditionally independent given z. expectation variance and covariance the expectation or expected value of some function fx with respect to a probability distribution p is the average or mean value that f takes on when x is drawn from for discrete variables this can be computed with a summation p x p ex f x p x f x while for continuous variables it is computed with an integral p ex f x p x f x dx. chapter probability and information theory when the identity of the distribution is clear from the context we may simply write the name of the random variable that the expectation is over as in exf if it is clear which random variable the expectation is over we may omit the subscript entirely as in ef by default we can assume that e averages over the values of all the random variables inside the brackets. likewise when there is no ambiguity we may omit the square brackets. expectations are linear for example ex f x g x ex f x ex g x when and are not dependent on x the variance gives a measure of how much the values of a function of a random variable x vary as we sample different values of x from its probability distribution var f x e f x e f x when the variance is low the values of f cluster near their expected value. the square root of the variance is known as the standard deviation the covariance gives some sense of how much two values are linearly related to each other as well as the scale of these variables cov f x g y e f x e f x g y e g y high absolute values of the covariance mean that the values change very much and are both far from their respective means at the same time. if the sign of the covariance is positive then both variables tend to take on relatively high values simultaneously. if the sign of the covariance is negative then one variable tends to take on a relatively high value at the times that the other takes on a relatively low value and vice versa. other measures such as correlation normalize the contribution of each variable in order to measure only how much the variables are related rather than also being affected by the scale of the separate variables. the notions of covariance and dependence are related but are in fact distinct concepts. they are related because two variables that are independent have zero covariance and two variables that have non-zero covariance are dependent. however independence is a distinct property from covariance. for two variables to have zero covariance there must be no linear dependence between them. independence is a stronger requirement than zero covariance because independence also excludes nonlinear relationships. it is possible for two variables to be dependent but have zero covariance. for example suppose we first sample a real number x from a we next sample a random variable uniform distribution over the interval chapter probability and information theory s. with probability we choose the value of s to be otherwise we choose the value of s to be we can then generate a random variable y by assigning y sx. clearly x and y are not independent because x completely determines the magnitude of however cov x y y n is an n r the covariance matrix of a random vector x that the diagonal elements of the covariance give the variance cov ij covxi x j. covxi xi varxi common probability distributions n matrix such several simple probability distributions are useful in many contexts in machine learning. bernoulli distribution the bernoulli distribution is a distribution over a single binary random variable. which gives the probability of the it is controlled by a single parameter random variable being equal to it has the following properties p p x x p x x x x ex x var x multinoulli distribution the multinoulli or categorical distribution is a distribution over a single discrete variable with k different states where k is the multinoulli distribution is multinoulli is a term that was recently coined by gustavo lacerdo and popularized by the multinoulli distribution is a special case of the multinomial distribution. murphy k representing how many a multinomial distribution is the distribution over vectors in times each of the k categories is visited when n samples are drawn from a multinoulli distribution. many texts use the term multinomial to refer to multinoulli distributions without clarifying that they refer only to the n n case. chapter probability and information theory parametrized by a vector p where pi gives the probability of the i-th p. note that we must state. the final k-th state s probability is given by constrain multinoulli distributions are often used to refer to distributions over categories of objects so we do not usually assume that state has numerical value etc. for this reason we do not usually need to compute the expectation or variance of multinoulli-distributed random variables. p the bernoulli and multinoulli distributions are sufficient to describe any distribution over their domain. they are able to describe any distribution over their domain not so much because they are particularly powerful but rather because their domain is simple they model discrete variables for which it is feasible to enumerate all of the states. when dealing with continuous variables there are uncountably many states so any distribution described by a small number of parameters must impose strict limits on the distribution. gaussian distribution the most commonly used distribution over real numbers is the normal distribution also known as the gaussian distribution exp n x see figure for a plot of the density function. the two parameters control the normal distribution. the parameter gives the coordinate of the central peak. this is also the mean of the distribution ex the standard deviation of the distribution is given by and the variance by r and when we evaluate the pdf we need to square and invert when we need to frequently evaluate the pdf with different parameter values a more efficient way of parametrizing the distribution is to use a parameter to control the precision or inverse variance of the distribution x exp n normal distributions are a sensible choice for many applications. in the absence of prior knowledge about what form a distribution over the real numbers should take the normal distribution is a good default choice for two major reasons. chapter probability and information theory x p maximum at x inflection points at x figure the normal distribution the normal distribution exhibits a classic bell curve shape with the x coordinate of its central peak given by and the width of its peak controlled by in this example we depict the standard normal distribution with and n first many distributions we wish to model are truly close to being normal distributions. the central limit theorem shows that the sum of many independent random variables is approximately normally distributed. this means that in practice many complicated systems can be modeled successfully as normally distributed noise even if the system can be decomposed into parts with more structured behavior. x second out of all possible probability distributions with the same variance the normal distribution encodes the maximum amount of uncertainty over the real numbers. we can thus think of the normal distribution as being the one that inserts the least amount of prior knowledge into a model. fully developing and justifying this idea requires more mathematical tools and is postponed to section the normal distribution generalizes to r n in which case it is known as the multivariate normal distribution. it may be parametrized with a positive definite symmetric matrix n x ndet exp x x chapter probability and information theory the parameter still gives the mean of the distribution though now it is vector-valued. the parameter gives the covariance matrix of the distribution. as in the univariate case when we wish to evaluate the pdf several times for many different values of the parameters the covariance is not a computationally efficient way to parametrize the distribution since we need to invert to evaluate the pdf. we can instead use a precision matrix n det n exp x x we often fix the covariance matrix to be a diagonal matrix. an even simpler version is the isotropic gaussian distribution whose covariance matrix is a scalar times the identity matrix. exponential and laplace distributions in the context of deep learning we often want to have a probability distribution with a sharp point at x to accomplish this we can use the exponential distribution x exp p x the exponential distribution uses the indicator function to assign probability zero to all negative values of a closely related probability distribution that allows us to place a sharp peak of probability mass at an arbitrary point is the laplace distribution x laplace x exp the dirac distribution and empirical distribution in some cases we wish to specify that all of the mass in a probability distribution clusters around a single point. this can be accomplished by defining a pdf using the dirac delta function x p x x the dirac delta function is defined such that it is zero-valued everywhere except yet integrates to the dirac delta function is not an ordinary function that associates each value x with a real-valued output instead it is a different kind of chapter probability and information theory mathematical object called a generalized function that is defined in terms of its properties when integrated. we can think of the dirac delta function as being the limit point of a series of functions that put less and less mass on all points other than zero. we obtain an infinitely narrow and by defining px to be shifted by infinitely high peak of probability mass where x a common use of the dirac delta distribution is as a component of an empirical distribution p m m x on each of the m points x which puts probability mass forming a m given dataset or collection of samples. the dirac delta distribution is only necessary to define the empirical distribution over continuous variables. for discrete variables the situation is simpler an empirical distribution can be conceptualized as a multinoulli distribution with a probability associated to each possible input value that is simply equal to the empirical frequency of that value in the training set. we can view the empirical distribution formed from a dataset of training examples as specifying the distribution that we sample from when we train a model on this dataset. another important perspective on the empirical distribution is that it is the probability density that maximizes the likelihood of the training data section mixtures of distributions it is also common to define probability distributions by combining other simpler probability distributions. one common way of combining distributions is to construct a mixture distribution. a mixture distribution is made up of several component distributions. on each trial the choice of which component distribution generates the sample is determined by sampling a component identity from a multinoulli distribution x c c i p i p p i where p c is the multinoulli distribution over component identities. we have already seen one example of a mixture distribution the empirical distribution over real-valued variables is a mixture distribution with one dirac component for each training example. chapter probability and information theory the mixture model is one simple strategy for combining probability distributions we explore the art of building complex to create a richer distribution. in chapter probability distributions from simple ones in more detail. the mixture model allows us to briefly glimpse a concept that will be of paramount importance later the latent variable. a latent variable is a random variable that we cannot observe directly. the component identity variable c of the mixture model provides an example. latent variables may be related to x through the distribution p the joint distribution in this case p c p c over the latent variable and the distribution px c relating the latent variables to the visible variables determines the shape of the distribution p even though it is possible to describe p without reference to the latent variable. latent variables are discussed further in section a very powerful and common type of mixture model is the gaussian mixture c i are gaussians. each component has model in which the components px a separately parametrized mean and covariance some mixtures can have more constraints. for example the covariances could be shared across components via the constraint as with a single gaussian distribution the mixture of gaussians might constrain the covariance matrix for each component to be diagonal or isotropic. i in addition to the means and covariances the parameters of a gaussian mixture specify the prior probability i pc i given to each component i. the word prior indicates that it expresses the model s beliefs about c before it has observed x. by comparison pc x is a posterior probability because it is computed after observation of x. a gaussian mixture model is a universal approximator of densities in the sense that any smooth density can be approximated with any specific non-zero amount of error by a gaussian mixture model with enough components. figure shows samples from a gaussian mixture model. useful properties of common functions certain functions arise often while working with probability distributions especially the probability distributions used in deep learning models. one of these functions is the logistic sigmoid x exp x the logistic sigmoid is commonly used to produce the parameter of a bernoulli chapter probability and information theory x figure samples from a gaussian mixture model. in this example there are three components. from left to right the first component has an isotropic covariance matrix meaning it has the same amount of variance in each direction. the second has a diagonal covariance matrix meaning it can control the variance separately along each axis-aligned direction. this example has more variance along the x axis than along the axis. the third component has a full-rank covariance matrix allowing it to control the variance separately along an arbitrary basis of directions. distribution because its range is which lies within the valid range of values for the parameter. see figure for a graph of the sigmoid function. the sigmoid function saturates when its argument is very positive or very negative meaning that the function becomes very flat and insensitive to small changes in its input. another commonly encountered function is the softplus function dugas et al. x x log exp the softplus function can be useful for producing the or parameter of a normal distribution because its range is it also arises commonly when manipulating expressions involving sigmoids. the name of the softplus function comes from the fact that it is a smoothed or softened version of x x see figure for a graph of the softplus function. the following properties are all useful enough that you may wish to memorize them chapter probability and information theory x figure the logistic sigmoid function. x x x figure the softplus function. chapter probability and information theory x exp x exp d dx x x x log x x x x d dx x x x x log x log x x x x x x x y dy x x is called the logit in statistics but this term is more rarely the function used in machine learning. x equation provides extra justification for the name softplus. the softplus function is intended as a smoothed version of the positive part function x the positive part function is the counterpart of the negative part max function x to obtain a smooth function that is analogous to the x. just as x can be recovered from its positive part negative part one can use and negative part via the identity x x it is also possible to recover x using the same relationship between as shown in equation x max x x and x bayes rule we often find ourselves in a situation where we know p y x p y using bayes rule and need to know fortunately if we also know p we can compute the desired quantity x y p y x p p p note that while p appears in the formula it is usually feasible to compute p so we do not need to begin with knowledge of x p x p x p chapter probability and information theory bayes rule is straightforward to derive from the definition of conditional probability but it is useful to know the name of this formula since many texts refer to it by name. it is named after the reverend thomas bayes who first discovered a special case of the formula. the general version presented here was independently discovered by pierre-simon laplace. technical details of continuous variables a proper formal understanding of continuous random variables and probability density functions requires developing probability theory in terms of a branch of mathematics known as measure theory. measure theory is beyond the scope of this textbook but we can briefly sketch some of the issues that measure theory is employed to resolve. px in section we saw that the probability of a continuous vector-valued x lying in some set s is given by the integral of px over the set s. some choices of set s can produce paradoxes. for example it is possible to construct two sets and such that px these sets are generally constructed making very heavy use of the infinite precision of real numbers for example by making fractal-shaped sets or sets that are defined by transforming the set of rational one of the key contributions of measure theory is to provide a characterization of the set of sets that we can compute the probability of without encountering paradoxes. in this book we only integrate over sets with relatively simple descriptions so this aspect of measure theory never becomes a relevant concern. but for our purposes measure theory is more useful for describing theorems that n but do not apply to some corner cases. measure theory apply to most points in r provides a rigorous way of describing that a set of points is negligibly small. such a set is said to have measure zero. we do not formally define this concept in this textbook. for our purposes it is sufficient to understand the intuition that a set of measure zero occupies no volume in the space we are measuring. for example a line has measure zero while a filled polygon has positive measure. within r likewise an individual point has measure zero. any union of countably many sets that each have measure zero also has measure zero the set of all the rational numbers has measure zero for instance. another useful term from measure theory is almost everywhere. a property that holds almost everywhere holds throughout all of space except for on a set of banach-tarski theorem provides a fun example of such sets. chapter probability and information theory measure zero. because the exceptions occupy a negligible amount of space they can be safely ignored for many applications. some important results in probability theory hold for all discrete values but only hold almost everywhere for continuous values. another technical detail of continuous variables relates to handling continuous random variables that are deterministic functions of one another. suppose we have two random variables x and y such that y gx where g is an invertible con tinuous differentiable transformation. one might expect that py pxg this is actually not the case. as a simple example suppose we have scalar random variables x and y. suppose if we use the rule py px then py will be on this interval. this means y x everywhere except the interval and it will be and x py y dy which violates the definition of a probability distribution. this is a common mistake. the problem with this approach is that it fails to account for the distortion of space introduced by the function g. recall that the probability of x lying in an infinitesimally small region with volume x is given by p x since g can expand or contract space the infinitesimal volume surrounding x in x space may have different volume in space. y to see how to correct the problem we return to the scalar case. we need to preserve the property py g x dy solving from this we obtain py y pxg or equivalently px dx x y g x x px x py g x in higher dimensions the derivative generalizes to the determinant of the jacobian matrix the matrix with jij xi yj thus for real-valued vectors and y x px x py g x det g x chapter probability and information theory information theory information theory is a branch of applied mathematics that revolves around quantifying how much information is present in a signal. it was originally invented to study sending messages from discrete alphabets over a noisy channel such as communication via radio transmission. in this context information theory tells how to design optimal codes and calculate the expected length of messages sampled from specific probability distributions using various encoding schemes. in the context of machine learning we can also apply information theory to continuous variables where some of these message length interpretations do not apply. this field is fundamental to many areas of electrical engineering and computer science. in this textbook we mostly use a few key ideas from information theory to characterize probability distributions or quantify similarity between probability distributions. for more detail on information theory see cover and thomas mackay or the basic intuition behind information theory is that learning that an unlikely event has occurred is more informative than learning that a likely event has occurred. a message saying the sun rose this morning is so uninformative as to be unnecessary to send but a message saying there was a solar eclipse this morning is very informative. we would like to quantify information in a way that formalizes this intuition. specifically likely events should have low information content and in the extreme case events that are guaranteed to happen should have no information content whatsoever. less likely events should have higher information content. independent events should have additive information. for example finding out that a tossed coin has come up as heads twice should convey twice as much information as finding out that a tossed coin has come up as heads once. in order to satisfy all three of these properties we define the self-information of an event x x to be i x log p x in this book we always use log to mean the natural logarithm with base e. our definition of i is therefore written in units of nats. one nat is the amount of chapter probability and information theory information gained by observing an event of probability other texts use e logarithms and units called bits or shannons information measured in bits is just a rescaling of information measured in nats. when x is continuous we use the same definition of information by analogy but some of the properties from the discrete case are lost. for example an event with unit density still has zero information despite not being an event that is guaranteed to occur. self-information deals only with a single outcome. we can quantify the amount of uncertainty in an entire probability distribution using the shannon entropy p ex i x h x p p x ex also denoted hp in other words the shannon entropy of a distribution is the expected amount of information in an event drawn from that distribution. it gives a lower bound on the number of bits the logarithm is base otherwise the units are different needed on average to encode symbols drawn from a distribution p. distributions that are nearly deterministic the outcome is nearly certain have low entropy distributions that are closer to uniform have high entropy. see figure x is continuous the shannon entropy is known as the differential entropy. for a demonstration. when if we have two separate probability distributions p and q over the same random variable x we can measure how different these two distributions are using the kullback-leibler divergence p q d kl ex p log p x q x p p x e x log q x in the case of discrete variables it is the extra amount of information logarithm but in machine learning we usually use nats in bits if we use the base and the natural logarithm needed to send a message containing symbols drawn from probability distribution p when we use a code that was designed to minimize the length of messages drawn from probability distribution the kl divergence has many useful properties most notably that it is nonnegative. the kl divergence is if and only if p and q are the same distribution in the case of discrete variables or equal almost everywhere in the case of continuous variables. because the kl divergence is non-negative and measures the difference between two distributions it is often conceptualized as measuring some sort of distance between these distributions. however it is not a true distance measure because it is not symmetric dklp q for some p and q. this dklq p chapter probability and information theory s t a n n i y p o r t n e n o n n a h s p figure this plot shows how distributions that are closer to deterministic have low shannon entropy while distributions that are close to uniform have high shannon entropy. on the horizontal axis we plot p the probability of a binary random variable being equal to the entropy is given by log when p is near the distribution is nearly deterministic because the random variable is nearly always when p is near the distribution is nearly deterministic because the random variable is nearly always when p the entropy is maximal because the distribution is uniform over the two outcomes. p p p asymmetry means that there are important consequences to the choice of whether to use dkl for more detail. see figure a quantity that is closely related to the kl divergence is the cross-entropy which is similar to the kl divergence but lacking p q p hp q h dkl q the term on the left or dkl h p q p log x ex minimizing the cross-entropy with respect to q is equivalent to minimizing the kl divergence because does not participate in the omitted term. q when computing many of these quantities it is common to encounter expressions of the form log by convention in the context of information theory we treat these expressions as limx log x x structured probabilistic models machine learning algorithms often involve probability distributions over a very large number of random variables. often these probability distributions involve direct interactions between relatively few variables. using a single function to chapter probability and information theory q argminqdkl q q argminqdkl q p y t i s n e d y t i l i b a b o r p p x q y t i s n e d y t i l i b a b o r p p q x x or dkl p figure the kl divergence is asymmetric. suppose we have a distribution px and wish to approximate it with another distribution qx. we have the choice of minimizing either dkl q we illustrate the effect of this choice using a mixture of two gaussians for p and a single gaussian for q. the choice of which direction of the kl divergence to use is problem-dependent. some applications require an approximation that usually places high probability anywhere that the true distribution places high probability while other applications require an approximation that rarely places high probability anywhere that the true distribution places low probability. the choice of the direction of the kl divergence reflects which of these considerations takes priority for each application. effect of minimizing dklp q in this case we select a q that has high probability where p has high probability. when p has multiple modes q chooses to blur the modes together in order to put high probability mass on all of them. effect of minimizing dklq p in this case we select a q that has low probability where p has low probability. when p has multiple modes that are sufficiently widely separated as in this figure the kl divergence is minimized by choosing a single mode in order to avoid putting probability mass in the low-probability areas between modes of p. here we illustrate the outcome when q is chosen to emphasize the left mode. we could also have achieved an equal value of the kl divergence by choosing the right mode. if the modes are not separated by a sufficiently strong low probability region then this direction of the kl divergence can still choose to blur the modes. chapter probability and information theory describe the entire joint probability distribution can be very inefficient computationally and statistically. instead of using a single function to represent a probability distribution we can split a probability distribution into many factors that we multiply together. for example suppose we have three random variables a b and c. suppose that a influences the value of b and b influences the value of c but that a and c are independent given b. we can represent the probability distribution over all three variables as a product of probability distributions over two variables p b c p c b b a p p these factorizations can greatly reduce the number of parameters needed to describe the distribution. each factor uses a number of parameters that is exponential in the number of variables in the factor. this means that we can greatly reduce the cost of representing a distribution if we are able to find a factorization into distributions over fewer variables. we can describe these kinds of factorizations using graphs. here we use the word graph in the sense of graph theory a set of vertices that may be connected to each other with edges. when we represent the factorization of a probability distribution with a graph we call it a structured probabilistic model or graphical model. there are two main kinds of structured probabilistic models directed and undirected. both kinds of graphical models use a graph in which each node in the graph corresponds to a random variable and an edge connecting two random variables means that the probability distribution is able to represent direct interactions between those two random variables. g directed models use graphs with directed edges and they represent factorizations into conditional probability distributions as in the example above. specifically a directed model contains one factor for every random variable xi in the distribution and that factor consists of the conditional distribution over xi given the parents of xi denoted p agxi p p i p ag see figure distributions it represents. for an example of a directed graph and the factorization of probability undirected models use graphs with undirected edges and they represent factorizations into a set of functions unlike in the directed case these functions chapter probability and information theory aa bb dd cc ee figure a directed graphical model over random variables a b c d and e. this graph corresponds to probability distributions that can be factored as b c d e p p p b a a p e c d b p b p this graph allows us to quickly see some properties of the distribution. for example a and c interact directly but a and e interact only indirectly via c. g are usually not probability distributions of any kind. any set of nodes that are all c connected to each other in in an undirected model is associated with a factor these factors are just functions not probability distributions. the output of each factor must be non-negative but there is no constraint that the factor must sum or integrate to like a probability distribution. is called a clique. each clique c the probability of a configuration of random variables is proportional to the product of all of these factors assignments that result in larger factor values are more likely. of course there is no guarantee that this product will sum to we therefore divide by a normalizing constant z defined to be the sum or integral over all states of the product of the functions in order to obtain a normalized probability distribution c p z i see figure probability distributions it represents. for an example of an undirected graph and the factorization of keep in mind that these graphical representations of factorizations are a language for describing probability distributions. they are not mutually exclusive families of probability distributions. being directed or undirected is not a property of a probability distribution it is a property of a particular description of a chapter probability and information theory aa bb dd cc ee figure an undirected graphical model over random variables a b c d and e. this graph corresponds to probability distributions that can be factored as b c d e p z a b c d e this graph allows us to quickly see some properties of the distribution. for example a and c interact directly but a and e interact only indirectly via c. probability distribution but any probability distribution may be described in both ways. i ii and throughout parts of this book we will use structured probabilistic models merely as a language to describe which direct probabilistic relationships different machine learning algorithms choose to represent. no further understanding of structured probabilistic models is needed until the discussion of research topics in part where we will explore structured probabilistic models in much greater detail. iii this chapter has reviewed the basic concepts of probability theory that are most relevant to deep learning. one more set of fundamental mathematical tools remains numerical methods. chapter numerical computation machine learning algorithms usually require a high amount of numerical computation. this typically refers to algorithms that solve mathematical problems by methods that update estimates of the solution via an iterative process rather than analytically deriving a formula providing a symbolic expression for the correct solution. common operations include optimization the value of an argument that minimizes or maximizes a function and solving systems of linear equations. even just evaluating a mathematical function on a digital computer can be difficult when the function involves real numbers which cannot be represented precisely using a finite amount of memory. overflow and underflow the fundamental difficulty in performing continuous math on a digital computer is that we need to represent infinitely many real numbers with a finite number of bit patterns. this means that for almost all real numbers we incur some approximation error when we represent the number in the computer. in many cases this is just rounding error. rounding error is problematic especially when it compounds across many operations and can cause algorithms that work in theory to fail in practice if they are not designed to minimize the accumulation of rounding error. one form of rounding error that is particularly devastating is underflow. underflow occurs when numbers near zero are rounded to zero. many functions behave qualitatively differently when their argument is zero rather than a small positive number. for example we usually want to avoid division by zero chapter numerical computation software environments will raise exceptions when this occurs others will return a result with a placeholder not-a-number value or taking the logarithm of zero is usually treated as which then becomes not-a-number if it is used for many further arithmetic operations. another highly damaging form of numerical error is overflow. overflow occurs further when numbers with large magnitude are approximated as arithmetic will usually change these infinite values into not-a-number values. or one example of a function that must be stabilized against underflow and overflow is the softmax function. the softmax function is often used to predict the probabilities associated with a multinoulli distribution. the softmax function is defined to be softmax i expxi n expxj consider what happens when all of the xi are equal to some constant c. analytically we can see that all of the outputs should be equal to numerically this may n not occur when c has large magnitude. if c is very negative then expc will underflow. this means the denominator of the softmax will become so the final result is undefined. when c is very large and positive expc will overflow again resulting in the expression as a whole being undefined. both of these difficulties can be resolved by instead evaluating softmaxz where z x maxi xi. simple algebra shows that the value of the softmax function is not changed analytically by adding or subtracting a scalar from the input vector. subtracting maxi xi results in the largest argument to exp being which rules out the possibility of overflow. likewise at least one term in the denominator has a value of which rules out the possibility of underflow in the denominator leading to a division by zero. there is still one small problem. underflow in the numerator can still cause the expression as a whole to evaluate to zero. this means that if we implement log softmaxx by first running the softmax subroutine then passing the result to the log function we could erroneously obtain instead we must implement a separate function that calculates log softmax in a numerically stable way. the log softmax function can be stabilized using the same trick as we used to stabilize the function. softmax for the most part we do not explicitly detail all of the numerical considerations involved in implementing the various algorithms described in this book. developers of low-level libraries should keep numerical issues in mind when implementing deep learning algorithms. most readers of this book can simply rely on lowlevel libraries that provide stable implementations. in some cases it is possible to implement a new algorithm and have the new implementation automatically chapter numerical computation is an example stabilized. theano of a software package that automatically detects and stabilizes many common numerically unstable expressions that arise in the context of deep learning. bergstra et al. bastien et al. poor conditioning conditioning refers to how rapidly a function changes with respect to small changes in its inputs. functions that change rapidly when their inputs are perturbed slightly can be problematic for scientific computation because rounding errors in the inputs can result in large changes in the output. max ij i j consider the function fx a decomposition its condition number is when a n n r has an eigenvalue this is the ratio of the magnitude of the largest and smallest eigenvalue. when this number is large matrix inversion is particularly sensitive to error in the input. this sensitivity is an intrinsic property of the matrix itself not the result of rounding error during matrix inversion. poorly conditioned matrices amplify pre-existing errors when we multiply by the true matrix inverse. in practice the error will be compounded further by numerical errors in the inversion process itself. gradient-based optimization most deep learning algorithms involve optimization of some sort. optimization refers to the task of either minimizing or maximizing some function fx by altering x. we usually phrase most optimization problems in terms of minimizing f maximization may be accomplished via a minimization algorithm by minimizing f the function we want to minimize or maximize is called the objective function or criterion. when we are minimizing it we may also call it the cost function loss function or error function. in this book we use these terms interchangeably though some machine learning publications assign special meaning to some of these terms. we often denote the value that minimizes or maximizes a function with a superscript for example we might say x f x arg min chapter numerical computation global minimum at since f descent halts here. gradient x x x for we have so we can decrease moving rightward. x f byf x for we have so we can decrease moving leftward. x f byf f x x x f x figure an illustration of how the gradient descent algorithm uses the derivatives of a function can be used to follow the function downhill to a minimum. we assume the reader is already familiar with calculus but provide a brief review of how calculus concepts relate to optimization here. suppose we have a function y f where both x and y are real numbers. the derivative of this function is denoted as f gives the slope of f at the point x. in other words it specifies how to scale a small change in the input in order to obtain the corresponding change in the output f x or as dy dx the derivative f f x f the derivative is therefore useful for minimizing a function because it tells us how to change x in order to make a small improvement in y. for example we know that f is less than f for small enough we can thus reduce f by moving x in small steps with opposite sign of the derivative. this technique is called gradient descent for an example of this technique. see figure signf when f the derivative provides no information about which direction to move. points where f are known as critical points or stationary points. a local minimum is a point where f is lower than at all neighboring points so it is no longer possible to decrease fx by making infinitesimal steps. a local maximum is a point where f is higher than at all neighboring points chapter numerical computation minimum maximum saddle point figure examples of each of the three types of critical points in a critical point is a point with zero slope. such a point can either be a local minimum which is lower than the neighboring points a local maximum which is higher than the neighboring points or a saddle point which has neighbors that are both higher and lower than the point itself. so it is not possible to increase f by making infinitesimal steps. some critical points are neither maxima nor minima. these are known as saddle points. see figure for examples of each type of critical point. a point that obtains the absolute lowest value of f is a global minimum. it is possible for there to be only one global minimum or multiple global minima of the function. it is also possible for there to be local minima that are not globally optimal. in the context of deep learning we optimize functions that may have many local minima that are not optimal and many saddle points surrounded by very flat regions. all of this makes optimization very difficult especially when the input to the function is multidimensional. we therefore usually settle for finding a value of f that is very low but not necessarily minimal in any formal sense. see figure for an example. we often minimize functions that have multiple inputs f r n r. for the concept of minimization to make sense there must still be only one output. for functions with multiple inputs we must make use of the concept of partial derivatives. the partial derivative fx measures how f changes as only the xi variable xi increases at point x. the gradient generalizes the notion of derivative to the case where the derivative is with respect to a vector the gradient of f is the xf element i of the vector containing all of the partial derivatives denoted gradient is the partial derivative of f with respect to xi. in multiple dimensions chapter numerical computation this local minimum performs nearly as well as the global one so it is an acceptable halting point. ideally we would like x to arrive at the global f minimum but this might not be possible. this local minimum performs poorly and should be avoided. x figure optimization algorithms may fail to find a global minimum when there are multiple local minima or plateaus present. in the context of deep learning we generally accept such solutions even though they are not truly minimal so long as they correspond to significantly low values of the cost function. critical points are points where every element of the gradient is equal to zero. the directional derivative in direction unit vector is the slope of the function f in direction u. in other words the directional derivative is the derivative of the function f u with respect to evaluated at using the chain rule we can see that u evaluates to u when x f u f to minimize f we would like to find the direction in which f decreases the fastest. we can do this using the directional derivative u min u u u min xf cos x f u u where is the angle between u and the gradient. substituting in u and ignoring factors that do not depend on u this simplifies to minu cos this is minimized when u points in the opposite direction as the gradient. in other words the gradient points directly uphill and the negative gradient points directly downhill. we can decrease f by moving in the direction of the negative gradient. this is known as the method of steepest descent gradient descent or steepest descent proposes a new point x x x f chapter numerical computation where is the learning rate a positive scalar determining the size of the step. we can choose in several different ways. a popular approach is to set to a small constant. sometimes we can solve for the step size that makes the directional xf for several derivative vanish. another approach is to evaluate f values of and choose the one that results in the smallest objective function value. this last strategy is called a line search. steepest descent converges when every element of the gradient is zero in practice very close to zero. in some cases we may be able to avoid running this iterative algorithm and just jump directly to the critical point by solving the equation x f for x although gradient descent is limited to optimization in continuous spaces the general concept of repeatedly making a small move is approximately the best small move towards better configurations can be generalized to discrete spaces. ascending an objective function of discrete parameters is called hill climbing russel and norvig beyond the gradient jacobian and hessian matrices sometimes we need to find all of the partial derivatives of a function whose input and output are both vectors. the matrix containing all such partial derivatives is n known as a jacobian matrix. specifically if we have a function f r then the jacobian matrix j is defined such that n m m r f i. of f r j ij xj xi xj f by f we are also sometimes interested in a derivative of a derivative. this is known r the derivative f. n as a second derivative. for example for a function f r with respect to xi of the derivative of f with respect to xj is denoted as in a single dimension we can denote the second derivative tells us how the first derivative will change as we vary the input. this is important because it tells us whether a gradient step will cause as much of an improvement as we would expect based on the gradient alone. we can think of the second derivative as measuring curvature. suppose we have a quadratic function functions that arise in practice are not quadratic but can be approximated well as quadratic at least locally. if such a function has a second derivative of zero then there is no curvature. it is a perfectly flat line and its value can be predicted using only the gradient. if the gradient is along the negative gradient and the cost function will decrease by if the second derivative is negative the function curves downward so the cost function will actually decrease by more than finally if the second derivative is positive the function curves upward so the cost function can decrease by less than see then we can make a step of size chapter numerical computation negative curvature no curvature positive curvature x f x f x f x x x figure the second derivative determines the curvature of a function. here we show quadratic functions with various curvature. the dashed line indicates the value of the cost function we would expect based on the gradient information alone as we make a gradient step downhill. in the case of negative curvature the cost function actually decreases faster than the gradient predicts. in the case of no curvature the gradient predicts the decrease correctly. in the case of positive curvature the function decreases slower than expected and eventually begins to increase so steps that are too large can actually increase the function inadvertently. figure the value of the cost function predicted by the gradient and the true value. to see how different forms of curvature affect the relationship between when our function has multiple input dimensions there are many second derivatives. these derivatives can be collected together into a matrix called the hessian matrix. the hessian matrix is defined such that h x h x xi xj f equivalently the hessian is the jacobian of the gradient. anywhere that the second partial derivatives are continuous the differential operators are commutative i.e. their order can be swapped xi xj f x j xi f this implies that hij h ji so the hessian matrix is symmetric at such points. most of the functions we encounter in the context of deep learning have a symmetric hessian almost everywhere. because the hessian matrix is real and symmetric we can decompose it into a set of real eigenvalues and an orthogonal basis of chapter numerical computation eigenvectors. the second derivative in a specific direction represented by a unit vector d is given by d hd. when d is an eigenvector of h the second derivative in that direction is given by the corresponding eigenvalue. for other directions of d the directional second derivative is a weighted average of all of the eigenvalues with weights between and and eigenvectors that have smaller angle with d receiving more weight. the maximum eigenvalue determines the maximum second derivative and the minimum eigenvalue determines the minimum second derivative. the second derivative tells us how well we can expect a gradient descent step to perform. we can make a second-order taylor series approximation to the function around the current point f x f f g x x h x x where g is the gradient and h is the hessian at if we use a learning rate of then the new point x will be given by g. substituting this into our approximation we obtain f f g hg. g g g there are three terms here the original value of the function the expected improvement due to the slope of the function and the correction we must apply to account for the curvature of the function. when this last term is too large the hg is zero or negative gradient descent step can actually move uphill. when g the taylor series approximation predicts that increasing forever will decrease f forever. in practice the taylor series is unlikely to remain accurate for large so one must resort to more heuristic choices of in this case. when g hg is positive solving for the optimal step size that decreases the taylor series approximation of the function the most yields g g g hg in the worst case when g aligns with the eigenvector of h corresponding to the maximal eigenvalue max then this optimal step size is given by to the extent that the function we minimize can be approximated well by a quadratic function the eigenvalues of the hessian thus determine the scale of the learning rate. max the second derivative can be used to determine whether a critical point is a local maximum a local minimum or saddle point. recall that on a critical point f increases as we move to the right and decreases as we move to the left. this means the first derivative f when the second derivative f chapter numerical computation and f for small enough in other words as we move f right the slope begins to point uphill to the right and as we move left the slope we can begins to point uphill to the left. thus when f conclude that x is a local minimum. similarly when f we can conclude that x is a local maximum. this is known as the second derivative test. unfortunately when f the test is inconclusive. in this case x may be a saddle point or a part of a flat region. and f and f in multiple dimensions we need to examine all of the second derivatives of the function. using the eigendecomposition of the hessian matrix we can generalize the second derivative test to multiple dimensions. at a critical point where xf we can examine the eigenvalues of the hessian to determine whether the critical point is a local maximum local minimum or saddle point. when the hessian is positive definite its eigenvalues are positive the point is a local minimum. this can be seen by observing that the directional second derivative in any direction must be positive and making reference to the univariate second derivative test. likewise when the hessian is negative definite its eigenvalues are negative the point is a local maximum. in multiple dimensions it is actually possible to find positive evidence of saddle points in some cases. when at least one eigenvalue is positive and at least one eigenvalue is negative we know that x is a local maximum on one cross section of f but a local minimum on another cross section. see figure for an example. finally the multidimensional second derivative test can be inconclusive just like the univariate version. the test is inconclusive whenever all of the non-zero eigenvalues have the same sign but at least one eigenvalue is zero. this is because the univariate second derivative test is inconclusive in the cross section corresponding to the zero eigenvalue. in multiple dimensions there is a different second derivative for each direction at a single point. the condition number of the hessian at this point measures how much the second derivatives differ from each other. when the hessian has a poor condition number gradient descent performs poorly. this is because in one direction the derivative increases rapidly while in another direction it increases slowly. gradient descent is unaware of this change in the derivative so it does not know that it needs to explore preferentially in the direction where the derivative remains negative for longer. it also makes it difficult to choose a good step size. the step size must be small enough to avoid overshooting the minimum and going uphill in directions with strong positive curvature. this usually means that the step size is too small to make significant progress in other directions with less curvature. see figure for an example. this issue can be resolved by using information from the hessian matrix to guide chapter numerical computation figure a saddle point containing both positive and negative curvature. the function in this example is f along the axis corresponding to the function curves upward. this axis is an eigenvector of the hessian and has a positive eigenvalue. along the axis corresponding to the function curves downward. this direction is an eigenvector of the hessian with negative eigenvalue. the name saddle point derives from the saddle-like shape of this function. this is the quintessential example of a function with a saddle point. in more than one dimension it is not necessary to have an eigenvalue of in order to get a saddle point it is only necessary to have both positive and negative eigenvalues. we can think of a saddle point with both signs of eigenvalues as being a local maximum within one cross section and a local minimum within another cross section. chapter numerical computation x and the least curvature is in the direction figure gradient descent fails to exploit the curvature information contained in the hessian matrix. here we use gradient descent to minimize a quadratic function f x whose hessian matrix has condition number this means that the direction of most curvature has five times more curvature than the direction of least curvature. in this case the most curvature is in the direction the red lines indicate the path followed by gradient descent. this very elongated quadratic function resembles a long canyon. gradient descent wastes time repeatedly descending canyon walls because they are the steepest feature. because the step size is somewhat too large it has a tendency to overshoot the bottom of the function and thus needs to descend the opposite canyon wall on the next iteration. the large positive eigenvalue of the hessian corresponding to the eigenvector pointed in this direction indicates that this directional derivative is rapidly increasing so an optimization algorithm based on the hessian could predict that the steepest direction is not actually a promising search direction in this context. chapter numerical computation the search. the simplest method for doing so is known as newton s method. newton s method is based on using a second-order taylor series expansion to approximate x f f f near some point x xf x x h x if we then solve for the critical point of this function we obtain x h x xf when f is a positive definite quadratic function newton s method consists of applying equation once to jump to the minimum of the function directly. when f is not truly quadratic but can be locally approximated as a positive definite quadratic newton s method consists of applying equation multiple times. iteratively updating the approximation and jumping to the minimum of the approximation can reach the critical point much faster than gradient descent would. this is a useful property near a local minimum but it can be a harmful property near a saddle point. as discussed in section newton s method is only appropriate when the nearby critical point is a minimum the eigenvalues of the hessian are positive whereas gradient descent is not attracted to saddle points unless the gradient points toward them. optimization algorithms that use only the gradient such as gradient descent are called first-order optimization algorithms. optimization algorithms that also use the hessian matrix such as newton s method are called second-order optimization algorithms and wright the optimization algorithms employed in most contexts in this book are applicable to a wide variety of functions but come with almost no guarantees. deep learning algorithms tend to lack guarantees because the family of functions used in deep learning is quite complicated. in many other fields the dominant approach to optimization is to design optimization algorithms for a limited family of functions. in the context of deep learning we sometimes gain some guarantees by restricting ourselves to functions that are either lipschitz continuous or have lipschitz continuous derivatives. a lipschitz continuous function is a function f whose rate of change is bounded by a lipschitz constant l x y f l x y f this property is useful because it allows us to quantify our assumption that a small change in the input made by an algorithm such as gradient descent will have chapter numerical computation a small change in the output. lipschitz continuity is also a fairly weak constraint and many optimization problems in deep learning can be made lipschitz continuous with relatively minor modifications. perhaps the most successful field of specialized optimization is convex optimization. convex optimization algorithms are able to provide many more guarantees by making stronger restrictions. convex optimization algorithms are applicable only to convex functions functions for which the hessian is positive semidefinite everywhere. such functions are well-behaved because they lack saddle points and all of their local minima are necessarily global minima. however most problems in deep learning are difficult to express in terms of convex optimization. convex optimization is used only as a subroutine of some deep learning algorithms. ideas from the analysis of convex optimization algorithms can be useful for proving the convergence of deep learning algorithms. however in general the importance of convex optimization is greatly diminished in the context of deep learning. for more information about convex optimization see boyd and vandenberghe or rockafellar constrained optimization sometimes we wish not only to maximize or minimize a function fx over all possible values of x. instead we may wish to find the maximal or minimal value of f for values of x in some set s. this is known as constrained optimization. points x that lie within the set s are called feasible points in constrained optimization terminology. we often wish to find a solution that is small in some sense. a common approach in such situations is to impose a norm constraint such as x one simple approach to constrained optimization is simply to modify gradient descent taking the constraint into account. if we use a small constant step size we can make gradient descent steps then project the result back into s. if we use a line search we can search only over step sizes that yield new x points that are feasible or we can project each point on the line back into the constraint region. when possible this method can be made more efficient by projecting the gradient into the tangent space of the feasible region before taking the step or beginning the line search rosen a more sophisticated approach is to design a different unconstrained optimization problem whose solution can be converted into a solution to the original constrained optimization problem. for example if we want to minimize fx for chapter numerical computation r sin with x constrained to have exactly unit norm we can instead minimize x g f as the solution to the original problem. this approach requires creativity the transformation between optimization problems must be designed specifically for each case we encounter. with respect to then return sin the karush kuhn tucker provides a very general solution to constrained optimization. with the kkt approach we introduce a new function called the generalized lagrangian or generalized lagrange function. to define the lagrangian we first need to describe s in terms of equations and inequalities. we want a description of s in terms of m functions g and n functions h the equations involving g are called the equality constraints and the inequalities involving h are called j h inequality constraints i g and x so that s we introduce new variables i and j for each constraint these are called the kkt multipliers. the generalized lagrangian is then defined as l f i g j h i j we can now solve a constrained minimization problem using unconstrained optimization of the generalized lagrangian. observe that so long as at least one feasible point exists and is not permitted to have value then f min x max max l has the same optimal objective function value and set of optimal points asx this follows because any time the constraints are satisfied f min x s max max l f while any time a constraint is violated max max l kkt approach generalizes the method of lagrange multipliers which allows equality constraints but not inequality constraints. chapter numerical computation these properties guarantee that no infeasible point can be optimal and that the optimum within the feasible points is unchanged. to perform constrained maximization we can construct the generalized la grange function of which leads to this optimization problem f f min max x max i ig jh j we may also convert this to a problem with maximization in the outer loop max x min min f ig jh i j the sign of the term for the equality constraints does not matter we may define it with addition or subtraction as we wish because the optimization is free to choose any sign for each i. the inequality constraints are particularly interesting. we say that a constraint h is active if h if a constraint is not active then the solution to the problem found using that constraint would remain at least a local solution if that constraint were removed. it is possible that an inactive constraint excludes other solutions. for example a convex problem with an entire region of globally optimal points wide flat region of equal cost could have a subset of this region eliminated by constraints or a non-convex problem could have better local stationary points excluded by a constraint that is inactive at convergence. however the point found at convergence remains a stationary point whether or not the inactive constraints are included. because an inactive h has negative value then the solution to minx max max will have i we can thus lx in other words for all i we know observe that at the solution h that at least one of the constraints i must be active at the solution. to gain some intuition for this idea we can say that either the solution is on the boundary imposed by the inequality and we must use its kkt multiplier to influence the solution to x or the inequality has no influence on the solution and we represent this by zeroing out its kkt multiplier. and h a simple set of properties describe the optimal points of constrained optimization problems. these properties are called the karush-kuhn-tucker conditions they are necessary conditions but not always sufficient conditions for a point to be optimal. the conditions are karush kuhn and tucker the gradient of the generalized lagrangian is zero. all constraints on both x and the kkt multipliers are satisfied. chapter numerical computation the inequality constraints exhibit complementary slackness h for more information about the kkt approach see nocedal and wright example linear least squares suppose we want to find the value of x f that minimizes ax b there are specialized linear algebra algorithms that can solve this problem efficiently. however we can also explore how to solve it using gradient-based optimization as a simple example of how these techniques work. first we need to obtain the gradient ax b x a x f a ax a b. we can then follow this gradient downhill taking small steps. see algorithm for details. algorithm an algorithm to minimize fx using gradient descent starting from an arbitrary value of with respect to x ax b set the step size and tolerance to small positive numbers. while do a b ax a ax a a b x x end while one can also solve this problem using newton s method. in this case because the true function is quadratic the quadratic approximation employed by newton s method is exact and the algorithm converges to the global minimum in a single step. now suppose we wish to minimize the same function but subject to the constraint x x to do so we introduce the lagrangian l f x x we can now solve the problem min x max l chapter numerical computation the smallest-norm solution to the unconstrained least squares problem may be found using the moore-penrose pseudoinverse x a b. if this point is feasible then it is the solution to the constrained problem. otherwise we must find a solution where the constraint is active. by differentiating the lagrangian with respect to we obtain the equation x a ax a b x this tells us that the solution will take the form x a i a b. the magnitude of must be chosen such that the result obeys the constraint. we can find this value by performing gradient ascent on to do so observe l x x when the norm of x exceeds this derivative is positive so to follow the derivative uphill and increase the lagrangian with respect to we increase because the coefficient on the x x penalty has increased solving the linear equation for x will now yield a solution with smaller norm. the process of solving the linear equation and adjusting continues until x has the correct norm and the derivative on is this concludes the mathematical preliminaries that we use to develop machine learning algorithms. we are now ready to build and analyze some full-fledged learning systems. chapter machine learning basics deep learning is a specific kind of machine learning. in order to understand deep learning well one must have a solid understanding of the basic principles of machine learning. this chapter provides a brief course in the most important general principles that will be applied throughout the rest of the book. novice readers or those who want a wider perspective are encouraged to consider machine learning textbooks with a more comprehensive coverage of the fundamentals such as murphy if you are already familiar with machine learning basics feel free to skip ahead to section that section covers some perspectives on traditional machine learning techniques that have strongly influenced the development of deep learning algorithms. bishop or we begin with a definition of what a learning algorithm is and present an example the linear regression algorithm. we then proceed to describe how the challenge of fitting the training data differs from the challenge of finding patterns that generalize to new data. most machine learning algorithms have settings called hyperparameters that must be determined external to the learning algorithm itself we discuss how to set these using additional data. machine learning is essentially a form of applied statistics with increased emphasis on the use of computers to statistically estimate complicated functions and a decreased emphasis on proving confidence intervals around these functions we therefore present the two central approaches to statistics frequentist estimators and bayesian inference. most machine learning algorithms can be divided into the categories of supervised learning and unsupervised learning we describe these categories and give some examples of simple learning algorithms from each category. most deep learning algorithms are based on an optimization algorithm called stochastic gradient descent. we describe how to combine various algorithm components such as chapter machine learning basics an optimization algorithm a cost function a model and a dataset to build a machine learning algorithm. finally in section we describe some of the factors that have limited the ability of traditional machine learning to generalize. these challenges have motivated the development of deep learning algorithms that overcome these obstacles. learning algorithms a machine learning algorithm is an algorithm that is able to learn from data. but what do we mean by learning? mitchell provides the definition a computer program is said to learn from experience e with respect to some class of tasks t and performance measure p if its performance at tasks in t as measured by p improves with experience e. one can imagine a very wide variety of experiences e tasks t and performance measures p and we do not make any attempt in this book to provide a formal definition of what may be used for each of these entities. instead the following sections provide intuitive descriptions and examples of the different kinds of tasks performance measures and experiences that can be used to construct machine learning algorithms. the task t machine learning allows us to tackle tasks that are too difficult to solve with fixed programs written and designed by human beings. from a scientific and philosophical point of view machine learning is interesting because developing our understanding of machine learning entails developing our understanding of the principles that underlie intelligence. in this relatively formal definition of the word task the process of learning itself is not the task. learning is our means of attaining the ability to perform the task. for example if we want a robot to be able to walk then walking is the task. we could program the robot to learn to walk or we could attempt to directly write a program that specifies how to walk manually. machine learning tasks are usually described in terms of how the machine learning system should process an example. an example is a collection of features that have been quantitatively measured from some object or event that we want the machine learning system to process. we typically represent an example as a n where each entry xi of the vector is another feature. for example vector x the features of an image are usually the values of the pixels in the image. r chapter machine learning basics many kinds of tasks can be solved with machine learning. some of the most common machine learning tasks include the following k classification in this type of task the computer program is asked to specify which of k categories some input belongs to. to solve this task the learning n algorithm is usually asked to produce a function f r when y f the model assigns an input described by vector x to a category identified by numeric code y. there are other variants of the classification task for example where f outputs a probability distribution over classes. an example of a classification task is object recognition where the input is an image described as a set of pixel brightness values and the output is a numeric code identifying the object in the image. for example the willow garage robot is able to act as a waiter that can recognize different kinds of drinks and deliver them to people on command modern object recognition is best accomplished with fellow deep learning object recognition is the same basic technology that allows computers to recognize faces which can be used to automatically tag people in photo collections and allow computers to interact more naturally with their users. krizhevsky et al. ioffe and szegedy et al. et al. set single classification with missing inputs classification becomes more challenging if the computer program is not guaranteed that every measurement in its input vector will always be provided. in order to solve the classification task the learning algorithm only has to define a function mapping from a vector input to a categorical output. when some of the inputs may be missing rather than providing a single classification function the learning algorithm must learn a of functions. each function corresponds to classifying x with a different subset of its inputs missing. this kind of situation arises frequently in medical diagnosis because many kinds of medical tests are expensive or invasive. one way to efficiently define such a large set of functions is to learn a probability distribution over all of the relevant variables then solve the classification task by marginalizing out the missing variables. with n input variables we can now obtain all different classification functions needed for each possible set of missing inputs but we only need to learn a single function describing the joint probability distribution. see goodfellow for an example of a deep probabilistic model applied to such a task in this way. many of the other tasks described in this section can also be generalized to work with missing inputs classification with missing inputs is just one example of what machine learning can do. et al. chapter machine learning basics regression in this type of task the computer program is asked to predict a numerical value given some input. to solve this task the learning algorithm n is asked to output a function f r r. this type of task is similar to classification except that the format of output is different. an example of a regression task is the prediction of the expected claim amount that an insured person will make to set insurance premiums or the prediction of future prices of securities. these kinds of predictions are also used for algorithmic trading. transcription in this type of task the machine learning system is asked to observe a relatively unstructured representation of some kind of data and transcribe it into discrete textual form. for example in optical character recognition the computer program is shown a photograph containing an image of text and is asked to return this text in the form of a sequence of characters in ascii or unicode format. google street view uses deep learning to process address numbers in this way goodfellow et al. another example is speech recognition where the computer program is provided an audio waveform and emits a sequence of characters or word id codes describing the words that were spoken in the audio recording. deep learning is a crucial component of modern speech recognition systems used at major companies including microsoft ibm and google hinton et al. machine translation in a machine translation task the input already consists of a sequence of symbols in some language and the computer program must convert this into a sequence of symbols in another language. this is commonly applied to natural languages such as translating from english to french. deep learning has recently begun to have an important impact on this kind of task bahdanau et al. et al. structured output structured output tasks involve any task where the output is a vector other data structure containing multiple values with important relationships between the different elements. this is a broad category and subsumes the transcription and translation tasks described above but also many other tasks. one example is parsing mapping a natural language sentence into a tree that describes its grammatical structure and tagging nodes of the trees as being verbs nouns or adverbs and so on. see for an example of deep learning applied to a parsing task. another example is pixel-wise segmentation of images where the computer program assigns every pixel in an image to a specific category. for collobert chapter machine learning basics example deep learning can be used to annotate the locations of roads in aerial photographs and hinton the output need not have its form mirror the structure of the input as closely as in these annotation-style tasks. for example in image captioning the computer program observes an image and outputs a natural language sentence describing the image et al. these tasks are karpathy and li fang called structured output tasks because the program must output several values that are all tightly inter-related. for example the words produced by an image captioning program must form a valid sentence. donahue b mao vinyals et al. et al. xu et al. et al. et al. anomaly detection in this type of task the computer program sifts through a set of events or objects and flags some of them as being unusual or atypical. an example of an anomaly detection task is credit card fraud detection. by modeling your purchasing habits a credit card company can detect misuse of your cards. if a thief steals your credit card or credit card information the thief s purchases will often come from a different probability distribution over purchase types than your own. the credit card company can prevent fraud by placing a hold on an account as soon as that card has been used for an uncharacteristic purchase. see for a survey of anomaly detection methods. chandola et al. synthesis and sampling in this type of task the machine learning algorithm is asked to generate new examples that are similar to those in the training data. synthesis and sampling via machine learning can be useful for media applications where it can be expensive or boring for an artist to generate large volumes of content by hand. for example video games can automatically generate textures for large objects or landscapes rather than requiring an artist to manually label each pixel in some cases we want the sampling or synthesis procedure to generate some specific kind of output given the input. for example in a speech synthesis task we provide a written sentence and ask the program to emit an audio waveform containing a spoken version of that sentence. this is a kind of structured output task but with the added qualification that there is no single correct output for each input and we explicitly desire a large amount of variation in the output in order for the output to seem more natural and realistic. luo et al. imputation of missing values in this type of task the machine learning n but with some entries xi of x algorithm is given a new example x missing. the algorithm must provide a prediction of the values of the missing entries. r chapter machine learning basics denoising in this type of task the machine learning algorithm is given in n obtained by an unknown corruption process input a corrupted example x n. the learner must predict the clean example from a clean example x x from its corrupted version x or more generally predict the conditional probability distribution px x. r r n density estimation or probability mass function estimation in the density estimation problem the machine learning algorithm is asked to learn a function pmodel r r where pmodelx can be interpreted as a probability density function x is continuous or a probability mass function x is discrete on the space that the examples were drawn from. to do such a task well will specify exactly what that means when we discuss performance measures p the algorithm needs to learn the structure of the data it has seen. it must know where examples cluster tightly and where they are unlikely to occur. most of the tasks described above require the learning algorithm to at least implicitly capture the structure of the probability distribution. density estimation allows us to explicitly capture that distribution. in principle we can then perform computations on that distribution in order to solve the other tasks as well. for example if we have performed density estimation to obtain a probability distribution px we can use that distribution to solve the missing value imputation task. if a value xi is missing and all of the other values denoted x i are given then we know the distribution over it is given by pxi i. in practice density estimation does not always allow us to solve all of these related tasks because in many cases the required operations on p x are computationally intractable. x of course many other tasks and types of tasks are possible. the types of tasks we list here are intended only to provide examples of what machine learning can do not to define a rigid taxonomy of tasks. the performance measure p in order to evaluate the abilities of a machine learning algorithm we must design a quantitative measure of its performance. usually this performance measure p is specific to the task being carried out by the system. t for tasks such as classification classification with missing inputs and transcription we often measure the accuracy of the model. accuracy is just the proportion of examples for which the model produces the correct output. we can chapter machine learning basics also obtain equivalent information by measuring the error rate the proportion of examples for which the model produces an incorrect output. we often refer to the error rate as the expected loss. the loss on a particular example is if it is correctly classified and if it is not. for tasks such as density estimation it does not make sense to measure accuracy error rate or any other kind of loss. instead we must use a different performance metric that gives the model a continuous-valued score for each example. the most common approach is to report the average log-probability the model assigns to some examples. usually we are interested in how well the machine learning algorithm performs on data that it has not seen before since this determines how well it will work when deployed in the real world. we therefore evaluate these performance measures using a test set of data that is separate from the data used for training the machine learning system. the choice of performance measure may seem straightforward and objective but it is often difficult to choose a performance measure that corresponds well to the desired behavior of the system. in some cases this is because it is difficult to decide what should be measured. for example when performing a transcription task should we measure the accuracy of the system at transcribing entire sequences or should we use a more fine-grained performance measure that gives partial credit for getting some elements of the sequence correct? when performing a regression task should we penalize the system more if it frequently makes medium-sized mistakes or if it rarely makes very large mistakes? these kinds of design choices depend on the application. in other cases we know what quantity we would ideally like to measure but measuring it is impractical. for example this arises frequently in the context of density estimation. many of the best probabilistic models represent probability distributions only implicitly. computing the actual probability value assigned to a specific point in space in many such models is intractable. in these cases one must design an alternative criterion that still corresponds to the design objectives or design a good approximation to the desired criterion. the experience e machine learning algorithms can be broadly categorized as unsupervised or supervised by what kind of experience they are allowed to have during the learning process. most of the learning algorithms in this book can be understood as being allowed to experience an entire dataset. a dataset is a collection of many examples as chapter machine learning basics defined in section sometimes we will also call examples data points fisher one of the oldest datasets studied by statisticians and machine learning researchers is the iris dataset it is a collection of measurements of different parts of iris plants. each individual plant corresponds to one example. the features within each example are the measurements of each of the parts of the plant the sepal length sepal width petal length and petal width. the dataset also records which species each plant belonged to. three different species are represented in the dataset. unsupervised learning algorithms experience a dataset containing many features then learn useful properties of the structure of this dataset. in the context of deep learning we usually want to learn the entire probability distribution that generated a dataset whether explicitly as in density estimation or implicitly for tasks like synthesis or denoising. some other unsupervised learning algorithms perform other roles like clustering which consists of dividing the dataset into clusters of similar examples. supervised learning algorithms experience a dataset containing features but each example is also associated with a label or target. for example the iris dataset is annotated with the species of each iris plant. a supervised learning algorithm can study the iris dataset and learn to classify iris plants into three different species based on their measurements. roughly speaking unsupervised learning involves observing several examples of a random vector x and attempting to implicitly or explicitly learn the probability distribution px or some interesting properties of that distribution while supervised learning involves observing several examples of a random vector x and an associated value or vector y and learning to predict y from x usually by estimating py x the term supervised learning originates from the view of the target y being provided by an instructor or teacher who shows the machine learning system what to do. in unsupervised learning there is no instructor or teacher and the algorithm must learn to make sense of the data without this guide. unsupervised learning and supervised learning are not formally defined terms. the lines between them are often blurred. many machine learning technologies can be used to perform both tasks. for example the chain rule of probability states that for a vector x n the joint distribution can be decomposed as r n p pxi x xi this decomposition means that we can solve the ostensibly unsupervised problem of modeling px by splitting it into n supervised learning problems. alternatively we chapter machine learning basics x by using traditional can solve the supervised learning problem of learning py unsupervised learning technologies to learn the joint distribution px y and inferring p y x p y p y y though unsupervised learning and supervised learning are not completely formal or distinct concepts they do help to roughly categorize some of the things we do with machine learning algorithms. traditionally people refer to regression classification and structured output problems as supervised learning. density estimation in support of other tasks is usually considered unsupervised learning. other variants of the learning paradigm are possible. for example in semisupervised learning some examples include a supervision target but others do not. in multi-instance learning an entire collection of examples is labeled as containing or not containing an example of a class but the individual members of the collection are not labeled. for a recent example of multi-instance learning with deep models see kotzias et al. some machine learning algorithms do not just experience a fixed dataset. for example reinforcement learning algorithms interact with an environment so there is a feedback loop between the learning system and its experiences. such algorithms are beyond the scope of this book. please see sutton and barto or bertsekas and tsitsiklis for information about reinforcement learning for the deep learning approach to reinforcement learning. and mnih et al. most machine learning algorithms simply experience a dataset. a dataset can be described in many ways. in all cases a dataset is a collection of examples which are in turn collections of features. one common way of describing a dataset is with a a design matrix is a matrix containing a different example in each row. each column of the matrix corresponds to a different feature. for instance the iris dataset contains examples with four features for each example. this means we can represent the dataset with a design matrix x where is the sepal length of plant i is the sepal width of plant i etc. we will describe most of the learning algorithms in this book in terms of how they operate on design matrix datasets. design matrix r of course to describe a dataset as a design matrix it must be possible to describe each example as a vector and each of these vectors must be the same size. this is not always possible. for example if you have a collection of photographs with different widths and heights then different photographs will contain different numbers of pixels so not all of the photographs may be described with the same describe how to handle different length of vector. section and chapter chapter machine learning basics types of such heterogeneous data. in cases like these rather than describing the dataset as a matrix with m rows we will describe it as a set containing m elements x this notation does not imply that any two example vectors x and x have the same size. in the case of supervised learning the example contains a label or target as well as a collection of features. for example if we want to use a learning algorithm to perform object recognition from photographs we need to specify which object appears in each of the photos. we might do this with a numeric code with signifying a person signifying a car signifying a cat etc. often when working with a dataset containing a design matrix of feature observations x we also provide a vector of labels yi providing the label for example with y of course sometimes the label may be more than just a single number. for example if we want to train a speech recognition system to transcribe entire sentences then the label for each example sentence is a sequence of words. just as there is no formal definition of supervised and unsupervised learning there is no rigid taxonomy of datasets or experiences. the structures described here cover most cases but it is always possible to design new ones for new applications. example linear regression our definition of a machine learning algorithm as an algorithm that is capable of improving a computer program s performance at some task via experience is somewhat abstract. to make this more concrete we present an example of a simple machine learning algorithm linear regression. we will return to this example repeatedly as we introduce more machine learning concepts that help to understand its behavior. as the name implies linear regression solves a regression problem. in other n as input and words the goal is to build a system that can take a vector x predict the value of a scalar y r as its output. in the case of linear regression the output is a linear function of the input. let y be the value that our model predicts should take on. we define the output to be r y where w y w n is a vector of r parameters x parameters are values that control the behavior of the system. in this case wi is the coefficient that we multiply by feature xi before summing up the contributions from all the features. we can think of w as a set of weights that determine how each feature affects the prediction. if a feature xi receives a positive weight wi chapter machine learning basics then increasing the value of that feature increases the value of our prediction y. if a feature receives a negative weight then increasing the value of that feature decreases the value of our prediction. if a feature s weight is large in magnitude then it has a large effect on the prediction. if a feature s weight is zero it has no effect on the prediction. we thus have a definition of our task t to predict y from x by outputting y w x. next we need a definition of our performance measure suppose that we have a design matrix of m example inputs that we will not use for training only for evaluating how well the model performs. we also have a vector of regression targets providing the correct value of y for each of these examples. because this dataset will only be used for evaluation we call it the test test and the vector of regression set. we refer to the design matrix of inputs as x targets as y test one way of measuring the performance of the model is to compute the mean test gives the predictions of the squared error of the model on the test set. if y model on the test set then the mean squared error is given by msetest m i test y y test i intuitively one can see that this error measure decreases to when y we can also see that test y test msetest m test y test y so the error increases whenever the euclidean distance between the predictions and the targets increases. to make a machine learning algorithm we need to design an algorithm that will improve the weights w in a way that reduces msetest when the algorithm train one is allowed to gain experience by observing a training set intuitive way of doing this we will justify later in section is just to minimize the mean squared error on the training set msetrain. train y to minimize mse train we can simply solve for where its gradient is wmsetrain train train y y train train w y m x w m w chapter machine learning basics y linear regression example n i a r t e s m optimization of w figure a linear regression problem with a training set consisting of ten data points each containing one feature. because there is only one feature the weight vector w contains only a single parameter to learn that linear regression learns to set such that the line y comes as close as possible to passing through all the training points. found by the normal equations which we can see minimizes the mean squared error on the training set. the plotted point indicates the value of train w y train train w w x x train w w x x train train w y train train y train train y w x train y train w x train train train train x train train y x y w x x the system of equations whose solution is given by equation is known as constitutes a simple learning the normal equations. evaluating equation algorithm. for an example of the linear regression learning algorithm in action see figure it is worth noting that the term linear regression is often used to refer to a slightly more sophisticated model with one additional parameter an intercept term in this model b y w x b so the mapping from parameters to predictions is still a linear function but the mapping from features to predictions is now an affine function. this extension to affine functions means that the plot of the model s predictions still looks like a line but it need not pass through the origin. instead of adding the bias parameter chapter machine learning basics b one can continue to use the model with only weights but augment x with an extra entry that is always set to the weight corresponding to the extra entry plays the role of the bias parameter. we will frequently use the term linear when referring to affine functions throughout this book. the intercept term b is often called the bias parameter of the affine transformation. this terminology derives from the point of view that the output of the transformation is biased toward being b in the absence of any input. this term is different from the idea of a statistical bias in which a statistical estimation algorithm s expected estimate of a quantity is not equal to the true quantity. linear regression is of course an extremely simple and limited learning algorithm but it provides an example of how a learning algorithm can work. in the subsequent sections we will describe some of the basic principles underlying learning algorithm design and demonstrate how these principles can be used to build more complicated learning algorithms. capacity overfitting and underfitting the central challenge in machine learning is that we must perform well on new previously unseen inputs not just those on which our model was trained. the ability to perform well on previously unobserved inputs is called generalization. typically when training a machine learning model we have access to a training set we can compute some error measure on the training set called the training error and we reduce this training error. so far what we have described is simply an optimization problem. what separates machine learning from optimization is that we want the generalization error also called the test error to be low as well. the generalization error is defined as the expected value of the error on a new input. here the expectation is taken across different possible inputs drawn from the distribution of inputs we expect the system to encounter in practice. we typically estimate the generalization error of a machine learning model by measuring its performance on a test set of examples that were collected separately from the training set. in our linear regression example we trained the model by minimizing the training error train m x train w y but we actually care about the test error test m train x test w y test how can we affect performance on the test set when we get to observe only the chapter machine learning basics training set? the field of statistical learning theory provides some answers. if the training and the test set are collected arbitrarily there is indeed little we can do. if we are allowed to make some assumptions about how the training and test set are collected then we can make some progress. the train and test data are generated by a probability distribution over datasets called the data generating process. we typically make a set of assumptions known collectively as the i.i.d. assumptions. these assumptions are that the examples in each dataset are independent from each other and that the train set and test set are identically distributed drawn from the same probability distribution as each other. this assumption allows us to describe the data generating process with a probability distribution over a single example. the same distribution is then used to generate every train example and every test example. we call that shared underlying distribution the data generating distribution denoted pdata. this probabilistic framework and the i.i.d. assumptions allow us to mathematically study the relationship between training error and test error. one immediate connection we can observe between the training and test error is that the expected training error of a randomly selected model is equal to the expected test error of that model. suppose we have a probability distribution px y and we sample from it repeatedly to generate the train set and the test set. for some fixed value w the expected training set error is exactly the same as the expected test set error because both expectations are formed using the same dataset sampling process. the only difference between the two conditions is the name we assign to the dataset we sample. of course when we use a machine learning algorithm we do not fix the parameters ahead of time then sample both datasets. we sample the training set then use it to choose the parameters to reduce training set error then sample the test set. under this process the expected test error is greater than or equal to the expected value of training error. the factors determining how well a machine learning algorithm will perform are its ability to make the training error small. make the gap between training and test error small. these two factors correspond to the two central challenges in machine learning underfitting and overfitting underfitting occurs when the model is not able to obtain a sufficiently low error value on the training set. overfitting occurs when the gap between the training error and test error is too large. we can control whether a model is more likely to overfit or underfit by altering its capacity. informally a model s capacity is its ability to fit a wide variety of chapter machine learning basics functions. models with low capacity may struggle to fit the training set. models with high capacity can overfit by memorizing properties of the training set that do not serve them well on the test set. one way to control the capacity of a learning algorithm is by choosing its hypothesis space the set of functions that the learning algorithm is allowed to select as being the solution. for example the linear regression algorithm has the set of all linear functions of its input as its hypothesis space. we can generalize linear regression to include polynomials rather than just linear functions in its hypothesis space. doing so increases the model s capacity. a polynomial of degree one gives us the linear regression model with which we are already familiar with prediction y b wx. by introducing as another feature provided to the linear regression model we can learn a model that is quadratic as a function of y w b w the output is though this model implements a quadratic function of its still a linear function of the parameters so we can still use the normal equations to train the model in closed form. we can continue to add more powers of x as additional features for example to obtain a polynomial of degree input y b wixi. machine learning algorithms will generally perform best when their capacity is appropriate for the true complexity of the task they need to perform and the amount of training data they are provided with. models with insufficient capacity are unable to solve complex tasks. models with high capacity can solve complex tasks but when their capacity is higher than needed to solve the present task they may overfit. figure shows this principle in action. we compare a linear quadratic and predictor attempting to fit a problem where the true underlying function is quadratic. the linear function is unable to capture the curvature in the true underlying problem so it underfits. the predictor is capable of representing the correct function but it is also capable of representing infinitely many other functions that pass exactly through the training points because we chapter machine learning basics have more parameters than training examples. we have little chance of choosing a solution that generalizes well when so many wildly different solutions exist. in this example the quadratic model is perfectly matched to the true structure of the task so it generalizes well to new data. figure we fit three models to this example training set. the training data was generated synthetically by randomly sampling x values and choosing y deterministically by evaluating a quadratic function. linear function fit to the data suffers from underfitting it cannot capture the curvature that is present in the data. a quadratic function fit to the data generalizes well to unseen points. it does not suffer from a significant amount of overfitting or underfitting. a polynomial of degree fit to the data suffers from overfitting. here we used the moore-penrose pseudoinverse to solve the underdetermined normal equations. the solution passes through all of the training points exactly but we have not been lucky enough for it to extract the correct structure. it now has a deep valley in between two training points that does not appear in the true underlying function. it also increases sharply on the left side of the data while the true function decreases in this area. so far we have described only one way of changing a model s capacity by changing the number of input features it has and simultaneously adding new parameters associated with those features. there are in fact many ways of changing a model s capacity. capacity is not determined only by the choice of model. the model specifies which family of functions the learning algorithm can choose from when varying the parameters in order to reduce a training objective. this is called the representational capacity of the model. in many cases finding the best function within this family is a very difficult optimization problem. in practice the learning algorithm does not actually find the best function but merely one that significantly reduces the training error. these additional limitations such as chapter machine learning basics the imperfection of the optimization algorithm mean that the learning algorithm s effective capacity may be less than the representational capacity of the model family. our modern ideas about improving the generalization of machine learning models are refinements of thought dating back to philosophers at least as early as ptolemy. many early scholars invoke a principle of parsimony that is now most widely known as occam s razor this principle states that among competing hypotheses that explain known observations equally well one should choose the simplest one. this idea was formalized and made more precise in the century by the founders of statistical learning theory and chervonenkis vapnik blumer vapnik et al. statistical learning theory provides various means of quantifying model capacity. among these the most well-known is the vapnik-chervonenkis dimension or vc dimension. the vc dimension measures the capacity of a binary classifier. the vc dimension is defined as being the largest possible value of m for which there exists a training set of m different x points that the classifier can label arbitrarily. quantifying the capacity of the model allows statistical learning theory to make quantitative predictions. the most important results in statistical learning theory show that the discrepancy between training error and generalization error is bounded from above by a quantity that grows as the model capacity grows but shrinks as the number of training examples increases and chervonenkis vapnik blumer these bounds provide intellectual justification that machine learning algorithms can work but they are rarely used in practice when working with deep learning algorithms. this is in part because the bounds are often quite loose and in part because it can be quite difficult to determine the capacity of deep learning algorithms. the problem of determining the capacity of a deep learning model is especially difficult because the effective capacity is limited by the capabilities of the optimization algorithm and we have little theoretical understanding of the very general non-convex optimization problems involved in deep learning. vapnik et al. we must remember that while simpler functions are more likely to generalize have a small gap between training and test error we must still choose a sufficiently complex hypothesis to achieve low training error. typically training error decreases until it asymptotes to the minimum possible error value as model capacity increases the error measure has a minimum value. typically generalization error has a u-shaped curve as a function of model capacity. this is illustrated in figure to reach the most extreme case of arbitrarily high capacity we introduce chapter machine learning basics underfitting zone overfitting zone training error generalization error r o r r e optimal capacity capacity generalization gap figure typical relationship between capacity and error. training and test error behave differently. at the left end of the graph training error and generalization error are both high. this is the underfitting regime. as we increase capacity training error decreases but the gap between training and generalization error increases. eventually the size of this gap outweighs the decrease in training error and we enter the overfitting regime where capacity is too large above the optimal capacity. the concept of non-parametric models. so far we have seen only parametric models such as linear regression. parametric models learn a function described by a parameter vector whose size is finite and fixed before any data is observed. non-parametric models have no such limitation. sometimes non-parametric models are just theoretical abstractions as an algorithm that searches over all possible probability distributions that cannot be implemented in practice. however we can also design practical non-parametric models by making their complexity a function of the training set size. one example of such an algorithm is nearest neighbor regression. unlike linear regression which has a fixed-length vector of weights the nearest neighbor regression model simply stores the x and y from the training set. when asked to classify a test point x the model looks up the nearest entry in the training set and returns the x associated regression target. in other words y yi where i arg min the algorithm can also be generalized to distance metrics other than the norm such as learned distance metrics if the algorithm is allowed to break ties by averaging the yi values for all xi that are tied for nearest then this algorithm is able to achieve the minimum possible training error might be greater than zero if two identical inputs are associated with different outputs on any regression dataset. goldberger et al. xi finally we can also create a non-parametric learning algorithm by wrapping a chapter machine learning basics parametric learning algorithm inside another algorithm that increases the number of parameters as needed. for example we could imagine an outer loop of learning that changes the degree of the polynomial learned by linear regression on top of a polynomial expansion of the input. the ideal model is an oracle that simply knows the true probability distribution that generates the data. even such a model will still incur some error on many problems because there may still be some noise in the distribution. in the case of supervised learning the mapping from x to y may be inherently stochastic or y may be a deterministic function that involves other variables besides those included in x. the error incurred by an oracle making predictions from the true distribution bayes error. is called the p y training and generalization error vary as the size of the training set varies. expected generalization error can never increase as the number of training examples increases. for non-parametric models more data yields better generalization until the best possible error is achieved. any fixed parametric model with less than optimal capacity will asymptote to an error value that exceeds the bayes error. see figure for an illustration. note that it is possible for the model to have optimal capacity and yet still have a large gap between training and generalization error. in this situation we may be able to reduce this gap by gathering more training examples. the no free lunch theorem learning theory claims that a machine learning algorithm can generalize well from a finite training set of examples. this seems to contradict some basic principles of logic. inductive reasoning or inferring general rules from a limited set of examples is not logically valid. to logically infer a rule describing every member of a set one must have information about every member of that set. in part machine learning avoids this problem by offering only probabilistic rules rather than the entirely certain rules used in purely logical reasoning. machine learning promises to find rules that are probably members of the set they concern. correct about most unfortunately even this does not resolve the entire problem. the no free states that averaged over lunch theorem for machine learning all possible data generating distributions every classification algorithm has the same error rate when classifying previously unobserved points. in other words in some sense no machine learning algorithm is universally any better than any other. the most sophisticated algorithm we can conceive of has the same average chapter machine learning basics figure the effect of the training dataset size on the train and test error as well as on the optimal model capacity. we constructed a synthetic regression problem based on adding a moderate amount of noise to a polynomial generated a single test set and then generated several different sizes of training set. for each size we generated different training sets in order to plot error bars showing percent confidence intervals. mse on the training and test set for two different models a quadratic model and a model with degree chosen to minimize the test error. both are fit in closed form. for the quadratic model the training error increases as the size of the training set increases. this is because larger datasets are harder to fit. simultaneously the test error decreases because fewer incorrect hypotheses are consistent with the training data. the quadratic model does not have enough capacity to solve the task so its test error asymptotes to a high value. the test error at optimal capacity asymptotes to the bayes error. the training error can fall below the bayes error due to the ability of the training algorithm to memorize specific instances of the training set. as the training size increases to infinity the training error of any fixed-capacity model the quadratic model must rise to at least the bayes error. as the training set size increases the optimal capacity here as the degree of the optimal polynomial regressor increases. the optimal capacity plateaus after reaching sufficient complexity to solve the task. chapter machine learning basics performance all possible tasks as merely predicting that every point belongs to the same class. fortunately these results hold only when we average over possible data generating distributions. if we make assumptions about the kinds of probability distributions we encounter in real-world applications then we can design learning algorithms that perform well on these distributions. all this means that the goal of machine learning research is not to seek a universal learning algorithm or the absolute best learning algorithm. instead our goal is to understand what kinds of distributions are relevant to the real world that an ai agent experiences and what kinds of machine learning algorithms perform well on data drawn from the kinds of data generating distributions we care about. regularization the no free lunch theorem implies that we must design our machine learning algorithms to perform well on a specific task. we do so by building a set of preferences into the learning algorithm. when these preferences are aligned with the learning problems we ask the algorithm to solve it performs better. so far the only method of modifying a learning algorithm that we have discussed concretely is to increase or decrease the model s representational capacity by adding or removing functions from the hypothesis space of solutions the learning algorithm is able to choose. we gave the specific example of increasing or decreasing the degree of a polynomial for a regression problem. the view we have described so far is oversimplified. the behavior of our algorithm is strongly affected not just by how large we make the set of functions allowed in its hypothesis space but by the specific identity of those functions. the learning algorithm we have studied so far linear regression has a hypothesis space consisting of the set of linear functions of its input. these linear functions can be very useful for problems where the relationship between inputs and outputs truly is close to linear. they are less useful for problems that behave in a very nonlinear fashion. for example linear regression would not perform very well if we tried to use it to predict sinx from x. we can thus control the performance of our algorithms by choosing what kind of functions we allow them to draw solutions from as well as by controlling the amount of these functions. we can also give a learning algorithm a preference for one solution in its hypothesis space to another. this means that both functions are eligible but one is preferred. the unpreferred solution will be chosen only if it fits the training chapter machine learning basics data significantly better than the preferred solution. for example we can modify the training criterion for linear regression to include weight decay. to perform linear regression with weight decay we minimize a sum comprising both the mean squared error on the training and a criterion j that expresses a preference for the weights to have smaller squared norm. specifically w msetrain w j w where is a value chosen ahead of time that controls the strength of our preference for smaller weights. when we impose no preference and larger forces the weights to become smaller. minimizing j results in a choice of weights that make a tradeoff between fitting the training data and being small. this gives us solutions that have a smaller slope or put weight on fewer of the features. as an example of how we can control a model s tendency to overfit or underfit via weight decay we can train a high-degree polynomial regression model with different values of for the results. see figure figure we fit a high-degree polynomial regression model to our example training set from figure the true function is quadratic but here we use only models with degree we vary the amount of weight decay to prevent these high-degree models from overfitting. very large we can force the model to learn a function with no slope at all. this underfits because it can only represent a constant function. with a medium value of the learning algorithm recovers a curve with the right general shape. even though the model is capable of representing functions with much more complicated shape weight decay has encouraged it to use a simpler function described by smaller coefficients. with weight decay approaching zero using the moore-penrose pseudoinverse to solve the underdetermined problem with minimal regularization the polynomial overfits significantly as we saw in figure chapter machine learning basics more generally we can regularize a model that learns a function fx by adding a penalty called a regularizer to the cost function. in the case of weight decay the regularizer is w we will see that many other regularizers are possible. w. in chapter expressing preferences for one function over another is a more general way of controlling a model s capacity than including or excluding members from the hypothesis space. we can think of excluding a function from a hypothesis space as expressing an infinitely strong preference against that function. in our weight decay example we expressed our preference for linear functions defined with smaller weights explicitly via an extra term in the criterion we minimize. there are many other ways of expressing preferences for different solutions both implicitly and explicitly. together these different approaches are known as regularization. regularization is any modification we make to a learning algorithm that is intended to reduce its generalization error but not its training error. regularization is one of the central concerns of the field of machine learning rivaled in its importance only by optimization. the no free lunch theorem has made it clear that there is no best machine learning algorithm and in particular no best form of regularization. instead we must choose a form of regularization that is well-suited to the particular task we want to solve. the philosophy of deep learning in general and this book in particular is that a very wide range of tasks as all of the intellectual tasks that people can do may all be solved effectively using very general-purpose forms of regularization. hyperparameters and validation sets most machine learning algorithms have several settings that we can use to control the behavior of the learning algorithm. these settings are called hyperparameters. the values of hyperparameters are not adapted by the learning algorithm itself we can design a nested learning procedure where one learning algorithm learns the best hyperparameters for another learning algorithm. in the polynomial regression example we saw in figure there is a single hyperparameter the degree of the polynomial which acts as a capacity hyperparameter. the value used to control the strength of weight decay is another example of a hyperparameter. sometimes a setting is chosen to be a hyperparameter that the learning algorithm does not learn because it is difficult to optimize. more frequently the chapter machine learning basics setting must be a hyperparameter because it is not appropriate to learn that hyperparameter on the training set. this applies to all hyperparameters that control model capacity. if learned on the training set such hyperparameters would always choose the maximum possible model capacity resulting in overfitting to figure for example we can always fit the training set better with a higher degree polynomial and a weight decay setting of than we could with a lower degree polynomial and a positive weight decay setting. to solve this problem we need a validation set of examples that the training algorithm does not observe. earlier we discussed how a held-out test set composed of examples coming from the same distribution as the training set can be used to estimate the generalization error of a learner after the learning process has completed. it is important that the test examples are not used in any way to make choices about the model including its hyperparameters. for this reason no example from the test set can be used in the validation set. therefore we always construct the validation set from the training data. specifically we split the training data into two disjoint subsets. one of these subsets is used to learn the parameters. the other subset is our validation set used to estimate the generalization error during or after training allowing for the hyperparameters to be updated accordingly. the subset of data used to learn the parameters is still typically called the training set even though this may be confused with the larger pool of data used for the entire training process. the subset of data used to guide the selection of hyperparameters is called the validation set. typically one uses about of the training data for training and for validation. since the validation set is used to train the hyperparameters the validation set error will underestimate the generalization error though typically by a smaller amount than the training error. after all hyperparameter optimization is complete the generalization error may be estimated using the test set. in practice when the same test set has been used repeatedly to evaluate performance of different algorithms over many years and especially if we consider all the attempts from the scientific community at beating the reported state-ofthe-art performance on that test set we end up having optimistic evaluations with the test set as well. benchmarks can thus become stale and then do not reflect the true field performance of a trained system. thankfully the community tends to move on to new usually more ambitious and larger benchmark datasets. chapter machine learning basics cross-validation dividing the dataset into a fixed training set and a fixed test set can be problematic if it results in the test set being small. a small test set implies statistical uncertainty around the estimated average test error making it difficult to claim that algorithm a works better than algorithm on the given task. b when the dataset has hundreds of thousands of examples or more this is not a serious issue. when the dataset is too small are alternative procedures enable one to use all of the examples in the estimation of the mean test error at the price of increased computational cost. these procedures are based on the idea of repeating the training and testing computation on different randomly chosen subsets or splits of the original dataset. the most common of these is the k-fold cross-validation procedure shown in algorithm in which a partition of the dataset is formed by splitting it into k non-overlapping subsets. the test error may then be estimated by taking the average test error across k trials. on trial i the i subset of the data is used as the test set and the rest of the data is used as the training set. one problem is that there exist no unbiased estimators of the variance of such average error estimators and grandvalet but approximations are typically used. estimators bias and variance the field of statistics gives us many tools that can be used to achieve the machine learning goal of solving a task not only on the training set but also to generalize. foundational concepts such as parameter estimation bias and variance are useful to formally characterize notions of generalization underfitting and overfitting. point estimation point estimation is the attempt to provide the single best prediction of some quantity of interest. in general the quantity of interest can be a single parameter or a vector of parameters in some parametric model such as the weights in our linear regression example in section but it can also be a whole function. in order to distinguish estimates of parameters from their true value our convention will be to denote a point estimate of a parameter by x let be a set of m independent and identically distributed chapter machine learning basics algorithm the k-fold cross-validation algorithm. it can be used to estimate generalization error of a learning algorithm a when the given dataset d is too small for a simple traintest or trainvalid split to yield accurate estimation of generalization error because the mean of a loss l on a small test set may have too high variance. the dataset d contains as elements the abstract examples z the i-th example which could stand for an pair z y in the case of supervised learning or for just an input z x in the case of unsupervised learning. the algorithm returns the vector of errors e for each example in d whose mean is the estimated generalization error. the errors on individual examples can be used to compute a confidence interval around the mean while these confidence intervals are not well-justified after the use of cross-validation it is still common practice to use them to declare that algorithm a is better than algorithm b only if the confidence interval of the error of algorithm a lies below and does not intersect the confidence interval of algorithm b. define kfoldxv require d the given dataset with elements z require a the learning algorithm seen as a function that takes a dataset as d a l k input and outputs a learned function require l the loss function seen as a function from a learned function f and an example z d to a scalar r require k the number of folds into mutually exclusive subsets di whose union is do split i for k d from k fi d d i for z in d i do ej fi z end for end for return e chapter machine learning basics data points. a point estimator or statistic is any function of the data m x the definition does not require that g return a value that is close to the true or even that the range of g is the same as the set of allowable values of this definition of a point estimator is very general and allows the designer of an estimator great flexibility. while almost any function thus qualifies as an estimator a good estimator is a function whose output is close to the true underlying that generated the training data. for now we take the frequentist perspective on statistics. that is we assume that the true parameter value is fixed but unknown while the point estimate is a function of the data. since the data is drawn from a random process any function of the data is random. therefore is a random variable. point estimation can also refer to the estimation of the relationship between input and target variables. we refer to these types of point estimates as function estimators. function estimation as we mentioned above sometimes we are interested in performing function estimation function approximation. here we are trying to predict a variable y given an input vector x. we assume that there is a function f that describes the approximate relationship between y and x. for example we may assume that y fx where stands for the part of y that is not predictable from x. in function estimation we are interested in approximating f with a model or estimate f. function estimation is really just the same as estimating a parameter the function estimator f is simply a point estimator in function space. the linear regression example above in section and the polynomial regression example in section are both examples of scenarios that may be interpreted either as estimating a parameter w or estimating a function f mapping from tox y we now review the most commonly studied properties of point estimators and discuss what they tell us about these estimators. bias the bias of an estimator is defined as bias m m chapter machine learning basics where the expectation is over the data as samples from a random variable and is the true underlying value of used to define the data generating distribution. an estimator m is said to be unbiased if bias m which implies that e m an estimator m is said to be asymptotically unbiased if limm bias m which implies that limm e m example bernoulli distribution consider a set of samples that are independently and identically distributed according to a bernoulli distribution with mean p x x x a common estimator for the parameter of this distribution is the mean of the training samples x m x to determine whether this estimator is biased we can substitute equation into equation bias m m m m e x x m m m m m m m m e x x x x since bias we say that our estimator is unbiased. example gaussian distribution estimator of the mean now consider that are independently and identically distributed a set of samples according to a gaussian distribution px m where i x n chapter machine learning basics recall that the gaussian probability density function is given by p x exp a common estimator of the gaussian mean parameter is known as the sample mean m to determine the bias of the sample mean we are again interested in calculating its expectation bias m e m m m x m m x e m m m x e m thus we find that the sample mean is an unbiased estimator of gaussian mean parameter. example estimators of the variance of a gaussian distribution as an example we compare two different estimators of the variance parameter of a gaussian distribution. we are interested in knowing if either estimator is biased. the first estimator of we consider is known as the sample variance m m m x m where m is the sample mean defined above. more formally we are interested in computing bias m e m chapter machine learning basics we begin by evaluating the term e m e m m m m m x m therefore m is returning to equation the sample variance is a biased estimator. we conclude that the bias of the unbiased sample variance estimator m m m x m provides an alternative approach. as the name suggests this estimator is unbiased. that is we find that e m e m e m m m m m m m x m m m we have two estimators one is biased and the other is not. while unbiased estimators are clearly desirable they are not always the best estimators. as we will see we often use biased estimators that possess other important properties. variance and standard error another property of the estimator that we might want to consider is how much we expect it to vary as a function of the data sample. just as we computed the expectation of the estimator to determine its bias we can compute its variance. the variance of an estimator is simply the variance var where the random variable is the training set. alternately the square root of the variance is called the standard error denoted se chapter machine learning basics the variance or the standard error of an estimator provides a measure of how we would expect the estimate we compute from data to vary as we independently resample the dataset from the underlying data generating process. just as we might like an estimator to exhibit low bias we would also like it to have relatively low variance. when we compute any statistic using a finite number of samples our estimate of the true underlying parameter is uncertain in the sense that we could have obtained other samples from the same distribution and their statistics would have been different. the expected degree of variation in any estimator is a source of error that we want to quantify. the standard error of the mean is given by se m var m m x m where is the true variance of the samples xi. the standard error is often estimated by using an estimate of unfortunately neither the square root of the sample variance nor the square root of the unbiased estimator of the variance provide an unbiased estimate of the standard deviation. both approaches tend to underestimate the true standard deviation but are still used in practice. the square root of the unbiased estimator of the variance is less of an underestimate. for large the approximation is quite reasonable. m the standard error of the mean is very useful in machine learning experiments. we often estimate the generalization error by computing the sample mean of the error on the test set. the number of examples in the test set determines the accuracy of this estimate. taking advantage of the central limit theorem which tells us that the mean will be approximately distributed with a normal distribution we can use the standard error to compute the probability that the true expectation falls in any chosen interval. for example the confidence interval centered on the mean m is m m m m under the normal distribution with mean m and variance se in machine learning experiments it is common to say that algorithm a is better than algorithm b if the upper bound of the confidence interval for the error of algorithm a is less than the lower bound of the confidence interval for the error of algorithm b. chapter machine learning basics example bernoulli distribution we once again consider a set of samples x drawn independently and identically from a bernoulli distribution x this time we are interested in computing px x the variance of the estimator m m var m var x m x m m m m var x m m the variance of the estimator decreases as a function of m the number of examples in the dataset. this is a common property of popular estimators that we will return to when we discuss consistency section trading off bias and variance to minimize mean squared error bias and variance measure two different sources of error in an estimator. bias measures the expected deviation from the true value of the function or parameter. variance on the other hand provides a measure of the deviation from the expected estimator value that any particular sampling of the data is likely to cause. what happens when we are given a choice between two estimators one with more bias and one with more variance? how do we choose between them? for example imagine that we are interested in approximating the function shown in figure and we are only offered the choice between a model with large bias and one that suffers from large variance. how do we choose between them? the most common way to negotiate this trade-off is to use cross-validation. empirically cross-validation is highly successful on many real-world tasks. alternatively we can also compare the mean squared error of the estimates mse m bias var m chapter machine learning basics the mse measures the overall expected deviation in a squared error sense between the estimator and the true value of the parameter as is clear from equation evaluating the mse incorporates both the bias and the variance. desirable estimators are those with small mse and these are estimators that manage to keep both their bias and variance somewhat in check. underfitting zone overfitting zone bias generalization error optimal capacity variance capacity figure as capacity increases bias tends to decrease and variance tends to increase yielding another u-shaped curve for generalization error curve. if we vary capacity along one axis there is an optimal capacity with underfitting when the capacity is below this optimum and overfitting when it is above. this relationship is similar to the relationship between capacity underfitting and overfitting discussed in section and figure the relationship between bias and variance is tightly linked to the machine learning concepts of capacity underfitting and overfitting. in the case where generalization error is measured by the mse bias and variance are meaningful components of generalization error increasing capacity tends to increase variance and decrease bias. this is illustrated in figure where we see again the u-shaped curve of generalization error as a function of capacity. consistency so far we have discussed the properties of various estimators for a training set of fixed size. usually we are also concerned with the behavior of an estimator as the amount of training data grows. in particular we usually wish that as the number of data points m in our dataset increases our point estimates converge to the true chapter machine learning basics value of the corresponding parameters. more formally we would like that plimm m m as m the symbol plim indicates convergence in probability meaning that for any p is known as consistency. it is sometimes referred to as weak consistency with strong consistency referring to the almost sure convergence of to almost sure convergence of a sequence of random variables x x to a value x occurs when plimm the condition described by equation x x consistency ensures that the bias induced by the estimator diminishes as the number of data examples grows. however the reverse is not true asymptotic unbiasedness does not imply consistency. for example consider estimating the with a dataset consisting mean parameter of a normal distribution we could use the first sample x of the dataset of m samples as an unbiased estimator in that case e m so the estimator is unbiased no matter how many data points are seen. this of course implies that the estimate is asymptotically unbiased. however this is not a consistent estimator as it is x the case that mas n not m maximum likelihood estimation previously we have seen some definitions of common estimators and analyzed their properties. but where did these estimators come from? rather than guessing that some function might make a good estimator and then analyzing its bias and variance we would like to have some principle from which we can derive specific functions that are good estimators for different models. the most common such principle is the maximum likelihood principle. consider a set of m examples x x drawn independently from the true but unknown data generating distribution pdata let pmodelx be a parametric family of probability distributions over the same space indexed by in other words pmodelx maps any configuration x to a real number estimating the true probability pdata the maximum likelihood estimator for is then defined as ml arg max pmodel m arg max pmodelx chapter machine learning basics this product over many probabilities can be inconvenient for a variety of reasons. for example it is prone to numerical underflow. to obtain a more convenient but equivalent optimization problem we observe that taking the logarithm of the likelihood does not change its arg max but does conveniently transform a product into a sum m ml arg max log pmodelx because the arg max does not change when we rescale the cost function we can divide by m to obtain a version of the criterion that is expressed as an expectation with respect to the empirical distribution pdata defined by the training data ml arg max pdata ex log pmodel one way to interpret maximum likelihood estimation is to view it as minimizing the dissimilarity between the empirical distribution pdata defined by the training set and the model distribution with the degree of dissimilarity between the two measured by the kl divergence. the kl divergence is given by dkl pdata pmodel e x pdata pdata x log pmodel the term on the left is a function only of the data generating process not the model. this means when we train the model to minimize the kl divergence we need only minimize pmodel ex pdata which is of course the same as the maximization in equation minimizing this kl divergence corresponds exactly to minimizing the crossentropy between the distributions. many authors use the term cross-entropy to identify specifically the negative log-likelihood of a bernoulli or softmax distribution but that is a misnomer. any loss consisting of a negative log-likelihood is a crossentropy between the empirical distribution defined by the training set and the probability distribution defined by model. for example mean squared error is the cross-entropy between the empirical distribution and a gaussian model. we can thus see maximum likelihood as an attempt to make the model distribution match the empirical distribution pdata. ideally we would like to match the true data generating distribution pdata but we have no direct access to this distribution. while the optimal is the same regardless of whether we are maximizing the likelihood or minimizing the kl divergence the values of the objective functions ml arg max p y x chapter machine learning basics are different. in software we often phrase both as minimizing a cost function. maximum likelihood thus becomes minimization of the negative log-likelihood or equivalently minimization of the cross entropy. the perspective of maximum likelihood as minimum kl divergence becomes helpful in this case because the kl divergence has a known minimum value of zero. the negative log-likelihood can actually become negative when is real-valued. x conditional log-likelihood and mean squared error the maximum likelihood estimator can readily be generalized to the case where our goal is to estimate a conditional probability py x in order to predict y given x this is actually the most common situation because it forms the basis for most supervised learning. if x represents all our inputs and y all our observed targets then the conditional maximum likelihood estimator is if the examples are assumed to be i.i.d. then this can be decomposed into m ml arg max log y x example linear regression as maximum likelihood linear regression introduced earlier in section may be justified as a maximum likelihood procedure. previously we motivated linear regression as an algorithm that learns to take an input x and produce an output value y. the mapping from x to y is chosen to minimize mean squared error a criterion that we introduced more or less arbitrarily. we now revisit linear regression from the point of view of maximum likelihood estimation. instead of producing a single prediction y we now think of the model as producing a conditional distribution py x. we can imagine that with an infinitely large training set we might see several training examples with the same input value x but different values of y. the goal of the learning algorithm is now to fit the distribution p x to all of those different y values n that are all compatible with x. to derive the same linear regression algorithm yx w the function yx w we obtained before we define py gives the prediction of the mean of the gaussian. in this example we assume that the variance is fixed to some constant chosen by the user. we will see that this choice of the functional form of py x causes the maximum likelihood estimation procedure to yield the same learning algorithm as we developed before. since the x m log y x m log m m y y is chapter machine learning basics examples are assumed to be i.i.d. the conditional log-likelihood given by where y is the output of the linear regression on the i-th input x and m is the number of the training examples. comparing the log-likelihood with the mean squared error msetrain m m y y we immediately see that maximizing the log-likelihood with respect to w yields the same estimate of the parameters w as does minimizing the mean squared error. the two criteria have different values but the same location of the optimum. this justifies the use of the mse as a maximum likelihood estimation procedure. as we will see the maximum likelihood estimator has several desirable properties. properties of maximum likelihood the main appeal of the maximum likelihood estimator is that it can be shown to be the best estimator asymptotically as the number of examples m in terms of its rate of convergence as increases. m under appropriate conditions the maximum likelihood estimator has the property of consistency section above meaning that as the number of training examples approaches infinity the maximum likelihood estimate of a parameter converges to the true value of the parameter. these conditions are the true distribution pdata must lie within the model family pmodel otherwise no estimator can recover pdata the true distribution pdata must correspond to exactly one value of otherwise maximum likelihood can recover the correct pdata but will not be able to determine which value of was used by the data generating processing. there are other inductive principles besides the maximum likelihood estimator many of which share the property of being consistent estimators. however chapter machine learning basics consistent estimators can differ in their statistic efficiency meaning that one consistent estimator may obtain lower generalization error for a fixed number of samples m or equivalently may require fewer examples to obtain a fixed level of generalization error. statistical efficiency is typically studied in the parametric case in linear regression where our goal is to estimate the value of a parameter assuming it is possible to identify the true parameter not the value of a function. a way to measure how close we are to the true parameter is by the expected mean squared error computing the squared difference between the estimated and true parameter values where the expectation is over m training samples from the data generating distribution. that parametric mean squared error decreases as m increases and for m large the cram r-rao lower bound shows that no consistent estimator has a lower mean squared error than the maximum likelihood estimator. rao cram r for these reasons and efficiency maximum likelihood is often considered the preferred estimator to use for machine learning. when the number of examples is small enough to yield overfitting behavior regularization strategies such as weight decay may be used to obtain a biased version of maximum likelihood that has less variance when training data is limited. bayesian statistics so far we have discussed frequentist statistics and approaches based on estimating a single value of then making all predictions thereafter based on that one estimate. another approach is to consider all possible values of when making a prediction. the latter is the domain of bayesian statistics. as discussed in section the frequentist perspective is that the true parameter value is fixed but unknown while the point estimate is a random variable on account of it being a function of the dataset is seen as random. the bayesian perspective on statistics is quite different. the bayesian uses probability to reflect degrees of certainty of states of knowledge. the dataset is directly observed and so is not random. on the other hand the true parameter is unknown or uncertain and thus is represented as a random variable. before observing the data we represent our knowledge of using the prior probability distribution p referred to as simply the prior generally the machine learning practitioner selects a prior distribution that is quite broad with high entropy to reflect a high degree of uncertainty in the chapter machine learning basics value of before observing any data. for example one might assume that lies in some finite range or volume with a uniform distribution. many priors instead reflect a preference for simpler solutions as smaller magnitude coefficients or a function that is closer to being constant. x we can recover the effect of data on our belief about by combining the data likelihood p x x now consider that we have a set of data samples with the prior via bayes rule a priori p x x p x x p x x in the scenarios where bayesian estimation is typically used the prior begins as a relatively uniform or gaussian distribution with high entropy and the observation of the data usually causes the posterior to lose entropy and concentrate around a few highly likely values of the parameters. relative to maximum likelihood estimation bayesian estimation offers two important differences. first unlike the maximum likelihood approach that makes predictions using a point estimate of the bayesian approach is to make predictions using a full distribution over for example after observing m examples the predicted distribution over the next data sample x is given by p x x p x x d here each value of with positive probability density contributes to the prediction of the next example with the contribution weighted by the posterior density itself. after having observed if we are still quite uncertain about the value of then this uncertainty is incorporated directly into any predictions we might make. x in section we discussed how the frequentist approach addresses the uncertainty in a given point estimate of by evaluating its variance. the variance of the estimator is an assessment of how the estimate might change with alternative samplings of the observed data. the bayesian answer to the question of how to deal with the uncertainty in the estimator is to simply integrate over it which tends to protect well against overfitting. this integral is of course just an application of the laws of probability making the bayesian approach simple to justify while the frequentist machinery for constructing an estimator is based on the rather ad hoc decision to summarize all knowledge contained in the dataset with a single point estimate. the second important difference between the bayesian approach to estimation and the maximum likelihood approach is due to the contribution of the bayesian chapter machine learning basics prior distribution. the prior has an influence by shifting probability mass density towards regions of the parameter space that are preferred in practice the prior often expresses a preference for models that are simpler or more smooth. critics of the bayesian approach identify the prior as a source of subjective human judgment impacting the predictions. a priori bayesian methods typically generalize much better when limited training data is available but typically suffer from high computational cost when the number of training examples is large. example bayesian linear regression here we consider the bayesian estimation approach to learning the linear regression parameters. in linear regression we learn a linear mapping from an input vector x n to predict the value of a scalar the prediction is parametrized by the vector w r y n r r given a set of m training samples of over the entire training set as y train y train we can express the prediction y w x. y train x train w. n y exp expressed as a gaussian conditional distribution on y train we have train py x train w train x train w i train x train w train x train w where we follow the standard mse formulation in assuming that the gaussian variance on y is one. in what follows to reduce the notational burden we refer to as simply x y train y train to determine the posterior distribution over the model parameter vector w we first need to specify a prior distribution. the prior should reflect our naive belief about the value of these parameters. while it is sometimes difficult or unnatural to express our prior beliefs in terms of the parameters of the model in practice we typically assume a fairly broad distribution expressing a high degree of uncertainty about for real-valued parameters it is common to use a gaussian as a prior distribution n w p w exp chapter machine learning basics where and are the prior distribution mean vector and covariance matrix respectively. distribution over the model parameters. with the prior thus specified we can now proceed in determining the posterior p x y p x exp p w y xw y xw exp exp xw w x xw w w w we now define m using these new variables we find that the posterior may be rewritten as a gaussian distribution x x x and m m y y p x exp exp m m m m m m m m m all terms that do not include the parameter vector w have been omitted they are implied by the fact that the distribution must be normalized to integrate to equation shows how to normalize a multivariate gaussian distribution. examining this posterior distribution allows us to gain some intuition for the effect of bayesian inference. in most situations we set to if we set i then m gives the same estimate of w as does frequentist linear regression with a weight decay penalty of w w. one difference is that the bayesian estimate is undefined if is set to zero are not allowed to begin the bayesian learning process with an infinitely wide prior on w. the more important difference is that the bayesian estimate provides a covariance matrix showing how likely all the different values of are rather than providing only the estimate w m. maximum a posteriori estimation while the most principled approach is to make predictions using the full bayesian posterior distribution over the parameter it is still often desirable to have a unless there is a reason to assume a particular covariance structure we typically assume a diagonal covariance matrix diag chapter machine learning basics map arg max x p p x single point estimate. one common reason for desiring a point estimate is that most operations involving the bayesian posterior for most interesting models are intractable and a point estimate offers a tractable approximation. rather than simply returning to the maximum likelihood estimate we can still gain some of the benefit of the bayesian approach by allowing the prior to influence the choice of the point estimate. one rational way to do this is to choose the maximum a posteriori point estimate. the map estimate chooses the point of maximal posterior probability maximal probability density in the more common case of continuous arg max log log p we recognize above on the right hand side log px likelihood term and corresponding to the prior distribution. log i.e. the standard log n as an example consider a linear regression model with a gaussian prior on i then the log-prior term in the weights w. if this prior is given by w weight decay penalty plus a equation term that does not depend on w and does not affect the learning process. map bayesian inference with a gaussian prior on the weights thus corresponds to weight decay. is proportional to the familiar w as with full bayesian inference map bayesian inference has the advantage of leveraging information that is brought by the prior and cannot be found in the training data. this additional information helps to reduce the variance in the map point estimate comparison to the ml estimate. however it does so at the price of increased bias. many regularized estimation strategies such as maximum likelihood learning regularized with weight decay can be interpreted as making the map approximation to bayesian inference. this view applies when the regularization consists of adding an extra term to the objective function that corresponds to log p not all regularization penalties correspond to map bayesian inference. for example some regularizer terms may not be the logarithm of a probability distribution. other regularization terms depend on the data which of course a prior probability distribution is not allowed to do. map bayesian inference provides a straightforward way to design complicated yet interpretable regularization terms. for example a more complicated penalty term can be derived by using a mixture of gaussians rather than a single gaussian distribution as the prior and hinton chapter machine learning basics supervised learning algorithms recall from section that supervised learning algorithms are roughly speaking learning algorithms that learn to associate some input with some output given a training set of examples of inputs x and outputs y. in many cases the outputs y may be difficult to collect automatically and must be provided by a human supervisor but the term still applies even when the training set targets were collected automatically. probabilistic supervised learning most supervised learning algorithms in this book are based on estimating a probability distribution p y x. we can do this simply by using maximum likelihood estimation to find the best parameter vector for a parametric family of distributions x p y we have already seen that linear regression corresponds to the family n x p y y x i we can generalize linear regression to the classification scenario by defining a different family of probability distributions. if we have two classes class and class then we need only specify the probability of one of these classes. the probability of class determines the probability of class because these two values must add up to the normal distribution over real-valued numbers that we used for linear regression is parametrized in terms of a mean. any value we supply for this mean is valid. a distribution over a binary variable is slightly more complicated because its mean must always be between and one way to solve this problem is to use the logistic sigmoid function to squash the output of the linear function into the interval and interpret that value as a probability p y x x. this approach is known as logistic regression somewhat strange name since we use the model for classification rather than regression. in the case of linear regression we were able to find the optimal weights by solving the normal equations. logistic regression is somewhat more difficult. there is no closed-form solution for its optimal weights. instead we must search for them by maximizing the log-likelihood. we can do this by minimizing the negative log-likelihood using gradient descent. chapter machine learning basics this same strategy can be applied to essentially any supervised learning problem by writing down a parametric family of conditional probability distributions over the right kind of input and output variables. support vector machines boser et al. cortes and vapnik one of the most influential approaches to supervised learning is the support vector this model is similar to machine logistic regression in that it is driven by a linear function w x b. unlike logistic regression the support vector machine does not provide probabilities but only outputs a class identity. the svm predicts that the positive class is present when x b is positive. likewise it predicts that the negative class is present when w w x b is negative. one key innovation associated with support vector machines is the kernel trick. the kernel trick consists of observing that many machine learning algorithms can be written exclusively in terms of dot products between examples. for example it can be shown that the linear function used by the support vector machine can be re-written as w x b b ix m x where x is a training example and is a vector of coefficients. rewriting the learning algorithm this way allows us to replace x by the output of a given feature called function and the dot product with a function kx x a kernel. the for some feature spaces we may not use literally the vector inner product. in some infinite dimensional spaces we need to use other kinds of inner products for example inner products based on integration rather than summation. a complete development of these kinds of inner products is beyond the scope of this book. operator represents an inner product analogous to after replacing dot products with kernel evaluations we can make predictions using the function f b x ik x i this function is nonlinear with respect to x but the relationship between and f is linear. also the relationship between and fx is linear. the kernel-based function is exactly equivalent to preprocessing the data by applying to all inputs then learning a linear model in the new transformed space. the kernel trick is powerful for two reasons. first it allows us to learn models that are nonlinear as a function of x using convex optimization techniques that are chapter machine learning basics guaranteed to converge efficiently. this is possible because we consider fixed and optimize only i.e. the optimization algorithm can view the decision function as being linear in a different space. second the kernel function k often admits an implementation that is significantly more computational efficient than naively constructing two vectors and explicitly taking their dot product. in some cases can even be infinite dimensional which would result in an infinite computational cost for the naive explicit approach. in many cases is a nonlinear tractable function of x even when is intractable. as kx x an example of an infinite-dimensional feature space with a tractable kernel we construct a feature mapping over the non-negative integers x. suppose that this mapping returns a vector containing x ones followed by infinitely many zeros. we can write a kernel function kx x minx x that is exactly equivalent to the corresponding infinite-dimensional dot product. the most commonly used kernel is the gaussian kernel k v n u v n is the standard normal density. this kernel is also known as where the radial basis function kernel because its value decreases along lines in v space radiating outward from u. the gaussian kernel corresponds to a dot product in an infinite-dimensional space but the derivation of this space is less straightforward than in our example of the kernel over the integers. min we can think of the gaussian kernel as performing a kind of template matching. a training example x associated with training label y becomes a template is near x according to euclidean distance the for class y. when a test point x gaussian kernel has a large response indicating that x is very similar to the x template. the model then puts a large weight on the associated training label y. overall the prediction will combine many such training labels weighted by the similarity of the corresponding training examples. support vector machines are not the only algorithm that can be enhanced using the kernel trick. many other linear models can be enhanced in this way. the category of algorithms that employ the kernel trick is known as kernel machines or kernel methods williams and rasmussen sch lkopf et al. a major drawback to kernel machines is that the cost of evaluating the decision function is linear in the number of training examples because the i-th example to the decision function. support vector machines contributes a term ikx x are able to mitigate this by learning an vector that contains mostly zeros. classifying a new example then requires evaluating the kernel function only for the training examples that have non-zero i. these training examples are known chapter machine learning basics as support vectors. kernel machines also suffer from a high computational cost of training when kernel machines with the dataset is large. we will revisit this idea in section the generic kernels struggle to generalize well. we will explain why in section modern incarnation of deep learning was designed to overcome these limitations of kernel machines. the current deep learning renaissance began when hinton et al. demonstrated that a neural network could outperform the rbf kernel svm on the mnist benchmark. other simple supervised learning algorithms we have already briefly encountered another non-probabilistic supervised learning algorithm nearest neighbor regression. more generally k-nearest neighbors is a family of techniques that can be used for classification or regression. as a non-parametric learning algorithm k-nearest neighbors is not restricted to a fixed number of parameters. we usually think of the k-nearest neighbors algorithm as not having any parameters but rather implementing a simple function of the training data. in fact there is not even really a training stage or learning process. instead at test time when we want to produce an output y for a new test input x we find the k-nearest neighbors to x in the training data x. we then return the average of the corresponding y values in the training set. this works for essentially any kind of supervised learning where we can define an average over y values. in the case of classification we can average over one-hot code vectors c with cy and ci for all other values of i. we can then interpret the average over these one-hot codes as giving a probability distribution over classes. as a non-parametric learning algorithm k-nearest neighbor can achieve very high capacity. for example suppose we have a multiclass classification task and measure performance with loss. in this setting neighbor converges to double the bayes error as the number of training examples approaches infinity. the error in excess of the bayes error results from choosing a single neighbor by breaking ties between equally distant neighbors randomly. when there is infinite training data all test points x will have infinitely many training set neighbors at distance zero. if we allow the algorithm to use all of these neighbors to vote rather than randomly choosing one of them the procedure converges to the bayes error rate. the high capacity of k-nearest neighbors allows it to obtain high accuracy given a large training set. however it does so at high computational cost and it may generalize very badly given a small finite training set. one weakness of k-nearest neighbors is that it cannot learn that one feature is more discriminative than another. for example drawn from an isotropic gaussian imagine we have a regression task with x r chapter machine learning basics distribution but only a single variable is relevant to the output. suppose further that this feature simply encodes the output directly i.e. that y in all cases. nearest neighbor regression will not be able to detect this simple pattern. the nearest neighbor of most points x will be determined by the large number of features through not by the lone feature thus the output on small training sets will essentially be random. chapter machine learning basics figure diagrams describing how a decision tree works. node of the tree chooses to send the input example to the child node on the left or or the child node on the right internal nodes are drawn as circles and leaf nodes as squares. each node is displayed with a binary string identifier corresponding to its position in the tree obtained by appending a bit to its parent identifier left or top right or bottom. tree divides space into regions. the plane shows how a decision tree might divide r the nodes of the tree are plotted in this plane with each internal node drawn along the dividing line it uses to categorize examples and leaf nodes drawn in the center of the region of examples they receive. the result is a piecewise-constant function with one piece per leaf. each leaf requires at least one training example to define so it is not possible for the decision tree to learn a function that has more local maxima than the number of training examples. chapter machine learning basics another type of learning algorithm that also breaks the input space into regions breiman et al. and has separate parameters for each region is the decision tree and its many variants. as shown in figure each node of the decision tree is associated with a region in the input space and internal nodes break that region into one sub-region for each child of the node using an axis-aligned cut. space is thus sub-divided into non-overlapping regions with a one-to-one correspondence between leaf nodes and input regions. each leaf node usually maps every point in its input region to the same output. decision trees are usually trained with specialized algorithms that are beyond the scope of this book. the learning algorithm can be considered non-parametric if it is allowed to learn a tree of arbitrary size though decision trees are usually regularized with size constraints that turn them into parametric models in practice. decision trees as they are typically used with axis-aligned splits and constant outputs within each node struggle to solve some problems that are easy even for logistic regression. for example if we have a two-class problem and the positive class occurs wherever the decision boundary is not axis-aligned. the decision tree will thus need to approximate the decision boundary with many nodes implementing a step function that constantly walks back and forth across the true decision function with axis-aligned steps. as we have seen nearest neighbor predictors and decision trees have many limitations. nonetheless they are useful learning algorithms when computational resources are constrained. we can also build intuition for more sophisticated learning algorithms by thinking about the similarities and differences between sophisticated algorithms and or decision tree baselines. k see murphy bishop hastie et al. or other machine learning textbooks for more material on traditional supervised learning algorithms. unsupervised learning algorithms recall from section that unsupervised algorithms are those that experience only features but not a supervision signal. the distinction between supervised and unsupervised algorithms is not formally and rigidly defined because there is no objective test for distinguishing whether a value is a feature or a target provided by a supervisor. informally unsupervised learning refers to most attempts to extract information from a distribution that do not require human labor to annotate examples. the term is usually associated with density estimation learning to draw samples from a distribution learning to denoise data from some distribution finding a manifold that the data lies near or clustering the data into groups of chapter machine learning basics related examples. a classic unsupervised learning task is to find the best representation of the data. by best we can mean different things but generally speaking we are looking for a representation that preserves as much information about x as possible while obeying some penalty or constraint aimed at keeping the representation or more accessible than simpler itself. x simpler there are multiple ways of defining a representation. three of the most common include lower dimensional representations sparse representations and independent representations. low-dimensional representations attempt to compress as much information about x as possible in a smaller representation. sparse representations barlow olshausen and field hinton and ghahramani embed the dataset into a representation whose entries are mostly zeroes for most inputs. the use of sparse representations typically requires increasing the dimensionality of the representation so that the representation becoming mostly zeroes does not discard too much information. this results in an overall structure of the representation that tends to distribute data along the axes of the representation space. independent representations attempt to disentangle the sources of variation underlying the data distribution such that the dimensions of the representation are statistically independent. of course these three criteria are certainly not mutually exclusive. lowdimensional representations often yield elements that have fewer or weaker dependencies than the original high-dimensional data. this is because one way to reduce the size of a representation is to find and remove redundancies. identifying and removing more redundancy allows the dimensionality reduction algorithm to achieve more compression while discarding less information. the notion of representation is one of the central themes of deep learning and therefore one of the central themes in this book. in this section we develop some simple examples of representation learning algorithms. together these example algorithms show how to operationalize all three of the criteria above. most of the remaining chapters introduce additional representation learning algorithms that develop these criteria in different ways or introduce other criteria. principal components analysis in section we saw that the principal components analysis algorithm provides a means of compressing data. we can also view pca as an unsupervised learning algorithm that learns a representation of data. this representation is based on two of the criteria for a simple representation described above. pca learns a chapter machine learning basics x z figure pca learns a linear projection that aligns the direction of greatest variance with the axes of the new space. original data consists of samples of x in this space the variance might occur along directions that are not axis-aligned. transformed data z x w now varies most along the axis the direction of second most variance is now along representation that has lower dimensionality than the original input. it also learns a representation whose elements have no linear correlation with each other. this is a first step toward the criterion of learning representations whose elements are statistically independent. to achieve full independence a representation learning algorithm must also remove the nonlinear relationships between variables. pca learns an orthogonal linear transformation of the data that projects an input x to a representation z as shown in figure we saw that we could learn a one-dimensional representation that best reconstructs the original data the sense of mean squared error and that this representation actually corresponds to the first principal component of the data. thus we can use pca as a simple and effective dimensionality reduction method that preserves as much of the information in the data as possible as measured by least-squares reconstruction error. in the following we will study how the pca representation decorrelates the original data representation in section let us consider the m n design matrix x. we will assume that the data has a mean of zero ex if this is not the case the data can easily be centered by subtracting the mean from all examples in a preprocessing step. the unbiased sample covariance matrix associated with x is given by var x m x. chapter machine learning basics pca finds a representation linear transformation z x var is diagonal. w where in section we saw that the principal components of a design matrix x are given by the eigenvectors of x x. from this view x x w w in this section we exploit an alternative derivation of the principal components. the principal components may also be obtained via the singular value decomposition. specifically they are the right singular vectors of x to see this let w be the right singular vectors in the decomposition x u w we then recover the original eigenvector equation with x x u w w as the eigenvector basis u w w the svd is helpful to show that pca results in a diagonal var using the svd of x we can express the variance of x var x as x m m m m w w u u w u w w w is diagonal as required u i because the u matrix of the singular value w where we use the fact that u decomposition is defined to be orthogonal. this shows that if we take z x we can ensure that the covariance of z xw w z w var w w x m m m z m w i again from the definition of the where this time we use the fact that w svd. chapter machine learning basics the above analysis shows that when we project the data x to z via the linear transformation w the resulting representation has a diagonal covariance matrix given by which immediately implies that the individual elements of z are mutually uncorrelated. this ability of pca to transform data into a representation where the elements are mutually uncorrelated is a very important property of pca. it is a simple example of a representation that attempts to disentangle the unknown factors of variation underlying the data. in the case of pca this disentangling takes the form of finding a rotation of the input space by w that aligns the principal axes of variance with the basis of the new representation space associated with while correlation is an important category of dependency between elements of the data we are also interested in learning representations that disentangle more complicated forms of feature dependencies. for this we will need more than what can be done with a simple linear transformation. k clustering another example of a simple representation learning algorithm is k clustering. the k-means clustering algorithm divides the training set into k different clusters of examples that are near each other. we can thus think of the algorithm as providing a k-dimensional one-hot code vector h representing an input x. if x belongs to cluster i then h i and all other entries of the representation h are zero. the one-hot code provided by k-means clustering is an example of a sparse representation because the majority of its entries are zero for every input. later we will develop other algorithms that learn more flexible sparse representations where more than one entry can be non-zero for each input x. one-hot codes are an extreme example of sparse representations that lose many of the benefits of a distributed representation. the one-hot code still confers some statistical advantages naturally conveys the idea that all examples in the same cluster are similar to each other and it confers the computational advantage that the entire representation may be captured by a single integer. to different values then alternating between two different steps until convergence. in one step each training example is assigned to cluster i where i is the index of the nearest centroid in the other step each centroid is updated to the mean of all training examples x assigned to cluster the k-means algorithm works by initializing k different centroids chapter machine learning basics one difficulty pertaining to clustering is that the clustering problem is inherently ill-posed in the sense that there is no single criterion that measures how well a clustering of the data corresponds to the real world. we can measure properties of the clustering such as the average euclidean distance from a cluster centroid to the members of the cluster. this allows us to tell how well we are able to reconstruct the training data from the cluster assignments. we do not know how well the cluster assignments correspond to properties of the real world. moreover there may be many different clusterings that all correspond well to some property of the real world. we may hope to find a clustering that relates to one feature but obtain a different equally valid clustering that is not relevant to our task. for example suppose that we run two clustering algorithms on a dataset consisting of images of red trucks images of red cars images of gray trucks and images of gray cars. if we ask each clustering algorithm to find two clusters one algorithm may find a cluster of cars and a cluster of trucks while another may find a cluster of red vehicles and a cluster of gray vehicles. suppose we also run a third clustering algorithm which is allowed to determine the number of clusters. this may assign the examples to four clusters red cars red trucks gray cars and gray trucks. this new clustering now at least captures information about both attributes but it has lost information about similarity. red cars are in a different cluster from gray cars just as they are in a different cluster from gray trucks. the output of the clustering algorithm does not tell us that red cars are more similar to gray cars than they are to gray trucks. they are different from both things and that is all we know. these issues illustrate some of the reasons that we may prefer a distributed representation to a one-hot representation. a distributed representation could have two attributes for each vehicle one representing its color and one representing whether it is a car or a truck. it is still not entirely clear what the optimal distributed representation is can the learning algorithm know whether the two attributes we are interested in are color and car-versus-truck rather than manufacturer and age? but having many attributes reduces the burden on the algorithm to guess which single attribute we care about and allows us to measure similarity between objects in a fine-grained way by comparing many attributes instead of just testing whether one attribute matches. stochastic gradient descent nearly all of deep learning is powered by one very important algorithm stochastic gradient descent or sgd. stochastic gradient descent is an extension of the chapter machine learning basics gradient descent algorithm introduced in section a recurring problem in machine learning is that large training sets are necessary for good generalization but large training sets are also more computationally expensive. the cost function used by a machine learning algorithm often decomposes as a sum over training examples of some per-example loss function. for example the negative conditional log-likelihood of the training data can be written as m j exy pdata where l is the per-example loss m l y log p y x l y lx y for these additive cost functions gradient descent requires computing j m m lx y the computational cost of this operation is om. as the training set size grows to billions of examples the time to take a single gradient step becomes prohibitively long. xm the insight of stochastic gradient descent is that the gradient is an expectation. the expectation may be approximately estimated using a small set of samples. specifically on each step of the algorithm we can sample a minibatch of examples b drawn uniformly from the training set. the minibatch size m is typically chosen to be a relatively small number of examples ranging from to a few hundred. crucially m is usually held fixed as the training set size m grows. we may fit a training set with billions of examples using updates computed on only a hundred examples. the estimate of the gradient is formed as g m m lx y using examples from the minibatch the stochastic gradient descent algorithm then follows the estimated gradient downhill b g where is the learning rate. chapter machine learning basics gradient descent in general has often been regarded as slow or unreliable. in the past the application of gradient descent to non-convex optimization problems was regarded as foolhardy or unprincipled. today we know that the machine learning models described in part work very well when trained with gradient descent. the optimization algorithm may not be guaranteed to arrive at even a local minimum in a reasonable amount of time but it often finds a very low value of the cost function quickly enough to be useful. ii stochastic gradient descent has many important uses outside the context of deep learning. it is the main way to train large linear models on very large datasets. for a fixed model size the cost per sgd update does not depend on the training set size m. in practice we often use a larger model as the training set size increases but we are not forced to do so. the number of updates required to reach convergence usually increases with training set size. however as m approaches infinity the model will eventually converge to its best possible test error before sgd has sampled every example in the training set. increasing m further will not extend the amount of training time needed to reach the model s best possible test error. from this point of view one can argue that the asymptotic cost of training a model with sgd is as a function of m prior to the advent of deep learning the main way to learn nonlinear models was to use the kernel trick in combination with a linear model. many kernel learning matrix gij kx x constructing algorithms require constructing an m m this matrix has computational cost o which is clearly undesirable for datasets with billions of examples. in academia starting in deep learning was initially interesting because it was able to generalize to new examples better than competing algorithms when trained on medium-sized datasets with tens of thousands of examples. soon after deep learning garnered additional interest in industry because it provided a scalable way of training nonlinear models on large datasets. stochastic gradient descent and many enhancements to it are described further in chapter building a machine learning algorithm nearly all deep learning algorithms can be described as particular instances of a fairly simple recipe combine a specification of a dataset a cost function an optimization procedure and a model. for example the linear regression algorithm combines a dataset consisting of chapter machine learning basics x and the cost function y j b exy pdata n log pmodel y x the model specification pmodely w b and in most cases the optimization algorithm defined by solving for where the gradient of the cost is zero using the normal equations. x x by realizing that we can replace any of these components mostly independently from the others we can obtain a very wide variety of algorithms. the cost function typically includes at least one term that causes the learning process to perform statistical estimation. the most common cost function is the negative log-likelihood so that minimizing the cost function causes maximum likelihood estimation. the cost function may also include additional terms such as regularization terms. for example we can add weight decay to the linear regression cost function to obtain j b w exy pdata log pmodel y x this still allows closed-form optimization. if we change the model to be nonlinear then most cost functions can no longer be optimized in closed form. this requires us to choose an iterative numerical optimization procedure such as gradient descent. the recipe for constructing a learning algorithm by combining models costs and optimization algorithms supports both supervised and unsupervised learning. the linear regression example shows how to support supervised learning. unsupervised learning can be supported by defining a dataset that contains only x and providing an appropriate unsupervised cost and model. for example we can obtain the first pca vector by specifying that our loss function is j w pdata ex x r x w while our model is defined to have w with norm one and reconstruction function r xw. w x in some cases the cost function may be a function that we cannot actually evaluate for computational reasons. in these cases we can still approximately minimize it using iterative numerical optimization so long as we have some way of approximating its gradients. most machine learning algorithms make use of this recipe though it may not immediately be obvious. if a machine learning algorithm seems especially unique or chapter machine learning basics hand-designed it can usually be understood as using a special-case optimizer. some models such as decision trees or k-means require special-case optimizers because their cost functions have flat regions that make them inappropriate for minimization by gradient-based optimizers. recognizing that most machine learning algorithms can be described using this recipe helps to see the different algorithms as part of a taxonomy of methods for doing related tasks that work for similar reasons rather than as a long list of algorithms that each have separate justifications. challenges motivating deep learning the simple machine learning algorithms described in this chapter work very well on a wide variety of important problems. however they have not succeeded in solving the central problems in ai such as recognizing speech or recognizing objects. the development of deep learning was motivated in part by the failure of traditional algorithms to generalize well on such ai tasks. this section is about how the challenge of generalizing to new examples becomes exponentially more difficult when working with high-dimensional data and how the mechanisms used to achieve generalization in traditional machine learning are insufficient to learn complicated functions in high-dimensional spaces. such spaces also often impose high computational costs. deep learning was designed to overcome these and other obstacles. the curse of dimensionality many machine learning problems become exceedingly difficult when the number of dimensions in the data is high. this phenomenon is known as the curse of dimensionality. of particular concern is that the number of possible distinct configurations of a set of variables increases exponentially as the number of variables increases. chapter machine learning basics figure as the number of relevant dimensions of the data increases left to right the number of configurations of interest may grow exponentially. this one-dimensional example we have one variable for which we only care to distinguish regions of interest. with enough examples falling within each of these regions region corresponds to a cell in the illustration learning algorithms can easily generalize correctly. a straightforward way to generalize is to estimate the value of the target function within each region possibly interpolate between neighboring regions. with dimensions it is more difficult to distinguish different values of each variable. we need to keep track of up to regions and we need at least that many examples to cover all those regions. regions and at least that many examples. for d dimensions and v values to be distinguished along each axis we seem to need ov d regions and examples. this is an instance of the curse of dimensionality. figure graciously provided by nicolas chapados. with dimensions this grows to the curse of dimensionality arises in many places in computer science and especially so in machine learning. one challenge posed by the curse of dimensionality is a statistical challenge. as illustrated in figure a statistical challenge arises because the number of possible configurations of x is much larger than the number of training examples. to understand the issue let us consider that the input space is organized into a grid like in the figure. we can describe low-dimensional space with a low number of grid cells that are mostly occupied by the data. when generalizing to a new data point we can usually tell what to do simply by inspecting the training examples that lie in the same cell as the new input. for example if estimating the probability density at some point x we can just return the number of training examples in the same unit volume cell as x divided by the total number of training examples. if we wish to classify an example we can return the most common class of training examples in the same cell. if we are doing regression we can average the target values observed over the examples in that cell. but what about the cells for which we have seen no example? because in high-dimensional spaces the number of configurations is huge much larger than our number of examples a typical grid cell has no training example associated with it. how could we possibly say something chapter machine learning basics meaningful about these new configurations? many traditional machine learning algorithms simply assume that the output at a new point should be approximately the same as the output at the nearest training point. local constancy and smoothness regularization in order to generalize well machine learning algorithms need to be guided by prior beliefs about what kind of function they should learn. previously we have seen these priors incorporated as explicit beliefs in the form of probability distributions over parameters of the model. more informally we may also discuss prior beliefs as directly influencing the itself and only indirectly acting on the parameters via their effect on the function. additionally we informally discuss prior beliefs as being expressed implicitly by choosing algorithms that are biased toward choosing some class of functions over another even though these biases may not be expressed even possible to express in terms of a probability distribution representing our degree of belief in various functions. function among the most widely used of these implicit priors is the smoothness prior or local constancy prior. this prior states that the function we learn should not change very much within a small region. many simpler algorithms rely exclusively on this prior to generalize well and as a result they fail to scale to the statistical challenges involved in solving ailevel tasks. throughout this book we will describe how deep learning introduces additional and implicit priors in order to reduce the generalization error on sophisticated tasks. here we explain why the smoothness prior alone is insufficient for these tasks. there are many different ways to implicitly or explicitly express a prior belief that the learned function should be smooth or locally constant. all of these different methods are designed to encourage the learning process to learn a function f that satisfies the condition x f x f for most configurations x and small change in other words if we know a good answer for an input x example if x is a labeled training example then that answer is probably good in the neighborhood of x. if we have several good answers in some neighborhood we would combine them some form of averaging or interpolation to produce an answer that agrees with as many of them as much as possible. an extreme example of the local constancy approach is the k-nearest neighbors family of learning algorithms. these predictors are literally constant over each chapter machine learning basics region containing all the points x that have the same set of k nearest neighbors in the training set. for k the number of distinguishable regions cannot be more than the number of training examples. while the k-nearest neighbors algorithm copies the output from nearby training examples most kernel machines interpolate between training set outputs associated with nearby training examples. an important class of kernels is the family of local kernels where ku v is large when u v and decreases as u and v grow farther apart from each other. a local kernel can be thought of as a similarity function that performs template matching by measuring how closely a test example x resembles each training example x much of the modern motivation for deep learning is derived from studying the limitations of local template matching and how deep models are able to succeed in cases where local template matching fails bengio et al. decision trees also suffer from the limitations of exclusively smoothness-based learning because they break the input space into as many regions as there are leaves and use a separate parameter sometimes many parameters for extensions of decision trees in each region. if the target function requires a tree with at least n leaves to be represented accurately then at least n training examples are required to fit the tree. a multiple of n is needed to achieve some level of statistical confidence in the predicted output. in general to distinguish ok regions in input space all of these methods require ok examples. typically there are o parameters with parameters associated with each of the ok regions. the case of a nearest neighbor scenario where each training example can be used to define at most one region is illustrated in figure is there a way to represent a complex function that has many more regions to be distinguished than the number of training examples? clearly assuming only smoothness of the underlying function will not allow a learner to do that. for example imagine that the target function is a kind of checkerboard. a checkerboard contains many variations but there is a simple structure to them. imagine what happens when the number of training examples is substantially smaller than the number of black and white squares on the checkerboard. based on only local generalization and the smoothness or local constancy prior we would be guaranteed to correctly guess the color of a new point if it lies within the same checkerboard square as a training example. there is no guarantee that the learner could correctly extend the checkerboard pattern to points lying in squares that do not contain training examples. with this prior alone the only information that an example tells us is the color of its square and the only way to get the colors of the chapter machine learning basics figure illustration of how the nearest neighbor algorithm breaks up the input space into regions. an example here by a circle within each region defines the region boundary here by the lines. the y value associated with each example defines what the output should be for all points within the corresponding region. the regions defined by nearest neighbor matching form a geometric pattern called a voronoi diagram. the number of these contiguous regions cannot grow faster than the number of training examples. while this figure illustrates the behavior of the nearest neighbor algorithm specifically other machine learning algorithms that rely exclusively on the local smoothness prior for generalization exhibit similar behaviors each training example only informs the learner about how to generalize in some neighborhood immediately surrounding that example. chapter machine learning basics entire checkerboard right is to cover each of its cells with at least one example. the smoothness assumption and the associated non-parametric learning algorithms work extremely well so long as there are enough examples for the learning algorithm to observe high points on most peaks and low points on most valleys of the true underlying function to be learned. this is generally true when the function to be learned is smooth enough and varies in few enough dimensions. in high dimensions even a very smooth function can change smoothly but in a different way along each dimension. if the function additionally behaves differently in different regions it can become extremely complicated to describe with a set of training examples. if the function is complicated want to distinguish a huge number of regions compared to the number of examples is there any hope to generalize well? the answer to both of these questions whether it is possible to represent a complicated function efficiently and whether it is possible for the estimated function to generalize well to new inputs is yes. the key insight is that a very large number of regions e.g. can be defined with ok examples so long as we introduce some dependencies between the regions via additional assumptions about the underlying data generating distribution. in this way we can actually generalize non-locally many different deep learning algorithms provide implicit or explicit assumptions that are reasonable for a broad range of ai tasks in order to capture these advantages. bengio and monperrus bengio et al. other approaches to machine learning often make stronger task-specific assumptions. for example we could easily solve the checkerboard task by providing the assumption that the target function is periodic. usually we do not include such strong task-specific assumptions into neural networks so that they can generalize to a much wider variety of structures. ai tasks have structure that is much too complex to be limited to simple manually specified properties such as periodicity so we want learning algorithms that embody more general-purpose assumptions. the core idea in deep learning is that we assume that the data was generated by the composition of factors or features potentially at multiple levels in a hierarchy. many other similarly generic assumptions can further improve deep learning algorithms. these apparently mild assumptions allow an exponential gain in the relationship between the number of examples and the number of regions that can be distinguished. these exponential gains are described more precisely in sections the exponential advantages conferred by the use of deep distributed representations counter the exponential challenges posed by the curse of dimensionality. and chapter machine learning basics manifold learning an important concept underlying many ideas in machine learning is that of a manifold. a manifold is a connected region. mathematically it is a set of points associated with a neighborhood around each point. from any given point the manifold locally appears to be a euclidean space. in everyday life we experience the surface of the world as a plane but it is in fact a spherical manifold in space. the definition of a neighborhood surrounding each point implies the existence of transformations that can be applied to move on the manifold from one position to a neighboring one. in the example of the world s surface as a manifold one can walk north south east or west. although there is a formal mathematical meaning to the term manifold in machine learning it tends to be used more loosely to designate a connected set of points that can be approximated well by considering only a small number of degrees of freedom or dimensions embedded in a higher-dimensional space. each dimension corresponds to a local direction of variation. see figure for an example of training data lying near a one-dimensional manifold embedded in twodimensional space. in the context of machine learning we allow the dimensionality of the manifold to vary from one point to another. this often happens when a manifold intersects itself. for example a figure eight is a manifold that has a single dimension in most places but two dimensions at the intersection at the center. figure data sampled from a distribution in a two-dimensional space that is actually concentrated near a one-dimensional manifold like a twisted string. the solid line indicates the underlying manifold that the learner should infer. chapter machine learning basics many machine learning problems seem hopeless if we expect the machine n. learning algorithm to learn functions with interesting variations across all of r manifold learning algorithms surmount this obstacle by assuming that most n consists of invalid inputs and that interesting inputs occur only along of r a collection of manifolds containing a small subset of points with interesting variations in the output of the learned function occurring only along directions that lie on the manifold or with interesting variations happening only when we move from one manifold to another. manifold learning was introduced in the case of continuous-valued data and the unsupervised learning setting although this probability concentration idea can be generalized to both discrete data and the supervised learning setting the key assumption remains that probability mass is highly concentrated. the assumption that the data lies along a low-dimensional manifold may not always be correct or useful. we argue that in the context of ai tasks such as those that involve processing images sounds or text the manifold assumption is at least approximately correct. the evidence in favor of this assumption consists of two categories of observations. the first observation in favor of the manifold hypothesis is that the probability distribution over images text strings and sounds that occur in real life is highly concentrated. uniform noise essentially never resembles structured inputs from these domains. figure shows how instead uniformly sampled points look like the patterns of static that appear on analog television sets when no signal is available. similarly if you generate a document by picking letters uniformly at random what is the probability that you will get a meaningful english-language text? almost zero again because most of the long sequences of letters do not correspond to a natural language sequence the distribution of natural language sequences occupies a very small volume in the total space of sequences of letters. chapter machine learning basics figure sampling images uniformly at random randomly picking each pixel according to a uniform distribution gives rise to noisy images. although there is a nonzero probability to generate an image of a face or any other object frequently encountered in ai applications we never actually observe this happening in practice. this suggests that the images encountered in ai applications occupy a negligible proportion of the volume of image space. of course concentrated probability distributions are not sufficient to show that the data lies on a reasonably small number of manifolds. we must also establish that the examples we encounter are connected to each other by other chapter machine learning basics examples with each example surrounded by other highly similar examples that may be reached by applying transformations to traverse the manifold. the second argument in favor of the manifold hypothesis is that we can also imagine such neighborhoods and transformations at least informally. in the case of images we can certainly think of many possible transformations that allow us to trace out a manifold in image space we can gradually dim or brighten the lights gradually move or rotate objects in the image gradually alter the colors on the surfaces of objects etc. it remains likely that there are multiple manifolds involved in most applications. for example the manifold of images of human faces may not be connected to the manifold of images of cat faces. these thought experiments supporting the manifold hypotheses convey some intuitive reasons supporting it. more rigorous experiments narayanan and mitter sch lkopf et al. brand belkin and niyogi donoho and grimes weinberger and saul clearly support the hypothesis for a large class of datasets of interest in ai. roweis and saul tenenbaum et al. when the data lies on a low-dimensional manifold it can be most natural for machine learning algorithms to represent the data in terms of coordinates on the manifold rather than in terms of coordinates in r n. in everyday life we can think of roads as manifolds embedded in space. we give directions to specific addresses in terms of address numbers along these roads not in terms of coordinates in space. extracting these manifold coordinates is challenging but holds the promise to improve many machine learning algorithms. this general principle is applied in many contexts. figure shows the manifold structure of a dataset consisting of faces. by the end of this book we will have developed the methods necessary to learn such a manifold structure. in figure we will see how a machine learning algorithm can successfully accomplish this goal. this concludes part which has provided the basic concepts in mathematics and machine learning which are employed throughout the remaining parts of the book. you are now prepared to embark upon your study of deep learning. i chapter machine learning basics gong et al. figure training examples from the qmul multiview face dataset for which the subjects were asked to move in such a way as to cover the two-dimensional manifold corresponding to two angles of rotation. we would like learning algorithms to be able to discover and disentangle such manifold coordinates. figure illustrates such a feat. part ii deep networks modern practices this part of the book summarizes the state of modern deep learning as it is used to solve practical applications. deep learning has a long history and many aspirations. several approaches have been proposed that have yet to entirely bear fruit. several ambitious goals have yet to be realized. these less-developed branches of deep learning appear in the final part of the book. this part focuses only on those approaches that are essentially working tech nologies that are already used heavily in industry. modern deep learning provides a very powerful framework for supervised learning. by adding more layers and more units within a layer a deep network can represent functions of increasing complexity. most tasks that consist of mapping an input vector to an output vector and that are easy for a person to do rapidly can be accomplished via deep learning given sufficiently large models and sufficiently large datasets of labeled training examples. other tasks that can not be described as associating one vector to another or that are difficult enough that a person would require time to think and reflect in order to accomplish the task remain beyond the scope of deep learning for now. this part of the book describes the core parametric function approximation technology that is behind nearly all modern practical applications of deep learning. we begin by describing the feedforward deep network model that is used to represent these functions. next we present advanced techniques for regularization and optimization of such models. scaling these models to large inputs such as high resolution images or long temporal sequences requires specialization. we introduce the convolutional network for scaling to large images and the recurrent neural network for processing temporal sequences. finally we present general guidelines for the practical methodology involved in designing building and configuring an application involving deep learning and review some of the applications of deep learning. these chapters are the most important for a practitioner someone who wants to begin implementing and using deep learning algorithms to solve real-world problems today. chapter deep feedforward networks deep feedforward networks also often called feedforward neural networks or multilayer perceptrons are the quintessential deep learning models. the goal of a feedforward network is to approximate some function f for example for a classifier y f maps an input x to a category y. a feedforward network defines a mapping y f and learns the value of the parameters that result in the best function approximation. these models are called feedforward because information flows through the function being evaluated from x through the intermediate computations used to define f and finally to the output y. there are no feedback connections in which outputs of the model are fed back into itself. when feedforward neural networks are extended to include feedback connections they are called recurrent neural networks presented in chapter feedforward networks are of extreme importance to machine learning practitioners. they form the basis of many important commercial applications. for example the convolutional networks used for object recognition from photos are a specialized kind of feedforward network. feedforward networks are a conceptual stepping stone on the path to recurrent networks which power many natural language applications. feedforward neural networks are called networks because they are typically represented by composing together many different functions. the model is associated with a directed acyclic graph describing how the functions are composed together. for example we might have three functions f f and f connected in a chain to form fx f these chain structures are the most commonly used structures of neural networks. in this case f is called the first layer of the network f is called the second layer and so on. the overall chapter deep feedforward networks length of the chain gives the depth of the model. it is from this terminology that the name deep learning arises. the final layer of a feedforward network is called the output layer. during neural network training we drive f to match f evaluated the training data provides us with noisy approximate examples of f at different training points. each example x is accompanied by a label y f the training examples specify directly what the output layer must do at each point x it must produce a value that is close to y. the behavior of the other layers is not directly specified by the training data. the learning algorithm must decide how to use those layers to produce the desired output but the training data does not say what each individual layer should do. instead the learning algorithm must decide how to use these layers to best implement an approximation of f because the training data does not show the desired output for each of these layers these layers are called hidden layers. finally these networks are called neural because they are loosely inspired by neuroscience. each hidden layer of the network is typically vector-valued. the dimensionality of these hidden layers determines the width of the model. each element of the vector may be interpreted as playing a role analogous to a neuron. rather than thinking of the layer as representing a single vector-to-vector function we can also think of the layer as consisting of many units that act in parallel each representing a vector-to-scalar function. each unit resembles a neuron in the sense that it receives input from many other units and computes its own activation value. the idea of using many layers of vector-valued representation is drawn from neuroscience. the choice of the functions f used to compute these representations is also loosely guided by neuroscientific observations about the functions that biological neurons compute. however modern neural network research is guided by many mathematical and engineering disciplines and the goal of neural networks is not to perfectly model the brain. it is best to think of feedforward networks as function approximation machines that are designed to achieve statistical generalization occasionally drawing some insights from what we know about the brain rather than as models of brain function. one way to understand feedforward networks is to begin with linear models and consider how to overcome their limitations. linear models such as logistic regression and linear regression are appealing because they may be fit efficiently and reliably either in closed form or with convex optimization. linear models also have the obvious defect that the model capacity is limited to linear functions so the model cannot understand the interaction between any two input variables. to extend linear models to represent nonlinear functions of x we can apply the linear model not to x itself but to a transformed input where is a chapter deep feedforward networks nonlinear transformation. equivalently we can apply the kernel trick described in section to obtain a nonlinear learning algorithm based on implicitly applying the mapping. we can think of as providing a set of features describing x or as providing a new representation for the question is then how to choose the mapping one option is to use a very generic such as the infinite-dimensional that is implicitly used by kernel machines based on the rbf kernel. if is of high enough dimension we can always have enough capacity to fit the training set but generalization to the test set often remains poor. very generic feature mappings are usually based only on the principle of local smoothness and do not encode enough prior information to solve advanced problems. another option is to manually engineer until the advent of deep learning this was the dominant approach. this approach requires decades of human effort for each separate task with practitioners specializing in different domains such as speech recognition or computer vision and with little transfer between domains. the strategy of deep learning is to learn in this approach we have a model y fx w w. we now have parameters that we use to learn from a broad class of functions and parameters w that map from to the desired output. this is an example of a deep feedforward network with defining a hidden layer. this approach is the only one of the three that gives up on the convexity of the training problem but the benefits outweigh the harms. in this approach we parametrize the representation as and use the optimization algorithm to find the that corresponds to a good representation. if we wish this approach can capture the benefit of the first approach by being highly generic we do so by using a very broad family this approach can also capture the benefit of the second approach. human practitioners can encode their knowledge to help generalization by designing families that they expect will perform well. the advantage is that the human designer only needs to find the right general function family rather than finding precisely the right function. this general principle of improving models by learning features extends beyond the feedforward networks described in this chapter. it is a recurring theme of deep learning that applies to all of the kinds of models described throughout this book. feedforward networks are the application of this principle to learning deterministic chapter deep feedforward networks mappings from x to y that lack feedback connections. other models presented later will apply these principles to learning stochastic mappings learning functions with feedback and learning probability distributions over a single vector. we begin this chapter with a simple example of a feedforward network. next we address each of the design decisions needed to deploy a feedforward network. first training a feedforward network requires making many of the same design decisions as are necessary for a linear model choosing the optimizer the cost function and the form of the output units. we review these basics of gradient-based learning then proceed to confront some of the design decisions that are unique to feedforward networks. feedforward networks have introduced the concept of a hidden layer and this requires us to choose the activation functions that will be used to compute the hidden layer values. we must also design the architecture of the network including how many layers the network should contain how these layers should be connected to each other and how many units should be in each layer. learning in deep neural networks requires computing the gradients of complicated functions. we present the back-propagation algorithm and its modern generalizations which can be used to efficiently compute these gradients. finally we close with some historical perspective. example learning xor to make the idea of a feedforward network more concrete we begin with an example of a fully functioning feedforward network on a very simple task learning the xor function. the xor function exclusive or is an operation on two binary values and when exactly one of these binary values is equal to the xor function otherwise it returns the xor function provides the target function returns y f that we want to learn. our model provides a function y fx and our learning algorithm will adapt the parameters to make f as similar as possible to f in this simple example we will not be concerned with statistical generalization. we will train the network on all four of these points. the we want our network to perform correctly on the four points x only challenge is to fit the training set. and we can treat this problem as a regression problem and use a mean squared error loss function. we choose this loss function to simplify the math for this example as much as possible. in practical applications mse is usually not an chapter deep feedforward networks appropriate cost function for modeling binary data. more appropriate approaches are described in section evaluated on our whole training set the mse loss function is x f x j x x now we must choose the form of our model f suppose that we choose a linear model with consisting of w and our model is defined to be b w b. f w x b we can minimize j in closed form with respect to w and b using the normal equations. after solving the normal equations we obtain w and b the linear model simply outputs everywhere. why does this happen? figure shows how a linear model is not able to represent the xor function. one way to solve this problem is to use a model that learns a different feature space in which a linear model is able to represent the solution. specifically we will introduce a very simple feedforward network with one hidden layer containing two hidden units. see figure for an illustration of this model. this feedforward network has a vector of hidden units h that are computed by a function f w c the values of these hidden units are then used as the input for a second layer. the second layer is the output layer of the network. the output layer is still just a linear regression model but now it is applied to h rather than to x the network now contains two functions chained together h f w c and y f w b with the complete model being f w c w b f what function should f compute? linear models have served us well so far and it may be tempting to make f be linear as well. unfortunately if were linear then the feedforward network as a whole would remain a linear function of its input. ignoring the intercept terms for the moment suppose f w x and f h x. we could represent this function as f w. then f w where w w w w. x w x clearly we must use a nonlinear function to describe the features. most neural networks do so using an affine transformation controlled by learned parameters followed by a fixed nonlinear function called an activation function. we use that strategy here by defining h gw x c where w provides the weights of a linear transformation and c the biases. previously to describe a linear regression chapter deep feedforward networks original x space learned h space x h h figure solving the xor problem by learning a representation. the bold numbers printed on the plot indicate the value that the learned function must output at each point. linear model applied directly to the original input cannot implement the xor function. when the model s output must increase as increases. when the model s output must decrease as increases. a linear model must apply a fixed coefficient to the linear model therefore cannot use the value of to change the coefficient on and cannot solve this problem. the transformed space represented by the features extracted by a neural network a linear model can now solve have been the problem. in our example solution the two points that must have output collapsed into a single point in feature space. in other words the nonlinear features have mapped both x the linear model can now describe the function as increasing in and decreasing in in this example the motivation for learning the feature space is only to make the model capacity greater so that it can fit the training set. in more realistic applications learned representations can also help the model to generalize. to a single point in feature space h and x chapter deep feedforward networks yy yy hh xx w w figure an example of a feedforward network drawn in two different styles. specifically this is the feedforward network we use to solve the xor example. it has a single hidden layer containing two units. this style we draw every unit as a node in the graph. this style is very explicit and unambiguous but for networks larger than this example it can consume too much space. in this style we draw a node in the graph for each entire vector representing a layer s activations. this style is much more compact. sometimes we annotate the edges in this graph with the name of the parameters that describe the relationship between two layers. here we indicate that a matrix w describes the mapping from x to h and a vector w describes the mapping from h to y. we typically omit the intercept parameters associated with each layer when labeling this kind of drawing. model we used a vector of weights and a scalar bias parameter to describe an affine transformation from an input vector to an output scalar. now we describe an affine transformation from a vector x to a vector h so an entire vector of bias parameters is needed. the activation function g is typically chosen to be a function that is applied element-wise with hi gx wi ci. in modern neural networks the default recommendation is to use the rectified linear unit or relu et al. defined by the activation function nair and hinton glorot max g z depicted in figure et al. z we can now specify our complete network as w c w w b f max w x c b. we can now specify a solution to the xor problem. let w c chapter deep feedforward networks z x a m z g z figure the rectified linear activation function. this activation function is the default activation function recommended for use with most feedforward neural networks. applying this function to the output of a linear transformation yields a nonlinear transformation. however the function remains very close to linear in the sense that is a piecewise linear function with two linear pieces. because rectified linear units are nearly linear they preserve many of the properties that make linear models easy to optimize with gradientbased methods. they also preserve many of the properties that make linear models generalize well. a common principle throughout computer science is that we can build complicated systems from minimal components. much as a turing machine s memory needs only to be able to store or states we can build a universal function approximator from rectified linear functions. chapter deep feedforward networks w and b we can now walk through the way that the model processes a batch of inputs. let x be the design matrix containing all four points in the binary input space with one example per row x the first step in the neural network is to multiply the input matrix by the first layer s weight matrix xw to obtain next we add the bias vector c in this space all of the examples lie along a line with slope as we move along this line the output needs to begin at then rise to then drop back down to a linear model cannot implement such a function. to finish computing the value of for each example we apply the rectified linear transformation h this transformation has changed the relationship between the examples. they no longer lie on a single line. as shown in figure they now lie in a space where a linear model can solve the problem. we finish by multiplying by the weight vector chapter deep feedforward networks the neural network has obtained the correct answer for every example in the batch. in this example we simply specified the solution then showed that it obtained zero error. in a real situation there might be billions of model parameters and billions of training examples so one cannot simply guess the solution as we did here. instead a gradient-based optimization algorithm can find parameters that produce very little error. the solution we described to the xor problem is at a global minimum of the loss function so gradient descent could converge to this point. there are other equivalent solutions to the xor problem that gradient descent could also find. the convergence point of gradient descent depends on the initial values of the parameters. in practice gradient descent would usually not find clean easily understood integer-valued solutions like the one we presented here. gradient-based learning designing and training a neural network is not much different from training any other machine learning model with gradient descent. in section we described how to build a machine learning algorithm by specifying an optimization procedure a cost function and a model family. the largest difference between the linear models we have seen so far and neural networks is that the nonlinearity of a neural network causes most interesting loss functions to become non-convex. this means that neural networks are usually trained by using iterative gradient-based optimizers that merely drive the cost function to a very low value rather than the linear equation solvers used to train linear regression models or the convex optimization algorithms with global convergence guarantees used to train logistic regression or svms. convex optimization converges starting from any initial parameters theory in practice it is very robust but can encounter numerical problems. stochastic gradient descent applied to non-convex loss functions has no such convergence guarantee and is sensitive to the values of the initial parameters. for feedforward neural networks it is important to initialize all weights to small random values. the biases may be initialized to zero or to small positive values. the iterative gradient-based optimization algorithms used to train feedforward networks and almost all other deep models will be described in detail in chapter with parameter initialization in particular discussed in section for the moment it suffices to understand that the training algorithm is almost always based on using the gradient to descend the cost function in one way or another. the specific algorithms are improvements and and refinements on the ideas of gradient descent introduced in section chapter deep feedforward networks more specifically are most often improvements of the stochastic gradient descent algorithm introduced in section we can of course train models such as linear regression and support vector machines with gradient descent too and in fact this is common when the training set is extremely large. from this point of view training a neural network is not much different from training any other model. computing the gradient is slightly more complicated for a neural network but can still be done efficiently and exactly. section will describe how to obtain the gradient using the back-propagation algorithm and modern generalizations of the back-propagation algorithm. as with other machine learning models to apply gradient-based learning we must choose a cost function and we must choose how to represent the output of the model. we now revisit these design considerations with special emphasis on the neural networks scenario. cost functions an important aspect of the design of a deep neural network is the choice of the cost function. fortunately the cost functions for neural networks are more or less the same as those for other parametric models such as linear models. in most cases our parametric model defines a distribution py x and we simply use the principle of maximum likelihood. this means we use the cross-entropy between the training data and the model s predictions as the cost function. sometimes we take a simpler approach where rather than predicting a complete probability distribution over y we merely predict some statistic of y conditioned on specialized loss functions allow us to train a predictor of these estimates. x the total cost function used to train a neural network will often combine one of the primary cost functions described here with a regularization term. we have already seen some simple examples of regularization applied to linear models in section the weight decay approach used for linear models is also directly applicable to deep neural networks and is among the most popular regularization strategies. more advanced regularization strategies for neural networks will be described in chapter learning conditional distributions with maximum likelihood most modern neural networks are trained using maximum likelihood. this means that the cost function is simply the negative log-likelihood equivalently described chapter deep feedforward networks as the cross-entropy between the training data and the model distribution. this cost function is given by log pmodel y x j ex y pdata the specific form of the cost function changes from model to model depending on the specific form of log pmodel. the expansion of the above equation typically yields some terms that do not depend on the model parameters and may be disy fx i carded. for example as we saw in section then we recover the mean squared error cost y f const pmodely x j n if x y pdata up to a scaling factor of and a term that does not depend on the discarded constant is based on the variance of the gaussian distribution which in this case we chose not to parametrize. previously we saw that the equivalence between maximum likelihood estimation with an output distribution and minimization of mean squared error holds for a linear model but in fact the equivalence holds regardless of the used to predict the mean of the gaussian. f an advantage of this approach of deriving the cost function from maximum likelihood is that it removes the burden of designing cost functions for each model. specifying a model py x automatically determines a cost function log py x one recurring theme throughout neural network design is that the gradient of the cost function must be large and predictable enough to serve as a good guide for the learning algorithm. functions that saturate very flat undermine this objective because they make the gradient become very small. in many cases this happens because the activation functions used to produce the output of the hidden units or the output units saturate. the negative log-likelihood helps to avoid this problem for many models. many output units involve an exp function that can saturate when its argument is very negative. the log function in the negative log-likelihood cost function undoes the exp of some output units. we will discuss the interaction between the cost function and the choice of output unit in section one unusual property of the cross-entropy cost used to perform maximum likelihood estimation is that it usually does not have a minimum value when applied to the models commonly used in practice. for discrete output variables most models are parametrized in such a way that they cannot represent a probability of zero or one but can come arbitrarily close to doing so. logistic regression is an example of such a model. for real-valued output variables if the model chapter deep feedforward networks can control the density of the output distribution example by learning the variance parameter of a gaussian output distribution then it becomes possible to assign extremely high density to the correct training set outputs resulting in cross-entropy approaching negative infinity. regularization techniques described in chapter provide several different ways of modifying the learning problem so that the model cannot reap unlimited reward in this way. learning conditional statistics instead of learning a full probability distribution py x just one conditional statistic of given x y we often want to learn for example we may have a predictor fx that we wish to predict the mean of if we use a sufficiently powerful neural network we can think of the neural network as being able to represent any function f from a wide class of functions with this class being limited only by features such as continuity and boundedness rather than by having a specific parametric form. from this point of view we can view the cost function as being a functional rather than just a function. a functional is a mapping from functions to real numbers. we can thus think of learning as choosing a function rather than merely choosing a set of parameters. we can design our cost functional to have its minimum occur at some specific function we desire. for example we can design the cost functional to have its minimum lie on the function that maps x to the expected value of y given x. solving an optimization problem with respect to a function requires a mathematical tool called calculus of variations described in section it is not necessary to understand calculus of variations to understand the content of this chapter. at the moment it is only necessary to understand that calculus of variations may be used to derive the following two results. our first result derived using calculus of variations is that solving the optimiza tion problem yields f arg min f pdata ex y y f f x ey pdata x so long as this function lies within the class we optimize over. in other words if we could train on infinitely many samples from the true data generating distribution minimizing the mean squared error cost function gives a function that predicts the mean of for each value of x y chapter deep feedforward networks different cost functions give different statistics. a second result derived using calculus of variations is that f arg min f pdata ex y y f yields a function that predicts the median value of y for each x so long as such a function may be described by the family of functions we optimize over. this cost function is commonly called mean absolute error unfortunately mean squared error and mean absolute error often lead to poor results when used with gradient-based optimization. some output units that saturate produce very small gradients when combined with these cost functions. this is one reason that the cross-entropy cost function is more popular than mean squared error or mean absolute error even when it is not necessary to estimate an entire distribution y x p output units the choice of cost function is tightly coupled with the choice of output unit. most of the time we simply use the cross-entropy between the data distribution and the model distribution. the choice of how to represent the output then determines the form of the cross-entropy function. any kind of neural network unit that may be used as an output can also be used as a hidden unit. here we focus on the use of these units as outputs of the model but in principle they can be used internally as well. we revisit these units with additional detail about their use as hidden units in section throughout this section we suppose that the feedforward network provides a set of hidden features defined by h f the role of the output layer is then to provide some additional transformation from the features to complete the task that the network must perform. linear units for gaussian output distributions one simple kind of output unit is an output unit based on an affine transformation with no nonlinearity. these are often just called linear units. given features h a layer of linear output units produces a vector y w hb. linear output layers are often used to produce the mean of a conditional gaussian distribution n p y x y y i chapter deep feedforward networks maximizing the log-likelihood is then equivalent to minimizing the mean squared error. the maximum likelihood framework makes it straightforward to learn the covariance of the gaussian too or to make the covariance of the gaussian be a function of the input. however the covariance must be constrained to be a positive definite matrix for all inputs. it is difficult to satisfy such constraints with a linear output layer so typically other output units are used to parametrize the covariance. approaches to modeling the covariance are described shortly in section because linear units do not saturate they pose little difficulty for gradientbased optimization algorithms and may be used with a wide variety of optimization algorithms. sigmoid units for bernoulli output distributions many tasks require predicting the value of a binary variable y classification problems with two classes can be cast in this form. the maximum-likelihood approach is to define a bernoulli distribution over y conditioned on a bernoulli distribution is defined by just a single number. the neural net x. for this number to be a valid probability it needs to predict only py must lie in the interval satisfying this constraint requires some careful design effort. suppose we were to use a linear unit and threshold its value to obtain a valid probability p y x max min w h b this would indeed define a valid conditional distribution but we would not be able to train it very effectively with gradient descent. any time that w h b strayed outside the unit interval the gradient of the output of the model with respect to its parameters would be a gradient of is typically problematic because the learning algorithm no longer has a guide for how to improve the corresponding parameters. instead it is better to use a different approach that ensures there is always a strong gradient whenever the model has the wrong answer. this approach is based on using sigmoid output units combined with maximum likelihood. a sigmoid output unit is defined by y w h b chapter deep feedforward networks where is the logistic sigmoid function described in section we can think of the sigmoid output unit as having two components. first it h b. next it uses the sigmoid activation uses a linear layer to compute z w function to convert into a probability. z we omit the dependence on x for the moment to discuss how to define a probability distribution over y using the value z the sigmoid can be motivated by constructing an unnormalized probability distribution py which does not sum to we can then divide by an appropriate constant to obtain a valid probability distribution. if we begin with the assumption that the unnormalized log probabilities are linear in y and z we can exponentiate to obtain the unnormalized probabilities. we then normalize to see that this yields a bernoulli distribution controlled by a sigmoidal transformation of yz log p y p y exp yz exp expy y y z z p y p y probability distributions based on exponentiation and normalization are common throughout the statistical modeling literature. the z variable defining such a distribution over binary variables is called a logit this approach to predicting the probabilities in log-space is natural to use with maximum likelihood learning. because the cost function used with maximum x the log in the cost function undoes the exp of the likelihood is sigmoid. without this effect the saturation of the sigmoid could prevent gradientbased learning from making good progress. the loss function for maximum likelihood learning of a bernoulli parametrized by a sigmoid is log py j p y x log log y y z z this derivation makes use of some properties from section by rewriting the loss in terms of the softplus function we can see that it saturates only when is very negative. saturation thus occurs only when the model already has the right answer when y and z is very positive or y and z is very negative. when z has the wrong sign the argument to the softplus function chapter deep feedforward networks z as may be simplified to z becomes large while z has the wrong sign z the the softplus function asymptotes toward simply returning its argument derivative with respect to z asymptotes to signz so in the limit of extremely incorrect z the softplus function does not shrink the gradient at all. this property is very useful because it means that gradient-based learning can act to quickly correct a mistaken when we use other loss functions such as mean squared error the loss can saturate anytime saturates. the sigmoid activation function saturates to when z becomes very negative and saturates to when z becomes very positive. the gradient can shrink too small to be useful for learning whenever this happens whether the model has the correct answer or the incorrect answer. for this reason maximum likelihood is almost always the preferred approach to training sigmoid output units. analytically the logarithm of the sigmoid is always defined and finite because the sigmoid returns values restricted to the open interval rather than using the entire closed interval of valid probabilities in software implementations to avoid numerical problems it is best to write the negative log-likelihood as a function of z rather than as a function of y if the sigmoid function underflows to zero then taking the logarithm of y yields negative infinity. softmax units for multinoulli output distributions any time we wish to represent a probability distribution over a discrete variable with n possible values we may use the softmax function. this can be seen as a generalization of the sigmoid function which was used to represent a probability distribution over a binary variable. softmax functions are most often used as the output of a classifier to represent the probability distribution over n different classes. more rarely softmax functions can be used inside the model itself if we wish the model to choose between one of n different options for some internal variable. in the case of binary variables we wished to produce a single number p y y x and and because we wanted the because this number needed to lie between logarithm of the number to be well-behaved for gradient-based optimization of the log-likelihood we chose to instead predict a number z log py x. exponentiating and normalizing gave us a bernoulli distribution controlled by the sigmoid function. chapter deep feedforward networks to generalize to the case of a discrete variable with n values we now need x. we require not only that each to produce a vector y with yi p i element of yi be between so that it represents a valid probability distribution. the same approach that worked for the bernoulli distribution generalizes to the multinoulli distribution. first a linear layer predicts unnormalized log probabilities and but also that the entire vector sums to z w h b where zi log p i normalize z x. the softmax function can then exponentiate and to obtain the desired y. formally the softmax function is given by softmax i expzi j expzj as with the logistic sigmoid the use of the exp function works very well when training the softmax to output a target value y using maximum log-likelihood. in this case we wish to maximize log p i z log softmax defining the softmax in terms of exp is natural because the log in the log-likelihood can undo the of the softmax exp log softmax i zi log expzj j shows that the input the first term of equation z i always has a direct contribution to the cost function. because this term cannot saturate we know that learning can proceed even if the contribution of zi to the second term of equation becomes very small. when maximizing the log-likelihood the first term encourages z i to be pushed up while the second term encourages all of z to be pushed down. to gain some intuition for the second term log j expzj observe that this term can be roughly approximated by maxj zj. this approximation is based on the idea that expzk is insignificant for any zk that is noticeably less than maxj zj. the intuition we can gain from this approximation is that the negative log-likelihood cost function always strongly penalizes the most active incorrect prediction. if the correct answer already has the largest input to the softmax then maxj zj zi terms will roughly cancel. the this example will then contribute little to the overall training cost which will be dominated by other examples that are not yet correctly classified. zi term and the log j expz j so far we have discussed only a single example. overall unregularized maximum likelihood will drive the model to learn parameters that drive the softmax to predict chapter deep feedforward networks the fraction of counts of each outcome observed in the training set softmax z x i m m x because maximum likelihood is a consistent estimator this is guaranteed to happen so long as the model family is capable of representing the training distribution. in practice limited model capacity and imperfect optimization will mean that the model is only able to approximate these fractions. many objective functions other than the log-likelihood do not work as well with the softmax function. specifically objective functions that do not use a log to undo the exp of the softmax fail to learn when the argument to the exp becomes very negative causing the gradient to vanish. in particular squared error is a poor loss function for softmax units and can fail to train the model to change its output even when the model makes highly confident incorrect predictions bridle to understand why these other loss functions can fail we need to examine the softmax function itself. like the sigmoid the softmax activation can saturate. the sigmoid function has a single output that saturates when its input is extremely negative or extremely positive. in the case of the softmax there are multiple output values. these output values can saturate when the differences between input values become extreme. when the softmax saturates many cost functions based on the softmax also saturate unless they are able to invert the saturating activating function. to see that the softmax function responds to the difference between its inputs observe that the softmax output is invariant to adding the same scalar to all of its inputs softmax softmax c z z using this property we can derive a numerically stable variant of the softmax softmax softmax z z max i zi the reformulated version allows us to evaluate softmax with only small numerical errors even when z contains extremely large or extremely negative numbers. examining the numerically stable variant we see that the softmax function is driven by the amount that its arguments deviate from maxi zi an output softmaxzi saturates to when the corresponding input is maximal maxi zi and zi is much greater than all of the other inputs. the output softmaxzi can also saturate to when zi is not maximal and the maximum is much greater. this is a generalization of the way that sigmoid units saturate and chapter deep feedforward networks can cause similar difficulties for learning if the loss function is not designed to compensate for it. the argument z to the softmax function can be produced in two different ways. the most common is simply to have an earlier layer of the neural network output every element of z as described above using the linear layer z w h b. while straightforward this approach actually overparametrizes the distribution. the constraint that the n outputs must sum to means that only parameters are necessary the probability of the n-th value may be obtained by subtracting the first n probabilities from we can thus impose a requirement that one element of z be fixed. for example we can require that zn indeed this is exactly x is equivalent to defining what the sigmoid unit does. defining p p argument and the n argument approaches to the softmax can describe the same set of probability distributions but have different learning dynamics. in practice there is rarely much difference between using the overparametrized version or the restricted version and it is simpler to implement the overparametrized version. x with a two-dimensional z and both the n n from a neuroscientific point of view it is interesting to think of the softmax as a way to create a form of competition between the units that participate in it the softmax outputs always sum to so an increase in the value of one unit necessarily corresponds to a decrease in the value of others. this is analogous to the lateral inhibition that is believed to exist between nearby neurons in the cortex. at the extreme the difference between the maximal ai and the others is large in magnitude it becomes a form of winner-take-all of the outputs is nearly and the others are nearly the name softmax can be somewhat confusing. the function is more closely related to the arg max function than the max function. the term soft derives from the fact that the softmax function is continuous and differentiable. the arg max function with its result represented as a one-hot vector is not continuous or differentiable. the softmax function thus provides a softened version of the arg max. the corresponding soft version of the maximum function is softmaxz z. it would perhaps be better to call the softmax function softargmax but the current name is an entrenched convention. other output types the linear sigmoid and softmax output units described above are the most common. neural networks can generalize to almost any kind of output layer that we wish. the principle of maximum likelihood provides a guide for how to design chapter deep feedforward networks a good cost function for nearly any kind of output layer. in general if we define a conditional distribution py x the principle of maximum likelihood suggests we use log y x as our cost function. in general we can think of the neural network as representing a function fx the outputs of this function are not direct predictions of the value y. instead f provides the parameters for a distribution over y. our loss function can then be interpreted as p y x log for example we may wish to learn the variance of a conditional gaussian for y given x. in the simple case where the variance is a constant there is a closed form expression because the maximum likelihood estimator of variance is simply the empirical mean of the squared difference between observations y and their expected value. a computationally more expensive approach that does not require writing special-case code is to simply include the variance as one of the properties of the distribution py x that is controlled by fx the negative log-likelihood log py will then provide a cost function with the appropriate terms necessary to make our optimization procedure incrementally learn the variance. in the simple case where the standard deviation does not depend on the input we can make a new parameter in the network that is copied directly into this new parameter might be itself or could be a parameter v representing or it could be a parameter representing depending on how we choose to parametrize the distribution. we may wish our model to predict a different amount of variance in y for different values of x. this is called a heteroscedastic model. in the heteroscedastic case we simply make the specification of the variance be one of the values output by fx a typical way to do this is to formulate the gaussian distribution using precision rather than variance as described in equation in the multivariate case it is most common to use a diagonal precision matrix diag this formulation works well with gradient descent because the formula for the log-likelihood of the gaussian distribution parametrized by involves only multiplication by i and addition of log i the gradient of multiplication addition and logarithm operations is well-behaved. by comparison if we parametrized the output in terms of variance we would need to use division. the division function becomes arbitrarily steep near zero. while large gradients can help learning arbitrarily large gradients usually result in instability. if we parametrized the output in terms of standard deviation the log-likelihood would still involve division and would also involve squaring. the gradient through the squaring operation can vanish near zero making it difficult to learn parameters that are squared. chapter deep feedforward networks regardless of whether we use standard deviation variance or precision we must ensure that the covariance matrix of the gaussian is positive definite. because the eigenvalues of the precision matrix are the reciprocals of the eigenvalues of the covariance matrix this is equivalent to ensuring that the precision matrix is positive definite. if we use a diagonal matrix or a scalar times the diagonal matrix then the only condition we need to enforce on the output of the model is positivity. if we suppose that a is the raw activation of the model used to determine the diagonal precision we can use the softplus function to obtain a positive precision vector this same strategy applies equally if using variance or standard deviation rather than precision or if using a scalar times identity rather than diagonal matrix. it is rare to learn a covariance or precision matrix with richer structure than diagonal. if the covariance is full and conditional then a parametrization must be chosen that guarantees positive-definiteness of the predicted covariance matrix. this can be achieved by writing where b is an unconstrained square matrix. one practical issue if the matrix is full rank is that computing the matrix requiring computation for the likelihood is expensive with a d determinant and inverse of equivalently and more commonly done its eigendecomposition or that of x b x b b x d we often want to perform multimodal regression that is to predict real values that come from a conditional distribution py x that can have several different peaks in y space for the same value of x. in this case a gaussian mixture is a natural representation for the output neural networks with gaussian mixtures as their output are often called mixture density networks. a gaussian mixture output with n components is defined by the conditional probability distribution jacobs et al. bishop p y x n x p c i n the neural network must have three outputs a vector defining pc i x a matrix providing for all i and a tensor providing x for all i. these outputs must satisfy different constraints mixture components pc i x these form a multinoulli distribution over the n different components associated with latent c and can consider c to be latent because we do not observe it in the data given input x and target y it is not possible to know with certainty which gaussian component was responsible for y but we can imagine that y was generated by picking one of them and make that unobserved choice a random variable. chapter deep feedforward networks typically be obtained by a softmax over an n-dimensional vector to guarantee that these outputs are positive and sum to d means these indicate the center or mean associated with the i-th gaussian component and are unconstrained with no nonlinearity at all for these output units. if y is a d-vector then the network must output an n matrix containing all n of these d-dimensional vectors. learning these means with maximum likelihood is slightly more complicated than learning the means of a distribution with only one output mode. we only want to update the mean for the component that actually produced the observation. in practice we do not know which component produced each observation. the expression for the negative log-likelihood naturally weights each example s contribution to the loss for each component by the probability that the component produced the example. covariances these specify the covariance matrix for each component i. as when learning a single gaussian component we typically use a diagonal matrix to avoid needing to compute determinants. as with learning the means of the mixture maximum likelihood is complicated by needing to assign partial responsibility for each point to each mixture component. gradient descent will automatically follow the correct process if given the correct specification of the negative log-likelihood under the mixture model. it has been reported that gradient-based optimization of conditional gaussian mixtures the output of neural networks can be unreliable in part because one gets divisions the variance which can be numerically unstable some variance gets to be small for a particular example yielding very large gradients. one solution is to clip gradients section while another is to scale the gradients heuristically murray and larochelle or movements of physical objects gaussian mixture outputs are particularly effective in generative models of speech the mixture density strategy gives a way for the network to represent multiple output modes and to control the variance of its output which is crucial for obtaining a high degree of quality in these real-valued domains. an example of a mixture density network is shown in figure in general we may wish to continue to model larger vectors y containing more variables and to impose richer and richer structures on these output variables. for example we may wish for our neural network to output a sequence of characters that forms a sentence. in these cases we may continue to use the principle of maximum likelihood applied to our model p y but the model we use chapter deep feedforward networks y x figure samples drawn from a neural network with a mixture density output layer. the input x is sampled from a uniform distribution and the output y is sampled from the neural network is able to learn nonlinear mappings from the input to pmodely x the parameters of the output distribution. these parameters include the probabilities governing which of three mixture components will generate the output as well as the parameters for each mixture component. each mixture component is gaussian with predicted mean and variance. all of these aspects of the output distribution are able to vary with respect to the input and to do so in nonlinear ways. x to describe y becomes complex enough to be beyond the scope of this chapter. chapter describes how to use recurrent neural networks to define such models over sequences and part describes advanced techniques for modeling arbitrary probability distributions. iii hidden units so far we have focused our discussion on design choices for neural networks that are common to most parametric machine learning models trained with gradientbased optimization. now we turn to an issue that is unique to feedforward neural networks how to choose the type of hidden unit to use in the hidden layers of the model. the design of hidden units is an extremely active area of research and does not yet have many definitive guiding theoretical principles. rectified linear units are an excellent default choice of hidden unit. many other types of hidden units are available. it can be difficult to determine when to use which kind rectified linear units are usually an acceptable choice. we chapter deep feedforward networks describe here some of the basic intuitions motivating each type of hidden units. these intuitions can help decide when to try out each of these units. it is usually impossible to predict in advance which will work best. the design process consists of trial and error intuiting that a kind of hidden unit may work well and then training a network with that kind of hidden unit and evaluating its performance on a validation set. these ideas will be described further in chapter some of the hidden units included in this list are not actually differentiable at all input points. for example the rectified linear function g max is not z differentiable at z this may seem like it invalidates g for use with a gradientbased learning algorithm. in practice gradient descent still performs well enough for these models to be used for machine learning tasks. this is in part because neural network training algorithms do not usually arrive at a local minimum of the cost function but instead merely reduce its value significantly as shown in figure because we do not expect training to actually reach a point where the gradient is it is acceptable for the minima of the cost function to correspond to points with undefined gradient. hidden units that are not differentiable are usually non-differentiable at only a small number of points. in general a function gz has a left derivative defined by the slope of the function immediately to the left of z and a right derivative defined by the slope of the function immediately to the right of z. a function is differentiable at z only if both the left derivative and the right derivative are defined and equal to each other. the functions used in the context of neural networks usually have defined left derivatives and defined right derivatives. in the case of gz max and the right derivative is software implementations of neural network training usually return one of the one-sided derivatives rather than reporting that the derivative is undefined or raising an error. this may be heuristically justified by observing that gradientbased optimization on a digital computer is subject to numerical error anyway. when a function is asked to evaluate it is very unlikely that the underlying that was rounded value truly was to in some contexts more theoretically pleasing justifications are available but these usually do not apply to neural network training. the important point is that in practice one can safely disregard the non-differentiability of the hidden unit activation functions described below. instead it was likely to be some small value z the left derivative at z unless indicated otherwise most hidden units can be described as accepting a vector of inputs x computing an affine transformation z w x b and then applying an element-wise nonlinear function gz. most hidden units are distinguished from each other only by the choice of the form of the activation function g chapter deep feedforward networks max g z z rectified linear units and their generalizations rectified linear units use the activation function rectified linear units are easy to optimize because they are so similar to linear units. the only difference between a linear unit and a rectified linear unit is that a rectified linear unit outputs zero across half its domain. this makes the derivatives through a rectified linear unit remain large whenever the unit is active. the gradients are not only large but also consistent. the second derivative of the rectifying operation is almost everywhere and the derivative of the rectifying operation is everywhere that the unit is active. this means that the gradient direction is far more useful for learning than it would be with activation functions that introduce second-order effects. rectified linear units are typically used on top of an affine transformation h w x b when initializing the parameters of the affine transformation it can be a good practice to set all elements of b to a small positive value such as this makes it very likely that the rectified linear units will be initially active for most inputs in the training set and allow the derivatives to pass through. several generalizations of rectified linear units exist. most of these generalizations perform comparably to rectified linear units and occasionally perform better. one drawback to rectified linear units is that they cannot learn via gradientbased methods on examples for which their activation is zero. a variety of generalizations of rectified linear units guarantee that they receive gradient everywhere. three generalizations of rectified linear units are based on using a non-zero zi i zi absolute value slope i when zi hi gz z it is used for object recognition rectification fixes i from images where it makes sense to seek features that are invariant under a polarity reversal of the input illumination. other generalizations of rectified linear units are more broadly applicable. a leaky relu maas et al. fixes i to a small value like while a parametric relu or prelu treats i as a learnable parameter to obtain g z jarrett et al. he et al. maxout units generalize rectified linear units further. instead of applying an element-wise function gz maxout units divide z into groups of k values. each maxout unit then outputs the maximum element of goodfellow et al. chapter deep feedforward networks one of these groups g i max where g this provides a way of learning a piecewise linear function that responds to multiple directions in the input is the set of indices into the inputs for group i ik space. zj j g x a maxout unit can learn a piecewise linear convex function with up to k pieces. maxout units can thus be seen as learning the activation function itself rather than just the relationship between units. with large enough k a maxout unit can learn to approximate any convex function with arbitrary fidelity. in particular a maxout layer with two pieces can learn to implement the same function of the input x as a traditional layer using the rectified linear activation function absolute value rectification function or the leaky or parametric relu or can learn to implement a totally different function altogether. the maxout layer will of course be parametrized differently from any of these other layer types so the learning dynamics will be different even in the cases where maxout learns to implement the same function of as one of the other layer types. x each maxout unit is now parametrized by k weight vectors instead of just one so maxout units typically need more regularization than rectified linear units. they can work well without regularization if the training set is large and the number of pieces per unit is kept low cai et al. maxout units have a few other benefits. in some cases one can gain some statistical and computational advantages by requiring fewer parameters. specifically if the features captured by n different linear filters can be summarized without losing information by taking the max over each group of k features then the next layer can get by with times fewer weights. k because each unit is driven by multiple filters maxout units have some redundancy that helps them to resist a phenomenon called catastrophic forgetting in which neural networks forget how to perform tasks that they were trained on in the past goodfellow et al. rectified linear units and all of these generalizations of them are based on the principle that models are easier to optimize if their behavior is closer to linear. this same general principle of using linear behavior to obtain easier optimization also applies in other contexts besides deep linear networks. recurrent networks can learn from sequences and produce a sequence of states and outputs. when training them one needs to propagate information through several time steps which is much easier when some linear computations some directional derivatives being of magnitude near are involved. one of the best-performing recurrent network chapter deep feedforward networks architectures the lstm propagates information through time via summation a particular straightforward kind of such linear activation. this is discussed further in section logistic sigmoid and hyperbolic tangent prior to the introduction of rectified linear units most neural networks used the logistic sigmoid activation function g z z or the hyperbolic tangent activation function g z tanh z these activation functions are closely related because tanh z z we have already seen sigmoid units as output units used to predict the probability that a binary variable is unlike piecewise linear units sigmoidal units saturate across most of their domain they saturate to a high value when z is very positive saturate to a low value when z is very negative and are only strongly sensitive to their input when z is near the widespread saturation of sigmoidal units can make gradient-based learning very difficult. for this reason their use as hidden units in feedforward networks is now discouraged. their use as output units is compatible with the use of gradient-based learning when an appropriate cost function can undo the saturation of the sigmoid in the output layer. when a sigmoidal activation function must be used the hyperbolic tangent activation function typically performs better than the logistic sigmoid. it resembles the identity function more closely in the sense that while because tanh is similar to the identity function near training a deep neural network y w x resembles training a linear model y w x so long as the activations of the network can be kept small. this makes training the network easier. tanhu tanhv tanh u v sigmoidal activation functions are more common in settings other than feedforward networks. recurrent networks many probabilistic models and some autoencoders have additional requirements that rule out the use of piecewise linear activation functions and make sigmoidal units more appealing despite the drawbacks of saturation. chapter deep feedforward networks other hidden units many other types of hidden units are possible but are used less frequently. in general a wide variety of differentiable functions perform perfectly well. many unpublished activation functions perform just as well as the popular ones. to provide a concrete example the authors tested a feedforward network using h cosw x b on the mnist dataset and obtained an error rate of less than which is competitive with results obtained using more conventional activation functions. during research and development of new techniques it is common to test many different activation functions and find that several variations on standard practice perform comparably. this means that usually new hidden unit types are published only if they are clearly demonstrated to provide a significant improvement. new hidden unit types that perform roughly comparably to known types are so common as to be uninteresting. it would be impractical to list all of the hidden unit types that have appeared in the literature. we highlight a few especially useful and distinctive ones. one possibility is to not have an activation g at all. one can also think of this as using the identity function as the activation function. we have already seen that a linear unit can be useful as the output of a neural network. it may also be used as a hidden unit. if every layer of the neural network consists of only linear transformations then the network as a whole will be linear. however it is acceptable for some layers of the neural network to be purely linear. consider a neural network layer with n inputs and p outputs h gw x b. we may replace this with two layers with one layer using weight matrix u and the other using weight matrix v if the first layer has no activation function then we have essentially factored the weight matrix of the original layer based on w the factored approach is to compute h g v x b. if u produces q outputs then u and v together contain only pq parameters while w contains np parameters. for small q this can be a considerable saving in parameters. it comes at the cost of constraining the linear transformation to be low-rank but these low-rank relationships are often sufficient. linear hidden units thus offer an effective way of reducing the number of parameters in a network. u softmax units are another kind of unit that is usually used as an output described in section but may sometimes be used as a hidden unit. softmax units naturally represent a probability distribution over a discrete variable with k possible values so they may be used as a kind of switch. these kinds of hidden units are usually only used in more advanced architectures that explicitly learn to manipulate memory described in section chapter deep feedforward networks a few other reasonably common hidden unit types include wi radial basis function or rbf unit hi exp this function becomes more active as x approaches a template wi. because it saturates to it can be difficult to optimize. x for most i x dugas et al. glorot et al. for function approximation and by softplus ga ea. this is a smooth version of the rectifier introduced by nair for the conditional distributions of undirected probabilistic and hinton models. compared the softplus and rectifier and found better results with the latter. the use of the softplus is generally discouraged. the softplus demonstrates that the performance of hidden unit types can be very counterintuitive one might expect it to have an advantage over the rectifier due to being differentiable everywhere or due to saturating less completely but empirically it does not. hard tanh this is shaped similarly to the tanh and the rectifier but unlike the latter it is bounded ga max it was introduced by collobert a. hidden unit design remains an active area of research and many useful hidden unit types remain to be discovered. architecture design another key design consideration for neural networks is determining the architecture. the word architecture refers to the overall structure of the network how many units it should have and how these units should be connected to each other. most neural networks are organized into groups of units called layers. most neural network architectures arrange these layers in a chain structure with each layer being a function of the layer that preceded it. in this structure the first layer is given by w x b the second layer is given by h w and so on. chapter deep feedforward networks in these chain-based architectures the main architectural considerations are to choose the depth of the network and the width of each layer. as we will see a network with even one hidden layer is sufficient to fit the training set. deeper networks often are able to use far fewer units per layer and far fewer parameters and often generalize to the test set but are also often harder to optimize. the ideal network architecture for a task must be found via experimentation guided by monitoring the validation set error. universal approximation properties and depth a linear model mapping from features to outputs via matrix multiplication can by definition represent only linear functions. it has the advantage of being easy to train because many loss functions result in convex optimization problems when applied to linear models. unfortunately we often want to learn nonlinear functions. cybenko at first glance we might presume that learning a nonlinear function requires designing a specialized model family for the kind of nonlinearity we want to learn. fortunately feedforward networks with hidden layers provide a universal approximation framework. specifically the universal approximation theorem et al. states that a feedforward network with a linear output layer and at least one hidden layer with any squashing activation function as the logistic sigmoid activation function can approximate any borel measurable function from one finite-dimensional space to another with any desired non-zero amount of error provided that the network is given enough hidden units. the derivatives of the feedforward network can also approximate the derivatives of the function arbitrarily well the concept of borel measurability is beyond the scope of this book for our purposes it suffices to say that any continuous function on a closed and bounded subset of r n is borel measurable and therefore may be approximated by a neural network. a neural network may also approximate any function mapping from any finite dimensional discrete space to another. while the original theorems were first stated in terms of units with activation functions that saturate both for very negative and for very positive arguments universal approximation theorems have also been proved for a wider class of activation functions which includes the now commonly used rectified linear unit hornik et al. leshno et al. the universal approximation theorem means that regardless of what function we are trying to learn we know that a large mlp will be able to represent this function. however we are not guaranteed that the training algorithm will be able to learn that function. even if the mlp is able to represent the function learning can fail for two different reasons. first the optimization algorithm used for training chapter deep feedforward networks may not be able to find the value of the parameters that corresponds to the desired function. second the training algorithm might choose the wrong function due to overfitting. recall from section that the no free lunch theorem shows that there is no universally superior machine learning algorithm. feedforward networks provide a universal system for representing functions in the sense that given a function there exists a feedforward network that approximates the function. there is no universal procedure for examining a training set of specific examples and choosing a function that will generalize to points not in the training set. barron the universal approximation theorem says that there exists a network large enough to achieve any degree of accuracy we desire but the theorem does not say how large this network will be. provides some bounds on the size of a single-layer network needed to approximate a broad class of functions. unfortunately in the worse case an exponential number of hidden units with one hidden unit corresponding to each input configuration that needs to be distinguished may be required. this is easiest to see in the binary case the n is n and selecting number of possible binary functions on vectors v one such function requires bits which will in general require n degrees of freedom. in summary a feedforward network with a single layer is sufficient to represent any function but the layer may be infeasibly large and may fail to learn and generalize correctly. in many circumstances using deeper models can reduce the number of units required to represent the desired function and can reduce the amount of generalization error. there exist families of functions which can be approximated efficiently by an architecture with depth greater than some value d but which require a much larger model if depth is restricted to be less than or equal to d. in many cases the number of hidden units required by the shallow model is exponential in n. such results were first proved for models that do not resemble the continuous differentiable neural networks used for machine learning but have since been extended to these models. the first results were for circuits of logic gates later work extended these results to linear threshold units with non-negative weights h stad and goldmann hajnal et al. and then to networks with many modern continuous-valued activations neural networks use rectified linear units. demonstrated that shallow networks with a broad family of non-polynomial activation functions including rectified linear units have universal approximation properties but these results do not address the questions of depth or efficiency they specify only that a sufficiently wide rectifier network could represent any function. montufar et al. maass maass et al. leshno et al. h stad chapter deep feedforward networks showed that functions representable with a deep rectifier net can require an exponential number of hidden units with a shallow hidden layer network. more precisely they showed that piecewise linear networks can be obtained from rectifier nonlinearities or maxout units can represent functions with a number of regions that is exponential in the depth of the network. figure illustrates how a network with absolute value rectification creates mirror images of the function computed on top of some hidden unit with respect to the input of that hidden unit. each hidden unit specifies where to fold the input space in order to create mirror responses both sides of the absolute value nonlinearity. by composing these folding operations we obtain an exponentially large number of piecewise linear regions which can capture all kinds of regular repeating patterns. montufar et al. figure an intuitive geometric explanation of the exponential advantage of deeper rectifier networks formally by absolute value rectification unit has the same output for every pair of mirror points in its input. the mirror axis of symmetry is given by the hyperplane defined by the weights and bias of the unit. a function computed on top of that unit green decision surface will be a mirror image the function can be obtained of a simpler pattern across that axis of symmetry. by folding the space around the axis of symmetry. another repeating pattern can be folded on top of the first another downstream unit to obtain another symmetry is now repeated four times with two hidden layers. figure reproduced with permission from montufar et al. more precisely the main theorem in states that the number of linear regions carved out by a deep rectifier network with d inputs depth and units per hidden layer is montufar et al. n l o i.e. exponential in the depth in the case of maxout networks with unit the number of linear regions is l k filters per d l nd n d l k d o chapter deep feedforward networks of course there is no guarantee that the kinds of functions we want to learn in applications of machine learning in particular for ai share such a property. we may also want to choose a deep model for statistical reasons. any time we choose a specific machine learning algorithm we are implicitly stating some set of prior beliefs we have about what kind of function the algorithm should learn. choosing a deep model encodes a very general belief that the function we want to learn should involve composition of several simpler functions. this can be interpreted from a representation learning point of view as saying that we believe the learning problem consists of discovering a set of underlying factors of variation that can in turn be described in terms of other simpler underlying factors of variation. alternately we can interpret the use of a deep architecture as expressing a belief that the function we want to learn is a computer program consisting of multiple steps where each step makes use of the previous step s output. these intermediate outputs are not necessarily factors of variation but can instead be analogous to counters or pointers that the network uses to organize its internal processing. empirically greater depth does seem to result in better generalization for a wide variety of tasks bengio et al. erhan et al. bengio ciresan mesnil et al. et al. et al. couprie farabet et al. goodfellow et al. szegedy et al. for examples of some of these empirical results. this suggests that using deep architectures does indeed express a useful prior over the space of functions the model learns. sermanet krizhevsky kahou and figure see figure et al. et al. et al. other architectural considerations so far we have described neural networks as being simple chains of layers with the main considerations being the depth of the network and the width of each layer. in practice neural networks show considerably more diversity. many neural network architectures have been developed for specific tasks. specialized architectures for computer vision called convolutional networks are feedforward networks may also be generalized to the described in chapter recurrent neural networks for sequence processing described in chapter which have their own architectural considerations. in general the layers need not be connected in a chain even though this is the most common practice. many architectures build a main chain but then add extra architectural features to it such as skip connections going from layer i to layer i or higher. these skip connections make it easier for the gradient to flow from output layers to layers nearer the input. chapter deep feedforward networks t n e c r e p y c a r u c c a t s e t number of hidden layers figure empirical results showing that deeper networks generalize better when used to transcribe multi-digit numbers from photographs of addresses. data from goodfellow the test set accuracy consistently increases with increasing depth. see et al. figure for a control experiment demonstrating that other increases to the model size do not yield the same effect. another key consideration of architecture design is exactly how to connect a pair of layers to each other. in the default neural network layer described by a linear transformation via a matrix w every input unit is connected to every output unit. many specialized networks in the chapters ahead have fewer connections so that each unit in the input layer is connected to only a small subset of units in the output layer. these strategies for reducing the number of connections reduce the number of parameters and the amount of computation required to evaluate the network but are often highly problem-dependent. for example convolutional networks described in chapter use specialized patterns of sparse connections that are very effective for computer vision problems. in this chapter it is difficult to give much more specific advice concerning the architecture of a generic neural network. subsequent chapters develop the particular architectural strategies that have been found to work well for different application domains. chapter deep feedforward networks t n e c r e p y c a r u c c a t s e t number of parameters convolutional fully connected convolutional et al. figure deeper models tend to perform better. this is not merely because the model is larger. this experiment from goodfellow shows that increasing the number of parameters in layers of convolutional networks without increasing their depth is not nearly as effective at increasing test set performance. the legend indicates the depth of network used to make each curve and whether the curve represents variation in the size of the convolutional or the fully connected layers. we observe that shallow models in this context overfit at around million parameters while deep ones can benefit from having over million. this suggests that using a deep model expresses a useful preference over the space of functions the model can learn. specifically it expresses a belief that the function should consist of many simpler functions composed together. this could result either in learning a representation that is composed in turn of simpler representations corners defined in terms of edges or in learning a program with sequentially dependent steps first locate a set of objects then segment them from each other then recognize them. chapter deep feedforward networks back-propagation and other differentiation algo rithms when we use a feedforward neural network to accept an input x and produce an output y information flows forward through the network. the inputs x provide the initial information that then propagates up to the hidden units at each layer and finally produces y this is called forward propagation during training forward propagation can continue onward until it produces a scalar cost j the back-propagation algorithm often simply called backprop allows the information from the cost to then flow backwards through the network in order to compute the gradient. rumelhart et al. computing an analytical expression for the gradient is straightforward but numerically evaluating such an expression can be computationally expensive. the back-propagation algorithm does so using a simple and inexpensive procedure. the term back-propagation is often misunderstood as meaning the whole learning algorithm for multi-layer neural networks. actually back-propagation refers only to the method for computing the gradient while another algorithm such as stochastic gradient descent is used to perform learning using this gradient. furthermore back-propagation is often misunderstood as being specific to multilayer neural networks but in principle it can compute derivatives of any function some functions the correct response is to report that the derivative of the function is undefined. specifically we will describe how to compute the gradient x fx y for an arbitrary function f where x is a set of variables whose derivatives are desired and y is an additional set of variables that are inputs to the function but whose derivatives are not required. in learning algorithms the gradient we most often require is the gradient of the cost function with respect to the parameters j many machine learning tasks involve computing other derivatives either as part of the learning process or to analyze the learned model. the backpropagation algorithm can be applied to these tasks as well and is not restricted to computing the gradient of the cost function with respect to the parameters. the idea of computing derivatives by propagating information through a network is very general and can be used to compute values such as the jacobian of a function f with multiple outputs. we restrict our description here to the most commonly used case where has a single output. f chapter deep feedforward networks computational graphs so far we have discussed neural networks with a relatively informal graph language. to describe the back-propagation algorithm more precisely it is helpful to have a more precise computational graph language. many ways of formalizing computation as graphs are possible. here we use each node in the graph to indicate a variable. the variable may be a scalar vector matrix tensor or even a variable of another type. to formalize our graphs we also need to introduce the idea of an operation. an operation is a simple function of one or more variables. our graph language is accompanied by a set of allowable operations. functions more complicated than the operations in this set may be described by composing many operations together. without loss of generality we define an operation to return only a single output variable. this does not lose generality because the output variable can have multiple entries such as a vector. software implementations of back-propagation usually support operations with multiple outputs but we avoid this case in our description because it introduces many extra details that are not important to conceptual understanding. if a variable y is computed by applying an operation to a variable x then we draw a directed edge from x to y we sometimes annotate the output node with the name of the operation applied and other times omit this label when the operation is clear from context. examples of computational graphs are shown in figure chain rule of calculus the chain rule of calculus to be confused with the chain rule of probability is used to compute the derivatives of functions formed by composing other functions whose derivatives are known. back-propagation is an algorithm that computes the chain rule with a specific order of operations that is highly efficient. let x be a real number and let f and g both be functions mapping from a real number to a real number. suppose that y gx and z fgx f then the chain rule states that dz dx dz dy dy dx we can generalize this beyond the scalar case. suppose that x m y r n r chapter deep feedforward networks y y dot zz xx yy xx ww bb hh relu u u matmul xx ww bb sum dot sqr ww y y xx y x the graph using the the graph for the logistic regression prediction figure examples of computational graphs. operation to compute z xy. w b some of the intermediate expressions do not have names in the algebraic expression but need names in the graph. we simply name the i-th such variable u the which computes a design computational graph for the expression h max matrix of rectified linear unit activations h given a design matrix containing a minibatch of inputs x examples a c applied at most one operation to each variable but it is possible to apply more than one operation. here we show a computation graph that applies more than one operation to the weights w of a linear regression model. the weights are used to make both the prediction y and the weight decay penalty xw b i i g maps from r m to r n and f maps from r n to r if y gx and z fy then z yj yj xi z xi in vector notation this may be equivalently written as xz y x y z j chapter deep feedforward networks n m is the where y x jacobian matrix of g from this we see that the gradient of a variable x can be obtained by multiplying a jacobian matrix y yz. the back-propagation algorithm consists x of performing such a jacobian-gradient product for each operation in the graph. by a gradient usually we do not apply the back-propagation algorithm merely to vectors but rather to tensors of arbitrary dimensionality. conceptually this is exactly the same as back-propagation with vectors. the only difference is how the numbers are arranged in a grid to form a tensor. we could imagine flattening each tensor into a vector before we run back-propagation computing a vector-valued gradient and then reshaping the gradient back into a tensor. in this rearranged view back-propagation is still just multiplying jacobians by gradients. to denote the gradient of a value z with respect to a tensor x we write z just as if x were a vector. the indices into x now have multiple coordinates for example a tensor is indexed by three coordinates. we can abstract this away by using a single variable i to represent the complete tuple of indices. for all zi gives z possible index tuples i this is exactly the same as how for all xi x zi gives z possible integer indices i into a vector using this notation we x i then can write the chain rule as it applies to tensors. if x f and y z x x x z j xyj z yj recursively applying the chain rule to obtain backprop using the chain rule it is straightforward to write down an algebraic expression for the gradient of a scalar with respect to any node in the computational graph that produced that scalar. however actually evaluating that expression in a computer introduces some extra considerations. specifically many subexpressions may be repeated several times within the overall expression for the gradient. any procedure that computes the gradient chapter deep feedforward networks will need to choose whether to store these subexpressions or to recompute them several times. an example of how these repeated subexpressions arise is given in figure in some cases computing the same subexpression twice would simply be wasteful. for complicated graphs there can be exponentially many of these wasted computations making a naive implementation of the chain rule infeasible. in other cases computing the same subexpression twice could be a valid way to reduce memory consumption at the cost of higher runtime. along with algorithm we first begin by a version of the back-propagation algorithm that specifies the actual gradient computation directly for the associated forward computation in the order it will actually be done and according to the recursive application of chain rule. one could either directly perform these computations or view the description of the algorithm as a symbolic specification of the computational graph for computing the back-propagation. however this formulation does not make explicit the manipulation and the construction of the symbolic graph that performs the gradient computation. such a formulation is presented below in section with algorithm where we also generalize to nodes that contain arbitrary tensors. first consider a computational graph describing how to compute a single scalar u the loss on a training example. this scalar is the quantity whose gradient we want to obtain with respect to the ni input nodes to uni. in other words we wish to compute u in the application u of back-propagation to computing gradients for gradient descent over parameters u will be the cost associated with an example or a minibatch while to uni correspond to the parameters of the model. ni for all i we will assume that the nodes of the graph have been ordered in such a way that we can compute their output one after the other starting at uni and going up to u as defined in algorithm each node is associated with an operation f and is computed by evaluating the function u where a is the set of all nodes that are parents of u u a g b that algorithm specifies the forward propagation computation which we could in order to perform back-propagation we can construct a and adds to it an extra set of nodes. these b proceeds in computes associated with the forward graph node u this is done put in a graph computational graph that depends on form a subgraph exactly the reverse of the order of computation in the derivative u u g computation in with one node per node of and each node of b g g chapter deep feedforward networks that comprises the values of previous nodes u j i with j p a algorithm a procedure that performs the computations mapping ni inputs to u to an output u this defines a computational graph where each node computes numerical value u by applying a function f to the set of arguments the a input to the computational graph is the vector x and is set into the first ni nodes to uni the output of the computational graph is read off the last node u i do for i u n xi end for for i a u n i n do j p a u u f end for return u using the chain rule with respect to scalar output u u u i j p a u u u b u u g the edge from u to u contains exactly one edge for each as specified by algorithm the subgraph edge from node u to node u of is associated with the computation of u in addition a dot product is performed for each node u between the gradient already computed with respect to nodes u that are children of u and the vector containing the partial derivatives u for the same children u nodes u to summarize the amount of computation required for performing the back-propagation scales linearly with the number of edges in where the computation for each edge corresponds to computing a partial derivative one node with respect to one of its parents as well as performing one multiplication and one addition. below we generalize this analysis to tensor-valued nodes which is just a way to group multiple scalar values in the same node and enable more efficient implementations. g the back-propagation algorithm is designed to reduce the number of common subexpressions without regard to memory. specifically it performs on the order of one jacobian product per node in the graph. this can be seen from the fact u to node u of that backprop the graph exactly once in order to obtain the associated partial derivative u u visits each edge from node chapter deep feedforward networks algorithm simplified version of the back-propagation algorithm for computing the derivatives of u with respect to the variables in the graph. this example is intended to further understanding by showing a simplified case where all variables are scalars and we wish to compute the derivatives with respect to u this simplified version computes the derivatives of all nodes in the graph. the computational cost of this algorithm is proportional to the number of edges in the graph assuming that the partial derivative associated with each edge requires a constant time. this is of the same order as the number of computations for the forward propagation. each u is a function of the parents u of u thus u linking the nodes of the forward graph to those added for the back-propagation graph. for this example to obtain the activa run forward propagation tions of the network initialize grad_table a data structure that will store the derivatives that have will store the computed value of been computed. the entry grad table u u grad table for j n do using stored values down to the next line computes u u grad table end for return grad table i ni i j p a u u u u u u u i j p a u grad table back-propagation thus avoids the exponential explosion in repeated subexpressions. however other algorithms may be able to avoid more subexpressions by performing simplifications on the computational graph or may be able to conserve memory by recomputing rather than storing some subexpressions. we will revisit these ideas after describing the back-propagation algorithm itself. back-propagation computation in fully-connected mlp to clarify the above definition of the back-propagation computation let us consider the specific graph associated with a fully-connected multi-layer mlp. algorithm the supervised loss l y y y first shows the forward propagation which maps parameters to associated with a single training example with y the output of the neural network when x is provided in input. algorithm then shows the corresponding computation to be done for chapter deep feedforward networks f f f zz yy xx ww figure a computational graph that results in repeated subexpressions when computing the gradient. let w r as the operation that we apply at every step of a chain x fw y f x z f y. to compute z w r be the input to the graph. we use the same function f r we apply equation and obtain z w z y y x f f f w f x w f f w f suggests an implementation in which we compute the value of f only equation once and store it in the variable x. this is the approach taken by the back-propagation algorithm. an alternative approach is suggested by equation where the subexpression fw appears more than once. in the alternative approach f is recomputed each time it is needed. when the memory required to store the value of these expressions is low the back-propagation approach of equation is clearly preferable because of its reduced runtime. however equation is also a valid implementation of the chain rule and is useful when memory is limited. chapter deep feedforward networks applying the back-propagation algorithm to this graph. algorithms are demonstrations that are chosen to be simple and straightforward to understand. however they are specialized to one specific problem. and modern software implementations are based on the generalized form of backpropagation described in section below which can accommodate any computational graph by explicitly manipulating a data structure for representing symbolic computation. algorithm forward propagation through a typical deep neural network and the computation of the cost function. the loss l y y depends on the output y and on the target y section for examples of loss functions. to obtain the total cost j the loss may be added to a regularizer where contains all the parameters and biases. algorithm shows how to compute gradients of j with respect to parameters w and b. for simplicity this demonstration uses only a single input example x. practical applications should use a minibatch. see section require network depth l require w i l require b i l require x the input to process require y the target output for a more realistic demonstration. the bias parameters of the model the weight matrices of the model x for k do l a b w h k h a end for y j h l y y symbol-to-symbol derivatives algebraic expressions and computational graphs both operate on symbols or variables that do not have specific values. these algebraic and graph-based representations are called symbolic representations. when we actually use or train a neural network we must assign specific values to these symbols. we replace a symbolic input to the network x with a specific numeric value such as chapter deep feedforward networks algorithm backward computation for the deep neural network of algox a target y. this computation rithm which uses in addition to the input yields the gradients on the activations a for each layer k starting from the output layer and going backwards to the first hidden layer. from these gradients which can be interpreted as an indication of how each layer s output should change to reduce error one can obtain the gradient on the parameters of each layer. the gradients on weights and biases can be immediately used as part of a stochastic gradient update the update right after the gradients have been computed or used with other gradient-based optimization methods. after the forward computation compute the gradient on the output layer g for yj y l y y do l l k g a j f convert the gradient on the layer s output into a gradient into the pre nonlinearity activation multiplication if g compute gradients on weights and biases the regularization term where needed b j b w j g h k w propagate the gradients w.r.t. the next lower-level hidden layer s activations j w g is element-wise f k h end for g chapter deep feedforward networks f f f zz yy xx ww f f f zz yy xx ww f f f dz dz dy dy dy dy dx dx dx dx dw dw dz dz dx dx dz dz dw dw figure an example of the symbol-to-symbol approach to computing derivatives. in this approach the back-propagation algorithm does not need to ever access any actual specific numeric values. instead it adds nodes to a computational graph describing how to compute these derivatives. a generic graph evaluation engine can later compute the derivatives for any specific numeric values. this example we begin with a graph we run the back-propagation algorithm instructing representing z f it to construct the graph for the expression corresponding to dz in this example we do dw not explain how the back-propagation algorithm works. the purpose is only to illustrate what the desired result is a computational graph with a symbolic description of the derivative. some approaches to back-propagation take a computational graph and a set of numerical values for the inputs to the graph then return a set of numerical values describing the gradient at those input values. we call this approach symbolto-number differentiation. this is the approach used by libraries such as torch collobert et al. and caffe jia another approach is to take a computational graph and add additional nodes to the graph that provide a symbolic description of the desired derivatives. this is the approach taken by theano bergstra et al. bastien et al. and tensorflow abadi et al. an example of how this approach works is illustrated in figure the primary advantage of this approach is that the derivatives are described in the same language as the original expression. because the derivatives are just another computational graph it is possible to run back-propagation again differentiating the derivatives in order to obtain higher derivatives. computation of higher-order derivatives is described in section we will use the latter approach and describe the back-propagation algorithm in chapter deep feedforward networks terms of constructing a computational graph for the derivatives. any subset of the graph may then be evaluated using specific numerical values at a later time. this allows us to avoid specifying exactly when each operation should be computed. instead a generic graph evaluation engine can evaluate every node as soon as its parents values are available. the description of the symbol-to-symbol based approach subsumes the symbolto-number approach. the symbol-to-number approach can be understood as performing exactly the same computations as are done in the graph built by the symbol-to-symbol approach. the key difference is that the symbol-to-number approach does not expose the graph. general back-propagation the back-propagation algorithm is very simple. to compute the gradient of some scalar z with respect to one of its ancestors x in the graph we begin by observing that the gradient with respect to z is given by dz we can then compute dz the gradient with respect to each parent of z in the graph by multiplying the current gradient by the jacobian of the operation that produced z. we continue multiplying by jacobians traveling backwards through the graph in this way until we reach x. for any node that may be reached by going backwards from z through two or more paths we simply sum the gradients arriving from different paths at that node. more formally each node in the graph corresponds to a variable. to achieve maximum generality we describe this variable as being a tensor v. tensor can in general have any number of dimensions. they subsume scalars vectors and matrices. g we assume that each variable is associated with the following subroutines v this returns the operation that computes v repreget operation sented by the edges coming into v in the computational graph. for example there may be a python or c class representing the matrix multiplication operation and the get_operation function. suppose we have a variable that is created by matrix multiplication c ab. then get operation v returns a pointer to an instance of the corresponding c class. g g g get consumers v in the computational graph g get inputs in the computational graph this returns the list of variables that are children of this returns the list of variables that are parents of v chapter deep feedforward networks each operation op is also associated with a bprop operation. this bprop operation can compute a jacobian-vector product as described by equation this is how the back-propagation algorithm is able to achieve great generality. each operation is responsible for knowing how to back-propagate through the edges in the graph that it participates in. for example we might use a matrix multiplication operation to create a variable c ab. suppose that the gradient of a scalar z with respect to c is given by g. the matrix multiplication operation is responsible for defining two back-propagation rules one for each of its input arguments. if we call the bprop method to request the gradient with respect to a given that the gradient on the output is g then the bprop method of the matrix multiplication operation must state that the gradient with respect to a is given by gb likewise if we call the bprop method to request the gradient with respect to b then the matrix operation is responsible for implementing the bprop method and specifying that the desired gradient is given by a g. the back-propagation algorithm itself does not need to know any differentiation rules. it only needs to call each operation s bprop rules with the right arguments. formally op bprop inputs g must return op f inputs i gi x i which is just an implementation of the chain rule as expressed in equation here inputs is a list of inputs that are supplied to the operation op.f is the mathematical function that the operation implements x is the input whose gradient we wish to compute and is the gradient on the output of the operation. g the op.bprop method should always pretend that all of its inputs are distinct from each other even if they are not. for example if the mul operator is passed two copies of x to compute the op.bprop method should still return x as the derivative with respect to both inputs. the back-propagation algorithm will later add both of these arguments together to obtain which is the correct total derivative on software implementations of back-propagation usually provide both the operations and their bprop methods so that users of deep learning software libraries are able to back-propagate through graphs built using common operations like matrix multiplication exponents logarithms and so on. software engineers who build a new implementation of back-propagation or advanced users who need to add their own operation to an existing library must usually derive the op.bprop method for any new operations manually. the back-propagation algorithm is formally described in algorithm chapter deep feedforward networks build_grad algorithm the outermost skeleton of the back-propagation algorithm. this portion does simple setup and cleanup work. most of the important work happens in the require t the target set of variables whose gradients must be computed. require g require z the variable to be differentiated g the computational graph g subroutine of algorithm pruned to contain only nodes that are ancestors of z and descendents grad_table a data structure associating tensors to their gradients be let of nodes in initialize grad table for z do build grad v in t g g grad table end for return grad_table restricted to t in section we explained that back-propagation was developed in order to avoid computing the same subexpression in the chain rule multiple times. the naive algorithm could have exponential runtime due to these repeated subexpressions. now that we have specified the back-propagation algorithm we can understand its computational cost. if we assume that each operation evaluation has roughly the same cost then we may analyze the computational cost in terms of the number of operations executed. keep in mind here that we refer to an operation as the fundamental unit of our computational graph which might actually consist of very many arithmetic operations example we might have a graph that treats matrix multiplication as a single operation. computing a gradient in a graph with n nodes will never execute more than operations or store the output of more than on operations. here we are counting operations in the computational graph not individual operations executed by the underlying hardware so it is important to remember that the runtime of each operation may be highly variable. for example multiplying two matrices that each contain millions of entries might correspond to a single operation in the graph. we can see that computing the gradient requires as most operations because the forward propagation stage will at worst execute all n nodes in the original graph on which values we want to compute we may not need to execute the entire graph. the back-propagation algorithm adds one jacobian-vector product which should be expressed with nodes per edge in the original graph. because the computational graph is a directed acyclic graph it has at most edges. for the kinds of graphs that are commonly used in practice the situation is even better. most neural network cost functions are chapter deep feedforward networks g g of algorithm the inner loop subroutine build grad the back-propagation algorithm called by the back-propagation algorithm defined in algorithm require v the variable whose gradient should be added to require to nodes that participate in the gradient. require require grad_table a data structure mapping nodes to their gradients g g g the graph to modify. the restriction of grad table grad_table and g if then v is in grad_table return grad table end if i in for c op g i consumers v g g get operation build grad c i end for d op bprop get inputs i g g v grad table insert g return g g g do grad table d g and the operations creating it into g roughly chain-structured causing back-propagation to have on cost. this is far better than the naive approach which might need to execute exponentially many nodes. this potentially exponential cost can be seen by expanding and rewriting the recursive chain rule non-recursively u u t path t from toj tn u k u k since the number of paths from node j to node n can grow exponentially in the length of these paths the number of terms in the above sum which is the number of such paths can grow exponentially with the depth of the forward propagation graph. this large cost would be incurred because the same computation for u would be redone many times. to avoid such recomputation we can think u of back-propagation as a table-filling algorithm that takes advantage of storing intermediate results u each node in the graph has a corresponding slot in a u table to store the gradient for that node. by filling in these table entries in order chapter deep feedforward networks back-propagation avoids repeating many common subexpressions. this table-filling strategy is sometimes called dynamic programming example back-propagation for mlp training as an example we walk through the back-propagation algorithm as it is used to train a multilayer perceptron. here we develop a very simple multilayer perception with a single hidden layer. to train this model we will use minibatch stochastic gradient descent. the back-propagation algorithm is used to compute the gradient of the cost on a single minibatch. specifically we use a minibatch of examples from the training set formatted as a design matrix x and a vector of associated class labels y. xw the network computes a layer of hidden features h max to simplify the presentation we do not use biases in this model. we assume that our graph language includes a relu operation that can compute max elementwise. the predictions of the unnormalized log probabilities over classes are then given by hw we assume that our graph language includes a cross_entropy operation that computes the cross-entropy between the targets y and the probability distribution defined by these unnormalized log probabilities. the resulting crossentropy defines the cost jmle. minimizing this cross-entropy performs maximum likelihood estimation of the classifier. however to make this example more realistic we also include a regularization term. the total cost z j j mle w ij w ij ij ij consists of the cross-entropy and a weight decay term with coefficient the computational graph is illustrated in figure the computational graph for the gradient of this example is large enough that it would be tedious to draw or to read. this demonstrates one of the benefits of the back-propagation algorithm which is that it can automatically generate gradients that would be straightforward but tedious for a software engineer to derive manually. we can roughly trace out the behavior of the back-propagation algorithm to train we wish by looking at the forward propagation graph in figure w j. there are two different paths leading to compute both backward from j to the weights one through the cross-entropy cost and one through the weight decay cost. the weight decay cost is relatively simple it will always contribute w to the gradient on w w and chapter deep feedforward networks j mle j mle cross_entropy jj u yy matmul relu hh w sqr u sum u matmul xx w sqr u sum figure the computational graph used to compute the cost used to train our example of a single-layer mlp using the cross-entropy loss and weight decay. the other path through the cross-entropy cost is slightly more complicated. let g be the gradient on the unnormalized log probabilities u provided by the cross_entropy operation. the back-propagation algorithm now needs to explore two different branches. on the shorter branch it adds h g to the gradient on w using the back-propagation rule for the second argument to the matrix multiplication operation. the other branch corresponds to the longer chain descending further along the network. first the back-propagation algorithm computes using the back-propagation rule for the first argument to the matrix multiplication operation. next the relu operation uses its backpropagation rule to zero out components of the gradient corresponding to entries of u that were less than let the result be called the last step of the back-propagation algorithm is to use the back-propagation rule for the second argument of the hj gw to the gradient on w g matmul operation to add x g after these gradients have been computed it is the responsibility of the gradient descent algorithm or another optimization algorithm to use these gradients to update the parameters. for the mlp the computational cost is dominated by the cost of matrix multiplication. during the forward propagation stage we multiply by each weight chapter deep feedforward networks matrix resulting in ow multiply-adds where w is the number of weights. during the backward propagation stage we multiply by the transpose of each weight matrix which has the same computational cost. the main memory cost of the algorithm is that we need to store the input to the nonlinearity of the hidden layer. this value is stored from the time it is computed until the backward pass has returned to the same point. the memory cost is thus omnh where m is the number of examples in the minibatch and nh is the number of hidden units. complications our description of the back-propagation algorithm here is simpler than the implementations actually used in practice. as noted above we have restricted the definition of an operation to be a function that returns a single tensor. most software implementations need to support operations that can return more than one tensor. for example if we wish to compute both the maximum value in a tensor and the index of that value it is best to compute both in a single pass through memory so it is most efficient to implement this procedure as a single operation with two outputs. we have not described how to control the memory consumption of backpropagation. back-propagation often involves summation of many tensors together. in the naive approach each of these tensors would be computed separately then all of them would be added in a second step. the naive approach has an overly high memory bottleneck that can be avoided by maintaining a single buffer and adding each value to that buffer as it is computed. real-world implementations of back-propagation also need to handle various data types such as floating point floating point and integer values. the policy for handling each of these types takes special care to design. some operations have undefined gradients and it is important to track these cases and determine whether the gradient requested by the user is undefined. various other technicalities make real-world differentiation more complicated. these technicalities are not insurmountable and this chapter has described the key intellectual tools needed to compute derivatives but it is important to be aware that many more subtleties exist. differentiation outside the deep learning community the deep learning community has been somewhat isolated from the broader computer science community and has largely developed its own cultural attitudes chapter deep feedforward networks concerning how to perform differentiation. more generally the field of automatic differentiation is concerned with how to compute derivatives algorithmically. the back-propagation algorithm described here is only one approach to automatic differentiation. it is a special case of a broader class of techniques called reverse mode accumulation. other approaches evaluate the subexpressions of the chain rule in different orders. in general determining the order of evaluation that results in the lowest computational cost is a difficult problem. finding the optimal sequence of operations to compute the gradient is np-complete in the sense that it may require simplifying algebraic expressions into their least expensive form. naumann for example suppose we have variables pn representing probabilities and variables zn representing unnormalized log probabilities. suppose we define qi expzi i expzi g where we build the softmax function out of exponentiation summation and division i pi log qi. a human operations and construct a cross-entropy loss j mathematician can observe that the derivative of j with respect to zi takes a very pi. the back-propagation algorithm is not capable of simplifying simple form qi the gradient this way and will instead explicitly propagate gradients through all of the logarithm and exponentiation operations in the original graph. some software libraries such as theano are able to perform some kinds of algebraic substitution to improve over the graph proposed by the pure back-propagation algorithm. bergstra et al. bastien et al. when the forward graph because each local partial derivative has a single output node and each partial derivative u can be computed with a constant amount of computation back-propagation u guarantees that the number of computations for the gradient computation is of the same order as the number of computations for the forward computation this can be seen in algorithm needs to be computed only once along with an associated multiplication and addition for the recursive chain-rule formulation the overall computation is therefore o edges. however it can potentially be reduced by simplifying the computational graph constructed by back-propagation and this is an np-complete task. implementations such as theano and tensorflow use heuristics based on matching known simplification patterns in order to iteratively attempt to simplify the graph. we defined back-propagation only for the computation of a gradient of a scalar output but back-propagation can be extended to compute a jacobian of k different scalar nodes in the graph or of a tensor-valued node containing k values. a naive implementation may then need k times more computation for u u chapter deep feedforward networks each scalar internal node in the original forward graph the naive implementation computes k gradients instead of a single gradient. when the number of outputs of the graph is larger than the number of inputs it is sometimes preferable to use another form of automatic differentiation called forward mode accumulation. forward mode computation has been proposed for obtaining real-time computation of gradients in recurrent networks for example this also avoids the need to store the values and gradients for the whole graph trading off computational efficiency for memory. the relationship between forward mode and backward mode is analogous to the relationship between left-multiplying versus right-multiplying a sequence of matrices such as williams and zipser abcd where the matrices can be thought of as jacobian matrices. for example if d is a column vector while a has many rows this corresponds to a graph with a single output and many inputs and starting the multiplications from the end and going backwards only requires matrix-vector products. this corresponds to the backward mode. instead starting to multiply from the left would involve a series of matrix-matrix products which makes the whole computation much more expensive. however if a has fewer rows than d has columns it is cheaper to run the multiplications left-to-right corresponding to the forward mode. in many communities outside of machine learning it is more common to implement differentiation software that acts directly on traditional programming language code such as python or c code and automatically generates programs that differentiate functions written in these languages. in the deep learning community computational graphs are usually represented by explicit data structures created by specialized libraries. the specialized approach has the drawback of requiring the library developer to define the bprop methods for every operation and limiting the user of the library to only those operations that have been defined. however the specialized approach also has the benefit of allowing customized back-propagation rules to be developed for each operation allowing the developer to improve speed or stability in non-obvious ways that an automatic procedure would presumably be unable to replicate. back-propagation is therefore not the only way or the optimal way of computing the gradient but it is a very practical method that continues to serve the deep learning community very well. in the future differentiation technology for deep networks may improve as deep learning practitioners become more aware of advances in the broader field of automatic differentiation. chapter deep feedforward networks higher-order derivatives some software frameworks support the use of higher-order derivatives. among the deep learning software frameworks this includes at least theano and tensorflow. these libraries use the same kind of data structure to describe the expressions for derivatives as they use to describe the original function being differentiated. this means that the symbolic differentiation machinery can be applied to derivatives. in the context of deep learning it is rare to compute a single second derivative of a scalar function. instead we are usually interested in properties of the hessian n matrix. if we have a function f r r then the hessian matrix is of size n n in typical deep learning applications n will be the number of parameters in the model which could easily number in the billions. the entire hessian matrix is thus infeasible to even represent. instead of explicitly computing the hessian the typical deep learning approach is to use krylov methods. krylov methods are a set of iterative techniques for performing various operations like approximately inverting a matrix or finding approximations to its eigenvectors or eigenvalues without using any operation other than matrix-vector products. in order to use krylov methods on the hessian we only need to be able to compute the product between the hessian matrix h and an arbitrary vector v. a straightforward technique for doing so is to compute christianson hv x xf x v both of the gradient computations in this expression may be computed automatically by the appropriate software library. note that the outer gradient expression takes the gradient of a function of the inner gradient expression. if v is itself a vector produced by a computational graph it is important to specify that the automatic differentiation software should not differentiate through the graph that produced while computing the hessian is usually not advisable it is possible to do with for all i n where hessian vector products. one simply computes he e is the one-hot vector with e i and all other entries equal to historical notes feedforward networks can be seen as efficient nonlinear function approximators based on using gradient descent to minimize the error in a function approximation. chapter deep feedforward networks from this point of view the modern feedforward network is the culmination of centuries of progress on the general function approximation task. the chain rule that underlies the back-propagation algorithm was invented calculus and algebra have in the century long been used to solve optimization problems in closed form but gradient descent was not introduced as a technique for iteratively approximating the solution to optimization problems until the century leibniz l h pital beginning in the these function approximation techniques were used to motivate machine learning models such as the perceptron. however the earliest models were based on linear models. critics including marvin minsky pointed out several of the flaws of the linear model family such as its inability to learn the xor function which led to a backlash against the entire neural network approach. linnainmaa werbos learning nonlinear functions required the development of a multilayer perceptron and a means of computing the gradient through such a model. efficient applications of the chain rule based on dynamic programming began to appear in the and mostly for control applications kelley bryson and denham dreyfus bryson and ho dreyfus but also for sensitivity analysis proposed applying these techniques to training artificial neural networks. the idea was finally developed in practice after being independently rediscovered in different ways lecun parker rumelhart the book parallel distributed processing presented the results of some of the first successful experiments with back-propagation in a chapter that contributed greatly to the popularization of back-propagation and initiated a very active period of research in multi-layer neural networks. however the ideas put forward by the authors of that book and in particular by rumelhart and hinton go much beyond back-propagation. they include crucial ideas about the possible computational implementation of several central aspects of cognition and learning which came under the name of connectionism because of the importance this school of thought places on the connections between neurons as the locus of learning and memory. in particular these ideas include the notion of distributed representation et al. rumelhart et al. et al. following the success of back-propagation neural network research gained popularity and reached a peak in the early afterwards other machine learning techniques became more popular until the modern deep learning renaissance that began in the core ideas behind modern feedforward networks have not changed substantially since the the same back-propagation algorithm and the same chapter deep feedforward networks approaches to gradient descent are still in use. most of the improvement in neural network performance from to can be attributed to two factors. first larger datasets have reduced the degree to which statistical generalization is a challenge for neural networks. second neural networks have become much larger due to more powerful computers and better software infrastructure. however a small number of algorithmic changes have improved the performance of neural networks noticeably. one of these algorithmic changes was the replacement of mean squared error with the cross-entropy family of loss functions. mean squared error was popular in the and but was gradually replaced by cross-entropy losses and the principle of maximum likelihood as ideas spread between the statistics community and the machine learning community. the use of cross-entropy losses greatly improved the performance of models with sigmoid and softmax outputs which had previously suffered from saturation and slow learning when using the mean squared error loss. z the other major algorithmic change that has greatly improved the performance of feedforward networks was the replacement of sigmoid hidden units with piecewise linear hidden units such as rectified linear units. rectification using the max function was introduced in early neural network models and dates back at least as far as the cognitron and neocognitron these early models did not use rectified linear units but instead applied rectification to nonlinear functions. despite the early popularity of rectification rectification was largely replaced by sigmoids in the perhaps because sigmoids perform better when neural networks are very small. as of the early rectified linear units were avoided due to a somewhat superstitious belief that activation functions with non-differentiable points must be avoided. this began to change in about jarrett observed that using a rectifying nonlinearity is the single most important factor in improving the performance of a recognition system among several different factors of neural network architecture design. et al. for small datasets jarrett et al. observed that using rectifying nonlinearities is even more important than learning the weights of the hidden layers. random weights are sufficient to propagate useful information through a rectified linear network allowing the classifier layer at the top to learn how to map different feature vectors to class identities. when more data is available learning begins to extract enough useful knowledge to exceed the performance of randomly chosen parameters. glorot et al. showed that learning is far easier in deep rectified linear networks than in deep networks that have curvature or two-sided saturation in their activation functions. chapter deep feedforward networks glorot et al. rectified linear units are also of historical interest because they show that neuroscience has continued to have an influence on the development of deep learning algorithms. motivate rectified linear units from biological considerations. the half-rectifying nonlinearity was intended to capture these properties of biological neurons for some inputs biological neurons are completely inactive. for some inputs a biological neuron s output is proportional to its input. most of the time biological neurons operate in the regime where they are inactive they should have sparse activations. when the modern resurgence of deep learning began in feedforward networks continued to have a bad reputation. from about it was widely believed that feedforward networks would not perform well unless they were assisted by other models such as probabilistic models. today it is now known that with the right resources and engineering practices feedforward networks perform very well. today gradient-based learning in feedforward networks is used as a tool to develop probabilistic models such as the variational autoencoder and generative adversarial networks described in chapter rather than being viewed as an unreliable technology that must be supported by other techniques gradient-based learning in feedforward networks has been viewed since as a powerful technology that may be applied to many other machine learning tasks. in the community used unsupervised learning to support supervised learning and now ironically it is more common to use supervised learning to support unsupervised learning. feedforward networks continue to have unfulfilled potential. in the future we expect they will be applied to many more tasks and that advances in optimization algorithms and model design will improve their performance even further. this chapter has primarily described the neural network family of models. in the subsequent chapters we turn to how to use these models how to regularize and train them. chapter regularization for deep learning a central problem in machine learning is how to make an algorithm that will perform well not just on the training data but also on new inputs. many strategies used in machine learning are explicitly designed to reduce the test error possibly at the expense of increased training error. these strategies are known collectively as regularization. as we will see there are a great many forms of regularization available to the deep learning practitioner. in fact developing more effective regularization strategies has been one of the major research efforts in the field. chapter introduced the basic concepts of generalization underfitting overfitting bias variance and regularization. if you are not already familiar with these notions please refer to that chapter before continuing with this one. in this chapter we describe regularization in more detail focusing on regularization strategies for deep models or models that may be used as building blocks to form deep models. some sections of this chapter deal with standard concepts in machine learning. if you are already familiar with these concepts feel free to skip the relevant sections. however most of this chapter is concerned with the extension of these basic concepts to the particular case of neural networks. in section we defined regularization as any modification we make to a learning algorithm that is intended to reduce its generalization error but not its training error. there are many regularization strategies. some put extra constraints on a machine learning model such as adding restrictions on the parameter values. some add extra terms in the objective function that can be thought of as corresponding to a soft constraint on the parameter values. if chosen carefully these extra constraints and penalties can lead to improved performance chapter regularization for deep learning on the test set. sometimes these constraints and penalties are designed to encode specific kinds of prior knowledge. other times these constraints and penalties are designed to express a generic preference for a simpler model class in order to promote generalization. sometimes penalties and constraints are necessary to make an underdetermined problem determined. other forms of regularization known as ensemble methods combine multiple hypotheses that explain the training data. in the context of deep learning most regularization strategies are based on regularizing estimators. regularization of an estimator works by trading increased bias for reduced variance. an effective regularizer is one that makes a profitable trade reducing variance significantly while not overly increasing the bias. when we discussed generalization and overfitting in chapter we focused on three situations where the model family being trained either excluded the true data generating process corresponding to underfitting and inducing bias or matched the true data generating process or included the generating process but also many other possible generating processes the overfitting regime where variance rather than bias dominates the estimation error. the goal of regularization is to take a model from the third regime into the second regime. in practice an overly complex model family does not necessarily include the target function or the true data generating process or even a close approximation of either. we almost never have access to the true data generating process so we can never know for sure if the model family being estimated includes the generating process or not. however most applications of deep learning algorithms are to domains where the true data generating process is almost certainly outside the model family. deep learning algorithms are typically applied to extremely complicated domains such as images audio sequences and text for which the true generation process essentially involves simulating the entire universe. to some extent we are always trying to fit a square peg data generating process into a round hole model family. what this means is that controlling the complexity of the model is not a simple matter of finding the model of the right size with the right number of parameters. instead we might find and indeed in practical deep learning scenarios we almost always do find that the best fitting model the sense of minimizing generalization error is a large model that has been regularized appropriately. we now review several strategies for how to create such a large deep regularized model. chapter regularization for deep learning parameter norm penalties regularization has been used for decades prior to the advent of deep learning. linear models such as linear regression and logistic regression allow simple straightforward and effective regularization strategies. many regularization approaches are based on limiting the capacity of models such as neural networks linear regression or logistic regression by adding a parameter norm penalty to the objective function j we denote the regularized objective function by j j x y x y j relative to the standard objective function where is a hyperparameter that weights the relative contribution of the j setting to norm penalty term results in no regularization. larger values of correspond to more regularization. when our training algorithm minimizes the regularized objective function j it will decrease both the original objective j on the training data and some measure of the size of the parameters some subset of the parameters. different choices for the parameter norm can result in different solutions being preferred. in this section we discuss the effects of the various norms when used as penalties on the model parameters. only the weights before delving into the regularization behavior of different norms we note that that for neural networks we typically choose to use a parameter norm penalty penalizes of the affine transformation at each layer and leaves the biases unregularized. the biases typically require less data to fit accurately than the weights. each weight specifies how two variables interact. fitting the weight well requires observing both variables in a variety of conditions. each bias controls only a single variable. this means that we do not induce too much variance by leaving the biases unregularized. also regularizing the bias parameters can introduce a significant amount of underfitting. we therefore use the vector w to indicate all of the weights that should be affected by a norm penalty while the vector denotes all of the parameters including both w and the unregularized parameters. in the context of neural networks it is sometimes desirable to use a separate penalty with a different coefficient for each layer of the network. because it can be expensive to search for the correct value of multiple hyperparameters it is still reasonable to use the same weight decay at all layers just to reduce the size of search space. chapter regularization for deep learning l parameter regularization we have already seen in section one of the simplest and most common kinds of parameter norm penalty the parameter norm penalty commonly known as weight decay. this regularization strategy drives the weights closer to the by adding a regularization term to the objective function. in other academic communities regularization is also known as ridge regression or tikhonov regularization. w we can gain some insight into the behavior of weight decay regularization by studying the gradient of the regularized objective function. to simplify the presentation we assume no bias parameter so is just w. such a model has the following total objective function j x y w w w x y with the corresponding parameter gradient w j x y w wj x y to take a single gradient step to update the weights we perform this update w w w wj x y written another way the update is w w wj x y we can see that the addition of the weight decay term has modified the learning rule to multiplicatively shrink the weight vector by a constant factor on each step just before performing the usual gradient update. this describes what happens in a single step. but what happens over the entire course of training? we will further simplify the analysis by making a quadratic approximation to the objective function in the neighborhood of the value of the weights that obtains minimal unregularized training cost w arg minw jw. if the objective function is truly quadratic as in the case of fitting a linear regression model with generally we could regularize the parameters to be near any specific point in space and surprisingly still get a regularization effect but better results will be obtained for a value closer to the true one with zero being a default value that makes sense when we do not know if the correct value should be positive or negative. since it is far more common to regularize the model parameters towards zero we will focus on this special case in our exposition. chapter regularization for deep learning mean squared error then the approximation is perfect. the approximation j is given by j j w h w w where h is the hessian matrix of j with respect to w evaluated at w no first-order term in this quadratic approximation because w minimum where the gradient vanishes. likewise because w minimum of is positive semidefinite. we can conclude that there is is defined to be a is the location of a h j the minimum of j occurs where its gradient w h w w j is equal to w to study the effect of weight decay we modify equation by adding the weight decay gradient. we can now solve for the minimum of the regularized version of j. we use the variable w to represent the location of the minimum. w h w w h i w hw w h i as approaches the regularized solution w approaches w but what happens as grows? because h is real and symmetric we can decompose it into a diagonal matrix and an orthonormal basis of eigenvectors q such that h q q we obtain q applying the decomposition to equation w q q q i i q q q q w w w q i we see that the effect of weight decay is to rescale w the eigenvectors of h. specifically the component of w i-th eigenvector of h is rescaled by a factor of how this kind of scaling works first explained in figure i i along the axes defined by that is aligned with the may wish to review along the directions where the eigenvalues of h are relatively large for example the effect of regularization is relatively small. however components will be shrunk to have nearly zero magnitude. this effect is illustrated where i with i in figure chapter regularization for deep learning w w w figure an illustration of the effect of weight decay regularization on the value of the optimal w. the solid ellipses represent contours of equal value of the unregularized objective. the dotted circles represent contours of equal value of the regularizer. at the point w these competing objectives reach an equilibrium. in the first dimension the eigenvalue of the hessian of j is small. the objective function does not increase much when moving horizontally away from w because the objective function does not express a strong preference along this direction the regularizer has a strong effect on this axis. the regularizer pulls w close to zero. in the second dimension the objective function is very sensitive to movements away from w the corresponding eigenvalue is large indicating high curvature. as a result weight decay affects the position of relatively little. only directions along which the parameters contribute significantly to reducing the objective function are preserved relatively intact. in directions that do not contribute to reducing the objective function a small eigenvalue of the hessian tells us that movement in this direction will not significantly increase the gradient. components of the weight vector corresponding to such unimportant directions are decayed away through the use of the regularization throughout training. so far we have discussed weight decay in terms of its effect on the optimization of an abstract general quadratic cost function. how do these effects relate to machine learning in particular? we can find out by studying linear regression a model for which the true cost function is quadratic and therefore amenable to the same kind of analysis we have used so far. applying the analysis again we will be able to obtain a special case of the same results but with the solution now phrased in terms of the training data. for linear regression the cost function is chapter regularization for deep learning the sum of squared errors xw y xw y when we add regularization the objective function changes to xw y xw y w. w this changes the normal equations for the solution from w x x y w x x i y. to x in equation is proportional to the covariance matrix x. the matrix x using regularization replaces this matrix with the new matrix is the same as the original one but with the addition of to the diagonal. the diagonal entries of this matrix correspond to the variance of each input feature. we can see that regularization causes the learning algorithm to perceive the input x as having higher variance which makes it shrink the weights on features whose covariance with the output target is low compared to this added variance. x in equation x i x m l regularization while l weight decay is the most common form of weight decay there are other ways to penalize the size of the model parameters. another option is to use l regularization. formally regularization on the model parameter w wi w is defined as i that is as the sum of absolute values of the individual we will now discuss the effect of regularization on the simple linear regression model with no bias parameter that we studied in our analysis of regularization. in particular we are interested in delineating the differences between and forms with regularization we could regularize the parameters towards a value that is not in that case the regularization would zero but instead towards some parameter value w introduce the term wi w w w i i chapter regularization for deep learning of regularization. as with weight decay weight decay controls the strength of the regularization by scaling the penalty thus the regularized objective function j x y is given by w using a positive hyperparameter j x y j w x y with the corresponding gradient sub-gradient w j x y sign y w wj where sign is simply the sign of w applied element-wise. by inspecting equation we can see immediately that the effect of l regularization is quite different from that of regularization. specifically we can see that the regularization contribution to the gradient no longer scales linearly with each wi instead it is a constant factor with a sign equal to signwi. one consequence of this form of the gradient is that we will not necessarily see clean w as we did for l algebraic solutions to quadratic approximations of j y regularization. our simple linear model has a quadratic cost function that we can represent via its taylor series. alternately we could imagine that this is a truncated taylor series approximating the cost function of a more sophisticated model. the gradient in this setting is given by w w h w w j where again h is the hessian matrix of with respect to j w evaluated at w because the penalty does not admit clean algebraic expressions in the case of a fully general hessian we will also make the further simplifying assumption that the hessian is diagonal h hnn where each hii this assumption holds if the data for the linear regression problem has been preprocessed to remove all correlation between the input features which may be accomplished using pca. our quadratic approximation of the regularized objective function decom poses into a sum over the parameters j x y j y i i w w i h iiwi the problem of minimizing this approximate cost function has an analytical solution each dimension with the following form i i max wi signw w i hii chapter regularization for deep learning consider the situation where w i for all there are two possible outcomes i hii the case where w here the optimal value of wi under the regularized objective is simply wi this occurs because the contribution of jw x y to the regularized objective j x y is overwhelmed in direction i by the regularization which pushes the value of wi to zero. i i hii the case where w in this case the regularization does not move the optimal value of wi to zero but instead it just shifts it in that direction by a distance equal to h ii a similar process happens when w negative by hii or i but with the penalty making wi less in comparison to l regularization regularization results in a solution that is more sparse. sparsity in this context refers to the fact that some parameters have an optimal value of zero. the sparsity of regularization is a qualitatively different behavior than arises with l regularization. equation gave the solution w for regularization. if we revisit that equation using the assumption of a diagonal and positive definite hessian h that we introduced for our analysis of regularization we find that wi hii i was nonzero then wi remains h ii nonzero. this demonstrates that regularization does not cause the parameters to become sparse while regularization may do so for large enough i if w w the sparsity property induced by regularization has been used extensively as a feature selection mechanism. feature selection simplifies a machine learning problem by choosing which subset of the available features should be used. in particular the well known lasso absolute shrinkage and selection operator model integrates an penalty with a linear model and a least squares cost function. the penalty causes a subset of the weights to become zero suggesting that the corresponding features may safely be discarded. tibshirani in section we saw that many regularization strategies can be interpreted as map bayesian inference and that in particular regularization is equivalent to map bayesian inference with a gaussian prior on the weights. for regularization the penalty used to regularize a cost function is equivalent to the log-prior term that is maximized by map bayesian inference n when the prior is an isotropic laplace distribution wi over w i r n log log p w log laplacew i i w log n chapter regularization for deep learning from the point of view of learning via maximization with respect to w we can ignore the terms because they do not depend on log log w norm penalties as constrained optimization consider the cost function regularized by a parameter norm penalty j x y x y j recall from section that we can minimize a function subject to constraints by constructing a generalized lagrange function consisting of the original objective function plus a set of penalties. each penalty is a product between a coefficient called a karush kuhn tucker multiplier and a function representing whether the constraint is satisfied. if we wanted to constrain to be less than some constant we could construct a generalized lagrange function k l x y j x y k the solution to the constrained problem is given by arg min max l as described in section solving this problem requires modifying both provides a worked example of linear regression with an l and section constraint. many different procedures are possible some may use gradient descent while others may use analytical solutions for where the gradient is zero but in all procedures must increase whenever k and decrease whenever k all positive encourage to shrink. the optimal value will encourage become less than to shrink but not so strongly to make k to gain some insight into the effect of the constraint we can fix and view the problem as just a function of l arg min j x y arg min this is exactly the same as the regularized training problem of minimizing j. we can thus think of a parameter norm penalty as imposing a constraint on the norm then the weights are constrained to lie in an l weights. if norm then the weights are constrained to lie in a region of ball. if is the is the chapter regularization for deep learning limited norm. usually we do not know the size of the constraint region that we impose by using weight decay with coefficient does not directly tell us the value of k. in principle one can solve for k but the relationship between k and depends on the form of j while we do not know the exact size of the constraint region we can control it roughly by increasing or decreasing in order to grow or shrink the constraint region. larger will result in a smaller constraint region. smaller will result in a larger constraint region. because the value of sometimes we may wish to use explicit constraints rather than penalties. as described in section we can modify algorithms such as stochastic gradient descent to take a step downhill on j and then project back to the nearest point that satisfies k. this can be useful if we have an idea of what value of k is appropriate and do not want to spend time searching for the value of that corresponds to this another reason to use explicit constraints and reprojection rather than enforcing constraints with penalties is that penalties can cause non-convex optimization procedures to get stuck in local minima corresponding to small when training neural networks this usually manifests as neural networks that train with several dead units. these are units that do not contribute much to the behavior of the function learned by the network because the weights going into or out of them are all very small. when training with a penalty on the norm of the weights these configurations can be locally optimal even if it is possible to significantly reduce j by making the weights larger. explicit constraints implemented by re-projection can work much better in these cases because they do not encourage the weights to approach the origin. explicit constraints implemented by re-projection only have an effect when the weights become large and attempt to leave the constraint region. finally explicit constraints with reprojection can be useful because they impose some stability on the optimization procedure. when using high learning rates it is possible to encounter a positive feedback loop in which large weights induce large gradients which then induce a large update to the weights. if these updates consistently increase the size of the weights then rapidly moves away from the origin until numerical overflow occurs. explicit constraints with reprojection prevent this feedback loop from continuing to increase the magnitude of the weights without bound. recommend using constraints combined with a high learning rate to allow rapid exploration of parameter space while maintaining some stability. hinton et al. in particular hinton and shraibman et al. recommend a strategy introduced by srebro constraining the norm of each column of the weight matrix chapter regularization for deep learning of a neural net layer rather than constraining the frobenius norm of the entire weight matrix. constraining the norm of each column separately prevents any one hidden unit from having very large weights. if we converted this constraint into a penalty in a lagrange function it would be similar to weight decay but with a separate kkt multiplier for the weights of each hidden unit. each of these kkt multipliers would be dynamically updated separately to make each hidden unit obey the constraint. in practice column norm limitation is always implemented as an explicit constraint with reprojection. regularization and under-constrained problems in some cases regularization is necessary for machine learning problems to be properly defined. many linear models in machine learning including linear regression and pca depend on inverting the matrix x x. this is not possible whenever x x is singular. this matrix can be singular whenever the data generating distribution truly has no variance in some direction or when no variance is observed in some direction because there are fewer examples of x than input features of x. in this case many forms of regularization correspond to inverting x i instead. this regularized matrix is guaranteed to be invertible. x these linear problems have closed form solutions when the relevant matrix is invertible. it is also possible for a problem with no closed form solution to be underdetermined. an example is logistic regression applied to a problem where the classes are linearly separable. if a weight vector w is able to achieve perfect classification then will also achieve perfect classification and higher likelihood. an iterative optimization procedure like stochastic gradient descent will continually increase the magnitude of w and in theory will never halt. in practice a numerical implementation of gradient descent will eventually reach sufficiently large weights to cause numerical overflow at which point its behavior will depend on how the programmer has decided to handle values that are not real numbers. most forms of regularization are able to guarantee the convergence of iterative methods applied to underdetermined problems. for example weight decay will cause gradient descent to quit increasing the magnitude of the weights when the slope of the likelihood is equal to the weight decay coefficient. the idea of using regularization to solve underdetermined problems extends beyond machine learning. the same idea is useful for several basic linear algebra problems. as we saw in section we can solve underdetermined linear equations using chapter regularization for deep learning the moore-penrose pseudoinverse. recall that one definition of the pseudoinverse x of a matrix isx i x lim x we can now recognize equation as performing linear regression with weight decay. specifically equation as the regularization coefficient shrinks to zero. we can thus interpret the pseudoinverse as stabilizing underdetermined problems using regularization. is the limit of equation dataset augmentation the best way to make a machine learning model generalize better is to train it on more data. of course in practice the amount of data we have is limited. one way to get around this problem is to create fake data and add it to the training set. for some machine learning tasks it is reasonably straightforward to create new fake data. this approach is easiest for classification. a classifier needs to take a complicated high dimensional input x and summarize it with a single category identity y. this means that the main task facing a classifier is to be invariant to a wide variety of transformations. we can generate new x y pairs easily just by transforming the inputs in our training set. x this approach is not as readily applicable to many other tasks. for example it is difficult to generate new fake data for a density estimation task unless we have already solved the density estimation problem. dataset augmentation has been a particularly effective technique for a specific classification problem object recognition. images are high dimensional and include an enormous variety of factors of variation many of which can be easily simulated. operations like translating the training images a few pixels in each direction can often greatly improve generalization even if the model has already been designed to be partially translation invariant by using the convolution and pooling techniques described in chapter many other operations such as rotating the image or scaling the image have also proven quite effective. one must be careful not to apply transformations that would change the correct class. for example optical character recognition tasks require recognizing the difference between b and d and the difference between and so horizontal flips and rotations are not appropriate ways of augmenting datasets for these tasks. chapter regularization for deep learning there are also transformations that we would like our classifiers to be invariant to but which are not easy to perform. for example out-of-plane rotation can not be implemented as a simple geometric operation on the input pixels. dataset augmentation is effective for speech recognition tasks as well and hinton injecting noise in the input to a neural network and dow can also be seen as a form of data augmentation. for many classification and even some regression tasks the task should still be possible to solve even if small random noise is added to the input. neural networks prove not to be very robust to noise however and eliasmith one way to improve the robustness of neural networks is simply to train them with random noise applied to their inputs. input noise injection is part of some unsupervised learning algorithms such as the denoising autoencoder noise injection also works when the noise is applied to the hidden units which can be seen as doing dataset augmentation at multiple levels of abstraction. poole recently showed that this approach can be highly effective provided that the magnitude of the noise is carefully tuned. dropout a powerful regularization strategy that will be described in section can be seen as a process of constructing new inputs by multiplying by noise. et al. et al. when comparing machine learning benchmark results it is important to take the effect of dataset augmentation into account. often hand-designed dataset augmentation schemes can dramatically reduce the generalization error of a machine learning technique. to compare the performance of one machine learning algorithm to another it is necessary to perform controlled experiments. when comparing machine learning algorithm a and machine learning algorithm b it is necessary to make sure that both algorithms were evaluated using the same hand-designed dataset augmentation schemes. suppose that algorithm a performs poorly with no dataset augmentation and algorithm b performs well when combined with numerous synthetic transformations of the input. in such a case it is likely the synthetic transformations caused the improved performance rather than the use of machine learning algorithm b. sometimes deciding whether an experiment has been properly controlled requires subjective judgment. for example machine learning algorithms that inject noise into the input are performing a form of dataset augmentation. usually operations that are generally applicable as adding gaussian noise to the input are considered part of the machine learning algorithm while operations that are specific to one application domain as randomly cropping an image are considered to be separate pre-processing steps. chapter regularization for deep learning noise robustness section has motivated the use of noise applied to the inputs as a dataset augmentation strategy. for some models the addition of noise with infinitesimal variance at the input of the model is equivalent to imposing a penalty on the norm of the weights in the general case it is important to remember that noise injection can be much more powerful than simply shrinking the parameters especially when the noise is added to the hidden units. noise applied to the hidden units is such an important topic that it merit its own separate discussion the dropout algorithm described in section is the main development of that approach. bishop b another way that noise has been used in the service of regularizing models is by adding it to the weights. this technique has been used primarily in the context of recurrent neural networks this can be interpreted as a stochastic implementation of bayesian inference over the weights. the bayesian treatment of learning would consider the model weights to be uncertain and representable via a probability distribution that reflects this uncertainty. adding noise to the weights is a practical stochastic way to reflect this uncertainty. jim et al. graves noise applied to the weights can also be interpreted as equivalent some assumptions to a more traditional form of regularization encouraging stability of the function to be learned. consider the regression setting where we wish to train a function yx that maps a set of features x to a scalar using the least-squares cost function between the model predictions y and the true values j ep xy y y the training set consists of m labeled examples x y n we now assume that with each input presentation we also include a random i of the network weights. let us imagine that we perturbation w have a standard l-layer mlp. we denote the perturbed model as y despite the injection of noise we are still interested in minimizing the squared error of the output of the network. the objective function thus becomes w jw ep ep w w w y y w x y x yy y w for small the minimization of j with added weight noise covariance i is equivalent to minimization of j with an additional regularization term chapter regularization for deep learning w y ep this form of regularization encourages the parameters to go to regions of parameter space where small perturbations of the weights have a relatively small influence on the output. in other words it pushes the model into regions where the model is relatively insensitive to small variations in the weights finding points that are not merely minima but minima surrounded by flat regions and schmidhuber in the simplified case of linear x b this regularization term collapses regression for instance yx w into ep which is not a function of parameters and therefore does not contribute to the gradient of jw with respect to the model parameters. x injecting noise at the output targets most datasets have some amount of mistakes in the y labels. it can be harmful to maximize log py x when y is a mistake. one way to prevent this is to explicitly model the noise on the labels. for example we can assume that for some small constant the training set label y is correct with probability and otherwise any of the other possible labels might be correct. this assumption is easy to incorporate into the cost function analytically rather than by explicitly drawing noise samples. for example label smoothing regularizes a model based on a softmax with k output values by replacing the hard classification targets respectively. the standard cross-entropy loss may with targets of then be used with these soft targets. maximum likelihood learning with a softmax classifier and hard targets may actually never converge the softmax can never predict a probability of exactly or exactly so it will continue to learn larger and larger weights making more extreme predictions forever. it is possible to prevent this scenario using other regularization strategies like weight decay. label smoothing has the advantage of preventing the pursuit of hard probabilities without discouraging correct classification. this strategy has been used since the and continues to be featured prominently in modern neural networks et al. k and and semi-supervised learning in the paradigm of semi-supervised learning both unlabeled examples from p and labeled examples from p y or predict y from x. are used to estimate p x in the context of deep learning semi-supervised learning usually refers to learning a representation h f the goal is to learn a representation so chapter regularization for deep learning that examples from the same class have similar representations. unsupervised learning can provide useful cues for how to group examples in representation space. examples that cluster tightly in the input space should be mapped to similar representations. a linear classifier in the new space may achieve better generalization in many cases and niyogi chapelle a long-standing variant of this approach is the application of principal components analysis as a pre-processing step before applying a classifier the projected data. et al. log p or log p x instead of having separate unsupervised and supervised components in the model one can construct models in which a generative model of either p or p y shares parameters with a discriminative model of py x one can then trade-off the supervised criterion with the unsupervised or the generative criterion then generative one as expresses a particular form of prior belief about the solution to the supervised p is learning problem connected to the structure of py x in a way that is captured by the shared parametrization. by controlling how much of the generative criterion is included in the total criterion one can find a better trade-off than with a purely generative or a purely discriminative training criterion lasserre et al. larochelle and bengio namely that the structure of lasserre et al. log p y salakhutdinov and hinton describe a method for learning the kernel function of a kernel machine used for regression in which the usage of unlabeled examples for modeling quite significantly. y x improves p p see chapelle et al. for more information about semi-supervised learning. multi-task learning caruana multi-task learning is a way to improve generalization by pooling the examples can be seen as soft constraints imposed on the parameters arising out of several tasks. in the same way that additional training examples put more pressure on the parameters of the model towards values that generalize well when part of a model is shared across tasks that part of the model is more constrained towards good values the sharing is justified often yielding better generalization. figure illustrates a very common form of multi-task learning in which different supervised tasks y given x share the same input x as well as some intermediate-level representation hshared capturing a common pool of chapter regularization for deep learning factors. the model can generally be divided into two kinds of parts and associated parameters task-specific parameters only benefit from the examples of their task to achieve good generalization. these are the upper layers of the neural network in figure generic parameters shared across all the tasks benefit from the pooled data of all the tasks. these are the lower layers of the neural network in figure y hshared hshared xx figure multi-task learning can be cast in several ways in deep learning frameworks and this figure illustrates the common situation where the tasks share a common input but involve different target random variables. the lower layers of a deep network it is supervised and feedforward or includes a generative component with downward arrows can be shared across such tasks while task-specific parameters respectively with the weights into and from and can be learned on top of those yielding a shared representation hshared. the underlying assumption is that there exists a common pool of factors that explain the variations in the input x while each task is associated with a subset of these factors. in this example it is additionally assumed that top-level hidden units and are specialized to each task predicting and y while some intermediate-level representation hshared is shared across all tasks. in the unsupervised learning context it makes sense for some of the top-level factors to be associated with none of the output tasks these are the factors that explain some of the input variations but are not relevant for predicting or improved generalization and generalization error bounds can be achieved because of the shared parameters for which statistical strength can be baxter chapter regularization for deep learning d o o h i l e k i l g o l e v i t a g e n s s o l training set loss validation set loss time figure learning curves showing how the negative log-likelihood loss changes over time as number of training iterations over the dataset or epochs. in this example we train a maxout network on mnist. observe that the training objective decreases consistently over time but the validation set average loss eventually begins to increase again forming an asymmetric u-shaped curve. greatly improved proportion with the increased number of examples for the shared parameters compared to the scenario of single-task models. of course this will happen only if some assumptions about the statistical relationship between the different tasks are valid meaning that there is something shared across some of the tasks. from the point of view of deep learning the underlying prior belief is the following among the factors that explain the variations observed in the data associated with the different tasks some are shared across two or more tasks. early stopping when training large models with sufficient representational capacity to overfit the task we often observe that training error decreases steadily over time but validation set error begins to rise again. see figure for an example of this behavior. this behavior occurs very reliably. this means we can obtain a model with better validation set error thus hopefully better test set error by returning to the parameter setting at the point in time with the lowest validation set error. every time the error on the validation set improves we store a copy of the model parameters. when the training algorithm terminates we return these parameters rather than the latest parameters. the chapter regularization for deep learning algorithm terminates when no parameters have improved over the best recorded validation error for some pre-specified number of iterations. this procedure is specified more formally in algorithm algorithm the early stopping meta-algorithm for determining the best amount of time to train. this meta-algorithm is a general strategy that works well with a variety of training algorithms and ways of quantifying error on the validation set. n o be the number of steps between evaluations. let let p be the patience the number of times to observe worsening validation set error before giving up. let o be the initial parameters. i j v i i while update i i validationseterror v if v v then j i i v v else j do by running the training algorithm for j p n n steps. j end if end while best parameters are best number of training steps is i this strategy is known as early stopping. it is probably the most commonly used form of regularization in deep learning. its popularity is due both to its effectiveness and its simplicity. one way to think of early stopping is as a very efficient hyperparameter selection algorithm. in this view the number of training steps is just another hyperparameter. that this hyperparameter has a u-shaped validation set we can see in figure chapter regularization for deep learning performance curve. most hyperparameters that control model capacity have such a u-shaped validation set performance curve as illustrated in figure in the case of early stopping we are controlling the effective capacity of the model by determining how many steps it can take to fit the training set. most hyperparameters must be chosen using an expensive guess and check process where we set a hyperparameter at the start of training then run training for several steps to see its effect. the training time hyperparameter is unique in that by definition a single run of training tries out many values of the hyperparameter. the only significant cost to choosing this hyperparameter automatically via early stopping is running the validation set evaluation periodically during training. ideally this is done in parallel to the training process on a separate machine separate cpu or separate gpu from the main training process. if such resources are not available then the cost of these periodic evaluations may be reduced by using a validation set that is small compared to the training set or by evaluating the validation set error less frequently and obtaining a lower resolution estimate of the optimal training time. an additional cost to early stopping is the need to maintain a copy of the best parameters. this cost is generally negligible because it is acceptable to store these parameters in a slower and larger form of memory example training in gpu memory but storing the optimal parameters in host memory or on a disk drive. since the best parameters are written to infrequently and never read during training these occasional slow writes have little effect on the total training time. early stopping is a very unobtrusive form of regularization in that it requires almost no change in the underlying training procedure the objective function or the set of allowable parameter values. this means that it is easy to use early stopping without damaging the learning dynamics. this is in contrast to weight decay where one must be careful not to use too much weight decay and trap the network in a bad local minimum corresponding to a solution with pathologically small weights. early stopping may be used either alone or in conjunction with other regularization strategies. even when using regularization strategies that modify the objective function to encourage better generalization it is rare for the best generalization to occur at a local minimum of the training objective. early stopping requires a validation set which means some training data is not fed to the model. to best exploit this extra data one can perform extra training after the initial training with early stopping has completed. in the second extra training step all of the training data is included. there are two basic strategies one can use for this second training procedure. one strategy is to initialize the model again and retrain on all chapter regularization for deep learning of the data. in this second training pass we train for the same number of steps as the early stopping procedure determined was optimal in the first pass. there are some subtleties associated with this procedure. for example there is not a good way of knowing whether to retrain for the same number of parameter updates or the same number of passes through the dataset. on the second round of training each pass through the dataset will require more parameter updates because the training set is bigger. algorithm a meta-algorithm for using early stopping to determine how long to train then retraining on all the data. train and y subtrain yvalid into train and y train and y subtrain x train be the training set. let x split x respectively. run early stopping starting from random y returns i set train on x the optimal number of steps. to random values again. train for i train and y steps. subtrain and subtrain for training data and xvalid and yvalid for validation data. this using x another strategy for using all of the data is to keep the parameters obtained from the first round of training and then continue training but now using all of the data. at this stage we now no longer have a guide for when to stop in terms of a number of steps. instead we can monitor the average loss function on the validation set and continue training until it falls below the value of the training set objective at which the early stopping procedure halted. this strategy avoids the high cost of retraining the model from scratch but is not as well-behaved. for example there is not any guarantee that the objective on the validation set will ever reach the target value so this strategy is not even guaranteed to terminate. this procedure is presented more formally in algorithm early stopping is also useful because it reduces the computational cost of the training procedure. besides the obvious reduction in cost due to limiting the number of training iterations it also has the benefit of providing regularization without requiring the addition of penalty terms to the cost function or the computation of the gradients of such additional terms. how early stopping acts as a regularizer so far we have stated that early stopping a regularization strategy but we have supported this claim only by showing learning curves where the validation set error has a u-shaped curve. what is chapter regularization for deep learning algorithm meta-algorithm using early stopping to determine at what objective value we start to overfit then continue training until that value is reached. train into train and y train and y subtrain x train be the training set. let x split x respectively. run early stopping starting from random subtrain and subtrain for training data and xvalid and yvalid for validation data. this y updates j while j xvalid y do train for subtrain yvalid train on x train and y using x subtrain y subtrain and y x steps. n end while and sj berg and ljung is the actual mechanism by which early stopping regularizes the model? bishop argued that early stopping has the effect of restricting the optimization procedure to a relatively small volume of parameter space in the neighborhood of the initial parameter value o as illustrated in optimization steps figure to training iterations and with learning rate we can view the product as a measure of effective capacity. assuming the gradient is bounded restricting both the number of iterations and the learning rate limits the volume of parameter space reachable from o. in this sense behaves as if it were the reciprocal of the coefficient used for weight decay. more specifically imagine taking indeed we can show how in the case of a simple linear model with a quadratic error function and simple gradient descent early stopping is equivalent to l regularization. in order to compare with classical regularization we examine a simple setting where the only parameters are linear weights w. we can model the cost function j with a quadratic approximation in the neighborhood of the empirically optimal value of the weights w w h w w j j where h is the hessian matrix of j with respect to w evaluated at w assumption that w under a local taylor series approximation the gradient is given by given the is a minimum of jw we know that h is positive semidefinite. j w w h w w chapter regularization for deep learning w w w w w w figure an illustration of the effect of early stopping. solid contour lines indicate the contours of the negative log-likelihood. the dashed line indicates the trajectory taken by sgd beginning from the origin. rather than stopping at the point w that minimizes the cost early stopping results in the trajectory stopping at an earlier point w. illustration of the effect of regularization for comparison. the dashed circles indicate the contours of the penalty which causes the minimum of the total cost to lie nearer the origin than the minimum of the unregularized cost. we are going to study the trajectory followed by the parameter vector during training. for simplicity let us set the initial parameter vector to the that is w let us study the approximate behavior of gradient descent on j by analyzing gradient descent on j w w w w h w i h w w jw w w w let us now rewrite this expression in the space of the eigenvectors of h exploiting the eigendecomposition of h h q q where is a diagonal matrix and q is an orthonormal basis of eigenvectors. w q q q w w w w q i neural networks to obtain symmetry breaking between hidden units we cannot initialize however the argument holds for any other all the parameters to as discussed in section initial value w chapter regularization for deep learning i assuming that w and that is chosen to be small enough to guarantee the parameter trajectory during training after parameter updates is as follows q w i i w now the expression for q ranged as w in equation for regularization can be rear q q w q i i w w i w and equation we see that if the hyperparameters i i comparing equation and are chosen such that then regularization and early stopping can be seen to be equivalent least under the quadratic approximation of the objective function. going even further by taking logarithms and using the series expansion for x we can conclude that if all i are small is i then and i that is under these assumptions the number of training iterations plays a role inversely proportional to the regularization parameter and the inverse of plays the role of the weight decay coefficient. parameter values corresponding to directions of significant curvature the objective function are regularized less than directions of less curvature. of course in the context of early stopping this really means that parameters that correspond to directions of significant curvature tend to learn early relative to parameters corresponding to directions of less curvature. the derivations in this section have shown that a trajectory of length ends at a point that corresponds to a minimum of the objective. early stopping is of course more than the mere restriction of the trajectory length instead early stopping typically involves monitoring the validation set error in order to stop the trajectory at a particularly good point in space. early stopping therefore has the advantage over weight decay that early stopping automatically determines the correct amount of regularization while weight decay requires many training experiments with different values of its hyperparameter. chapter regularization for deep learning parameter tying and parameter sharing thus far in this chapter when we have discussed adding constraints or penalties to the parameters we have always done so with respect to a fixed region or point. for example regularization weight decay penalizes model parameters for deviating from the fixed value of zero. however sometimes we may need other ways to express our prior knowledge about suitable values of the model parameters. sometimes we might not know precisely what values the parameters should take but we know from knowledge of the domain and model architecture that there should be some dependencies between the model parameters. a common type of dependency that we often want to express is that certain parameters should be close to one another. consider the following scenario we have two models performing the same classification task the same set of classes but with somewhat different input distributions. formally we have model a with parameters w and model b with parameters w the two models map the input to two different but related outputs y fw x and y w x. i w let us imagine that the tasks are similar enough with similar input and output distributions that we believe the model parameters should be close to each other we can leverage this information through regularization. specifically we can use a parameter norm penalty of the form w here we used an penalty but other choices are also possible. should be close to w i w i w this kind of approach was proposed by who regularized the parameters of one model trained as a classifier in a supervised paradigm to be close to the parameters of another model trained in an unsupervised paradigm capture the distribution of the observed input data. the architectures were constructed such that many of the parameters in the classifier model could be paired to corresponding parameters in the unsupervised model. lasserre et al. while a parameter norm penalty is one way to regularize parameters to be close to one another the more popular way is to use constraints to force sets of parameters to be equal. this method of regularization is often referred to as parameter sharing because we interpret the various models or model components as sharing a unique set of parameters. a significant advantage of parameter sharing over regularizing the parameters to be close a norm penalty is that only a subset of the parameters unique set need to be stored in memory. in certain models such as the convolutional neural network this can lead to significant reduction in the memory footprint of the model. chapter regularization for deep learning convolutional neural networks by far the most popular and extensive use of parameter sharing occurs in convolutional neural networks applied to computer vision. natural images have many statistical properties that are invariant to translation. for example a photo of a cat remains a photo of a cat if it is translated one pixel to the right. cnns take this property into account by sharing parameters across multiple image locations. the same feature hidden unit with the same weights is computed over different locations in the input. this means that we can find a cat with the same cat detector whether the cat appears at column i or column i in the image. parameter sharing has allowed cnns to dramatically lower the number of unique model parameters and to significantly increase network sizes without requiring a corresponding increase in training data. it remains one of the best examples of how to effectively incorporate domain knowledge into the network architecture. cnns will be discussed in more detail in chapter sparse representations weight decay acts by placing a penalty directly on the model parameters. another strategy is to place a penalty on the activations of the units in a neural network encouraging their activations to be sparse. this indirectly imposes a complicated penalty on the model parameters. we have already discussed section penalization induces a sparse parametrization meaning that many of the parameters become zero close to zero. representational sparsity on the other hand describes a representation where many of the elements of the representation are zero close to zero. a simplified view of this distinction can be illustrated in the context of linear regression how x r n m y r m n r a chapter regularization for deep learning r y m h r n b m n r in the first expression we have an example of a sparsely parametrized linear regression model. in the second we have linear regression with a sparse representation h of the data x. that is h is a function of x that in some sense represents the information present in but does so with a sparse vector. x representational regularization is accomplished by the same sorts of mechanisms that we have used in parameter regularization. norm penalty regularization of representations is performed by adding to the loss function j a norm penalty on the representation. this penalty is denoted as before we denote the regularized loss function by j j x y x y j i where larger values of weights the relative contribution of the norm penalty term with corresponding to more regularization. hi h just as an penalty on the parameters induces parameter sparsity an l penalty on the elements of the representation induces representational sparsity of course the penalty is only one choice of penalty that can result in a sparse representation. others include the penalty derived from a student-t prior on the representation olshausen and field bergstra and kl divergence penalties that are especially useful for representations with elements constrained to lie on the unit interval. lee both provide examples of strategies based on regularizing the average activation across several examples i h to m be near some target value such as a vector with for each entry. larochelle and bengio goodfellow et al. et al. and other approaches obtain representational sparsity with a hard constraint on the activation values. for example orthogonal matching pursuit et al. encodes an input x with the representation h that solves the constrained optimization problem h is the number of non-zero entries of h this problem can be solved where efficiently when w is constrained to be orthogonal. this method is often called x w h arg min h h chapter regularization for deep learning omp-k with the value of k specified to indicate the number of non-zero features allowed. demonstrated that omp- can be a very effective feature extractor for deep architectures. coates and ng essentially any model that has hidden units can be made sparse. throughout this book we will see many examples of sparsity regularization used in a variety of contexts. bagging and other ensemble methods bagging for bootstrap aggregating is a technique for reducing generalization error by combining several models the idea is to train several different models separately then have all of the models vote on the output for test examples. this is an example of a general strategy in machine learning called model averaging. techniques employing this strategy are known as ensemble methods. breiman the reason that model averaging works is that different models will usually not make all the same errors on the test set. consider for example a set of k regression models. suppose that each model makes an error i on each example with the errors drawn from a zero-mean multivariate normal distribution with variances e i v and covariances e i j c. then the error made by the average prediction of all the ensemble models is k i i. the expected squared error of the ensemble predictor is e k i i e k v k i k i i j j i c. in the case where the errors are perfectly correlated and c v the mean squared error reduces to v so the model averaging does not help at all. in the case where the errors are perfectly uncorrelated and c the expected squared error of the ensemble is only v. this means that the expected squared error of the ensemble k decreases linearly with the ensemble size. in other words on average the ensemble will perform at least as well as any of its members and if the members make independent errors the ensemble will perform significantly better than its members. different ensemble methods construct the ensemble of models in different ways. for example each member of the ensemble could be formed by training a completely chapter regularization for deep learning original dataset first resampled dataset first ensemble member second resampled dataset second ensemble member figure a cartoon depiction of how bagging works. suppose we train an detector on the dataset depicted above containing an a and a suppose we make two different resampled datasets. the bagging training procedure is to construct each of these datasets by sampling with replacement. the first dataset omits the and repeats the on this dataset the detector learns that a loop on top of the digit corresponds to an on the second dataset we repeat the and omit the in this case the detector learns that a loop on the bottom of the digit corresponds to an each of these individual classification rules is brittle but if we average their output then the detector is robust achieving maximal confidence only when both loops of the are present. different kind of model using a different algorithm or objective function. bagging is a method that allows the same kind of model training algorithm and objective function to be reused several times. specifically bagging involves constructing k different datasets. each dataset has the same number of examples as the original dataset but each dataset is constructed by sampling with replacement from the original dataset. this means that with high probability each dataset is missing some of the examples from the original dataset and also contains several duplicate examples average around of the examples from the original dataset are found in the resulting training set if it has the same size as the original. model i is then trained on dataset i. the differences between which examples are included in each dataset result in differences between the trained models. see figure for an example. neural networks reach a wide enough variety of solution points that they can often benefit from model averaging even if all of the models are trained on the same dataset. differences in random initialization random selection of minibatches differences in hyperparameters or different outcomes of non-deterministic implementations of neural networks are often enough to cause different members of the chapter regularization for deep learning ensemble to make partially independent errors. model averaging is an extremely powerful and reliable method for reducing generalization error. its use is usually discouraged when benchmarking algorithms for scientific papers because any machine learning algorithm can benefit substantially from model averaging at the price of increased computation and memory. for this reason benchmark comparisons are usually made using a single model. machine learning contests are usually won by methods using model averaging over dozens of models. a recent prominent example is the netflix grand prize not all techniques for constructing ensembles are designed to make the ensemble more regularized than the individual models. for example a technique called boosting and schapire a constructs an ensemble with higher capacity than the individual models. boosting has been applied to build ensembles of neural networks and bengio by incrementally adding neural networks to the ensemble. boosting has also been applied interpreting an individual neural network as an ensemble incrementally adding hidden units to the neural network. bengio et al. dropout et al. provides a computationally inexpensive but dropout powerful method of regularizing a broad family of models. to a first approximation dropout can be thought of as a method of making bagging practical for ensembles of very many large neural networks. bagging involves training multiple models and evaluating multiple models on each test example. this seems impractical when each model is a large neural network since training and evaluating such networks is costly in terms of runtime and memory. it is common to use ensembles of five to ten neural networks used six to win the ilsvrc but more than this rapidly becomes unwieldy. dropout provides an inexpensive approximation to training and evaluating a bagged ensemble of exponentially many neural networks. szegedy et al. specifically dropout trains the ensemble consisting of all sub-networks that can be formed by removing non-output units from an underlying base network as illustrated in figure in most modern neural networks based on a series of affine transformations and nonlinearities we can effectively remove a unit from a network by multiplying its output value by zero. this procedure requires some slight modification for models such as radial basis function networks which take chapter regularization for deep learning the difference between the unit s state and some reference value. here we present the dropout algorithm in terms of multiplication by zero for simplicity but it can be trivially modified to work with other operations that remove a unit from the network. recall that to learn with bagging we define k different models construct k different datasets by sampling from the training set with replacement and then train model i on dataset i. dropout aims to approximate this process but with an exponentially large number of neural networks. specifically to train with dropout we use a minibatch-based learning algorithm that makes small steps such as stochastic gradient descent. each time we load an example into a minibatch we randomly sample a different binary mask to apply to all of the input and hidden units in the network. the mask for each unit is sampled independently from all of the others. the probability of sampling a mask value of one a unit to be included is a hyperparameter fixed before training begins. it is not a function of the current value of the model parameters or the input example. typically an input unit is included with probability and a hidden unit is included with probability we then run forward propagation back-propagation and the learning update as usual. figure illustrates how to run forward propagation with dropout. more formally suppose that a mask vector specifies which units to include defines the cost of the model defined by parameters and mask and j then dropout training consists in minimizing e j the expectation contains exponentially many terms but we can obtain an unbiased estimate of its gradient by sampling values of dropout training is not quite the same as bagging training. in the case of bagging the models are all independent. in the case of dropout the models share parameters with each model inheriting a different subset of parameters from the parent neural network. this parameter sharing makes it possible to represent an exponential number of models with a tractable amount of memory. in the case of bagging each model is trained to convergence on its respective training set. in the case of dropout typically most models are not explicitly trained at all usually the model is large enough that it would be infeasible to sample all possible subnetworks within the lifetime of the universe. instead a tiny fraction of the possible sub-networks are each trained for a single step and the parameter sharing causes the remaining sub-networks to arrive at good settings of the parameters. these are the only differences. beyond these dropout follows the bagging algorithm. for example the training set encountered by each sub-network is indeed a subset of the original training set sampled with replacement. chapter regularization for deep learning yy h x h x base network h yy yy h x h x yy yy h h h x x x h x h yy yy yy yy x x h h h x h x yy yy yy yy h x h x h x yy yy yy yy h x x x ensemble of subnetworks figure dropout trains an ensemble consisting of all sub-networks that can be constructed by removing non-output units from an underlying base network. here we begin with a base network with two visible units and two hidden units. there are sixteen possible subsets of these four units. we show all sixteen subnetworks that may be formed by dropping out different subsets of units from the original network. in this small example a large proportion of the resulting networks have no input units or no path connecting the input to the output. this problem becomes insignificant for networks with wider layers where the probability of dropping all possible paths from inputs to outputs becomes smaller. chapter regularization for deep learning h x h x yy yy h h h h h h x x figure an example of forward propagation through a feedforward network using dropout. this example we use a feedforward network with two input units one hidden layer with two hidden units and one output unit. to perform forward propagation with dropout we randomly sample a vector with one entry for each input or hidden unit in the network. the entries of are binary and are sampled independently from each other. the probability of each entry being for the hidden layers and for the input. each unit in the network is multiplied by the corresponding mask and then forward propagation continues through the rest of the network as usual. this is equivalent to randomly selecting one of the sub-networks from figure and running forward propagation through it. is a hyperparameter usually chapter regularization for deep learning to make a prediction a bagged ensemble must accumulate votes from all of its members. we refer to this process as inference in this context. so far our description of bagging and dropout has not required that the model be explicitly probabilistic. now we assume that the model s role is to output a probability distribution. in the case of bagging each model i produces a probability distribution p x. the prediction of the ensemble is given by the arithmetic mean of all of these distributions x k p y k p p y in the case of dropout each sub-model defined by mask vector defines a probability distribution py x the arithmetic mean over all masks is given by x where p is the probability distribution that was used to sample at training time. because this sum includes an exponential number of terms it is intractable to evaluate except in cases where the structure of the model permits some form of simplification. so far deep neural nets are not known to permit any tractable simplification. instead we can approximate the inference with sampling by averaging together the output from many masks. even masks are often sufficient to obtain good performance. however there is an even better approach that allows us to obtain a good approximation to the predictions of the entire ensemble at the cost of only one forward propagation. to do so we change to using the geometric mean rather than the arithmetic mean of the ensemble members predicted distributions. wardefarley present arguments and empirical evidence that the geometric mean performs comparably to the arithmetic mean in this context. et al. the geometric mean of multiple probability distributions is not guaranteed to be a probability distribution. to guarantee that the result is a probability distribution we impose the requirement that none of the sub-models assigns probability to any event and we renormalize the resulting distribution. the unnormalized probability distribution defined directly by the geometric mean is given by pensemble y x p y x where d is the number of units that may be dropped. here we use a uniform distribution over to simplify the presentation but non-uniform distributions are chapter regularization for deep learning also possible. to make predictions we must re-normalize the ensemble x pensemble y pensemble y pensembley y x x a key insight hinton et al. involved in dropout is that we can approxi mate pensemble by evaluating py x in one model the model with all units but with the weights going out of unit i multiplied by the probability of including unit i. the motivation for this modification is to capture the right expected value of the output from that unit. we call this approach the weight scaling inference rule. there is not yet any theoretical argument for the accuracy of this approximate inference rule in deep nonlinear networks but empirically it performs very well. because we usually use an inclusion probability of the weight scaling rule usually amounts to dividing the weights by at the end of training and then using the model as usual. another way to achieve the same result is to multiply the states of the units by during training. either way the goal is to make sure that the expected total input to a unit at test time is roughly the same as the expected total input to that unit at train time even though half the units at train time are missing on average. for many classes of models that do not have nonlinear hidden units the weight scaling inference rule is exact. for a simple example consider a softmax regression classifier with input variables represented by the vector v n p y y v softmax w v b y we can index into the family of sub-models by element-wise multiplication of the input with a binary vector p y y v d softmax w d v b y the ensemble predictor is defined by re-normalizing the geometric mean over all ensemble members predictions pensemble y y v y pensemble y pensemble y y y v v where pensemble y y v v p y y d n chapter regularization for deep learning to see that the weight scaling rule is exact we can simplify pensemble pensemble y y p y y v softmax d d n n n d n exp d n v y w exp exp d exp y w d n d n d v b y by by v v y d d w y y d y v w d v w b y by n d y w exp v by d y pensemble y y v exp n exp yv by w v by because p will be normalized we can safely ignore multiplication by factors that are constant with respect to substituting this back into equation we obtain a softmax classifier with weights the weight scaling rule is also exact in other settings including regression networks with conditionally normal outputs and deep networks that have hidden layers without nonlinearities. however the weight scaling rule is only an approximation for deep models that have nonlinearities. though the approximation has not been theoretically characterized it often works well empirically. goodfellow et al. found experimentally that the weight scaling approximation can work better terms of classification accuracy than monte carlo approximations to the ensemble predictor. this held true even when the monte carlo approximation was allowed to sample up to sub-networks. found that some models obtain better classification accuracy using twenty samples and gal and ghahramani chapter regularization for deep learning the monte carlo approximation. it appears that the optimal choice of inference approximation is problem-dependent. et al. srivastava showed that dropout is more effective than other standard computationally inexpensive regularizers such as weight decay filter norm constraints and sparse activity regularization. dropout may also be combined with other forms of regularization to yield a further improvement. one advantage of dropout is that it is very computationally cheap. using dropout during training requires only on computation per example per update to generate n random binary numbers and multiply them by the state. depending on the implementation it may also require on memory to store these binary numbers until the back-propagation stage. running inference in the trained model has the same cost per-example as if dropout were not used though we must pay the cost of dividing the weights by once before beginning to run inference on examples. another significant advantage of dropout is that it does not significantly limit the type of model or training procedure that can be used. it works well with nearly any model that uses a distributed representation and can be trained with stochastic gradient descent. this includes feedforward neural networks probabilistic models such as restricted boltzmann machines and recurrent neural networks and osendorfer pascanu many other regularization strategies of comparable power impose more severe restrictions on the architecture of the model. et al. et al. though the cost per-step of applying dropout to a specific model is negligible the cost of using dropout in a complete system can be significant. because dropout is a regularization technique it reduces the effective capacity of a model. to offset this effect we must increase the size of the model. typically the optimal validation set error is much lower when using dropout but this comes at the cost of a much larger model and many more iterations of the training algorithm. for very large datasets regularization confers little reduction in generalization error. in these cases the computational cost of using dropout and larger models may outweigh the benefit of regularization. when extremely few labeled training examples are available dropout is less outperform dropout on the where fewer than examples when additional unlabeled data is available effective. bayesian neural networks alternative splicing dataset are available et al. unsupervised feature learning can gain an advantage over dropout. xiong et al. neal wager showed that when applied to linear regression dropout is equivalent to weight decay with a different weight decay coefficient for et al. chapter regularization for deep learning each input feature. the magnitude of each feature s weight decay coefficient is determined by its variance. similar results hold for other linear models. for deep models dropout is not equivalent to weight decay. the stochasticity used while training with dropout is not necessary for the approach s success. it is just a means of approximating the sum over all submodels. wang and manning derived analytical approximations to this marginalization. their approximation known as fast dropout resulted in faster convergence time due to the reduced stochasticity in the computation of the gradient. this method can also be applied at test time as a more principled also more computationally expensive approximation to the average over all sub-networks than the weight scaling approximation. fast dropout has been used to nearly match the performance of standard dropout on small neural network problems but has not yet yielded a significant improvement or been applied to a large problem. et al. just as stochasticity is not necessary to achieve the regularizing effect of dropout it is also not sufficient. to demonstrate this warde-farley designed control experiments using a method called dropout boosting that they designed to use exactly the same mask noise as traditional dropout but lack its regularizing effect. dropout boosting trains the entire ensemble to jointly maximize the log-likelihood on the training set. in the same sense that traditional dropout is analogous to bagging this approach is analogous to boosting. as intended experiments with dropout boosting show almost no regularization effect compared to training the entire network as a single model. this demonstrates that the interpretation of dropout as bagging has value beyond the interpretation of dropout as robustness to noise. the regularization effect of the bagged ensemble is only achieved when the stochastically sampled ensemble members are trained to perform well independently of each other. dropout has inspired other stochastic approaches to training exponentially large ensembles of models that share weights. dropconnect is a special case of dropout where each product between a single scalar weight and a single hidden unit state is considered a unit that can be dropped stochastic et al. pooling is a form of randomized pooling section for building ensembles of convolutional networks with each convolutional network attending to different spatial locations of each feature map. so far dropout remains the most widely used implicit ensemble method. one of the key insights of dropout is that training a network with stochastic behavior and making predictions by averaging over multiple stochastic decisions implements a form of bagging with parameter sharing. earlier we described chapter regularization for deep learning dropout as bagging an ensemble of models formed by including or excluding units. however there is no need for this model averaging strategy to be based on inclusion and exclusion. in principle any kind of random modification is admissible. in practice we must choose modification families that neural networks are able to learn to resist. ideally we should also use model families that allow a fast approximate inference rule. we can think of any form of modification parametrized by a vector as training an ensemble consisting of py x for all possible values of there is no requirement that have a finite number of values. for example can be real-valued. srivastava showed that multiplying the weights by i can outperform dropout based on binary masks. because e the standard network automatically implements approximate inference in the ensemble without needing any weight scaling. n et al. so far we have described dropout purely as a means of performing efficient approximate bagging. however there is another view of dropout that goes further than this. dropout trains not just a bagged ensemble of models but an ensemble of models that share hidden units. this means each hidden unit must be able to perform well regardless of which other hidden units are in the model. hidden units must be prepared to be swapped and interchanged between models. hinton et al. were inspired by an idea from biology sexual reproduction which involves swapping genes between two different organisms creates evolutionary pressure for genes to become not just good but to become readily swapped between different organisms. such genes and such features are very robust to changes in their environment because they are not able to incorrectly adapt to unusual features of any one organism or model. dropout thus regularizes each hidden unit to be not merely a good feature but a feature that is good in many contexts. wardefarley compared dropout training to training of large ensembles and concluded that dropout offers additional improvements to generalization error beyond those obtained by ensembles of independent models. et al. it is important to understand that a large portion of the power of dropout arises from the fact that the masking noise is applied to the hidden units. this can be seen as a form of highly intelligent adaptive destruction of the information content of the input rather than destruction of the raw values of the input. for example if the model learns a hidden unit hi that detects a face by finding the nose then dropping h i corresponds to erasing the information that there is a nose in the image. the model must learn another h i either that redundantly encodes the presence of a nose or that detects the face by another feature such as the mouth. traditional noise injection techniques that add unstructured noise at the input are not able to randomly erase the information about a nose from an image of a face unless the magnitude of the noise is so great that nearly all of the information in chapter regularization for deep learning the image is removed. destroying extracted features rather than original values allows the destruction process to make use of all of the knowledge about the input distribution that the model has acquired so far. another important aspect of dropout is that the noise is multiplicative. if the noise were additive with fixed scale then a rectified linear hidden unit hi with added noise could simply learn to have h i become very large in order to make the added noise insignificant by comparison. multiplicative noise does not allow such a pathological solution to the noise robustness problem. another deep learning algorithm batch normalization reparametrizes the model in a way that introduces both additive and multiplicative noise on the hidden units at training time. the primary purpose of batch normalization is to improve optimization but the noise can have a regularizing effect and sometimes makes dropout unnecessary. batch normalization is described further in section adversarial training in many cases neural networks have begun to reach human performance when evaluated on an i.i.d. test set. it is natural therefore to wonder whether these models have obtained a true human-level understanding of these tasks. in order to probe the level of understanding a network has of the underlying task we can search for examples that the model misclassifies. found that even neural networks that perform at human level accuracy have a nearly error rate on examples that are intentionally constructed by using an optimization procedure to search for an input x near a data point x such that the model output is very different at x can be so similar to x that a human observer cannot tell the difference between the original example and the adversarial example but the network can make highly different predictions. see figure in many cases x szegedy et al. for an example. adversarial examples have many implications for example in computer security that are beyond the scope of this chapter. however they are interesting in the context of regularization because one can reduce the error rate on the original i.i.d. test set via adversarial training training on adversarially perturbed examples from the training set szegedy et al. goodfellow et al. et al. goodfellow showed that one of the primary causes of these adversarial examples is excessive linearity. neural networks are built out of primarily linear building blocks. in some experiments the overall function they implement proves to be highly linear as a result. these linear functions are easy chapter regularization for deep learning sign xj x y x xj x y sign nematode w confidence gibbon w confidence x y panda w confidence figure a demonstration of adversarial example generation applied to googlenet szegedy et al. on imagenet. by adding an imperceptibly small vector whose elements are equal to the sign of the elements of the gradient of the cost function with respect to the input we can change googlenet s classification of the image. reproduced with permission from goodfellow et al. to optimize. unfortunately the value of a linear function can change very rapidly if it has numerous inputs. if we change each input by then a linear function w which can be a very large with weights w can change by as much as amount if w is high-dimensional. adversarial training discourages this highly sensitive locally linear behavior by encouraging the network to be locally constant in the neighborhood of the training data. this can be seen as a way of explicitly introducing a local constancy prior into supervised neural nets. adversarial training helps to illustrate the power of using a large function family in combination with aggressive regularization. purely linear models like logistic regression are not able to resist adversarial examples because they are forced to be linear. neural networks are able to represent functions that can range from nearly linear to nearly locally constant and thus have the flexibility to capture linear trends in the training data while still learning to resist local perturbation. adversarial examples also provide a means of accomplishing semi-supervised learning. at a point x that is not associated with a label in the dataset the model itself assigns some label y. the model s label y may not be the true label but if the model is high quality then y has a high probability of providing the true label. we can seek an adversarial example x that causes the classifier to output a label y y. adversarial examples generated using not the true label but a label provided by a trained model are called virtual adversarial examples the classifier may then be trained to assign the same label to x and x this encourages the classifier to learn a function that is with y et al. chapter regularization for deep learning robust to small changes anywhere along the manifold where the unlabeled data lies. the assumption motivating this approach is that different classes usually lie on disconnected manifolds and a small perturbation should not be able to jump from one class manifold to another class manifold. tangent distance tangent prop and manifold tangent classifier many machine learning algorithms aim to overcome the curse of dimensionality by assuming that the data lies near a low-dimensional manifold as described in section simard et al. one of the early attempts to take advantage of the manifold hypothesis is the tangent distance algorithm it is a non-parametric nearest-neighbor algorithm in which the metric used is not the generic euclidean distance but one that is derived from knowledge of the manifolds near which probability concentrates. it is assumed that we are trying to classify examples and that examples on the same manifold share the same category. since the classifier should be invariant to the local factors of variation that correspond to movement on the manifold it would make sense to use as nearest-neighbor distance between points and the distance between the manifolds and to which they respectively belong. although that may be computationally difficult would require solving an optimization problem to find the nearest pair of points on and a cheap alternative that makes sense locally is to approximate mi by its tangent plane at xi and measure the distance between the two tangents or between a tangent plane and a point. that can be achieved by solving a low-dimensional linear system the dimension of the manifolds. of course this algorithm requires one to specify the tangent vectors. simard et al. in a related spirit the tangent prop algorithm trains a neural net classifier with an extra penalty to make each output fx of the neural net locally invariant to known factors of variation. these factors of variation correspond to movement along the manifold near which examples of the same class concentrate. local invariance is achieved by requiring xf to be orthogonal to the known manifold tangent vectors v at x or equivalently that the directional derivative of f at x in the directions v be small by adding a regularization penalty i v xf chapter regularization for deep learning this regularizer can of course be scaled by an appropriate hyperparameter and for most neural networks we would need to sum over many outputs rather than the lone output fx described here for simplicity. as with the tangent distance algorithm the tangent vectors are derived a priori usually from the formal knowledge of the effect of transformations such as translation rotation and scaling in images. tangent prop has been used not just for supervised learning simard et al. but also in the context of reinforcement learning thrun tangent propagation is closely related to dataset augmentation. in both cases the user of the algorithm encodes his or her prior knowledge of the task by specifying a set of transformations that should not alter the output of the network. the difference is that in the case of dataset augmentation the network is explicitly trained to correctly classify distinct inputs that were created by applying more than an infinitesimal amount of these transformations. tangent propagation does not require explicitly visiting a new input point. instead it analytically regularizes the model to resist perturbation in the directions corresponding to the specified transformation. while this analytical approach is intellectually elegant it has two major drawbacks. first it only regularizes the model to resist infinitesimal perturbation. explicit dataset augmentation confers resistance to larger perturbations. second the infinitesimal approach poses difficulties for models based on rectified linear units. these models can only shrink their derivatives by turning units off or shrinking their weights. they are not able to shrink their derivatives by saturating at a high value with large weights as sigmoid or tanh units can. dataset augmentation works well with rectified linear units because different subsets of rectified units can activate for different transformed versions of each original input. szegedy et al. goodfellow et al. tangent propagation is also related to double backprop and lecun and adversarial training double backprop regularizes the jacobian to be small while adversarial training finds inputs near the original inputs and trains the model to produce the same output on these as on the original inputs. tangent propagation and dataset augmentation using manually specified transformations both require that the model should be invariant to certain specified directions of change in the input. double backprop and adversarial training both require that the model should be invariant to directions of change in the input so long as the change is small. just as dataset augmentation is the non-infinitesimal version of tangent propagation adversarial training is the non-infinitesimal version of double backprop. all the manifold tangent classifier rifai et al. know the tangent vectors a priori. as we will see in chapter eliminates the need to autoencoders can chapter regularization for deep learning x normal tangent et al. and manifold tangent classifier figure illustration of the main idea of the tangent prop algorithm simard et al. which both regularize the classifier output function fx. each curve represents the manifold for a different class illustrated here as a one-dimensional manifold embedded in a two-dimensional space. on one curve we have chosen a single point and drawn a vector that is tangent to the class manifold to and touching the manifold and a vector that is normal to the class manifold to the manifold. in multiple dimensions there may be many tangent directions and many normal directions. we expect the classification function to change rapidly as it moves in the direction normal to the manifold and not to change as it moves along the class manifold. both tangent propagation and the manifold tangent classifier regularize fx to not change very much as x moves along the manifold. tangent propagation requires the user to manually specify functions that compute the tangent directions as specifying that small translations of images remain in the same class manifold while the manifold tangent classifier estimates the manifold tangent directions by training an autoencoder to fit the training data. the use of autoencoders to estimate manifolds will be described in chapter rifai estimate the manifold tangent vectors. the manifold tangent classifier makes use of this technique to avoid needing user-specified tangent vectors. as illustrated in figure these estimated tangent vectors go beyond the classical invariants that arise out of the geometry of images as translation rotation and scaling and include factors that must be learned because they are object-specific as moving body parts. the algorithm proposed with the manifold tangent classifier is therefore simple use an autoencoder to learn the manifold structure by unsupervised learning and use these tangents to regularize a neural net classifier as in tangent prop this chapter has described most of the general strategies used to regularize neural networks. regularization is a central theme of machine learning and as such chapter regularization for deep learning will be revisited periodically by most of the remaining chapters. another central theme of machine learning is optimization described next. chapter optimization for training deep models deep learning algorithms involve optimization in many contexts. for example performing inference in models such as pca involves solving an optimization problem. we often use analytical optimization to write proofs or design algorithms. of all of the many optimization problems involved in deep learning the most difficult is neural network training. it is quite common to invest days to months of time on hundreds of machines in order to solve even a single instance of the neural network training problem. because this problem is so important and so expensive a specialized set of optimization techniques have been developed for solving it. this chapter presents these optimization techniques for neural network training. if you are unfamiliar with the basic principles of gradient-based optimization we suggest reviewing chapter that chapter includes a brief overview of numerical optimization in general. this chapter focuses on one particular case of optimization finding the parameters of a neural network that significantly reduce a cost function j which typically includes a performance measure evaluated on the entire training set as well as additional regularization terms. we begin with a description of how optimization used as a training algorithm for a machine learning task differs from pure optimization. next we present several of the concrete challenges that make optimization of neural networks difficult. we then define several practical algorithms including both optimization algorithms themselves and strategies for initializing the parameters. more advanced algorithms adapt their learning rates during training or leverage information contained in chapter optimization for training deep models the second derivatives of the cost function. finally we conclude with a review of several optimization strategies that are formed by combining simple optimization algorithms into higher-level procedures. how learning differs from pure optimization optimization algorithms used for training of deep models differ from traditional optimization algorithms in several ways. machine learning usually acts indirectly. in most machine learning scenarios we care about some performance measure p that is defined with respect to the test set and may also be intractable. we therefore optimize p only indirectly. we reduce a different cost function j in the hope that doing so will improve p this is in contrast to pure optimization where minimizing j is a goal in and of itself. optimization algorithms for training deep models also typically include some specialization on the specific structure of machine learning objective functions. typically the cost function can be written as an average over the training set such as j e xy pdata l f y where l is the per-example loss function f is the predicted output when the input is x pdata is the empirical distribution. in the supervised learning case y is the target output. throughout this chapter we develop the unregularized supervised case where the arguments to l are fx and y. however it is trivial to extend this development for example to include or x as arguments or to exclude y as arguments in order to develop various forms of regularization or unsupervised learning. equation defines an objective function with respect to the training set. we would usually prefer to minimize the corresponding objective function where the expectation is taken across the data generating distribution pdata rather than just over the finite training set j pdata e l f y empirical risk minimization the goal of a machine learning algorithm is to reduce the expected generalization error given by equation risk. we emphasize here that the expectation is taken over the true underlying distribution pdata. if we knew the true distribution pdatax y risk minimization would be an optimization task this quantity is known as the chapter optimization for training deep models solvable by an optimization algorithm. however when we do not know pdatax y but only have a training set of samples we have a machine learning problem. the simplest way to convert a machine learning problem back into an optimization problem is to minimize the expected loss on the training set. this means replacing the true distribution px y with the empirical distribution px y defined by the training set. we now minimize the empirical risk exy pdata l f x y m m l f y where m is the number of training examples. the training process based on minimizing this average training error is known as empirical risk minimization. in this setting machine learning is still very similar to straightforward optimization. rather than optimizing the risk directly we optimize the empirical risk and hope that the risk decreases significantly as well. a variety of theoretical results establish conditions under which the true risk can be expected to decrease by various amounts. however empirical risk minimization is prone to overfitting. models with high capacity can simply memorize the training set. in many cases empirical risk minimization is not really feasible. the most effective modern optimization algorithms are based on gradient descent but many useful loss functions such as loss have no useful derivatives derivative is either zero or undefined everywhere. these two problems mean that in the context of deep learning we rarely use empirical risk minimization. instead we must use a slightly different approach in which the quantity that we actually optimize is even more different from the quantity that we truly want to optimize. surrogate loss functions and early stopping sometimes the loss function we actually care about classification error is not one that can be optimized efficiently. for example exactly minimizing expected loss is typically intractable in the input dimension even for a linear classifier and savard in such situations one typically optimizes a surrogate loss function instead which acts as a proxy but has advantages. for example the negative log-likelihood of the correct class is typically used as a surrogate for the loss. the negative log-likelihood allows the model to estimate the conditional probability of the classes given the input and if the model can do that well then it can pick the classes that yield the least classification error in expectation. chapter optimization for training deep models in some cases a surrogate loss function actually results in being able to learn more. for example the test set loss often continues to decrease for a long time after the training set loss has reached zero when training using the log-likelihood surrogate. this is because even when the expected loss is zero one can improve the robustness of the classifier by further pushing the classes apart from each other obtaining a more confident and reliable classifier thus extracting more information from the training data than would have been possible by simply minimizing the average loss on the training set. a very important difference between optimization in general and optimization as we use it for training algorithms is that training algorithms do not usually halt at a local minimum. instead a machine learning algorithm usually minimizes a surrogate loss function but halts when a convergence criterion based on early stopping is satisfied. typically the early stopping criterion is based on the true underlying loss function such as loss measured on a validation set and is designed to cause the algorithm to halt whenever overfitting begins to occur. training often halts while the surrogate loss function still has large derivatives which is very different from the pure optimization setting where an optimization algorithm is considered to have converged when the gradient becomes very small. batch and minibatch algorithms one aspect of machine learning algorithms that separates them from general optimization algorithms is that the objective function usually decomposes as a sum over the training examples. optimization algorithms for machine learning typically compute each update to the parameters based on an expected value of the cost function estimated using only a subset of the terms of the full cost function. for example maximum likelihood estimation problems when viewed in log space decompose into a sum over each example ml arg max log pmodelx y m maximizing this sum is equivalent to maximizing the expectation over the empirical distribution defined by the training set j exy pdata log pmodel x y most of the properties of the objective function j used by most of our optimization algorithms are also expectations over the training set. for example the chapter optimization for training deep models most commonly used property is the gradient j exy pdata log pmodel x y computing this expectation exactly is very expensive because it requires evaluating the model on every example in the entire dataset. in practice we can compute these expectations by randomly sampling a small number of examples from the dataset then taking the average over only those examples. recall that the standard error of the mean n n where is the true standard deviation of the value of samples is given by n shows that there are less than linear returns the samples. the denominator of to using more examples to estimate the gradient. compare two hypothetical estimates of the gradient one based on examples and another based on examples. the latter requires times more computation than the former but reduces the standard error of the mean only by a factor of most optimization algorithms converge much faster terms of total computation not in terms of number of updates if they are allowed to rapidly compute approximate estimates of the gradient rather than slowly computing the exact gradient. estimated from another consideration motivating statistical estimation of the gradient from a small number of samples is redundancy in the training set. in the worst case all m samples in the training set could be identical copies of each other. a samplingbased estimate of the gradient could compute the correct gradient with a single sample using m times less computation than the naive approach. in practice we are unlikely to truly encounter this worst-case situation but we may find large numbers of examples that all make very similar contributions to the gradient. optimization algorithms that use the entire training set are called batch or deterministic gradient methods because they process all of the training examples simultaneously in a large batch. this terminology can be somewhat confusing because the word batch is also often used to describe the minibatch used by minibatch stochastic gradient descent. typically the term batch gradient descent implies the use of the full training set while the use of the term batch to describe a group of examples does not. for example it is very common to use the term batch size to describe the size of a minibatch. optimization algorithms that use only a single example at a time are sometimes called stochastic or sometimes online methods. the term online is usually reserved for the case where the examples are drawn from a stream of continually created examples rather than from a fixed-size training set over which several passes are made. most algorithms used for deep learning fall somewhere in between using more chapter optimization for training deep models than one but less than all of the training examples. these were traditionally called minibatch or minibatch stochastic methods and it is now common to simply call them stochastic methods. the canonical example of a stochastic method is stochastic gradient descent presented in detail in section minibatch sizes are generally driven by the following factors larger batches provide a more accurate estimate of the gradient but with less than linear returns. multicore architectures are usually underutilized by extremely small batches. this motivates using some absolute minimum batch size below which there is no reduction in the time to process a minibatch. if all examples in the batch are to be processed in parallel is typically the case then the amount of memory scales with the batch size. for many hardware setups this is the limiting factor in batch size. some kinds of hardware achieve better runtime with specific sizes of arrays. especially when using gpus it is common for power of batch sizes to offer better runtime. typical power of batch sizes range from to with sometimes being attempted for large models. wilson and martinez small batches can offer a regularizing effect perhaps due to the noise they add to the learning process. generalization error is often best for a batch size of training with such a small batch size might require a small learning rate to maintain stability due to the high variance in the estimate of the gradient. the total runtime can be very high due to the need to make more steps both because of the reduced learning rate and because it takes more steps to observe the entire training set. different kinds of algorithms use different kinds of information from the minibatch in different ways. some algorithms are more sensitive to sampling error than others either because they use information that is difficult to estimate accurately with few samples or because they use information in ways that amplify sampling errors more. methods that compute updates based only on the gradient g are usually relatively robust and can handle smaller batch sizes like second-order methods which use also the hessian matrix h and compute updates such as typically require much larger batch sizes like these large batch h suppose sizes are required to minimize fluctuations in the estimates of h that h is estimated perfectly but has a poor condition number. multiplication by chapter optimization for training deep models h or its inverse amplifies pre-existing errors in this case estimation errors in g. very small changes in the estimate of g can thus cause large changes in the update even if h were estimated perfectly. of course h will be estimated only h will contain even more error than we would approximately so the update h predict from applying a poorly conditioned operation to the estimate of it is also crucial that the minibatches be selected randomly. computing an unbiased estimate of the expected gradient from a set of samples requires that those samples be independent. we also wish for two subsequent gradient estimates to be independent from each other so two subsequent minibatches of examples should also be independent from each other. many datasets are most naturally arranged in a way where successive examples are highly correlated. for example we might have a dataset of medical data with a long list of blood sample test results. this list might be arranged so that first we have five blood samples taken at different times from the first patient then we have three blood samples taken from the second patient then the blood samples from the third patient and so on. if we were to draw examples in order from this list then each of our minibatches would be extremely biased because it would represent primarily one patient out of the many patients in the dataset. in cases such as these where the order of the dataset holds some significance it is necessary to shu e the examples before selecting minibatches. for very large datasets for example datasets containing billions of examples in a data center it can be impractical to sample examples truly uniformly at random every time we want to construct a minibatch. fortunately in practice it is usually sufficient to shu e the order of the dataset once and then store it in shu ed fashion. this will impose a fixed set of possible minibatches of consecutive examples that all models trained thereafter will use and each individual model will be forced to reuse this ordering every time it passes through the training data. however this deviation from true random selection does not seem to have a significant detrimental effect. failing to ever shu e the examples in any way can seriously reduce the effectiveness of the algorithm. many optimization problems in machine learning decompose over examples well enough that we can compute entire separate updates over different examples in parallel. in other words we can compute the update that minimizes j for one minibatch of examples x at the same time that we compute the update for several other minibatches. such asynchronous parallel distributed approaches are discussed further in section an interesting motivation for minibatch stochastic gradient descent is that it follows the gradient of the true generalization error so long as no examples are repeated. most implementations of minibatch stochastic gradient chapter optimization for training deep models descent shu e the dataset once and then pass through it multiple times. on the first pass each minibatch is used to compute an unbiased estimate of the true generalization error. on the second pass the estimate becomes biased because it is formed by re-sampling values that have already been used rather than obtaining new fair samples from the data generating distribution. the fact that stochastic gradient descent minimizes generalization error is easiest to see in the online learning case where examples or minibatches are drawn from a stream of data. in other words instead of receiving a fixed-size training set the learner is similar to a living being who sees a new example at each instant with every example y coming from the data generating distribution pdatax y. in this scenario examples are never repeated every experience is a fair sample from p data. the equivalence is easiest to derive when both x and y are discrete. in this case the generalization error can be written as a sum x y j pdata x y l f x y with the exact gradient g j y pdata x y l f y and equation we have already seen the same fact demonstrated for the log-likelihood in equal tion besides the likelihood. a similar result can be derived when x and y are continuous under mild assumptions regarding pdata and we observe now that this holds for other functions hence we can obtain an unbiased estimator of the exact gradient of the with corfrom the data generating distribution pdata and computing generalization error by sampling a minibatch of examples responding targets y the gradient of the loss with respect to the parameters for that minibatch x x m g i l f y updating in the direction of g performs sgd on the generalization error. of course this interpretation only applies when examples are not reused. nonetheless it is usually best to make several passes through the training set unless the training set is extremely large. when multiple such epochs are used only the first epoch follows the unbiased gradient of the generalization error but chapter optimization for training deep models of course the additional epochs usually provide enough benefit due to decreased training error to offset the harm they cause by increasing the gap between training error and test error. with some datasets growing rapidly in size faster than computing power it is becoming more common for machine learning applications to use each training example only once or even to make an incomplete pass through the training set. when using an extremely large training set overfitting is not an issue so underfitting and computational efficiency become the predominant concerns. see also for a discussion of the effect of computational bottlenecks on generalization error as the number of training examples grows. bottou and bousquet challenges in neural network optimization optimization in general is an extremely difficult task. traditionally machine learning has avoided the difficulty of general optimization by carefully designing the objective function and constraints to ensure that the optimization problem is convex. when training neural networks we must confront the general non-convex case. even convex optimization is not without its complications. in this section we summarize several of the most prominent challenges involved in optimization for training deep models. ill-conditioning some challenges arise even when optimizing convex functions. of these the most prominent is ill-conditioning of the hessian matrix h. this is a very general problem in most numerical optimization convex or otherwise and is described in more detail in section the ill-conditioning problem is generally believed to be present in neural network training problems. ill-conditioning can manifest by causing sgd to get stuck in the sense that even very small steps increase the cost function. recall from equation that a second-order taylor series expansion of the cost function predicts that a gradient descent step of will add g hg g g to the cost. ill-conditioning of the gradient becomes a problem when exceeds g network training task one can monitor the squared gradient norm g hg g. to determine whether ill-conditioning is detrimental to a neural g and chapter optimization for training deep models m r o n t n e i d a r g e t a r r o r r e n o i t a c fi i s s a l c training time training time figure gradient descent often does not arrive at a critical point of any kind. in this example the gradient norm increases throughout training of a convolutional network used for object detection. scatterplot showing how the norms of individual gradient evaluations are distributed over time. to improve legibility only one gradient norm is plotted per epoch. the running average of all gradient norms is plotted as a solid curve. the gradient norm clearly increases over time rather than decreasing as we would expect if the training process converged to a critical point. despite the increasing gradient the training process is reasonably successful. the validation set classification error decreases to a low level. hg term. in many cases the gradient norm does not shrink significantly the g throughout learning but the g hg term grows by more than an order of magnitude. the result is that learning becomes very slow despite the presence of a strong gradient because the learning rate must be shrunk to compensate for even stronger curvature. figure shows an example of the gradient increasing significantly during the successful training of a neural network. though ill-conditioning is present in other settings besides neural network training some of the techniques used to combat it in other contexts are less applicable to neural networks. for example newton s method is an excellent tool for minimizing convex functions with poorly conditioned hessian matrices but in the subsequent sections we will argue that newton s method requires significant modification before it can be applied to neural networks. local minima one of the most prominent features of a convex optimization problem is that it can be reduced to the problem of finding a local minimum. any local minimum is chapter optimization for training deep models guaranteed to be a global minimum. some convex functions have a flat region at the bottom rather than a single global minimum point but any point within such a flat region is an acceptable solution. when optimizing a convex function we know that we have reached a good solution if we find a critical point of any kind. with non-convex functions such as neural nets it is possible to have many local minima. indeed nearly any deep model is essentially guaranteed to have an extremely large number of local minima. however as we will see this is not necessarily a major problem. neural networks and any models with multiple equivalently parametrized latent variables all have multiple local minima because of the model identifiability problem. a model is said to be identifiable if a sufficiently large training set can rule out all but one setting of the model s parameters. models with latent variables are often not identifiable because we can obtain equivalent models by exchanging latent variables with each other. for example we could take a neural network and modify layer by swapping the incoming weight vector for unit i with the incoming weight vector for unit j then doing the same for the outgoing weight vectors. if we have m layers with n units each then there are n!m ways of arranging the hidden units. this kind of non-identifiability is known as weight space symmetry. in addition to weight space symmetry many kinds of neural networks have additional causes of non-identifiability. for example in any rectified linear or maxout network we can scale all of the incoming weights and biases of a unit by if we also scale all of its outgoing weights by this means that if the cost function does not include terms such as weight decay that depend directly on the weights rather than the models outputs every local minimum of a rectified linear or maxout network lies on an n hyperbola of equivalent local minima. these model identifiability issues mean that there can be an extremely large or even uncountably infinite amount of local minima in a neural network cost function. however all of these local minima arising from non-identifiability are equivalent to each other in cost function value. as a result these local minima are not a problematic form of non-convexity. local minima can be problematic if they have high cost in comparison to the global minimum. one can construct small neural networks even without hidden units that have local minima with higher cost than the global minimum and sussman brady if local minima with high cost are common this could pose a serious problem for gradient-based optimization algorithms. gori and tesi et al. it remains an open question whether there are many local minima of high cost chapter optimization for training deep models for networks of practical interest and whether optimization algorithms encounter them. for many years most practitioners believed that local minima were a common problem plaguing neural network optimization. today that does not appear to be the case. the problem remains an active area of research but experts now suspect that for sufficiently large neural networks most local minima have a low cost function value and that it is not important to find a true global minimum rather than to find a point in parameter space that has low but not minimal cost saxe et al. dauphin et al. goodfellow et al. choromanska et al. many practitioners attribute nearly all difficulty with neural network optimization to local minima. we encourage practitioners to carefully test for specific problems. a test that can rule out local minima as the problem is to plot the norm of the gradient over time. if the norm of the gradient does not shrink to insignificant size the problem is neither local minima nor any other kind of critical point. this kind of negative test can rule out local minima. in high dimensional spaces it can be very difficult to positively establish that local minima are the problem. many structures other than local minima also have small gradients. plateaus saddle points and other flat regions for many high-dimensional non-convex functions local minima maxima are in fact rare compared to another kind of point with zero gradient a saddle point. some points around a saddle point have greater cost than the saddle point while others have a lower cost. at a saddle point the hessian matrix has both positive and negative eigenvalues. points lying along eigenvectors associated with positive eigenvalues have greater cost than the saddle point while points lying along negative eigenvalues have lower value. we can think of a saddle point as being a local minimum along one cross-section of the cost function and a local maximum along another cross-section. see figure for an illustration. many classes of random functions exhibit the following behavior in low dimensional spaces local minima are common. in higher dimensional spaces local n minima are rare and saddle points are more common. for a function f r r of this type the expected ratio of the number of saddle points to local minima grows exponentially with n. to understand the intuition behind this behavior observe that the hessian matrix at a local minimum has only positive eigenvalues. the hessian matrix at a saddle point has a mixture of positive and negative eigenvalues. imagine that the sign of each eigenvalue is generated by flipping a coin. in a single dimension it is easy to obtain a local minimum by tossing a coin and getting heads once. in n-dimensional space it is exponentially unlikely that all n coin tosses will chapter optimization for training deep models be heads. see dauphin et al. for a review of the relevant theoretical work. an amazing property of many random functions is that the eigenvalues of the hessian become more likely to be positive as we reach regions of lower cost. in our coin tossing analogy this means we are more likely to have our coin come up heads n times if we are at a critical point with low cost. this means that local minima are much more likely to have low cost than high cost. critical points with high cost are far more likely to be saddle points. critical points with extremely high cost are more likely to be local maxima. baldi and hornik this happens for many classes of random functions. does it happen for neural showed theoretically that shallow autoencoders networks? networks trained to copy their input to their output described in chapter with no nonlinearities have global minima and saddle points but no local minima with higher cost than the global minimum. they observed without proof that these results extend to deeper networks without nonlinearities. the output of such networks is a linear function of their input but they are useful to study as a model of nonlinear neural networks because their loss function is a non-convex function of their parameters. such networks are essentially just multiple matrices composed together. provided exact solutions to the complete learning dynamics in such networks and showed that learning in these models captures many of the qualitative features observed in the training of deep models with nonlinear activation functions. showed experimentally that real neural networks also have loss functions that contain very many high-cost saddle points. choromanska provided additional theoretical arguments showing that another class of high-dimensional random functions related to neural networks does so as well. dauphin et al. saxe et al. et al. what are the implications of the proliferation of saddle points for training algorithms? for first-order optimization algorithms that use only gradient information the situation is unclear. the gradient can often become very small near a saddle point. on the other hand gradient descent empirically seems to be able to escape saddle points in many cases. provided visualizations of several learning trajectories of state-of-the-art neural networks with an example given in figure these visualizations show a flattening of the cost function near a prominent saddle point where the weights are all zero but they also show the gradient descent trajectory rapidly escaping this region. goodfellow et al. also argue that continuous-time gradient descent may be shown analytically to be repelled from rather than attracted to a nearby saddle point but the situation may be different for more realistic uses of gradient descent. goodfellow et al. for newton s method it is clear that saddle points constitute a problem. chapter optimization for training deep models j projection of f o n t i o c e j o p r et al. figure a visualization of the cost function of a neural network. image adapted with permission from goodfellow these visualizations appear similar for feedforward neural networks convolutional networks and recurrent networks applied to real object recognition and natural language processing tasks. surprisingly these visualizations usually do not show many conspicuous obstacles. prior to the success of stochastic gradient descent for training very large models beginning in roughly neural net cost function surfaces were generally believed to have much more non-convex structure than is revealed by these projections. the primary obstacle revealed by this projection is a saddle point of high cost near where the parameters are initialized but as indicated by the blue path the sgd training trajectory escapes this saddle point readily. most of training time is spent traversing the relatively flat valley of the cost function which may be due to high noise in the gradient poor conditioning of the hessian matrix in this region or simply the need to circumnavigate the tall mountain visible in the figure via an indirect arcing path. chapter optimization for training deep models gradient descent is designed to move downhill and is not explicitly designed to seek a critical point. newton s method however is designed to solve for a point where the gradient is zero. without appropriate modification it can jump to a saddle point. the proliferation of saddle points in high dimensional spaces presumably explains why second-order methods have not succeeded in replacing gradient descent for neural network training. introduced a saddle-free newton method for second-order optimization and showed that it improves significantly over the traditional version. second-order methods remain difficult to scale to large neural networks but this saddle-free approach holds promise if it could be scaled. dauphin et al. there are other kinds of points with zero gradient besides minima and saddle points. there are also maxima which are much like saddle points from the perspective of optimization many algorithms are not attracted to them but unmodified newton s method is. maxima of many classes of random functions become exponentially rare in high dimensional space just like minima do. there may also be wide flat regions of constant value. in these locations the gradient and also the hessian are all zero. such degenerate locations pose major problems for all numerical optimization algorithms. in a convex problem a wide flat region must consist entirely of global minima but in a general optimization problem such a region could correspond to a high value of the objective function. cliffs and exploding gradients neural networks with many layers often have extremely steep regions resembling cliffs as illustrated in figure these result from the multiplication of several large weights together. on the face of an extremely steep cliff structure the gradient update step can move the parameters extremely far usually jumping off of the cliff structure altogether. chapter optimization for training deep models figure the objective function for highly nonlinear deep neural networks or for recurrent neural networks often contains sharp nonlinearities in parameter space resulting from the multiplication of several parameters. these nonlinearities give rise to very high derivatives in some places. when the parameters get close to such a cliff region a gradient descent update can catapult the parameters very far possibly losing most of the optimization work that had been done. figure adapted with permission from pascanu et al. the cliff can be dangerous whether we approach it from above or from below but fortunately its most serious consequences can be avoided using the gradient clipping heuristic described in section the basic idea is to recall that the gradient does not specify the optimal step size but only the optimal direction within an infinitesimal region. when the traditional gradient descent algorithm proposes to make a very large step the gradient clipping heuristic intervenes to reduce the step size to be small enough that it is less likely to go outside the region where the gradient indicates the direction of approximately steepest descent. cliff structures are most common in the cost functions for recurrent neural networks because such models involve a multiplication of many factors with one factor for each time step. long temporal sequences thus incur an extreme amount of multiplication. long-term dependencies another difficulty that neural network optimization algorithms must overcome arises when the computational graph becomes extremely deep. feedforward networks with many layers have such deep computational graphs. so do recurrent networks described in chapter which construct very deep computational graphs chapter optimization for training deep models by repeatedly applying the same operation at each time step of a long temporal sequence. repeated application of the same parameters gives rise to especially pronounced difficulties. for example suppose that a computational graph contains a path that consists of repeatedly multiplying by a matrix w after t steps this is equivalent to mul tiplying by w t. suppose that w has an eigendecomposition w v diag in this simple case it is straightforward to see that w t v diag v t v diag tv any eigenvalues i that are not near an absolute value of will either explode if they are greater than in magnitude or vanish if they are less than in magnitude. the vanishing and exploding gradient problem refers to the fact that gradients through such a graph are also scaled according to diag vanishing gradients make it difficult to know which direction the parameters should move to improve the cost function while exploding gradients can make learning unstable. the cliff structures described earlier that motivate gradient clipping are an example of the exploding gradient phenomenon. the repeated multiplication by w at each time step described here is very similar to the power method algorithm used to find the largest eigenvalue of a matrix w and the corresponding eigenvector. from this point of view it is not surprising that x w t will eventually discard all components of x that are orthogonal to the principal eigenvector of recurrent networks use the same matrix w at each time step but feedforward networks do not so even very deep feedforward networks can largely avoid the vanishing and exploding gradient problem sussillo we defer a further discussion of the challenges of training recurrent networks until section after recurrent networks have been described in more detail. inexact gradients most optimization algorithms are designed with the assumption that we have access to the exact gradient or hessian matrix. in practice we usually only have a noisy or even biased estimate of these quantities. nearly every deep learning algorithm relies on sampling-based estimates at least insofar as using a minibatch of training examples to compute the gradient. in other cases the objective function we want to minimize is actually intractable. when the objective function is intractable typically its gradient is intractable as well. in such cases we can only approximate the gradient. these issues mostly arise chapter optimization for training deep models for example contrastive divergence with the more advanced models in part gives a technique for approximating the gradient of the intractable log-likelihood of a boltzmann machine. iii various neural network optimization algorithms are designed to account for imperfections in the gradient estimate. one can also avoid the problem by choosing a surrogate loss function that is easier to approximate than the true loss. poor correspondence between local and global structure many of the problems we have discussed so far correspond to properties of the loss function at a single point it can be difficult to make a single step if j is poorly conditioned at the current point or if lies on a cliff or if is a saddle point hiding the opportunity to make progress downhill from the gradient. it is possible to overcome all of these problems at a single point and still perform poorly if the direction that results in the most improvement locally does not point toward distant regions of much lower cost. et al. goodfellow argue that much of the runtime of training is due to the length of the trajectory needed to arrive at the solution. figure shows that the learning trajectory spends most of its time tracing out a wide arc around a mountain-shaped structure. log p y much of research into the difficulties of optimization has focused on whether training arrives at a global minimum a local minimum or a saddle point but in practice neural networks do not arrive at a critical point of any kind. figure shows that neural networks often do not arrive at a region of small gradient. indeed such critical points do not even necessarily exist. for example the loss function x can lack a global minimum point and instead asymptotically approach some value as the model becomes more confident. for a classifier with discrete y and py x provided by a softmax the negative log-likelihood can become arbitrarily close to zero if the model is able to correctly classify every example in the training set but it is impossible to actually reach the value of zero. likewise a model of real values py can have negative log-likelihood that asymptotes to negative infinity if f is able to correctly predict the value of all training set y targets the learning algorithm will increase without bound. see figure for an example of a failure of local optimization to find a good cost function value even in the absence of any local minima or saddle points. f x n future research will need to develop further understanding of the factors that influence the length of the learning trajectory and better characterize the outcome chapter optimization for training deep models j figure optimization based on local downhill moves can fail if the local surface does not point toward the global solution. here we provide an example of how this can occur even if there are no saddle points and no local minima. this example cost function contains only asymptotes toward low values not minima. the main cause of difficulty in this case is being initialized on the wrong side of the mountain and not being able to traverse it. in higher dimensional space learning algorithms can often circumnavigate such mountains but the trajectory associated with doing so may be long and result in excessive training time as illustrated in figure of the process. many existing research directions are aimed at finding good initial points for problems that have difficult global structure rather than developing algorithms that use non-local moves. gradient descent and essentially all learning algorithms that are effective for training neural networks are based on making small local moves. the previous sections have primarily focused on how the correct direction of these local moves can be difficult to compute. we may be able to compute some properties of the objective function such as its gradient only approximately with bias or variance in our estimate of the correct direction. in these cases local descent may or may not define a reasonably short path to a valid solution but we are not actually able to follow the local descent path. the objective function may have issues such as poor conditioning or discontinuous gradients causing the region where the gradient provides a good model of the objective function to be very small. in these cases local descent with steps of size may define a reasonably short path to the solution but we are only able to compute the local descent direction with steps of size in these cases local descent may or may not define a path to the solution but the path contains many steps so following the path incurs a chapter optimization for training deep models high computational cost. sometimes local information provides us no guide when the function has a wide flat region or if we manage to land exactly on a critical point this latter scenario only happens to methods that solve explicitly for critical points such as newton s method. in these cases local descent does not define a path to a solution at all. in other cases local moves can be too greedy and lead us along a path that moves downhill but away from any solution as in figure currently we do not understand which of these problems are most relevant to making neural network optimization difficult and this is an active area of research. or along an unnecessarily long trajectory to the solution as in figure regardless of which of these problems are most significant all of them might be avoided if there exists a region of space connected reasonably directly to a solution by a path that local descent can follow and if we are able to initialize learning within that well-behaved region. this last view suggests research into choosing good initial points for traditional optimization algorithms to use. theoretical limits of optimization several theoretical results show that there are limits on the performance of any optimization algorithm we might design for neural networks and rivest judd wolpert and macready typically these results have little bearing on the use of neural networks in practice. some theoretical results apply only to the case where the units of a neural network output discrete values. however most neural network units output smoothly increasing values that make optimization via local search feasible. some theoretical results show that there exist problem classes that are intractable but it can be difficult to tell whether a particular problem falls into that class. other results show that finding a solution for a network of a given size is intractable but in practice we can find a solution easily by using a larger network for which many more parameter settings correspond to an acceptable solution. moreover in the context of neural network training we usually do not care about finding the exact minimum of a function but seek only to reduce its value sufficiently to obtain good generalization error. theoretical analysis of whether an optimization algorithm can accomplish this goal is extremely difficult. developing more realistic bounds on the performance of optimization algorithms therefore remains an important goal for machine learning research. chapter optimization for training deep models basic algorithms we have previously introduced the gradient descent algorithm that follows the gradient of an entire training set downhill. this may be accelerated considerably by using stochastic gradient descent to follow the gradient of randomly selected minibatches downhill as discussed in section and section stochastic gradient descent stochastic gradient descent and its variants are probably the most used optimization algorithms for machine learning in general and for deep learning in particular. as discussed in section it is possible to obtain an unbiased estimate of the gradient by taking the average gradient on a minibatch of m examples drawn i.i.d from the data generating distribution. algorithm shows how to follow this estimate of the gradient downhill. algorithm stochastic gradient descent update at training iteration k require learning rate k. require initial parameter while stopping criterion not met do sample a minibatch of m examples from the training set corresponding targets y compute gradient estimate g apply update m g i l f y x with end while a crucial parameter for the sgd algorithm is the learning rate. previously we have described sgd as using a fixed learning rate in practice it is necessary to gradually decrease the learning rate over time so we now denote the learning rate at iteration ask k. this is because the sgd gradient estimator introduces a source of noise random sampling of m training examples that does not vanish even when we arrive at a minimum. by comparison the true gradient of the total cost function becomes small and then when we approach and reach a minimum using batch gradient descent so batch gradient descent can use a fixed learning rate. a sufficient condition to guarantee convergence of sgd is that k and chapter optimization for training deep models k in practice it is common to decay the learning rate linearly until iteration k with k after iteration it is common to leave constant. the value of the learning rate may be chosen by trial and error but it is usually best to choose it by monitoring learning curves that plot the objective function as a function of time. this is more of an art than a science and most guidance on this subject should be regarded with some skepticism. when using the linear schedule the parameters to choose are and usually may be set to the number of iterations required to make a few hundred passes through the training set. usually should be set to roughly the main question is how to set if it is too large the learning curve will show violent oscillations with the cost function often increasing significantly. gentle oscillations are fine especially if training with a stochastic cost function such as the cost function arising from the use of dropout. if the learning rate is too low learning proceeds slowly and if the initial learning rate is too low learning may become stuck with a high cost value. typically the optimal initial learning rate in terms of total training time and the final cost value is higher than the learning rate that yields the best performance after the first iterations or so. therefore it is usually best to monitor the first several iterations and use a learning rate that is higher than the best-performing learning rate at this time but not so high that it causes severe instability. the most important property of sgd and related minibatch or online gradientbased optimization is that computation time per update does not grow with the number of training examples. this allows convergence even when the number of training examples becomes very large. for a large enough dataset sgd may converge to within some fixed tolerance of its final test set error before it has processed the entire training set. to study the convergence rate of an optimization algorithm it is common to measure the excess error j min j which is the amount that the current cost function exceeds the minimum possible cost. when sgd is applied to a convex problem the excess error is o after k iterations while in the strongly convex case it is o these bounds cannot be improved unless extra conditions are k assumed. batch gradient descent enjoys better convergence rates than stochastic gradient descent in theory. however the cram r-rao bound cram r rao states that generalization error cannot decrease faster than bottou k k chapter optimization for training deep models argue that it therefore may not be worthwhile to pursue and bousquet an optimization algorithm that converges faster than o for machine learning k tasks faster convergence presumably corresponds to overfitting. moreover the asymptotic analysis obscures many advantages that stochastic gradient descent has after a small number of steps. with large datasets the ability of sgd to make rapid initial progress while evaluating the gradient for only very few examples outweighs its slow asymptotic convergence. most of the algorithms described in the remainder of this chapter achieve benefits that matter in practice but are lost in the constant factors obscured by the o k asymptotic analysis. one can also trade off the benefits of both batch and stochastic gradient descent by gradually increasing the minibatch size during the course of learning. for more information on sgd see momentum bottou while stochastic gradient descent remains a very popular optimization strategy learning with it can sometimes be slow. the method of momentum is designed to accelerate learning especially in the face of high curvature small but consistent gradients or noisy gradients. the momentum algorithm accumulates an exponentially decaying moving average of past gradients and continues to move in their direction. the effect of momentum is illustrated in figure formally the momentum algorithm introduces a variable v that plays the role of velocity it is the direction and speed at which the parameters move through parameter space. the velocity is set to an exponentially decaying average of the negative gradient. the name momentum derives from a physical analogy in which the negative gradient is a force moving a particle through parameter space according to newton s laws of motion. momentum in physics is mass times velocity. in the momentum learning algorithm we assume unit mass so the velocity vector v may also be regarded as the momentum of the particle. a hyperparameter determines how quickly the contributions of previous gradients exponentially decay. the update rule is given by v v v m m l x y m l x y the velocity v accumulates the gradient elements the larger is relative to the more previous gradients affect the current direction. the sgd algorithm with momentum is given in algorithm m chapter optimization for training deep models figure momentum aims primarily to solve two problems poor conditioning of the hessian matrix and variance in the stochastic gradient. here we illustrate how momentum overcomes the first of these two problems. the contour lines depict a quadratic loss function with a poorly conditioned hessian matrix. the red path cutting across the contours indicates the path followed by the momentum learning rule as it minimizes this function. at each step along the way we draw an arrow indicating the step that gradient descent would take at that point. we can see that a poorly conditioned quadratic objective looks like a long narrow valley or canyon with steep sides. momentum correctly traverses the canyon lengthwise while gradient steps waste time moving back and forth across the narrow axis of the canyon. compare also figure which shows the behavior of gradient descent without momentum. chapter optimization for training deep models previously the size of the step was simply the norm of the gradient multiplied by the learning rate. now the size of the step depends on how large and how aligned a sequence of gradients are. the step size is largest when many successive gradients point in exactly the same direction. if the momentum algorithm always observes gradient g then it will accelerate in the direction of g until reaching a terminal velocity where the size of each step is g it is thus helpful to think of the momentum hyperparameter in terms of example corresponds to multiplying the maximum speed by the gradient descent algorithm. for relative to common values of used in practice include and like the learning rate may also be adapted over time. typically it begins with a small value and is later raised. it is less important to adapt over time than to shrink over time. algorithm stochastic gradient descent with momentum require learning rate momentum parameter require initial parameter initial velocity v while stopping criterion not met do x with sample a minibatch of m examples from the training set corresponding targets y compute gradient estimate g compute velocity update v apply update m v g v i l f y end while we can view the momentum algorithm as simulating a particle subject to continuous-time newtonian dynamics. the physical analogy can help to build intuition for how the momentum and gradient descent algorithms behave. the position of the particle at any point in time is given by the particle experiences net force f this force causes the particle to accelerate f rather than viewing this as a second-order differential equation of the position we can introduce the variable vt representing the velocity of the particle at time t and rewrite the newtonian dynamics as a first-order differential equation v t chapter optimization for training deep models f t v the momentum algorithm then consists of solving the differential equations via numerical simulation. a simple numerical method for solving differential equations is euler s method which simply consists of simulating the dynamics defined by the equation by taking small finite steps in the direction of each gradient. this explains the basic form of the momentum update but what specifically are the forces? one force is proportional to the negative gradient of the cost function j this force pushes the particle downhill along the cost function surface. the gradient descent algorithm would simply take a single step based on each gradient but the newtonian scenario used by the momentum algorithm instead uses this force to alter the velocity of the particle. we can think of the particle as being like a hockey puck sliding down an icy surface. whenever it descends a steep part of the surface it gathers speed and continues sliding in that direction until it begins to go uphill again. one other force is necessary. if the only force is the gradient of the cost function then the particle might never come to rest. imagine a hockey puck sliding down one side of a valley and straight up the other side oscillating back and forth forever assuming the ice is perfectly frictionless. to resolve this problem we add one vt. in physics terminology this force corresponds other force proportional to to viscous drag as if the particle must push through a resistant medium such as syrup. this causes the particle to gradually lose energy over time and eventually converge to a local minimum. vt and viscous drag in particular? part of the reason to why do we use vt is mathematical convenience an integer power of the velocity is easy use to work with. however other physical systems have other kinds of drag based on other integer powers of the velocity. for example a particle traveling through the air experiences turbulent drag with force proportional to the square of the velocity while a particle moving along the ground experiences dry friction with a force of constant magnitude. we can reject each of these options. turbulent drag proportional to the square of the velocity becomes very weak when the velocity is small. it is not powerful enough to force the particle to come to rest. a particle with a non-zero initial velocity that experiences only the force of turbulent drag will move away from its initial position forever with the distance from the starting point growing like olog t. we must therefore use a lower power of the velocity. if we use a power of zero representing dry friction then the force is too strong. when the force due to the gradient of the cost function is small but non-zero the constant force due to friction can cause the particle to come to rest before reaching a local minimum. viscous drag avoids both of these problems it is weak enough chapter optimization for training deep models that the gradient can continue to cause motion until a minimum is reached but strong enough to prevent motion if the gradient does not justify moving. nesterov momentum et al. sutskever inspired by nesterov s accelerated gradient method update rules in this case are given by introduced a variant of the momentum algorithm that was the nesterov v v v m m l f x v y where the parameters and play a similar role as in the standard momentum method. the difference between nesterov momentum and standard momentum is where the gradient is evaluated. with nesterov momentum the gradient is evaluated after the current velocity is applied. thus one can interpret nesterov momentum as attempting to add a correction factor to the standard method of momentum. the complete nesterov momentum algorithm is presented in algorithm in the convex batch gradient case nesterov momentum brings the rate of convergence of the excess error from k steps to as shown by nesterov unfortunately in the stochastic gradient case nesterov momentum does not improve the rate of convergence. algorithm stochastic gradient descent with nesterov momentum require learning rate momentum parameter require initial parameter initial velocity v while stopping criterion not met do sample a minibatch of m examples from the training set corresponding labels y apply interim update compute gradient interim point g compute velocity update v g apply update v m v v x with i l f y end while chapter optimization for training deep models parameter initialization strategies some optimization algorithms are not iterative by nature and simply solve for a solution point. other optimization algorithms are iterative by nature but when applied to the right class of optimization problems converge to acceptable solutions in an acceptable amount of time regardless of initialization. deep learning training algorithms usually do not have either of these luxuries. training algorithms for deep learning models are usually iterative in nature and thus require the user to specify some initial point from which to begin the iterations. moreover training deep models is a sufficiently difficult task that most algorithms are strongly affected by the choice of initialization. the initial point can determine whether the algorithm converges at all with some initial points being so unstable that the algorithm encounters numerical difficulties and fails altogether. when learning does converge the initial point can determine how quickly learning converges and whether it converges to a point with high or low cost. also points of comparable cost can have wildly varying generalization error and the initial point can affect the generalization as well. modern initialization strategies are simple and heuristic. designing improved initialization strategies is a difficult task because neural network optimization is not yet well understood. most initialization strategies are based on achieving some nice properties when the network is initialized. however we do not have a good understanding of which of these properties are preserved under which circumstances after learning begins to proceed. a further difficulty is that some initial points may be beneficial from the viewpoint of optimization but detrimental from the viewpoint of generalization. our understanding of how the initial point affects generalization is especially primitive offering little to no guidance for how to select the initial point. perhaps the only property known with complete certainty is that the initial parameters need to break symmetry between different units. if two hidden units with the same activation function are connected to the same inputs then these units must have different initial parameters. if they have the same initial parameters then a deterministic learning algorithm applied to a deterministic cost and model will constantly update both of these units in the same way. even if the model or training algorithm is capable of using stochasticity to compute different updates for different units example if one trains with dropout it is usually best to initialize each unit to compute a different function from all of the other units. this may help to make sure that no input patterns are lost in the null space of forward propagation and no gradient patterns are lost in the null space of back-propagation. the goal of having each unit compute a different function chapter optimization for training deep models motivates random initialization of the parameters. we could explicitly search for a large set of basis functions that are all mutually different from each other but this often incurs a noticeable computational cost. for example if we have at most as many outputs as inputs we could use gram-schmidt orthogonalization on an initial weight matrix and be guaranteed that each unit computes a very different function from each other unit. random initialization from a high-entropy distribution over a high-dimensional space is computationally cheaper and unlikely to assign any units to compute the same function as each other. typically we set the biases for each unit to heuristically chosen constants and initialize only the weights randomly. extra parameters for example parameters encoding the conditional variance of a prediction are usually set to heuristically chosen constants much like the biases are. we almost always initialize all the weights in the model to values drawn randomly from a gaussian or uniform distribution. the choice of gaussian or uniform distribution does not seem to matter very much but has not been exhaustively studied. the scale of the initial distribution however does have a large effect on both the outcome of the optimization procedure and on the ability of the network to generalize. larger initial weights will yield a stronger symmetry breaking effect helping to avoid redundant units. they also help to avoid losing signal during forward or back-propagation through the linear component of each layer larger values in the matrix result in larger outputs of matrix multiplication. initial weights that are too large may however result in exploding values during forward propagation or back-propagation. in recurrent networks large weights can also result in chaos extreme sensitivity to small perturbations of the input that the behavior of the deterministic forward propagation procedure appears random. to some extent the exploding gradient problem can be mitigated by gradient clipping the values of the gradients before performing a gradient descent step. large weights may also result in extreme values that cause the activation function to saturate causing complete loss of gradient through saturated units. these competing factors determine the ideal initial scale of the weights. the perspectives of regularization and optimization can give very different insights into how we should initialize a network. the optimization perspective suggests that the weights should be large enough to propagate information successfully but some regularization concerns encourage making them smaller. the use of an optimization algorithm such as stochastic gradient descent that makes small incremental changes to the weights and tends to halt in areas that are nearer to the initial parameters due to getting stuck in a region of low gradient or chapter optimization for training deep models due to triggering some early stopping criterion based on overfitting expresses a prior that the final parameters should be close to the initial parameters. recall from section that gradient descent with early stopping is equivalent to weight decay for some models. in the general case gradient descent with early stopping is not the same as weight decay but does provide a loose analogy for thinking about the effect of initialization. we can think of initializing the parameters to as being similar to imposing a gaussian prior p with mean from this point of view it makes sense to choose to be near this prior says that it is more likely that units do not interact with each other than that they do interact. units interact only if the likelihood term of the objective function expresses a strong preference for them to interact. on the other hand if we initialize to large values then our prior specifies which units should interact with each other and how they should interact. some heuristics are available for choosing the initial scale of the weights. one heuristic is to initialize the weights of a fully connected layer with m inputs and n outputs by sampling each weight from u while glorot and bengio normalized initialization suggest using the m m u wij m n m n this latter heuristic is designed to compromise between the goal of initializing all layers to have the same activation variance and the goal of initializing all layers to have the same gradient variance. the formula is derived using the assumption that the network consists only of a chain of matrix multiplications with no nonlinearities. real neural networks obviously violate this assumption but many strategies designed for the linear model perform reasonably well on its nonlinear counterparts. saxe et al. recommend initializing to random orthogonal matrices with a carefully chosen scaling or gain factor g that accounts for the nonlinearity applied at each layer. they derive specific values of the scaling factor for different types of nonlinear activation functions. this initialization scheme is also motivated by a model of a deep network as a sequence of matrix multiplies without nonlinearities. under such a model this initialization scheme guarantees that the total number of training iterations required to reach convergence is independent of depth. increasing the scaling factor g pushes the network toward the regime where activations increase in norm as they propagate forward through the network and gradients increase in norm as they propagate backward. showed that setting the gain factor correctly is sufficient to train networks as deep as sussillo chapter optimization for training deep models layers without needing to use orthogonal initializations. a key insight of this approach is that in feedforward networks activations and gradients can grow or shrink on each step of forward or back-propagation following a random walk behavior. this is because feedforward networks use a different weight matrix at each layer. if this random walk is tuned to preserve norms then feedforward networks can mostly avoid the vanishing and exploding gradients problem that arises when the same weight matrix is used at each step described in section unfortunately these optimal criteria for initial weights often do not lead to optimal performance. this may be for three different reasons. first we may be using the wrong criteria it may not actually be beneficial to preserve the norm of a signal throughout the entire network. second the properties imposed at initialization may not persist after learning has begun to proceed. third the criteria might succeed at improving the speed of optimization but inadvertently increase generalization error. in practice we usually need to treat the scale of the weights as a hyperparameter whose optimal value lies somewhere roughly near but not exactly equal to the theoretical predictions. m martens one drawback to scaling rules that set all of the initial weights to have the is that every individual weight becomes same standard deviation such as introduced an extremely small when the layers become large. alternative initialization scheme called sparse initialization in which each unit is initialized to have exactly k non-zero weights. the idea is to keep the total amount of input to the unit independent from the number of inputs m without making the magnitude of individual weight elements shrink with m. sparse initialization helps to achieve more diversity among the units at initialization time. however it also imposes a very strong prior on the weights that are chosen to have large gaussian values. because it takes a long time for gradient descent to shrink incorrect large values this initialization scheme can cause problems for units such as maxout units that have several filters that must be carefully coordinated with each other. when computational resources allow it it is usually a good idea to treat the initial scale of the weights for each layer as a hyperparameter and to choose these scales using a hyperparameter search algorithm described in section such as random search. the choice of whether to use dense or sparse initialization can also be made a hyperparameter. alternately one can manually search for the best initial scales. a good rule of thumb for choosing the initial scales is to look at the range or standard deviation of activations or gradients on a single minibatch of data. if the weights are too small the range of activations across the minibatch will shrink as the activations propagate forward through the network. by repeatedly identifying the first layer with unacceptably small activations and chapter optimization for training deep models increasing its weights it is possible to eventually obtain a network with reasonable initial activations throughout. if learning is still too slow at this point it can be useful to look at the range or standard deviation of the gradients as well as the activations. this procedure can in principle be automated and is generally less computationally costly than hyperparameter optimization based on validation set error because it is based on feedback from the behavior of the initial model on a single batch of data rather than on feedback from a trained model on the validation set. while long used heuristically this protocol has recently been specified more formally and studied by mishkin and matas so far we have focused on the initialization of the weights. fortunately initialization of other parameters is typically easier. the approach for setting the biases must be coordinated with the approach for settings the weights. setting the biases to zero is compatible with most weight initialization schemes. there are a few situations where we may set some biases to non-zero values if a bias is for an output unit then it is often beneficial to initialize the bias to obtain the right marginal statistics of the output. to do this we assume that the initial weights are small enough that the output of the unit is determined only by the bias. this justifies setting the bias to the inverse of the activation function applied to the marginal statistics of the output in the training set. for example if the output is a distribution over classes and this distribution is a highly skewed distribution with the marginal probability of class i given by element ci of some vector c then we can set the bias vector b by solving the equation softmaxb c. this applies not only to classifiers but also to models we will encounter in part such as autoencoders and boltzmann machines. these models have layers whose output should resemble the input data x and it can be very helpful to initialize the biases of such layers to match the marginal distribution over iii sometimes we may want to choose the bias to avoid causing too much saturation at initialization. for example we may set the bias of a relu hidden unit to rather than to avoid saturating the relu at initialization. this approach is not compatible with weight initialization schemes that do not expect strong input from the biases though. for example it is not recommended for use with random walk initialization sussillo sometimes a unit controls whether other units are able to participate in a function. in such situations we have a unit with output u and another unit and they are multiplied together to produce an output uh. we h chapter optimization for training deep models u can view h as a gate that determines whether uh in these situations we want to set the bias for h so that h most of the time at initialization. otherwise u does not have a chance to learn. for example jozefowicz for the forget gate of the lstm model described in section advocate setting the bias to et al. or uh another common type of parameter is a variance or precision parameter. for example we can perform linear regression with a conditional variance estimate using the model n x p y y wt x b where is a precision parameter. we can usually initialize variance or precision parameters to safely. another approach is to assume the initial weights are close enough to zero that the biases may be set while ignoring the effect of the weights then set the biases to produce the correct marginal mean of the output and set the variance parameters to the marginal variance of the output in the training set. iii besides these simple constant or random methods of initializing model parameters it is possible to initialize model parameters using machine learning. a common strategy discussed in part of this book is to initialize a supervised model with the parameters learned by an unsupervised model trained on the same inputs. one can also perform supervised training on a related task. even performing supervised training on an unrelated task can sometimes yield an initialization that offers faster convergence than a random initialization. some of these initialization strategies may yield faster convergence and better generalization because they encode information about the distribution in the initial parameters of the model. others apparently perform well primarily because they set the parameters to have the right scale or set different units to compute different functions from each other. algorithms with adaptive learning rates neural network researchers have long realized that the learning rate was reliably one of the hyperparameters that is the most difficult to set because it has a significant impact on model performance. as we have discussed in sections the cost is often highly sensitive to some directions in parameter space and insensitive to others. the momentum algorithm can mitigate these issues somewhat but does so at the expense of introducing another hyperparameter. in the face of this it is natural to ask if there is another way. if we believe that the directions of sensitivity are somewhat axis-aligned it can make sense to use a separate learning and chapter optimization for training deep models rate for each parameter and automatically adapt these learning rates throughout the course of learning. the algorithm jacobs delta-bar-delta is an early heuristic approach to adapting individual learning rates for model parameters during training. the approach is based on a simple idea if the partial derivative of the loss with respect to a given model parameter remains the same sign then the learning rate should increase. if the partial derivative with respect to that parameter changes sign then the learning rate should decrease. of course this kind of rule can only be applied to full batch optimization. more recently a number of incremental mini-batch-based methods have been introduced that adapt the learning rates of model parameters. this section will briefly review a few of these algorithms. adagrad the adagrad algorithm shown in algorithm individually adapts the learning rates of all model parameters by scaling them inversely proportional to the square root of the sum of all of their historical squared values the parameters with the largest partial derivative of the loss have a correspondingly rapid decrease in their learning rate while parameters with small partial derivatives have a relatively small decrease in their learning rate. the net effect is greater progress in the more gently sloped directions of parameter space. duchi et al. in the context of convex optimization the adagrad algorithm enjoys some desirable theoretical properties. however empirically it has been found that for training deep neural network models the accumulation of squared gradients from the beginning of training can result in a premature and excessive decrease in the effective learning rate. adagrad performs well for some but not all deep learning models. rmsprop hinton the rmsprop algorithm modifies adagrad to perform better in the non-convex setting by changing the gradient accumulation into an exponentially weighted moving average. adagrad is designed to converge rapidly when applied to a convex function. when applied to a non-convex function to train a neural network the learning trajectory may pass through many different structures and eventually arrive at a region that is a locally convex bowl. adagrad shrinks the learning rate according to the entire history of the squared gradient and may chapter optimization for training deep models algorithm the adagrad algorithm require global learning rate require initial parameter require small constant perhaps initialize gradient accumulation variable r while stopping criterion not met do for numerical stability x with sample a minibatch of m examples from the training set corresponding targets y compute gradient g m accumulate squared gradient r compute update r element-wise apply update i l f y r g. g g and square root applied end while have made the learning rate too small before arriving at such a convex structure. rmsprop uses an exponentially decaying average to discard history from the extreme past so that it can converge rapidly after finding a convex bowl as if it were an instance of the adagrad algorithm initialized within that bowl. rmsprop is shown in its standard form in algorithm and combined with nesterov momentum in algorithm compared to adagrad the use of the moving average introduces a new hyperparameter that controls the length scale of the moving average. empirically rmsprop has been shown to be an effective and practical optimization algorithm for deep neural networks. it is currently one of the go-to optimization methods being employed routinely by deep learning practitioners. adam kingma and ba is yet another adaptive learning rate optimization adam the name adam derives from algorithm and is presented in algorithm the phrase adaptive moments. in the context of the earlier algorithms it is perhaps best seen as a variant on the combination of rmsprop and momentum with a few important distinctions. first in adam momentum is incorporated directly as an estimate of the first order moment exponential weighting of the gradient. the most straightforward way to add momentum to rmsprop is to apply momentum to the rescaled gradients. the use of momentum in combination with rescaling does not have a clear theoretical motivation. second adam includes chapter optimization for training deep models algorithm the rmsprop algorithm require global learning rate decay rate require initial parameter require small constant usually used to stabilize division by small numbers. initialize accumulation variables r while stopping criterion not met do sample a minibatch of m examples from the training set corresponding targets y compute gradient g m accumulate squared gradient r compute parameter update apply update i l f y g r g g x with applied element-wise end while bias corrections to the estimates of both the first-order moments momentum term and the second-order moments to account for their initialization at the origin algorithm rmsprop also incorporates an estimate of the second-order moment however it lacks the correction factor. thus unlike in adam the rmsprop second-order moment estimate may have high bias early in training. adam is generally regarded as being fairly robust to the choice of hyperparameters though the learning rate sometimes needs to be changed from the suggested default. choosing the right optimization algorithm in this section we discussed a series of related algorithms that each seek to address the challenge of optimizing deep models by adapting the learning rate for each model parameter. at this point a natural question is which algorithm should one choose? unfortunately there is currently no consensus on this point. schaul et al. presented a valuable comparison of a large number of optimization algorithms across a wide range of learning tasks. while the results suggest that the family of algorithms with adaptive learning rates by rmsprop and adadelta performed fairly robustly no single best algorithm has emerged. currently the most popular optimization algorithms actively in use include sgd sgd with momentum rmsprop rmsprop with momentum adadelta and adam. the choice of which algorithm to use at this point seems to depend chapter optimization for training deep models algorithm rmsprop algorithm with nesterov momentum require global learning rate decay rate momentum coefficient require initial parameter initial velocity v initialize accumulation variable r while stopping criterion not met do sample a minibatch of m examples from the training set corresponding targets y compute interim update compute gradient g accumulate gradient r r compute velocity update v v apply update v i l f y g g g. m v r r x with applied element-wise end while largely on the user s familiarity with the algorithm ease of hyperparameter tuning. approximate second-order methods in this section we discuss the application of second-order methods to the training of deep networks. see for an earlier treatment of this subject. for simplicity of exposition the only objective function we examine is the empirical risk lecun et al. j exy pdata l f x y m m l f y however the methods we discuss here extend readily to more general objective functions that for instance include parameter regularization terms such as those discussed in chapter newton s method we introduced second-order gradient methods. in contrast to firstin section order methods second-order methods make use of second derivatives to improve optimization. the most widely used second-order method is newton s method. we now describe newton s method in more detail with emphasis on its application to neural network training. chapter optimization for training deep models algorithm the adam algorithm require step size require exponential decay rates for moment estimates and in default defaults and respectively require small constant used for numerical stabilization. default require initial parameters initialize and moment variables initialize time step t while stopping criterion not met do s r t sample a minibatch of m examples from the training set corresponding targets y compute gradient g m t update biased first moment estimate s update biased second moment estimate r correct bias in first moment s correct bias in second moment r i l f y s t r t compute update apply update s r x with g applied element-wise end while newton s method is an optimization scheme based on using a second-order taylor series expansion to approximate j near some point ignoring derivatives of higher order h j j j where h is the hessian of j with respect to evaluated at if we then solve for the critical point of this function we obtain the newton parameter update rule h j thus for a locally quadratic function positive definite h by rescaling newton s method jumps directly to the minimum. if the the gradient by h objective function is convex but not quadratic are higher-order terms this update can be iterated yielding the training algorithm associated with newton s method given in algorithm chapter optimization for training deep models newton s method with objective j m l f y algorithm m require initial parameter require training set of while stopping criterion not met compute gradient g compute hessian h compute hessian inverse h g compute update h apply update m m m examples do i l f y i l f y end while for surfaces that are not quadratic as long as the hessian remains positive definite newton s method can be applied iteratively. this implies a two-step iterative procedure. first update or compute the inverse hessian by updating the quadratic approximation. second update the parameters according to equation in section we discussed how newton s method is appropriate only when the hessian is positive definite. in deep learning the surface of the objective function is typically non-convex with many features such as saddle points that are problematic for newton s method. if the eigenvalues of the hessian are not all positive for example near a saddle point then newton s method can actually cause updates to move in the wrong direction. this situation can be avoided by regularizing the hessian. common regularization strategies include adding a constant along the diagonal of the hessian. the regularized update becomes f i f this regularization strategy is used in approximations to newton s method such as the levenberg marquardt algorithm marquardt and works fairly well as long as the negative eigenvalues of the hessian are still relatively close to zero. in cases where there are more extreme directions of curvature the value of would have to be sufficiently large to offset the negative eigenvalues. however as increases in size the hessian becomes dominated by the i diagonal and the direction chosen by newton s method converges to the standard gradient divided by when strong negative curvature is present may need to be so large that newton s method would make smaller steps than gradient descent with a properly chosen learning rate. beyond the challenges created by certain features of the objective function chapter optimization for training deep models such as saddle points the application of newton s method for training large neural networks is limited by the significant computational burden it imposes. the number of elements in the hessian is squared in the number of parameters so with k parameters for even very small neural networks the number of parameters k can be in the millions newton s method would require the inversion of a k k matrix with computational complexity of also since the parameters will change with every update the inverse hessian has to be computed at every training iteration. as a consequence only networks with a very small number of parameters can be practically trained via newton s method. in the remainder of this section we will discuss alternatives that attempt to gain some of the advantages of newton s method while side-stepping the computational hurdles. conjugate gradients conjugate gradients is a method to efficiently avoid the calculation of the inverse hessian by iteratively descending conjugate directions. the inspiration for this approach follows from a careful study of the weakness of the method of steepest for details where line searches are applied iteratively in descent section the direction associated with the gradient. figure illustrates how the method of steepest descent when applied in a quadratic bowl progresses in a rather ineffective back-and-forth zig-zag pattern. this happens because each line search direction when given by the gradient is guaranteed to be orthogonal to the previous line search direction. let the previous search direction be dt at the minimum where the line j search terminates the directional derivative is zero in direction dt dt since the gradient at this point defines the current search direction thus dt is orthogonal j will have no contribution in the direction dt dt to dt this relationship between dt for and d t is illustrated in figure multiple iterations of steepest descent. as demonstrated in the figure the choice of orthogonal directions of descent do not preserve the minimum along the previous search directions. this gives rise to the zig-zag pattern of progress where by descending to the minimum in the current gradient direction we must re-minimize the objective in the previous gradient direction. thus by following the gradient at the end of each line search we are in a sense undoing progress we have already made in the direction of the previous line search. the method of conjugate gradients seeks to address this problem. in the method of conjugate gradients we seek to find a search direction that is conjugate to the previous line search direction i.e. it will not undo progress made in that direction. at training iteration t the next search direction dt takes chapter optimization for training deep models figure the method of steepest descent applied to a quadratic cost surface. the method of steepest descent involves jumping to the point of lowest cost along the line defined by the gradient at the initial point on each step. this resolves some of the problems seen with using a fixed learning rate in figure but even with the optimal step size the algorithm still makes back-and-forth progress toward the optimum. by definition at the minimum of the objective along a given direction the gradient at the final point is orthogonal to that direction. the form j dt tdt where t is a coefficient whose magnitude controls how much of the direction dt we should add back to the current search direction. two directions dt and dt are defined as conjugate if d t hdt where h is the hessian matrix. the straightforward way to impose conjugacy would involve calculation of the eigenvectors of h to choose t which would not satisfy our goal of developing a method that is more computationally viable than newton s method for large problems. can we calculate the conjugate directions without resorting to these calculations? fortunately the answer to that is yes. two popular methods for computing the t are fletcher-reeves j t j t j t j t t chapter optimization for training deep models polak-ribi re j t j t j t j t j t t for a quadratic surface the conjugate directions ensure that the gradient along the previous direction does not increase in magnitude. we therefore stay at the minimum along the previous directions. as a consequence in a k-dimensional parameter space the conjugate gradient method requires at most k line searches to achieve the minimum. the conjugate gradient algorithm is given in algorithm algorithm the conjugate gradient method require initial parameters require training set of examples m do t g gt m re i l f y stopping criterion not met initialize the gradient gt compute gradient gt compute t t gt t conjugate gradient optionally reset t to zero for example if t is a multiple of some constant such as k k gt t t compute search direction t perform line search to find m a truly quadratic cost function analytically solve for explicitly searching for it apply update t t m l f t t y argmin rather than initialize initialize initialize t while t end while nonlinear conjugate gradients so far we have discussed the method of conjugate gradients as it is applied to quadratic objective functions. of course our primary interest in this chapter is to explore optimization methods for training neural networks and other related deep learning models where the corresponding objective function is far from quadratic. perhaps surprisingly the method of conjugate gradients is still applicable in this setting though with some modification. without any assurance that the objective is quadratic the conjugate directions chapter optimization for training deep models are no longer assured to remain at the minimum of the objective for previous directions. as a result the nonlinear conjugate gradients algorithm includes occasional resets where the method of conjugate gradients is restarted with line search along the unaltered gradient. practitioners report reasonable results in applications of the nonlinear conjugate gradients algorithm to training neural networks though it is often beneficial to initialize the optimization with a few iterations of stochastic gradient descent before commencing nonlinear conjugate gradients. also while the conjugate gradients algorithm has traditionally been cast as a batch method minibatch versions have been used successfully for the training of neural networks le et al. adaptations of conjugate gradients specifically for neural networks have been proposed earlier such as the scaled conjugate gradients algorithm moller bfgs the broyden fletcher goldfarb shanno algorithm attempts to bring some of the advantages of newton s method without the computational burden. in that respect bfgs is similar to the conjugate gradient method. however bfgs takes a more direct approach to the approximation of newton s update. recall that newton s update is given by h j where h is the hessian of j with respect to evaluated at the primary computational difficulty in applying newton s update is the calculation of the the approach adopted by quasi-newton methods which inverse hessian h the bfgs algorithm is the most prominent is to approximate the inverse with a matrix mt that is iteratively refined by low rank updates to become a better approximation of h the specification and derivation of the bfgs approximation is given in many textbooks on optimization including luenberger once the inverse hessian approximation mt is updated the direction of descent t is determined by t mtgt. a line search is performed in this direction to determine the size of the step taken in this direction. the final update to the parameters is given by t t like the method of conjugate gradients the bfgs algorithm iterates a series of line searches with the direction incorporating second-order information. however chapter optimization for training deep models unlike conjugate gradients the success of the approach is not heavily dependent on the line search finding a point very close to the true minimum along the line. thus relative to conjugate gradients bfgs has the advantage that it can spend less time refining each line search. on the other hand the bfgs algorithm must store the inverse hessian matrix m that requires memory making bfgs impractical for most modern deep learning models that typically have millions of parameters. limited memory bfgs l-bfgs the memory costs of the bfgs algorithm can be significantly decreased by avoiding storing the complete inverse hessian approximation m the l-bfgs algorithm computes the approximation m using the same method as the bfgs algorithm but beginning with the assumption t that m is the identity matrix rather than storing the approximation from one step to the next. if used with exact line searches the directions defined by l-bfgs are mutually conjugate. however unlike the method of conjugate gradients this procedure remains well behaved when the minimum of the line search is reached only approximately. the l-bfgs strategy with no storage described here can be generalized to include more information about the hessian by storing some of the vectors used to update at each time step which costs only per step. m o n optimization strategies and meta-algorithms many optimization techniques are not exactly algorithms but rather general templates that can be specialized to yield algorithms or subroutines that can be incorporated into many different algorithms. batch normalization ioffe and szegedy batch normalization is one of the most exciting recent innovations in optimizing deep neural networks and it is actually not an optimization algorithm at all. instead it is a method of adaptive reparametrization motivated by the difficulty of training very deep models. very deep models involve the composition of several functions or layers. the gradient tells how to update each parameter under the assumption that the other layers do not change. in practice we update all of the layers simultaneously. when we make the update unexpected results can happen because many functions composed together are changed simultaneously using updates that were computed under the assumption that the other functions remain constant. as a simple chapter optimization for training deep models example suppose we have a deep neural network that has only one unit per layer and does not use an activation function at each hidden layer y wl. here wi provides the weight used by layer i. the output of layer i is h i hi the output y is a linear function of the input x but a nonlinear function of the y so we wish to weights wi. suppose our cost function has put a gradient of decrease y slightly. the back-propagation algorithm can then compute a gradient g w y. consider what happens when we make an update w w the g first-order taylor series approximation of y predicts that the value of y will decrease g. if we wanted to decrease y by this first-order information available in by g the gradient suggests we could set the learning rate to however the actual g update will include second-order and third-order effects on up to effects of order l. the new value of y is given by g x w g wl gl. through l an example of one second-order term arising from this update is wi. l i is small or might be exponentially large this term might be negligible if l are greater than this makes it very hard if the weights on layers to choose an appropriate learning rate because the effects of an update to the parameters for one layer depends so strongly on all of the other layers. second-order optimization algorithms address this issue by computing an update that takes these second-order interactions into account but we can see that in very deep networks even higher-order interactions can be significant. even second-order optimization algorithms are expensive and usually require numerous approximations that prevent them from truly accounting for all significant second-order interactions. building an n-th order optimization algorithm for n thus seems hopeless. what can we do instead? batch normalization provides an elegant way of reparametrizing almost any deep network. the reparametrization significantly reduces the problem of coordinating updates across many layers. batch normalization can be applied to any input or hidden layer in a network. let h be a minibatch of activations of the layer to normalize arranged as a design matrix with the activations for each example appearing in a row of the matrix. to normalize we replace it with h h h where is a vector containing the mean of each unit and is a vector containing the standard deviation of each unit. the arithmetic here is based on broadcasting the vector and the vector to be applied to every row of the matrix h within each row the arithmetic is element-wise so hij is normalized by subtracting j at training time and i m m chapter optimization for training deep models and dividing by j the rest of the network then operates on h same way that the original network operated on in exactly the hi h i i imposed to avoid encountering where is a small positive value such as z at z crucially we back-propagate through the undefined gradient of these operations for computing the mean and the standard deviation and for applying them to normalize h. this means that the gradient will never propose an operation that acts simply to increase the standard deviation or mean of hi the normalization operations remove the effect of such an action and zero out its component in the gradient. this was a major innovation of the batch normalization approach. previous approaches had involved adding penalties to the cost function to encourage units to have normalized activation statistics or involved intervening to renormalize unit statistics after each gradient descent step. the former approach usually resulted in imperfect normalization and the latter usually resulted in significant wasted time as the learning algorithm repeatedly proposed changing the mean and variance and the normalization step repeatedly undid this change. batch normalization reparametrizes the model to make some units always be standardized by definition deftly sidestepping both problems. at test time and may be replaced by running averages that were collected during training time. this allows the model to be evaluated on a single example without needing to use definitions of and that depend on an entire minibatch. revisiting the y wl example we see that we can mostly resolve the difficulties in learning this model by normalizing hl suppose that x is drawn from a unit gaussian. then hl will also come from a gaussian because the transformation from x to hl is linear. however h l will no longer have zero mean and unit variance. after applying batch normalization we obtain the normalized hl that restores the zero mean and unit variance properties. for almost any update to the lower layers hl will remain a unit gaussian. the output y may h l then be learned as a simple linear function y wl learning in this model is now very simple because the parameters at the lower layers simply do not have an effect in most cases their output is always renormalized to a unit gaussian. in some corner cases the lower layers can have an effect. changing one of the lower can make the output become degenerate and changing the sign layer weights to chapter optimization for training deep models of one of the lower weights can flip the relationship between hl and y. these situations are very rare. without normalization nearly every update would have an extreme effect on the statistics of hl batch normalization has thus made this model significantly easier to learn. in this example the ease of learning of course came at the cost of making the lower layers useless. in our linear example the lower layers no longer have any harmful effect but they also no longer have any beneficial effect. this is because we have normalized out the first and second order statistics which is all that a linear network can influence. in a deep neural network with nonlinear activation functions the lower layers can perform nonlinear transformations of the data so they remain useful. batch normalization acts to standardize only the mean and variance of each unit in order to stabilize learning but allows the relationships between units and the nonlinear statistics of a single unit to change. because the final layer of the network is able to learn a linear transformation we may actually wish to remove all linear relationships between units within a layer. indeed this is the approach taken by who provided the inspiration for batch normalization. unfortunately eliminating all linear interactions is much more expensive than standardizing the mean and standard deviation of each individual unit and so far batch normalization remains the most practical approach. desjardins et al. rather than simply the normalized h normalizing the mean and standard deviation of a unit can reduce the expressive power of the neural network containing that unit. in order to maintain the expressive power of the network it is common to replace the batch of hidden unit activations h with h the variables and are learned parameters that allow the new variable to have any mean and standard deviation. at first glance this may seem useless why did we set the mean to and then introduce a parameter that allows it to be set back to any arbitrary value the answer is that the new parametrization can represent the same family of functions of the input as the old parametrization but the new parametrization has different learning dynamics. in the old parametrization the mean of h was determined by a complicated interaction between the parameters in the layers below h. in the new parametrization the mean of h is determined solely by the new parametrization is much easier to learn with gradient descent. most neural network layers take the form of b where is some fixed nonlinear activation function such as the rectified linear transformation. it is natural to wonder whether we should apply batch normalization to the input x or to the transformed value xw b. recommend ioffe and szegedy chapter optimization for training deep models the latter. more specifically xw b should be replaced by a normalized version of xw the bias term should be omitted because it becomes redundant with the parameter applied by the batch normalization reparametrization. the input to a layer is usually the output of a nonlinear activation function such as the rectified linear function in a previous layer. the statistics of the input are thus more non-gaussian and less amenable to standardization by linear operations. in convolutional networks described in chapter it is important to apply the same normalizing and at every spatial location within a feature map so that the statistics of the feature map remain the same regardless of spatial location. coordinate descent in some cases it may be possible to solve an optimization problem quickly by breaking it into separate pieces. if we minimize fx with respect to a single variable xi then minimize it with respect to another variable xj and so on repeatedly cycling through all variables we are guaranteed to arrive at a minimum. this practice is known as coordinate descent because we optimize one coordinate at a time. more generally block coordinate descent refers to minimizing with respect to a subset of the variables simultaneously. the term coordinate descent is often used to refer to block coordinate descent as well as the strictly individual coordinate descent. coordinate descent makes the most sense when the different variables in the optimization problem can be clearly separated into groups that play relatively isolated roles or when optimization with respect to one group of variables is significantly more efficient than optimization with respect to all of the variables. for example consider the cost function j w hij ij ij x w h ij this function describes a learning problem called sparse coding where the goal is to find a weight matrix w that can linearly decode a matrix of activation values h to reconstruct the training set x. most applications of sparse coding also involve weight decay or a constraint on the norms of the columns of w in order to prevent the pathological solution with extremely small and large w h the function j is not convex. however we can divide the inputs to the training algorithm into two sets the dictionary parameters w and the code representations h minimizing the objective function with respect to either one of these sets of variables is a convex problem. block coordinate descent thus gives chapter optimization for training deep models us an optimization strategy that allows us to use efficient convex optimization algorithms by alternating between optimizing w with h fixed then optimizing h wwith fixed. x coordinate descent is not a very good strategy when the value of one variable strongly influences the optimal value of another variable as in the function f where is a positive constant. the first term encourages the two variables to have similar value while the second term encourages them to be near zero. the solution is to set both to zero. newton s method can solve the problem in a single step because it is a positive definite quadratic problem. however for small coordinate descent will make very slow progress because the first term does not allow a single variable to be changed to a value that differs significantly from the current value of the other variable. polyak averaging consists of averaging together several polyak averaging and juditsky points in the trajectory through parameter space visited by an optimization algorithm. if t iterations of gradient descent visit points then the output of the polyak averaging algorithm is i on some problem t classes such as gradient descent applied to convex problems this approach has strong convergence guarantees. when applied to neural networks its justification is more heuristic but it performs well in practice. the basic idea is that the optimization algorithm may leap back and forth across a valley several times without ever visiting a point near the bottom of the valley. the average of all of the locations on either side should be close to the bottom of the valley though. in non-convex problems the path taken by the optimization trajectory can be very complicated and visit many different regions. including points in parameter space from the distant past that may be separated from the current point by large barriers in the cost function does not seem like a useful behavior. as a result when applying polyak averaging to non-convex problems it is typical to use an exponentially decaying running average t the running average approach is used in numerous applications. see szegedy et al. for a recent example. chapter optimization for training deep models supervised pretraining sometimes directly training a model to solve a specific task can be too ambitious if the model is complex and hard to optimize or if the task is very difficult. it is sometimes more effective to train a simpler model to solve the task then make the model more complex. it can also be more effective to train the model to solve a simpler task then move on to confront the final task. these strategies that involve training simple models on simple tasks before confronting the challenge of training the desired model to perform the desired task are collectively known as pretraining. greedy algorithms break a problem into many components then solve for the optimal version of each component in isolation. unfortunately combining the individually optimal components is not guaranteed to yield an optimal complete solution. however greedy algorithms can be computationally much cheaper than algorithms that solve for the best joint solution and the quality of a greedy solution is often acceptable if not optimal. greedy algorithms may also be followed by a fine-tuning stage in which a joint optimization algorithm searches for an optimal solution to the full problem. initializing the joint optimization algorithm with a greedy solution can greatly speed it up and improve the quality of the solution it finds. pretraining and especially greedy pretraining algorithms are ubiquitous in deep learning. in this section we describe specifically those pretraining algorithms that break supervised learning problems into other simpler supervised learning problems. this approach is known as greedy supervised pretraining in the original bengio et al. version of greedy supervised pretraining each stage consists of a supervised learning training task involving only a subset of the layers in the final neural network. an example of greedy supervised pretraining is illustrated in figure in which each added hidden layer is pretrained as part of a shallow supervised mlp taking as input the output of the previously trained hidden layer. instead of pretraining one layer at a time simonyan and zisserman pretrain a deep convolutional network weight layers and then use the first four and last three layers from this network to initialize even deeper networks up to nineteen layers of weights. the middle layers of the new very deep network are initialized randomly. the new network is then jointly trained. another option explored by yu of the previously trained mlps as well as the raw input as inputs for each added stage. is to use the outputs et al. why would greedy supervised pretraining help? the hypothesis initially is that it helps to provide better guidance to the bengio et al. discussed by chapter optimization for training deep models yy xx yy yy xx yy xx y yy xx bengio et al. figure illustration of one form of greedy supervised pretraining start by training a sufficiently shallow architecture. another drawing of the same architecture. we keep only the input-to-hidden layer of the original network and discard the hidden-to-output layer. we send the output of the first hidden layer as input to another supervised single hidden layer mlp that is trained with the same objective as the first network was thus adding a second hidden layer. this can be repeated for as many layers as desired. another drawing of the result viewed as a feedforward network. to further improve the optimization we can jointly fine-tune all the layers either only at the end or at each stage of this process. chapter optimization for training deep models intermediate levels of a deep hierarchy. in general pretraining may help both in terms of optimization and in terms of generalization. et al. an approach related to supervised pretraining extends the idea to the context pretrain a deep convolutional net with of transfer learning yosinski layers of weights on a set of tasks subset of the imagenet object categories and then initialize a same-size network with the first k layers of the first net. all the layers of the second network the upper layers initialized randomly are then jointly trained to perform a different set of tasks subset of the imagenet object categories with fewer training examples than for the first set of tasks. other approaches to transfer learning with neural networks are discussed in section romero et al. another related line of work is the fitnets approach. this approach begins by training a network that has low enough depth and great enough width of units per layer to be easy to train. this network then becomes a teacher for a second network designated the student. the student network is much deeper and thinner to nineteen layers and would be difficult to train with sgd under normal circumstances. the training of the student network is made easier by training the student network not only to predict the output for the original task but also to predict the value of the middle layer of the teacher network. this extra task provides a set of hints about how the hidden layers should be used and can simplify the optimization problem. additional parameters are introduced to regress the middle layer of the teacher network from the middle layer of the deeper student network. however instead of predicting the final classification target the objective is to predict the middle hidden layer of the teacher network. the lower layers of the student networks thus have two objectives to help the outputs of the student network accomplish their task as well as to predict the intermediate layer of the teacher network. although a thin and deep network appears to be more difficult to train than a wide and shallow network the thin and deep network may generalize better and certainly has lower computational cost if it is thin enough to have far fewer parameters. without the hints on the hidden layer the student network performs very poorly in the experiments both on the training and test set. hints on middle layers may thus be one of the tools to help train neural networks that otherwise seem difficult to train but other optimization techniques or changes in the architecture may also solve the problem. chapter optimization for training deep models designing models to aid optimization to improve optimization the best strategy is not always to improve the optimization algorithm. instead many improvements in the optimization of deep models have come from designing the models to be easier to optimize. in principle we could use activation functions that increase and decrease in jagged non-monotonic patterns. however this would make optimization extremely difficult. in practice it is more important to choose a model family that is easy to optimize than to use a powerful optimization algorithm. most of the advances in neural network learning over the past years have been obtained by changing the model family rather than changing the optimization procedure. stochastic gradient descent with momentum which was used to train neural networks in the remains in use in modern state of the art neural network applications. specifically modern neural networks reflect a design choice to use linear transformations between layers and activation functions that are differentiable almost everywhere and have significant slope in large portions of their domain. in particular model innovations like the lstm rectified linear units and maxout units have all moved toward using more linear functions than previous models like deep networks based on sigmoidal units. these models have nice properties that make optimization easier. the gradient flows through many layers provided that the jacobian of the linear transformation has reasonable singular values. moreover linear functions consistently increase in a single direction so even if the model s output is very far from correct it is clear simply from computing the gradient which direction its output should move to reduce the loss function. in other words modern neural nets have been designed so that their local gradient information corresponds reasonably well to moving toward a distant solution. other model design strategies can help to make optimization easier. for example linear paths or skip connections between layers reduce the length of the shortest path from the lower layer s parameters to the output and thus mitigate the vanishing gradient problem a related idea to skip connections is adding extra copies of the output that are attached to the intermediate hidden layers of the network as in googlenet szegedy et al. and deeply-supervised nets these auxiliary heads are trained to perform the same task as the primary output at the top of the network in order to ensure that the lower layers receive a large gradient. when training is complete the auxiliary heads may be discarded. this is an alternative to the pretraining strategies which were introduced in the previous section. in this way one can train jointly all the layers in a single phase but change the architecture so that intermediate layers the lower ones can get some hints about what they lee et al. et al. chapter optimization for training deep models should do via a shorter path. these hints provide an error signal to lower layers. continuation methods and curriculum learning as argued in section many of the challenges in optimization arise from the global structure of the cost function and cannot be resolved merely by making better estimates of local update directions. the predominant strategy for overcoming this problem is to attempt to initialize the parameters in a region that is connected to the solution by a short path through parameter space that local descent can discover. continuation methods are a family of strategies that can make optimization easier by choosing initial points to ensure that local optimization spends most of its time in well-behaved regions of space. the idea behind continuation methods is to construct a series of objective functions over the same parameters. in order to j j minimize a cost function j we will construct new cost functions these cost functions are designed to be increasingly difficult with j being fairly easy to minimize and j the most difficult being j the true cost function motivating the entire process. when we say that j we mean that it is well behaved over more of space. a random initialization is more likely to land in the region where local descent can minimize the cost function successfully because this region is larger. the series of cost functions are designed so that a solution to one is a good initial point of the next. we thus begin by solving an easy problem then refine the solution to solve incrementally harder problems until we arrive at a solution to the true underlying problem. is easier than j i traditional continuation methods the use of continuation methods for neural network training are usually based on smoothing the objective function. see wu for an example of such a method and a review of some related methods. continuation methods are also closely related to simulated annealing which adds noise to the parameters continuation methods have been extremely successful in recent years. see mobahi and fisher for an overview of recent literature especially for ai applications. et al. continuation methods traditionally were mostly designed with the goal of overcoming the challenge of local minima. specifically they were designed to reach a global minimum despite the presence of many local minima. to do so these continuation methods would construct easier cost functions by blurring the original cost function. this blurring operation can be done by approximating j e n via sampling. the intuition for this approach is that some non-convex functions chapter optimization for training deep models become approximately convex when blurred. in many cases this blurring preserves enough information about the location of a global minimum that we can find the global minimum by solving progressively less blurred versions of the problem. this approach can break down in three different ways. first it might successfully define a series of cost functions where the first is convex and the optimum tracks from one function to the next arriving at the global minimum but it might require so many incremental cost functions that the cost of the entire procedure remains high. np-hard optimization problems remain np-hard even when continuation methods are applicable. the other two ways that continuation methods fail both correspond to the method not being applicable. first the function might not become convex no matter how much it is blurred. consider for example the function j second the function may become convex as a result of blurring but the minimum of this blurred function may track to a local rather than a global minimum of the original cost function. though continuation methods were mostly originally designed to deal with the problem of local minima local minima are no longer believed to be the primary problem for neural network optimization. fortunately continuation methods can still help. the easier objective functions introduced by the continuation method can eliminate flat regions decrease variance in gradient estimates improve conditioning of the hessian matrix or do anything else that will either make local updates easier to compute or improve the correspondence between local update directions and progress toward a global solution. bengio et al. skinner peterson krueger and dayan solomonoff elman sanger observed that an approach called curriculum learning or shaping can be interpreted as a continuation method. curriculum learning is based on the idea of planning a learning process to begin by learning simple concepts and progress to learning more complex concepts that depend on these simpler concepts. this basic strategy was previously known to accelerate progress in animal training and machine learning bengio et al. justified this strategy as a continuation method where earlier j are made easier by increasing the influence of simpler examples by assigning their contributions to the cost function larger coefficients or by sampling them more frequently and experimentally demonstrated that better results could be obtained by following a curriculum on a large-scale neural language modeling task. curriculum learning has been successful on a wide range of natural language and computer collobert vision kumar et al. lee and grauman supancic and ramanan tasks. curriculum learning was also verified as being consistent with the way in teachers start by showing easier and which humans teach tu and honavar mikolov khan et al. et al. et al. et al. chapter optimization for training deep models more prototypical examples and then help the learner refine the decision surface with the less obvious cases. curriculum-based strategies are more effective for teaching humans than strategies based on uniform sampling of examples and can also increase the effectiveness of other teaching strategies basu and christensen another important contribution to research on curriculum learning arose in the context of training recurrent neural networks to capture long-term dependencies zaremba and sutskever found that much better results were obtained with a stochastic curriculum in which a random mix of easy and difficult examples is always presented to the learner but where the average proportion of the more difficult examples those with longer-term dependencies is gradually increased. with a deterministic curriculum no improvement over the baseline training from the full training set was observed. we have now described the basic family of neural network models and how to regularize and optimize them. in the chapters ahead we turn to specializations of the neural network family that allow neural networks to scale to very large sizes and process input data that has special structure. the optimization methods discussed in this chapter are often directly applicable to these specialized architectures with little or no modification. chapter convolutional networks lecun also known as convolutional networks convolutional neural networks or cnns are a specialized kind of neural network for processing data that has a known grid-like topology. examples include time-series data which can be thought of as a grid taking samples at regular time intervals and image data which can be thought of as a grid of pixels. convolutional networks have been tremendously successful in practical applications. the name convolutional neural network indicates that the network employs a mathematical operation called convolution. convolution is a specialized kind of linear operation. convolutional networks are simply neural networks that use convolution in place of general matrix multiplication in at least one of their layers. in this chapter we will first describe what convolution is. next we will explain the motivation behind using convolution in a neural network. we will then describe an operation called pooling which almost all convolutional networks employ. usually the operation used in a convolutional neural network does not correspond precisely to the definition of convolution as used in other fields such as engineering or pure mathematics. we will describe several variants on the convolution function that are widely used in practice for neural networks. we will also show how convolution may be applied to many kinds of data with different numbers of dimensions. we then discuss means of making convolution more efficient. convolutional networks stand out as an example of neuroscientific principles influencing deep learning. we will discuss these neuroscientific principles then conclude with comments about the role convolutional networks have played in the history of deep learning. one topic this chapter does not address is how to choose the architecture of your convolutional network. the goal of this chapter is to describe the kinds of tools that convolutional networks provide while chapter chapter convolutional networks describes general guidelines for choosing which tools to use in which circumstances. research into convolutional network architectures proceeds so rapidly that a new best architecture for a given benchmark is announced every few weeks to months rendering it impractical to describe the best architecture in print. however the best architectures have consistently been composed of the building blocks described here. the convolution operation in its most general form convolution is an operation on two functions of a realvalued argument. to motivate the definition of convolution we start with examples of two functions we might use. suppose we are tracking the location of a spaceship with a laser sensor. our laser sensor provides a single output xt the position of the spaceship at time t. both x and t are real-valued i.e. we can get a different reading from the laser sensor at any instant in time. now suppose that our laser sensor is somewhat noisy. to obtain a less noisy estimate of the spaceship s position we would like to average together several measurements. of course more recent measurements are more relevant so we will want this to be a weighted average that gives more weight to recent measurements. we can do this with a weighting function wa where a is the age of a measurement. if we apply such a weighted average operation at every moment we obtain a new function providing a smoothed estimate of the position of the spaceship s s t x a w t a da this operation is called convolution. the convolution operation is typically denoted with an asterisk x w t s t in our example w needs to be a valid probability density function or the output is not a weighted average. also w needs to be for all negative arguments or it will look into the future which is presumably beyond our capabilities. these limitations are particular to our example though. in general convolution is defined for any functions for which the above integral is defined and may be used for other purposes besides taking weighted averages. in convolutional network terminology the first argument this example the function x to the convolution is often referred to as the input and the second chapter convolutional networks argument this example the function w as the kernel. the output is sometimes referred to as the feature map in our example the idea of a laser sensor that can provide measurements at every instant in time is not realistic. usually when we work with data on a computer time will be discretized and our sensor will provide data at regular intervals. in our example it might be more realistic to assume that our laser provides a measurement once per second. the time index t can then take on only integer values. if we now assume that x and w are defined only on integer t we can define the discrete convolution x w t s t x a w t a a in machine learning applications the input is usually a multidimensional array of data and the kernel is usually a multidimensional array of parameters that are adapted by the learning algorithm. we will refer to these multidimensional arrays as tensors. because each element of the input and kernel must be explicitly stored separately we usually assume that these functions are zero everywhere but the finite set of points for which we store the values. this means that in practice we can implement the infinite summation as a summation over a finite number of array elements. finally we often use convolutions over more than one axis at a time. for example if we use a two-dimensional image i as our input we probably also want to use a two-dimensional kernel s i j i k i j i m n k i m j n m n m n convolution is commutative meaning we can equivalently write s i j k i i j i i m j n k m n usually the latter formula is more straightforward to implement in a machine learning library because there is less variation in the range of valid values of m and the commutative property of convolution arises because we have flipped the kernel relative to the input in the sense that as m increases the index into the input increases but the index into the kernel decreases. the only reason to flip the kernel is to obtain the commutative property. while the commutative property chapter convolutional networks is useful for writing proofs it is not usually an important property of a neural network implementation. instead many neural network libraries implement a related function called the cross-correlation which is the same as convolution but without flipping the kernel s i j i k i j i i m j m n n k m n many machine learning libraries implement cross-correlation but call it convolution. in this text we will follow this convention of calling both operations convolution and specify whether we mean to flip the kernel or not in contexts where kernel flipping is relevant. in the context of machine learning the learning algorithm will learn the appropriate values of the kernel in the appropriate place so an algorithm based on convolution with kernel flipping will learn a kernel that is flipped relative to the kernel learned by an algorithm without the flipping. it is also rare for convolution to be used alone in machine learning instead convolution is used simultaneously with other functions and the combination of these functions does not commute regardless of whether the convolution operation flips its kernel or not. see figure to a tensor. for an example of convolution kernel flipping applied discrete convolution can be viewed as multiplication by a matrix. however the matrix has several entries constrained to be equal to other entries. for example for univariate discrete convolution each row of the matrix is constrained to be equal to the row above shifted by one element. this is known as a toeplitz matrix. in two dimensions a doubly block circulant matrix corresponds to convolution. in addition to these constraints that several elements be equal to each other convolution usually corresponds to a very sparse matrix matrix whose entries are mostly equal to zero. this is because the kernel is usually much smaller than the input image. any neural network algorithm that works with matrix multiplication and does not depend on specific properties of the matrix structure should work with convolution without requiring any further changes to the neural network. typical convolutional neural networks do make use of further specializations in order to deal with large inputs efficiently but these are not strictly necessary from a theoretical perspective. chapter convolutional networks input a e i b f j c g k d h l output kernel w y x z aw bx aw bx ey f z ey f z bw cx bw cx f y gz f y gz cw dx cw dx gy hz gy hz ew f x ew f x iy jz iy jz f w gx f w gx jy kz jy kz gw hx gw hx ky lz ky lz figure an example of convolution without kernel-flipping. in this case we restrict the output to only positions where the kernel lies entirely within the image called valid convolution in some contexts. we draw boxes with arrows to indicate how the upper-left element of the output tensor is formed by applying the kernel to the corresponding upper-left region of the input tensor. chapter convolutional networks motivation convolution leverages three important ideas that can help improve a machine learning system sparse interactions parameter sharing and equivariant representations. moreover convolution provides a means for working with inputs of variable size. we now describe each of these ideas in turn. traditional neural network layers use matrix multiplication by a matrix of parameters with a separate parameter describing the interaction between each input unit and each output unit. this means every output unit interacts with every input unit. convolutional networks however typically have sparse interactions referred to as sparse connectivity or sparse weights. this is accomplished by making the kernel smaller than the input. for example when processing an image the input image might have thousands or millions of pixels but we can detect small meaningful features such as edges with kernels that occupy only tens or hundreds of pixels. this means that we need to store fewer parameters which both reduces the memory requirements of the model and improves its statistical efficiency. it also means that computing the output requires fewer operations. these improvements in efficiency are usually quite large. if there are m inputs and n outputs then matrix multiplication requires m n parameters and the algorithms used in practice have om n runtime example. if we limit the number of connections each output may have to k then the sparsely connected approach requires only k runtime. for many practical applications it is possible to obtain good performance on the machine learning task while keeping k several orders of magnitude smaller than m. for graphical demonstrations of sparse connectivity see figure in a deep convolutional network units in the deeper layers may indirectly interact with a larger portion of the input as shown in figure this allows the network to efficiently describe complicated interactions between many variables by constructing such interactions from simple building blocks that each describe only sparse interactions. parameters and ok and figure n n parameter sharing refers to using the same parameter for more than one function in a model. in a traditional neural net each element of the weight matrix is used exactly once when computing the output of a layer. it is multiplied by one element of the input and then never revisited. as a synonym for parameter sharing one can say that a network has tied weights because the value of the weight applied to one input is tied to the value of a weight applied elsewhere. in a convolutional neural net each member of the kernel is used at every position of the input perhaps some of the boundary pixels depending on the design decisions regarding the boundary. the parameter sharing used by the convolution operation means that rather than learning a separate set of parameters chapter convolutional networks figure sparse connectivity viewed from below we highlight one input unit and also highlight the output units in s that are affected by this unit. s is formed by convolution with a kernel of width only three outputs are affected by x. is formed by matrix multiplication connectivity is no longer sparse so all of the outputs are affected by s chapter convolutional networks figure sparse connectivity viewed from above we highlight one output unit and also highlight the input units in x that affect this unit. these units are known as the receptive field of s is formed by convolution with a kernel of width only three inputs affect s is formed by matrix multiplication connectivity is no longer sparse so all of the inputs affect when s figure the receptive field of the units in the deeper layers of a convolutional network is larger than the receptive field of the units in the shallow layers. this effect increases if the network includes architectural features like strided convolution or pooling direct connections in a convolutional net are very sparse units in the deeper layers can be indirectly connected to all or most of the input image. this means that even though chapter convolutional networks figure parameter sharing black arrows indicate the connections that use a particular parameter in two different models. black arrows indicate uses of the central element of a kernel in a convolutional model. due to parameter sharing this single parameter is used at all input locations. the single black arrow indicates the use of the central element of the weight matrix in a fully connected model. this model has no parameter sharing so the parameter is used only once. n for every location we learn only one set. this does not affect the runtime of forward propagation it is still ok but it does further reduce the storage requirements of the model to k parameters. recall that k is usually several orders of magnitude less than m. since m and n are usually roughly the same size k is practically insignificant compared to m n convolution is thus dramatically more efficient than dense matrix multiplication in terms of the memory requirements and statistical efficiency. for a graphical depiction of how parameter sharing works see figure as an example of both of these first two principles in action figure shows how sparse connectivity and parameter sharing can dramatically improve the efficiency of a linear function for detecting edges in an image. in the case of convolution the particular form of parameter sharing causes the layer to have a property called equivariance to translation. to say a function is equivariant means that if the input changes the output changes in the same way. specifically a function f is equivariant to a function g if fgx gf in the case of convolution if we let g be any function that translates the input i.e. shifts it then the convolution function is equivariant to g. for example let i be a function giving image brightness at integer coordinates. let g be a function chapter convolutional networks y ix gi is mapping one image function to another image function such that i the image function with i y. this shifts every pixel of i one unit to the right. if we apply this transformation to i then apply convolution the result will be the same as if we applied convolution to i then applied the transformation g to the output. when processing time series data this means that convolution produces a sort of timeline that shows when different features appear in the input. if we move an event later in time in the input the exact same representation of it will appear in the output just later in time. similarly with images convolution creates a map of where certain features appear in the input. if we move the object in the input its representation will move the same amount in the output. this is useful for when we know that some function of a small number of neighboring pixels is useful when applied to multiple input locations. for example when processing images it is useful to detect edges in the first layer of a convolutional network. the same edges appear more or less everywhere in the image so it is practical to share parameters across the entire image. in some cases we may not wish to share parameters across the entire image. for example if we are processing images that are cropped to be centered on an individual s face we probably want to extract different features at different locations the part of the network processing the top of the face needs to look for eyebrows while the part of the network processing the bottom of the face needs to look for a chin. convolution is not naturally equivariant to some other transformations such as changes in the scale or rotation of an image. other mechanisms are necessary for handling these kinds of transformations. finally some kinds of data cannot be processed by neural networks defined by matrix multiplication with a fixed-shape matrix. convolution enables processing of some of these kinds of data. we discuss this further in section pooling a typical layer of a convolutional network consists of three stages figure in the first stage the layer performs several convolutions in parallel to produce a set of linear activations. in the second stage each linear activation is run through a nonlinear activation function such as the rectified linear activation function. this stage is sometimes called the detector stage. in the third stage we use a pooling function to modify the output of the layer further. a pooling function replaces the output of the net at a certain location with a summary statistic of the nearby outputs. for example the max pooling chapter convolutional networks figure efficiency of edge detection. the image on the right was formed by taking each pixel in the original image and subtracting the value of its neighboring pixel on the left. this shows the strength of all of the vertically oriented edges in the input image which can be a useful operation for object detection. both images are pixels tall. the input image is pixels wide while the output image is pixels wide. this transformation can be described by a convolution kernel containing two elements and requires floating point operations multiplications and one addition per output pixel to compute using convolution. to describe the same transformation with a matrix multiplication would take or over eight billion entries in the matrix making convolution four billion times more efficient for representing this transformation. the straightforward matrix multiplication algorithm performs over sixteen billion floating point operations making convolution roughly times more efficient computationally. of course most of the entries of the matrix would be zero. if we stored only the nonzero entries of the matrix then both matrix multiplication and convolution would require the same number of floating point operations to compute. the matrix would still need to contain entries. convolution is an extremely efficient way of describing transformations that apply the same linear transformation of a small local region across the entire input. credit paula goodfellow chapter convolutional networks complex layer terminology simple layer terminology next layer next layer convolutional layer pooling stage pooling layer detector stage nonlinearity e.g. rectified linear convolution stage a ne transform ffi detector layer nonlinearity e.g. rectified linear convolution layer a ne transform ffi input to layer input to layers figure the components of a typical convolutional neural network layer. there are two commonly used sets of terminology for describing these layers. this terminology the convolutional net is viewed as a small number of relatively complex layers with each layer having many stages. in this terminology there is a one-to-one mapping between kernel tensors and network layers. in this book we generally use this terminology. this terminology the convolutional net is viewed as a larger number of simple layers every step of processing is regarded as a layer in its own right. this means that not every layer has parameters. chapter convolutional networks operation reports the maximum output within a rectangular and chellappa neighborhood. other popular pooling functions include the average of a rectangular neighborhood the norm of a rectangular neighborhood or a weighted average based on the distance from the central pixel. for an example of how this works. in all cases pooling helps to make the representation become approximately invariant to small translations of the input. invariance to translation means that if we translate the input by a small amount the values of most of the pooled outputs do not change. see figure invariance to local translation can be a very useful property if we care more about whether some feature is present than exactly where it is. for example when determining whether an image contains a face we need not know the location of the eyes with pixel-perfect accuracy we just need to know that there is an eye on the left side of the face and an eye on the right side of the face. in other contexts it is more important to preserve the location of a feature. for example if we want to find a corner defined by two edges meeting at a specific orientation we need to preserve the location of the edges well enough to test whether they meet. the use of pooling can be viewed as adding an infinitely strong prior that the function the layer learns must be invariant to small translations. when this assumption is correct it can greatly improve the statistical efficiency of the network. pooling over spatial regions produces invariance to translation but if we pool over the outputs of separately parametrized convolutions the features can learn which transformations to become invariant to figure because pooling summarizes the responses over a whole neighborhood it is possible to use fewer pooling units than detector units by reporting summary statistics for pooling regions spaced k pixels apart rather than pixel apart. see figure for an example. this improves the computational efficiency of the network because the next layer has roughly k times fewer inputs to process. when the number of parameters in the next layer is a function of its input size as when the next layer is fully connected and based on matrix multiplication this reduction in the input size can also result in improved statistical efficiency and reduced memory requirements for storing the parameters. for many tasks pooling is essential for handling inputs of varying size. for example if we want to classify images of variable size the input to the classification layer must have a fixed size. this is usually accomplished by varying the size of an offset between pooling regions so that the classification layer always receives the same number of summary statistics regardless of the input size. for example the final pooling layer of the network may be defined to output four sets of summary statistics one for each quadrant of an image regardless of the image size. chapter convolutional networks pooling stage detector stage pooling stage detector stage figure max pooling introduces invariance. view of the middle of the output of a convolutional layer. the bottom row shows outputs of the nonlinearity. the top row shows the outputs of max pooling with a stride of one pixel between pooling regions and a pooling region width of three pixels. a view of the same network after the input has been shifted to the right by one pixel. every value in the bottom row has changed but only half of the values in the top row have changed because the max pooling units are only sensitive to the maximum value in the neighborhood not its exact location. chapter convolutional networks large response in pooling unit large response in detector unit large response in pooling unit large response in detector unit figure example of learned invariances a pooling unit that pools over multiple features that are learned with separate parameters can learn to be invariant to transformations of the input. here we show how a set of three learned filters and a max pooling unit can learn to become invariant to rotation. all three filters are intended to detect a hand-written each filter attempts to match a slightly different orientation of the when a appears in the input the corresponding filter will match it and cause a large activation in a detector unit. the max pooling unit then has a large activation regardless of which detector unit was activated. we show here how the network processes two different inputs resulting in two different detector units being activated. the effect on the pooling unit is roughly the same either way. this principle is leveraged by maxout networks et al. and other convolutional networks. max pooling over spatial positions is naturally invariant to translation this multi-channel approach is only necessary for learning other transformations. figure pooling with downsampling. here we use max-pooling with a pool width of three and a stride between pools of two. this reduces the representation size by a factor of two which reduces the computational and statistical burden on the next layer. note that the rightmost pooling region has a smaller size but must be included if we do not want to ignore some of the detector units. chapter convolutional networks some theoretical work gives guidance as to which kinds of pooling one should use in various situations it is also possible to dynamically pool features together for example by running a clustering algorithm on the locations of interesting features this approach yields a different set of pooling regions for each image. another approach is to learn a single pooling structure that is then applied to all images boureau et al. boureau et al. jia et al. pooling can complicate some kinds of neural network architectures that use top-down information such as boltzmann machines and autoencoders. these issues will be discussed further when we present these types of networks in part iii the pooling in convolutional boltzmann machines is presented in section inverse-like operations on pooling units needed in some differentiable networks will be covered in section some examples of complete convolutional network architectures for classification using convolution and pooling are shown in figure convolution and pooling as an infinitely strong prior recall the concept of a prior probability distribution from section this is a probability distribution over the parameters of a model that encodes our beliefs about what models are reasonable before we have seen any data. priors can be considered weak or strong depending on how concentrated the probability density in the prior is. a weak prior is a prior distribution with high entropy such as a gaussian distribution with high variance. such a prior allows the data to move the parameters more or less freely. a strong prior has very low entropy such as a gaussian distribution with low variance. such a prior plays a more active role in determining where the parameters end up. an infinitely strong prior places zero probability on some parameters and says that these parameter values are completely forbidden regardless of how much support the data gives to those values. we can imagine a convolutional net as being similar to a fully connected net but with an infinitely strong prior over its weights. this infinitely strong prior says that the weights for one hidden unit must be identical to the weights of its neighbor but shifted in space. the prior also says that the weights must be zero except for in the small spatially contiguous receptive field assigned to that hidden unit. overall we can think of the use of convolution as introducing an infinitely strong prior probability distribution over the parameters of a layer. this prior chapter convolutional networks output of softmax output of softmax output of softmax class probabilities class probabilities class probabilities output of matrix multiply units output of matrix multiply units output of average pooling output of reshape to output of reshape to vector units vector units output of convolution output of pooling with stride output of convolution relu output of pooling to grid output of convolution relu output of pooling with stride output of convolution relu output of pooling output of pooling output of pooling with stride output of convolution with stride output of convolution with stride output of convolution relu relu relu input image input image input image figure examples of architectures for classification with convolutional networks. the specific strides and depths used in this figure are not advisable for real use they are designed to be very shallow in order to fit onto the page. real convolutional networks also often involve significant amounts of branching unlike the chain structures used here for simplicity. convolutional network that processes a fixed image size. after alternating between convolution and pooling for a few layers the tensor for the convolutional feature map is reshaped to flatten out the spatial dimensions. the rest of the network is an ordinary feedforward network classifier as described in chapter convolutional network that processes a variable-sized image but still maintains a fully connected section. this network uses a pooling operation with variably-sized pools but a fixed number of pools in order to provide a fixed-size vector of units to the fully connected portion of the network. a convolutional network that does not have any fully connected weight layer. instead the last convolutional layer outputs one feature map per class. the model presumably learns a map of how likely each class is to occur at each spatial location. averaging a feature map down to a single value provides the argument to the softmax classifier at the top. chapter convolutional networks says that the function the layer should learn contains only local interactions and is equivariant to translation. likewise the use of pooling is an infinitely strong prior that each unit should be invariant to small translations. of course implementing a convolutional net as a fully connected net with an infinitely strong prior would be extremely computationally wasteful. but thinking of a convolutional net as a fully connected net with an infinitely strong prior can give us some insights into how convolutional nets work. one key insight is that convolution and pooling can cause underfitting. like any prior convolution and pooling are only useful when the assumptions made by the prior are reasonably accurate. if a task relies on preserving precise spatial information then using pooling on all features can increase the training error. some convolutional network architectures are designed to use pooling on some channels but not on other channels in order to get both highly invariant features and features that will not underfit when the translation invariance prior is incorrect. when a task involves incorporating information from very distant locations in the input then the prior imposed by convolution may be inappropriate. szegedy et al. another key insight from this view is that we should only compare convolutional models to other convolutional models in benchmarks of statistical learning performance. models that do not use convolution would be able to learn even if we permuted all of the pixels in the image. for many image datasets there are separate benchmarks for models that are permutation invariant and must discover the concept of topology via learning and models that have the knowledge of spatial relationships hard-coded into them by their designer. variants of the basic convolution function when discussing convolution in the context of neural networks we usually do not refer exactly to the standard discrete convolution operation as it is usually understood in the mathematical literature. the functions used in practice differ slightly. here we describe these differences in detail and highlight some useful properties of the functions used in neural networks. first when we refer to convolution in the context of neural networks we usually actually mean an operation that consists of many applications of convolution in parallel. this is because convolution with a single kernel can only extract one kind of feature albeit at many spatial locations. usually we want each layer of our network to extract many kinds of features at many locations. chapter convolutional networks additionally the input is usually not just a grid of real values. rather it is a grid of vector-valued observations. for example a color image has a red green and blue intensity at each pixel. in a multilayer convolutional network the input to the second layer is the output of the first layer which usually has the output of many different convolutions at each position. when working with images we usually think of the input and output of the convolution as being tensors with one index into the different channels and two indices into the spatial coordinates of each channel. software implementations usually work in batch mode so they will actually use tensors with the fourth axis indexing different examples in the batch but we will omit the batch axis in our description here for simplicity. because convolutional networks usually use multi-channel convolution the linear operations they are based on are not guaranteed to be commutative even if kernel-flipping is used. these multi-channel operations are only commutative if each operation has the same number of output channels as input channels. assume we have a kernel tensor k with element kijkl giving the connection strength between a unit in channel i of the output and a unit in channel j of the input with an offset of k rows and l columns between the output unit and the input unit. assume our input consists of observed data v with element vijk giving the value of the input unit within channel i at row j and column k. assume our output consists of z with the same format as v. if z is produced by convolving k across without flipping then v k zijk lmn vlj m n where the summation over l m and n is over all values for which the tensor indexing operations inside the summation is valid. in linear algebra notation we index into arrays using a in the above formula. programming languages such as c and python index starting from rendering the above expression even simpler. for the first entry. this necessitates the we may want to skip over some positions of the kernel in order to reduce the computational cost the expense of not extracting our features as finely. we can think of this as downsampling the output of the full convolution function. if we want to sample only every s pixels in each direction in the output then we can define a downsampled convolution function such that c zijk c k v s ijk s m k kilmn s n vl j lmn we refer to s as the stride of this downsampled convolution. it is also possible chapter convolutional networks to define a separate stride for each direction of motion. see figure illustration. for an one essential feature of any convolutional network implementation is the ability to implicitly zero-pad the input v in order to make it wider. without this feature the width of the representation shrinks by one pixel less than the kernel width at each layer. zero padding the input allows us to control the kernel width and the size of the output independently. without zero padding we are forced to choose between shrinking the spatial extent of the network rapidly and using small kernels both scenarios that significantly limit the expressive power of the network. see figure for an example. three special cases of the zero-padding setting are worth mentioning. one is the extreme case in which no zero-padding is used whatsoever and the convolution kernel is only allowed to visit positions where the entire kernel is contained entirely within the image. in matlab terminology this is called valid convolution. in this case all pixels in the output are a function of the same number of pixels in the input so the behavior of an output pixel is somewhat more regular. however the size of the output shrinks at each layer. if the input image has width m and the kernel has width k the output will be of width m k the rate of this shrinkage can be dramatic if the kernels used are large. since the shrinkage is greater than it limits the number of convolutional layers that can be included in the network. as layers are added the spatial dimension of the network will eventually drop to at which point additional layers cannot meaningfully be considered convolutional. another special case of the zero-padding setting is when just enough zero-padding is added to keep the size of the output equal to the size of the input. matlab calls this same convolution. in this case the network can contain as many convolutional layers as the available hardware can support since the operation of convolution does not modify the architectural possibilities available to the next layer. however the input pixels near the border influence fewer output pixels than the input pixels near the center. this can make the border pixels somewhat underrepresented in the model. this motivates the other extreme case which matlab refers to as full convolution in which enough zeroes are added for every pixel to be visited k times in each direction resulting in an output image of width m k in this case the output pixels near the border are a function of fewer pixels than the output pixels near the center. this can make it difficult to learn a single kernel that performs well at all positions in the convolutional feature map. usually the optimal amount of zero padding terms of test set classification accuracy lies somewhere between valid and same convolution. chapter convolutional networks strided convolution downsampling convolution figure convolution with a stride. in this example we use a stride of two. with a stride length of two implemented in a single operation. with a stride greater than one pixel is mathematically equivalent to convolution with unit stride followed by downsampling. obviously the two-step approach involving downsampling is computationally wasteful because it computes many values that are then discarded. chapter convolutional networks figure the effect of zero padding on network size consider a convolutional network with a kernel of width six at every layer. in this example we do not use any pooling so only the convolution operation itself shrinks the network size. this convolutional network we do not use any implicit zero padding. this causes the representation to shrink by five pixels at each layer. starting from an input of sixteen pixels we are only able to have three convolutional layers and the last layer does not ever move the kernel so arguably only two of the layers are truly convolutional. the rate of shrinking can be mitigated by using smaller kernels but smaller kernels are less expressive and some shrinking is inevitable in this kind of architecture. by adding five implicit zeroes to each layer we prevent the representation from shrinking with depth. this allows us to make an arbitrarily deep convolutional network. chapter convolutional networks lecun in some cases we do not actually want to use convolution but rather locally connected layers in this case the adjacency matrix in the graph of our mlp is the same but every connection has its own weight specified by a tensor w. the indices into w are respectively i the output channel j the output row k the output column l the input channel m the row offset within the input and n the column offset within the input. the linear part of a locally connected layer is then given by zijk m n lmn this is sometimes also called unshared convolution because it is a similar operation to discrete convolution with a small kernel but without sharing parameters across locations. figure compares local connections convolution and full connections. locally connected layers are useful when we know that each feature should be a function of a small part of space but there is no reason to think that the same feature should occur across all of space. for example if we want to tell if an image is a picture of a face we only need to look for the mouth in the bottom half of the image. it can also be useful to make versions of convolution or locally connected layers in which the connectivity is further restricted for example to constrain each output channel i to be a function of only a subset of the input channels l. a common way to do this is to make the first m output channels connect to only the first n input channels the second m output channels connect to only the second n input channels and so on. see figure for an example. modeling interactions between few channels allows the network to have fewer parameters in order to reduce memory consumption and increase statistical efficiency and also reduces the amount of computation needed to perform forward and back-propagation. it accomplishes these goals without reducing the number of hidden units. tiled convolution gregor and lecun le et al. offers a compromise between a convolutional layer and a locally connected layer. rather than learning a separate set of weights at spatial location we learn a set of kernels that we rotate through as we move through space. this means that immediately neighboring locations will have different filters like in a locally connected layer but the memory requirements for storing the parameters will increase only by a factor of the size of this set of kernels rather than the size of the entire output feature map. see figure for a comparison of locally connected layers tiled convolution and standard convolution. every chapter convolutional networks a b c d e f g h i a b a b a b a b a figure comparison of local connections convolution and full connections. locally connected layer with a patch size of two pixels. each edge is labeled with a unique letter to show that each edge is associated with its own weight parameter. convolutional layer with a kernel width of two pixels. this model has exactly the same connectivity as the locally connected layer. the difference lies not in which units interact with each other but in how the parameters are shared. the locally connected layer has no parameter sharing. the convolutional layer uses the same two weights repeatedly across the entire input as indicated by the repetition of the letters labeling each edge. fully connected layer resembles a locally connected layer in the sense that each edge has its own parameter are too many to label explicitly with letters in this diagram. however it does not have the restricted connectivity of the locally connected layer. chapter convolutional networks output tensor input tensor s e t a n i d r o o c l e n n a h c spatial coordinates figure a convolutional network with the first two output channels connected to only the first two input channels and the second two output channels connected to only the second two input channels. chapter convolutional networks a b c d e f g h i a b c d a b c d a a b a b a b a b a figure a comparison of locally connected layers tiled convolution and standard convolution. all three have the same sets of connections between units when the same size of kernel is used. this diagram illustrates the use of a kernel that is two pixels wide. the differences between the methods lies in how they share parameters. locally connected layer has no sharing at all. we indicate that each connection has its own weight by labeling each connection with a unique letter. tiled convolution has a set of t different kernels. here we illustrate the case of t one of these kernels has edges labeled a and b while the other has edges labeled c and d. each time we move one pixel to the right in the output we move on to using a different kernel. this means that like the locally connected layer neighboring units in the output have different parameters. unlike the locally connected layer after we have gone through all t available kernels we cycle back to the first kernel. if two output units are separated by a multiple of t steps then they share parameters. traditional convolution is equivalent to tiled convolution with t there is only one kernel and it is applied everywhere as indicated in the diagram by using the kernel with weights labeled a and b everywhere. chapter convolutional networks to define tiled convolution algebraically let k be a tensor where two of the dimensions correspond to different locations in the output map. rather than having a separate index for each location in the output map output locations cycle through a set of t different choices of kernel stack in each direction. if t is equal to the output width this is the same as a locally connected layer. zijk lmn vlj m n t t is the modulo operation with where it is straightforward to generalize this equation to use a different tiling range for each dimension. t etc. tt both locally connected layers and tiled convolutional layers have an interesting interaction with max-pooling the detector units of these layers are driven by different filters. if these filters learn to detect different transformed versions of the same underlying features then the max-pooled units become invariant to the learned transformation figure convolutional layers are hard-coded to be invariant specifically to translation. other operations besides convolution are usually necessary to implement a convolutional network. to perform learning one must be able to compute the gradient with respect to the kernel given the gradient with respect to the outputs. in some simple cases this operation can be performed using the convolution operation but many cases of interest including the case of stride greater than do not have this property. recall that convolution is a linear operation and can thus be described as a matrix multiplication we first reshape the input tensor into a flat vector. the matrix involved is a function of the convolution kernel. the matrix is sparse and each element of the kernel is copied to several elements of the matrix. this view helps us to derive some of the other operations needed to implement a convolutional network. multiplication by the transpose of the matrix defined by convolution is one such operation. this is the operation needed to back-propagate error derivatives through a convolutional layer so it is needed to train convolutional networks that have more than one hidden layer. this same operation is also needed if we wish to reconstruct the visible units from the hidden units reconstructing the visible units is an operation commonly used in the models described in part of this book such as autoencoders rbms and sparse coding. transpose convolution is necessary to construct convolutional versions of those models. like the kernel gradient operation this input gradient operation can be simard et al. iii chapter convolutional networks implemented using a convolution in some cases but in the general case requires a third operation to be implemented. care must be taken to coordinate this transpose operation with the forward propagation. the size of the output that the transpose operation should return depends on the zero padding policy and stride of the forward propagation operation as well as the size of the forward propagation s output map. in some cases multiple sizes of input to forward propagation can result in the same size of output map so the transpose operation must be explicitly told what the size of the original input was. these three operations convolution backprop from output to weights and backprop from output to inputs are sufficient to compute all of the gradients needed to train any depth of feedforward convolutional network as well as to train convolutional networks with reconstruction functions based on the transpose of convolution. see for a full derivation of the equations in the fully general multi-dimensional multi-example case. to give a sense of how these equations work we present the two dimensional single example version here. goodfellow suppose we want to train a convolutional network that incorporates strided convolution of kernel stack k applied to multi-channel image v with stride s as s as in equation defined by ck v suppose we want to minimize some loss during forward propagation we will need to use c itself to function j k output z which is then propagated through the rest of the network and used to compute the cost function j during back-propagation we will receive a tensor g such that gijk k j zijk to train the network we need to compute the derivatives with respect to the weights in the kernel. to do so we can use a function g v s kijkl j k mn gimnvj m s k n s l if this layer is not the bottom layer of the network we will need to compute the gradient with respect to v in order to back-propagate the error farther down. to do so we can use a function vijk h g ijk s j k kqimpgqln. lm s.t. s m j l np s.t. n s p k q autoencoder networks described in chapter are feedforward networks trained to copy their input to their output. a simple example is the pca algorithm chapter convolutional networks w x. that copies its input x to an approximate reconstruction r using the function w it is common for more general autoencoders to use multiplication by the transpose of the weight matrix just as pca does. to make such models convolutional we can use the function h to perform the transpose of the convolution operation. suppose we have hidden units h in the same format as z and we define a reconstruction k h s r in order to train the autoencoder we will receive the gradient with respect to r as a tensor e. to train the decoder we need to obtain the gradient with respect to k. this is given by gh e s. to train the encoder we need to obtain the gradient with respect to h. this is given by ck e s. it is also possible to differentiate through g using c and h but these operations are not needed for the back-propagation algorithm on any standard network architectures. generally we do not use only a linear operation in order to transform from the inputs to the outputs in a convolutional layer. we generally also add some bias term to each output before applying the nonlinearity. this raises the question of how to share parameters among the biases. for locally connected layers it is natural to give each unit its own bias and for tiled convolution it is natural to share the biases with the same tiling pattern as the kernels. for convolutional layers it is typical to have one bias per channel of the output and share it across all locations within each convolution map. however if the input is of known fixed size it is also possible to learn a separate bias at each location of the output map. separating the biases may slightly reduce the statistical efficiency of the model but also allows the model to correct for differences in the image statistics at different locations. for example when using implicit zero padding detector units at the edge of the image receive less total input and may need larger biases. structured outputs convolutional networks can be used to output a high-dimensional structured object rather than just predicting a class label for a classification task or a real value for a regression task. typically this object is just a tensor emitted by a standard convolutional layer. for example the model might emit a tensor s where sijk is the probability that pixel k of the input to the network belongs to class i. this allows the model to label every pixel in an image and draw precise masks that follow the outlines of individual objects. one issue that often comes up is that the output plane can be smaller than the chapter convolutional networks y y y y y y v w v w v u u u xx x figure an example of a recurrent convolutional network for pixel labeling. the input is an image tensor with axes corresponding to image rows image columns and channels green blue. the goal is to output a tensor of labels y with a probability distribution over labels for each pixel. this tensor has axes corresponding to image rows image columns and the different classes. rather than outputting y in a single shot the recurrent network iteratively refines its estimate y by using a previous estimate of y as input for creating a new estimate. the same parameters are used for each updated estimate and the estimate can be refined as many times as we wish. the tensor of convolution kernels u is used on each step to compute the hidden representation given the input image. the kernel tensor v is used to produce an estimate of the labels given the hidden values. on all but the first step the kernels w are convolved over y to provide input to the hidden layer. on the first time step this term is replaced by zero. because the same parameters are used on each step this is an example of a recurrent network as described in chapter input plane as shown in figure in the kinds of architectures typically used for classification of a single object in an image the greatest reduction in the spatial dimensions of the network comes from using pooling layers with large stride. in order to produce an output map of similar size as the input one can avoid pooling another strategy is to simply emit a lower-resolution altogether grid of labels finally in principle one could use a pooling operator with unit stride. pinheiro and collobert jain et al. one strategy for pixel-wise labeling of images is to produce an initial guess of the image labels then refine this initial guess using the interactions between neighboring pixels. repeating this refinement step several times corresponds to using the same convolutions at each stage sharing weights between the last layers of the deep net this makes the sequence of computations performed by the successive convolutional layers with weights shared across layers a particular kind of recurrent network shows the architecture of such a recurrent convolutional network. pinheiro and collobert jain et al. figure chapter convolutional networks briggman et al. turaga once a prediction for each pixel is made various methods can be used to further process these predictions in order to obtain a segmentation of the image into regions the general idea is to assume that large groups of contiguous pixels tend to be associated with the same label. graphical models can describe the probabilistic relationships between neighboring pixels. alternatively the convolutional network can be trained to maximize an approximation of the graphical model training objective ning et al. thompson et al. farabet et al. et al. data types the data used with a convolutional network usually consists of several channels each channel being the observation of a different quantity at some point in space or time. see table for examples of data types with different dimensionalities and number of channels. for an example of convolutional networks applied to video see chen et al. so far we have discussed only the case where every example in the train and test data has the same spatial dimensions. one advantage to convolutional networks is that they can also process inputs with varying spatial extents. these kinds of input simply cannot be represented by traditional matrix multiplication-based neural networks. this provides a compelling reason to use convolutional networks even when computational cost and overfitting are not significant issues. for example consider a collection of images where each image has a different width and height. it is unclear how to model such inputs with a weight matrix of fixed size. convolution is straightforward to apply the kernel is simply applied a different number of times depending on the size of the input and the output of the convolution operation scales accordingly. convolution may be viewed as matrix multiplication the same convolution kernel induces a different size of doubly block circulant matrix for each size of input. sometimes the output of the network is allowed to have variable size as well as the input for example if we want to assign a class label to each pixel of the input. in this case no further design work is necessary. in other cases the network must produce some fixed-size output for example if we want to assign a single class label to the entire image. in this case we must make some additional design steps like inserting a pooling layer whose pooling regions scale in size proportional to the size of the input in order to maintain a fixed number of pooled outputs. some examples of this kind of strategy are shown in figure chapter convolutional networks single channel audio waveform the axis we convolve over corresponds to time. we discretize time and measure the amplitude of the waveform once per time step. audio data that has been preprocessed with a fourier transform we can transform the audio waveform into a tensor with different rows corresponding to different frequencies and different columns corresponding to different points in time. using convolution in the time makes the model equivariant to shifts in time. using convolution across the frequency axis makes the model equivariant to frequency so that the same melody played in a different octave produces the same representation but at a different height in the network s output. volumetric data a common source of this kind of data is medical imaging technology such as ct scans. multi-channel skeleton animation data animations of computer-rendered characters are generated by altering the pose of a skeleton over time. at each point in time the pose of the character is described by a specification of the angles of each of the joints in the character s skeleton. each channel in the data we feed to the convolutional model represents the angle about one axis of one joint. color image data one channel contains the red pixels one the green pixels and one the blue pixels. the convolution kernel moves over both the horizontal and vertical axes of the image conferring translation equivariance in both directions. color video data one axis corresponds to time one to the height of the video frame and one to the width of the video frame. table examples of different formats of data that can be used with convolutional networks. chapter convolutional networks note that the use of convolution for processing variable sized inputs only makes sense for inputs that have variable size because they contain varying amounts of observation of the same kind of thing different lengths of recordings over time different widths of observations over space etc. convolution does not make sense if the input has variable size because it can optionally include different kinds of observations. for example if we are processing college applications and our features consist of both grades and standardized test scores but not every applicant took the standardized test then it does not make sense to convolve the same weights over both the features corresponding to the grades and the features corresponding to the test scores. efficient convolution algorithms modern convolutional network applications often involve networks containing more than one million units. powerful implementations exploiting parallel computation resources as discussed in section are essential. however in many cases it is also possible to speed up convolution by selecting an appropriate convolution algorithm. convolution is equivalent to converting both the input and the kernel to the frequency domain using a fourier transform performing point-wise multiplication of the two signals and converting back to the time domain using an inverse fourier transform. for some problem sizes this can be faster than the naive implementation of discrete convolution. when a d-dimensional kernel can be expressed as the outer product of d vectors one vector per dimension the kernel is called separable. when the kernel is separable naive convolution is inefficient. it is equivalent to compose d one-dimensional convolutions with each of these vectors. the composed approach is significantly faster than performing one d-dimensional convolution with their outer product. the kernel also takes fewer parameters to represent as vectors. if the kernel is w elements wide in each dimension then naive multidimensional convolution requires o runtime and parameter storage space while separable convolution requires ow d runtime and parameter storage space. of course not every convolution can be represented in this way. devising faster ways of performing convolution or approximate convolution without harming the accuracy of the model is an active area of research. even techniques that improve the efficiency of only forward propagation are useful because in the commercial setting it is typical to devote more resources to deployment of a network than to its training. chapter convolutional networks random or unsupervised features typically the most expensive part of convolutional network training is learning the features. the output layer is usually relatively inexpensive due to the small number of features provided as input to this layer after passing through several layers of pooling. when performing supervised training with gradient descent every gradient step requires a complete run of forward propagation and backward propagation through the entire network. one way to reduce the cost of convolutional network training is to use features that are not trained in a supervised fashion. coates et al. there are three basic strategies for obtaining convolution kernels without supervised training. one is to simply initialize them randomly. another is to design them by hand for example by setting each kernel to detect edges at a certain orientation or scale. finally one can learn the kernels with an unsupervised k-means clustering to small criterion. for example image patches then use each learned centroid as a convolution kernel. part iii describes many more unsupervised learning approaches. learning the features with an unsupervised criterion allows them to be determined separately from the classifier layer at the top of the architecture. one can then extract the features for the entire training set just once essentially constructing a new training set for the last layer. learning the last layer is then typically a convex optimization problem assuming the last layer is something like logistic regression or an svm. apply et al. et al. pinto cox and pinto random filters often work surprisingly well in convolutional networks et al. et al. saxe showed that layers consisting of convolution following by pooling naturally become frequency selective and translation invariant when assigned random weights. they argue that this provides an inexpensive way to choose the architecture of a convolutional network first evaluate the performance of several convolutional network architectures by training only the last layer then take the best of these architectures and train the entire architecture using a more expensive approach. saxe an intermediate approach is to learn the features but using methods that do not require full forward and back-propagation at every gradient step. as with multilayer perceptrons we use greedy layer-wise pretraining to train the first layer in isolation then extract all features from the first layer only once then train the second layer in isolation given those features and so on. chapter has described how to perform supervised greedy layer-wise pretraining and part extends this to greedy layer-wise pretraining using an unsupervised criterion at each layer. the canonical example of greedy layer-wise pretraining of a convolutional model is the convolutional deep belief network convolutional networks offer lee et al. iii chapter convolutional networks do with coates et al. us the opportunity to take the pretraining strategy one step further than is possible with multilayer perceptrons. instead of training an entire convolutional layer at a k-means. time we can train a model of a small patch as we can then use the parameters from this patch-based model to define the kernels of a convolutional layer. this means that it is possible to use unsupervised learning to train a convolutional network without ever using convolution during the training process. using this approach we can train very large models and incur a high ranzato et al. jarrett et al. computational cost only at inference time kavukcuoglu this approach was popular from roughly when labeled datasets were small and computational power was more limited. today most convolutional networks are trained in a purely supervised fashion using full forward and back-propagation through the entire network on each training iteration. coates et al. et al. as with other approaches to unsupervised pretraining it remains difficult to tease apart the cause of some of the benefits seen with this approach. unsupervised pretraining may offer some regularization relative to supervised training or it may simply allow us to train much larger architectures due to the reduced computational cost of the learning rule. the neuroscientific basis for convolutional net works convolutional networks are perhaps the greatest success story of biologically inspired artificial intelligence. though convolutional networks have been guided by many other fields some of the key design principles of neural networks were drawn from neuroscience. the history of convolutional networks begins with neuroscientific experiments long before the relevant computational models were developed. neurophysiologists david hubel and torsten wiesel collaborated for several years to determine many of the most basic facts about how the mammalian vision system works and wiesel their accomplishments were eventually recognized with a nobel prize. their findings that have had the greatest influence on contemporary deep learning models were based on recording the activity of individual neurons in cats. they observed how neurons in the cat s brain responded to images projected in precise locations on a screen in front of the cat. their great discovery was that neurons in the early visual system responded most strongly to very specific patterns of light such as precisely oriented bars but responded hardly at all to other patterns. chapter convolutional networks their work helped to characterize many aspects of brain function that are beyond the scope of this book. from the point of view of deep learning we can focus on a simplified cartoon view of brain function. in this simplified view we focus on a part of the brain called also known as the primary visual cortex. is the first area of the brain that begins to perform significantly advanced processing of visual input. in this cartoon view images are formed by light arriving in the eye and stimulating the retina the light-sensitive tissue in the back of the eye. the neurons in the retina perform some simple preprocessing of the image but do not substantially alter the way it is represented. the image then passes through the optic nerve and a brain region called the lateral geniculate nucleus. the main role as far as we are concerned here of both of these anatomical regions is primarily just to carry the signal from the eye to which is located at the back of the head. a convolutional network layer is designed to capture three properties of is arranged in a spatial map. it actually has a two-dimensional structure mirroring the structure of the image in the retina. for example light arriving at the lower half of the retina affects only the corresponding half of convolutional networks capture this property by having their features defined in terms of two dimensional maps. contains many simple cells. a simple cell s activity can to some extent be characterized by a linear function of the image in a small spatially localized receptive field. the detector units of a convolutional network are designed to emulate these properties of simple cells. also contains many complex cells. these cells respond to features that are similar to those detected by simple cells but complex cells are invariant to small shifts in the position of the feature. this inspires the pooling units of convolutional networks. complex cells are also invariant to some changes in lighting that cannot be captured simply by pooling over spatial locations. these invariances have inspired some of the cross-channel pooling strategies in convolutional networks such as maxout units goodfellow et al. though we know the most about it is generally believed that the same basic principles apply to other areas of the visual system. in our cartoon view of the visual system the basic strategy of detection followed by pooling is repeatedly applied as we move deeper into the brain. as we pass through multiple anatomical layers of the brain we eventually find cells that respond to some specific concept and are invariant to many transformations of the input. these cells have been chapter convolutional networks nicknamed grandmother cells the idea is that a person could have a neuron that activates when seeing an image of their grandmother regardless of whether she appears in the left or right side of the image whether the image is a close-up of her face or zoomed out shot of her entire body whether she is brightly lit or in shadow etc. these grandmother cells have been shown to actually exist in the human brain researchers in a region called the medial temporal lobe tested whether individual neurons would respond to photos of famous individuals. they found what has come to be called the halle berry neuron an individual neuron that is activated by the concept of halle berry. this neuron fires when a person sees a photo of halle berry a drawing of halle berry or even text containing the words halle berry. of course this has nothing to do with halle berry herself other neurons responded to the presence of bill clinton jennifer aniston etc. quiroga et al. these medial temporal lobe neurons are somewhat more general than modern convolutional networks which would not automatically generalize to identifying a person or object when reading its name. the closest analog to a convolutional network s last layer of features is a brain area called the inferotemporal cortex when viewing an object information flows from the retina through the lgn to then onward to then then it. this happens within the first of glimpsing an object. if a person is allowed to continue looking at the object for more time then information will begin to flow backwards as the brain uses top-down feedback to update the activations in the lower level brain areas. however if we interrupt the person s gaze and observe only the firing rates that result from the first of mostly feedforward activation then it proves to be very similar to a convolutional network. convolutional networks can predict it firing rates and also perform very similarly to limited humans on object recognition tasks dicarlo that being said there are many differences between convolutional networks and the mammalian vision system. some of these differences are well known to computational neuroscientists but outside the scope of this book. some of these differences are not yet known because many basic questions about how the mammalian vision system works remain unanswered. as a brief list the human eye is mostly very low resolution except for a tiny patch called the fovea. the fovea only observes an area about the size of a thumbnail held at arms length. though we feel as if we can see an entire scene in high resolution this is an illusion created by the subconscious part of our brain as it stitches together several glimpses of small areas. most convolutional networks actually receive large full resolution photographs as input. the human brain makes chapter convolutional networks several eye movements called saccades to glimpse the most visually salient or task-relevant parts of a scene. incorporating similar attention mechanisms into deep learning models is an active research direction. in the context of deep learning attention mechanisms have been most successful for natural language processing as described in section several visual models with foveation mechanisms have been developed but so far have not become the dominant approach and hinton denil et al. the human visual system is integrated with many other senses such as hearing and factors like our moods and thoughts. convolutional networks so far are purely visual. the human visual system does much more than just recognize objects. it is able to understand entire scenes including many objects and relationships between objects and processes rich geometric information needed for our bodies to interface with the world. convolutional networks have been applied to some of these problems but these applications are in their infancy. even simple brain areas like are heavily impacted by feedback from higher levels. feedback has been explored extensively in neural network models but has not yet been shown to offer a compelling improvement. while feedforward it firing rates capture much of the same information as convolutional network features it is not clear how similar the intermediate computations are. the brain probably uses very different activation and pooling functions. an individual neuron s activation probably is not wellcharacterized by a single linear filter response. a recent model of involves multiple quadratic filters for each neuron indeed our cartoon picture of simple cells and complex cells might create a nonexistent distinction simple cells and complex cells might both be the same kind of cell but with their parameters enabling a continuum of behaviors ranging from what we call simple to what we call complex. rust et al. it is also worth mentioning that neuroscience has told us relatively little about how to train convolutional networks. model structures with parameter sharing across multiple spatial locations date back to early connectionist models of vision but these models did not use the modern back-propagation algorithm and gradient descent. for example the neocognitron incorporated most of the model architecture design elements of the modern convolutional network but relied on a layer-wise unsupervised clustering algorithm. marr and poggio chapter convolutional networks lang and hinton introduced the use of back-propagation to train time-delay neural networks to use contemporary terminology tdnns are one-dimensional convolutional networks applied to time series. backpropagation applied to these models was not inspired by any neuroscientific observation and is considered by some to be biologically implausible. following the success of back-propagation-based training of tdnns developed the modern convolutional network by applying the same training algorithm to convolution applied to images. lecun et al. so far we have described how simple cells are roughly linear and selective for certain features complex cells are more nonlinear and become invariant to some transformations of these simple cell features and stacks of layers that alternate between selectivity and invariance can yield grandmother cells for very specific phenomena. we have not yet described precisely what these individual cells detect. in a deep nonlinear network it can be difficult to understand the function of individual cells. simple cells in the first layer are easier to analyze because their responses are driven by a linear function. in an artificial neural network we can just display an image of the convolution kernel to see what the corresponding channel of a convolutional layer responds to. in a biological neural network we do not have access to the weights themselves. instead we put an electrode in the neuron itself display several samples of white noise images in front of the animal s retina and record how each of these samples causes the neuron to activate. we can then fit a linear model to these responses in order to obtain an approximation of the neuron s weights. this approach is known as reverse correlation and shapley reverse correlation shows us that most cells have weights that are described by gabor functions. the gabor function describes the weight at a point in the image. we can think of an image as being a function of coordinates ix y. likewise we can think of a simple cell as sampling the image at a set of locations defined by a set of x coordinates x and a set of y coordinates y and applying weights that are also a function of the location wx y. from this point of view the response of a simple cell to an image is given by s i x x y y w x y i x y specifically w x y takes the form of a gabor function w x y exp x y f y x where xx y y cosfx cos x y sin y chapter convolutional networks and x y x sin y y cos here x y f and are parameters that control the properties shows some examples of gabor functions with of the gabor function. figure different settings of these parameters. the parameters and define a coordinate system. we translate and rotate x and y to form x specifically the simple cell will respond to image features centered at the point y and it will respond to changes in brightness as we move along a line rotated radians from the horizontal. and y viewed as a function of x and y brightness as we move along the x gaussian function and the other is a cosine function. the function w then responds to changes in axis. it has two important factors one is a the gaussian factor exp can be seen as a gating term that ensures the simple cell will only respond to values near where x are both zero in other words near the center of the cell s receptive field. the scaling factor adjusts the total magnitude of the simple cell s response while x and y control how quickly its receptive field falls off. and y yy xx the cosine factor cosfx brightness along the x and controls its phase offset. controls how the simple cell responds to changing axis. the parameter f controls the frequency of the cosine altogether this cartoon view of simple cells means that a simple cell responds to a specific spatial frequency of brightness in a specific direction at a specific location. simple cells are most excited when the wave of brightness in the image has the same phase as the weights. this occurs when the image is bright where the weights are positive and dark where the weights are negative. simple cells are most inhibited when the wave of brightness is fully out of phase with the weights when the image is dark where the weights are positive and bright where the weights are negative. the cartoon view of a complex cell is that it computes the norm of the an vector containing two simple cells responses c i important special case occurs when has all of the same parameters as except for and is set such that is one quarter cycle out of phase with in this case and form a quadrature pair. a complex cell defined in this way contains responds when the gaussian reweighted image ix y exp x x a high amplitude sinusoidal wave with frequency f in direction near regardless of the phase offset of this wave. in other words the complex cell is invariant to small translations of the image in direction or to negating the image yy chapter convolutional networks figure gabor functions with a variety of parameter settings. white indicates large positive weight black indicates large negative weight and the background gray corresponds to zero weight. functions with different values of the parameters that control the coordinate system x and each gabor function in this grid is assigned a value of and y proportional to its position in its grid and is chosen so that each gabor filter is sensitive to the direction radiating out from the center of the grid. for the other two plots y and are fixed to zero. gabor functions with different gaussian scale parameters x and y. gabor functions are arranged in increasing width x as we move left to right through the grid and increasing height y as we move top to bottom. for the other two plots the values are fixed to f and as we move top to bottom f increases and as we move left to right increases. for the other two plots gabor functions with different sinusoid parameters the image width. the image width. is fixed to and is fixed to f black with white and vice versa. olshausen and field some of the most striking correspondences between neuroscience and machine learning come from visually comparing the features learned by machine learning models with those employed by showed that a simple unsupervised learning algorithm sparse coding learns features with receptive fields similar to those of simple cells. since then we have found that an extremely wide variety of statistical learning algorithms learn features with gabor-like functions when applied to natural images. this includes most deep learning algorithms which learn these features in their first layer. figure shows some examples. because so many different learning algorithms learn edge detectors it is difficult to conclude that any specific learning algorithm is the right model of the brain just based on the features that it learns it can certainly be a bad sign if an algorithm does learn some sort of edge detector when applied to natural images. these features are an important part of the statistical structure of natural images and can be recovered by many different approaches to statistical modeling. see hyv rinen for a review of the field of natural image statistics. et al. not chapter convolutional networks figure many machine learning algorithms learn features that detect edges or specific colors of edges when applied to natural images. these feature detectors are reminiscent of the gabor functions known to be present in primary visual cortex. learned by an unsupervised learning algorithm and slab sparse coding applied to small image patches. kernels learned by the first layer of a fully supervised convolutional maxout network. neighboring pairs of filters drive the same maxout unit. convolutional networks and the history of deep learning convolutional networks have played an important role in the history of deep learning. they are a key example of a successful application of insights obtained by studying the brain to machine learning applications. they were also some of the first deep models to perform well long before arbitrary deep models were considered viable. convolutional networks were also some of the first neural networks to solve important commercial applications and remain at the forefront of commercial applications of deep learning today. for example in the the neural network research group at att developed a convolutional network for reading checks by the end of the this system deployed by nec was reading over of all the checks in the us. later several ocr and handwriting recognition systems based on convolutional nets were deployed by for more details on such applications microsoft and more modern applications of convolutional networks. see lecun et al. for a more in-depth history of convolutional networks up to lecun et al. see chapter simard et al. convolutional networks were also used to win many contests. the current intensity of commercial interest in deep learning began when krizhevsky et al. won the imagenet object recognition challenge but convolutional networks chapter convolutional networks had been used to win other machine learning and computer vision contests with less impact for years earlier. convolutional nets were some of the first working deep networks trained with back-propagation. it is not entirely clear why convolutional networks succeeded when general back-propagation networks were considered to have failed. it may simply be that convolutional networks were more computationally efficient than fully connected networks so it was easier to run multiple experiments with them and tune their implementation and hyperparameters. larger networks also seem to be easier to train. with modern hardware large fully connected networks appear to perform reasonably on many tasks even when using datasets that were available and activation functions that were popular during the times when fully connected networks were believed not to work well. it may be that the primary barriers to the success of neural networks were psychological did not expect neural networks to work so they did not make a serious effort to use neural networks. whatever the case it is fortunate that convolutional networks performed well decades ago. in many ways they carried the torch for the rest of deep learning and paved the way to the acceptance of neural networks in general. convolutional networks provide a way to specialize neural networks to work with data that has a clear grid-structured topology and to scale such models to very large size. this approach has been the most successful on a two-dimensional image topology. to process one-dimensional sequential data we turn next to another powerful specialization of the neural networks framework recurrent neural networks. chapter sequence modeling recurrent and recursive nets rumelhart et al. recurrent neural networks or rnns are a family of neural networks for processing sequential data. much as a convolutional network is a neural network that is specialized for processing a grid of values x such as an image a recurrent neural network is a neural network that is specialized for processing a sequence of values x just as convolutional networks can readily scale to images with large width and height and some convolutional networks can process images of variable size recurrent networks can scale to much longer sequences than would be practical for networks without sequence-based specialization. most recurrent networks can also process sequences of variable length. to go from multi-layer networks to recurrent networks we need to take advantage of one of the early ideas found in machine learning and statistical models of the sharing parameters across different parts of a model. parameter sharing makes it possible to extend and apply the model to examples of different forms lengths here and generalize across them. if we had separate parameters for each value of the time index we could not generalize to sequence lengths not seen during training nor share statistical strength across different sequence lengths and across different positions in time. such sharing is particularly important when a specific piece of information can occur at multiple positions within the sequence. for example consider the two sentences i went to nepal in and in i went to nepal. if we ask a machine learning model to read each sentence and extract the year in which the narrator went to nepal we would like it to recognize the year as the relevant piece of information whether it appears in the sixth chapter sequence modeling recurrent and recursive nets word or the second word of the sentence. suppose that we trained a feedforward network that processes sentences of fixed length. a traditional fully connected feedforward network would have separate parameters for each input feature so it would need to learn all of the rules of the language separately at each position in the sentence. by comparison a recurrent neural network shares the same weights across several time steps. et al. et al. lang a related idea is the use of convolution across a temporal sequence. this convolutional approach is the basis for time-delay neural networks and hinton waibel the convolution operation allows a network to share parameters across time but is shallow. the output of convolution is a sequence where each member of the output is a function of a small number of neighboring members of the input. the idea of parameter sharing manifests in the application of the same convolution kernel at each time step. recurrent networks share parameters in a different way. each member of the output is a function of the previous members of the output. each member of the output is produced using the same update rule applied to the previous outputs. this recurrent formulation results in the sharing of parameters through a very deep computational graph. for the simplicity of exposition we refer to rnns as operating on a sequence that contains vectors x with the time step index t ranging from in practice recurrent networks usually operate on minibatches of such sequences with a different sequence length for each member of the minibatch. we have omitted the minibatch indices to simplify notation. moreover the time step index need not literally refer to the passage of time in the real world. sometimes it refers only to the position in the sequence. rnns may also be applied in two dimensions across spatial data such as images and even when applied to data involving time the network may have connections that go backwards in time provided that the entire sequence is observed before it is provided to the network. this chapter extends the idea of a computational graph to include cycles. these cycles represent the influence of the present value of a variable on its own value at a future time step. such computational graphs allow us to define recurrent neural networks. we then describe many different ways to construct train and use recurrent neural networks. for more information on recurrent neural networks than is available in this chapter we refer the reader to the textbook of graves chapter sequence modeling recurrent and recursive nets unfolding computational graphs a computational graph is a way to formalize the structure of a set of computations such as those involved in mapping inputs and parameters to outputs and loss. please refer to section for a general introduction. in this section we explain the idea of unfolding a recursive or recurrent computation into a computational graph that has a repetitive structure typically corresponding to a chain of events. unfolding this graph results in the sharing of parameters across a deep network structure. for example consider the classical form of a dynamical system s s t where s is called the state of the system. equation is recurrent because the definition of s at time t refers back to the same definition at time t for a finite number of time steps the graph can be unfolded by applying time times. for example if we unfold equation for the definition steps we obtain f f unfolding the equation by repeatedly applying the definition in this way has yielded an expression that does not involve recurrence. such an expression can now be represented by a traditional directed acyclic computational graph. the unfolded computational graph of equation is illustrated in figure and equation s ff st st ff s ff s ts t ff s figure the classical dynamical system described by equation illustrated as an unfolded computational graph. each node represents the state at some time t and the function f maps the state at t to the state at t the same parameters same value of are used for all time steps. used to parametrize f as another example let us consider a dynamical system driven by an external signal x t s s x chapter sequence modeling recurrent and recursive nets where we see that the state now contains information about the whole past sequence. recurrent neural networks can be built in many different ways. much as almost any function can be considered a feedforward neural network essentially any function involving recurrence can be considered a recurrent neural network. many recurrent neural networks use equation or a similar equation to define the values of their hidden units. to indicate that the state is the hidden h to represent units of the network we now rewrite equation the state using the variable t h h x illustrated in figure as output layers that read information out of the state typical rnns will add extra architectural features such h to make predictions. t x when the recurrent network is trained to perform a task that requires predicting the future from the past the network typically learns to use h as a kind of lossy summary of the task-relevant aspects of the past sequence of inputs up to t. this summary is in general necessarily lossy since it maps an arbitrary length sequence t x to a fixed length vector h depending on the training criterion this summary might selectively keep some aspects of the past sequence with more precision than other aspects. for example if the rnn is used in statistical language modeling typically to predict the next word given previous words it may not be necessary to store all of the information in the input sequence up to time t but rather only enough information to predict the rest of the sentence. the most demanding situation is when we ask h to be rich enough to allow one to approximately recover the input sequence as in autoencoder frameworks h ff unfold hh xx ht ht h h th t h ff ff ff f xt xt x t x tx figure a recurrent network with no outputs. this recurrent network just processes information from the input x by incorporating it into the state h that is passed forward through time. diagram. the black square indicates a delay of a single time step. the same network seen as an unfolded computational graph where each node is now associated with one particular time instance. equation can be drawn in two different ways. one way to draw the rnn is with a diagram containing one node for every component that might exist in a chapter sequence modeling recurrent and recursive nets physical implementation of the model such as a biological neural network. in this view the network defines a circuit that operates in real time with physical parts whose current state can influence their future state as in the left of figure throughout this chapter we use a black square in a circuit diagram to indicate that an interaction takes place with a delay of a single time step from the state at time t to the state at time t the other way to draw the rnn is as an unfolded computational graph in which each component is represented by many different variables with one variable per time step representing the state of the component at that point in time. each variable for each time step is drawn as a separate node of the computational graph as in the right of figure what we call unfolding is the operation that maps a circuit as in the left side of the figure to a computational graph with repeated pieces as in the right side. the unfolded graph now has a size that depends on the sequence length. we can represent the unfolded recurrence after t steps with a function g h x t t x t h x x the function g takes the whole past sequence x t as input and produces the current state but the unfolded recurrent structure allows us to factorize g into repeated application of a function f. the unfolding process thus introduces two major advantages t x regardless of the sequence length the learned model always has the same input size because it is specified in terms of transition from one state to another state rather than specified in terms of a variable-length history of states. it is possible to use the same transition function f with the same parameters at every time step. these two factors make it possible to learn a single model f that operates on all time steps and all sequence lengths rather than needing to learn a separate model g for all possible time steps. learning a single shared model allows generalization to sequence lengths that did not appear in the training set and allows the model to be estimated with far fewer training examples than would be required without parameter sharing. both the recurrent graph and the unrolled graph have their uses. the recurrent graph is succinct. the unfolded graph provides an explicit description of which computations to perform. the unfolded graph also helps to illustrate the idea of chapter sequence modeling recurrent and recursive nets information flow forward in time outputs and losses and backward in time gradients by explicitly showing the path along which this information flows. recurrent neural networks armed with the graph unrolling and parameter sharing ideas of section can design a wide variety of recurrent neural networks. we yy ll oo vv hh uu xx unfold ww ww h yt yt lt lt ot ot vv ht ht y y ty t l l tl t o t o to ww vv ww vv ww h h th t h uu uu uu xt xt x x tx t figure the computational graph to compute the training loss of a recurrent network that maps an input sequence of x values to a corresponding sequence of output o values. a loss l measures how far each o is from the corresponding training target y when using softmax outputs we assume o is the unnormalized log probabilities. the loss l internally computes y softmaxo and compares this to the target y. the rnn has input to hidden connections parametrized by a weight matrix u hidden-to-hidden recurrent connections parametrized by a weight matrix w and hidden-to-output connections parametrized by a weight matrix v equation rnn and its loss drawn with recurrent connections. same seen as an timeunfolded computational graph where each node is now associated with one particular time instance. defines forward propagation in this model. some examples of important design patterns for recurrent neural networks include the following chapter sequence modeling recurrent and recursive nets recurrent networks that produce an output at each time step and have recurrent connections between hidden units illustrated in figure recurrent networks that produce an output at each time step and have recurrent connections only from the output at one time step to the hidden units at the next time step illustrated in figure recurrent networks with recurrent connections between hidden units that read an entire sequence and then produce a single output illustrated in figure figure most of the chapter. is a reasonably representative example that we return to throughout and equation the recurrent neural network of figure is universal in the sense that any function computable by a turing machine can be computed by such a recurrent network of a finite size. the output can be read from the rnn after a number of time steps that is asymptotically linear in the number of time steps used by the turing machine and asymptotically linear in the length of the input and sontag siegelmann siegelmann and sontag hyotyniemi the functions computable by a turing machine are discrete so these results regard exact implementation of the function not approximations. the rnn when used as a turing machine takes a binary sequence as input and its outputs must be discretized to provide a binary output. it is possible to compute all functions in this setting using a single specific rnn of finite size and sontag use units. the input of the turing machine is a specification of the function to be computed so the same network that simulates this turing machine is sufficient for all problems. the theoretical rnn used for the proof can simulate an unbounded stack by representing its activations and weights with rational numbers of unbounded precision. we now develop the forward propagation equations for the rnn depicted in figure the figure does not specify the choice of activation function for the hidden units. here we assume the hyperbolic tangent activation function. also the figure does not specify exactly what form the output and loss function take. here we assume that the output is discrete as if the rnn is used to predict words or characters. a natural way to represent discrete variables is to regard the output o as giving the unnormalized log probabilities of each possible value of the discrete variable. we can then apply the softmax operation as a post-processing step to obtain a vector y of normalized probabilities over the output. forward propagation begins with a specification of the initial state then for each time step from chapter sequence modeling recurrent and recursive nets yy ll oo hh v u xx o w unfold y y lt lt ot ot y y ty t l t l tl o t o to w w w w v v v ht ht u xt xt h t h th h u u x t x tx figure an rnn whose only recurrence is the feedback connection from the output to the hidden layer. at each time step t the input is x t the hidden layer activations are h the outputs are o the targets are y and the loss is l diagram. computational graph. such an rnn is less powerful express a smaller set of functions than those in the family represented by figure the rnn in figure can choose to put any information it wants about the past into its hidden representation h and transmit h to the future. the rnn in this figure is trained to put a specific output value into o and o is the only information it is allowed to send to the future. there are no direct connections from h going forward. the previous h is connected to the present only indirectly via the predictions it was used to produce. unless o is very high-dimensional and rich it will usually lack important information from the past. this makes the rnn in this figure less powerful but it may be easier to train because each time step can be trained in isolation from the others allowing greater parallelization during training as described in section chapter sequence modeling recurrent and recursive nets t to t we apply the following update equations a t w h h tanha o v h y softmaxo u x where the parameters are the bias vectors b and c along with the weight matrices u v and w respectively for input-to-hidden hidden-to-output and hidden-tohidden connections. this is an example of a recurrent network that maps an input sequence to an output sequence of the same length. the total loss for a values would then be just given sequence of the sum of the losses over all the time steps. for example if l is the negative log-likelihood of y given x then values paired with a sequence of x y l x y x y log pmodel l t t y x is given by reading the entry for y where pmodel from the model s output vector y computing the gradient of this loss function with respect to the parameters is an expensive operation. the gradient computation involves performing a forward propagation pass moving left to right through our illustration of the unrolled graph in figure followed by a backward propagation pass moving right to left through the graph. the runtime is o and cannot be reduced by parallelization because the forward propagation graph is inherently sequential each time step may only be computed after the previous one. states computed in the forward pass must be stored until they are reused during the backward pass so the memory cost is also o the back-propagation algorithm applied to the unrolled graph with o cost is called back-propagation through time or bptt and is discussed further in section the network with recurrence between hidden units is thus very powerful but also expensive to train. is there an alternative? teacher forcing and networks with output recurrence the network with recurrent connections only from the output at one time step to is strictly less powerful the hidden units at the next time step in figure chapter sequence modeling recurrent and recursive nets because it lacks hidden-to-hidden recurrent connections. for example it cannot simulate a universal turing machine. because this network lacks hidden-to-hidden recurrence it requires that the output units capture all of the information about the past that the network will use to predict the future. because the output units are explicitly trained to match the training set targets they are unlikely to capture the necessary information about the past history of the input unless the user knows how to describe the full state of the system and provides it as part of the training set targets. the advantage of eliminating hidden-to-hidden recurrence is that for any loss function based on comparing the prediction at time t to the training target at time t all the time steps are decoupled. training can thus be parallelized with the gradient for each step t computed in isolation. there is no need to compute the output for the previous time step first because the training set provides the ideal value of that output. l l y y o o v h h h ht ht w w w w u u u u xt xt x x x x figure time-unfolded recurrent neural network with a single output at the end of the sequence. such a network can be used to summarize a sequence and produce a fixed-size representation used as input for further processing. there might be a target right at the end depicted here or the gradient on the output o can be obtained by back-propagating from further downstream modules. models that have recurrent connections from their outputs leading back into the model may be trained with teacher forcing. teacher forcing is a procedure that emerges from the maximum likelihood criterion in which during training the model receives the ground truth output y as input at time t we can see this by examining a sequence with two time steps. the conditional maximum chapter sequence modeling recurrent and recursive nets y y lt lt ot ot v ht ht u xt xt w y l o v h u x ot ot w v ht ht u xt xt o v h u x train time test time figure illustration of teacher forcing. teacher forcing is a training technique that is applicable to rnns that have connections from their output to their hidden states at the next time step. train time we feed the correct output y drawn from the train set as input to h when the model is deployed the true output is generally not known. in this case we approximate the correct output y with the model s output o and feed the output back into the model. t likelihood criterion is chapter sequence modeling recurrent and recursive nets log p y log p y log p y in this example we see that at time t the model is trained to maximize the conditional probability of given both the x sequence so far and the previous y value from the training set. maximum likelihood thus specifies that during training rather than feeding the model s own output back into itself these connections should be fed with the target values specifying what the correct output should be. this is illustrated in figure we originally motivated teacher forcing as allowing us to avoid back-propagation through time in models that lack hidden-to-hidden connections. teacher forcing may still be applied to models that have hidden-to-hidden connections so long as they have connections from the output at one time step to values computed in the next time step. however as soon as the hidden units become a function of earlier time steps the bptt algorithm is necessary. some models may thus be trained with both teacher forcing and bptt. the disadvantage of strict teacher forcing arises if the network is going to be later used in an open-loop mode with the network outputs samples from the output distribution fed back as input. in this case the kind of inputs that the network sees during training could be quite different from the kind of inputs that it will see at test time. one way to mitigate this problem is to train with both teacher-forced inputs and with free-running inputs for example by predicting the correct target a number of steps in the future through the unfolded recurrent output-to-input paths. in this way the network can learn to take into account input conditions as those it generates itself in the free-running mode not seen during training and how to map the state back towards one that will make the network generate proper outputs after a few steps. another approach et al. to mitigate the gap between the inputs seen at train time and the inputs seen at test time randomly chooses to use generated values or actual data values as input. this approach exploits a curriculum learning strategy to gradually use more of the generated values as input. computing the gradient in a recurrent neural network computing the gradient through a recurrent neural network is straightforward. one simply applies the generalized back-propagation algorithm of section chapter sequence modeling recurrent and recursive nets to the unrolled computational graph. no specialized algorithms are necessary. gradients obtained by back-propagation may then be used with any general-purpose gradient-based techniques to train an rnn. and equation to gain some intuition for how the bptt algorithm behaves we provide an example of how to compute gradients by bptt for the rnn equations above the nodes of our computational graph include the parameters u v w b and c as well as the sequence of nodes indexed by t for x h o and l for each node n we need to compute the gradient l recursively based on the gradient computed at nodes that follow it in the graph. we start the recursion with the nodes immediately preceding the final loss n l l in this derivation we assume that the outputs o are used as the argument to the softmax function to obtain the vector y of probabilities over the output. we also assume that the loss is the negative log-likelihood of the true target y given the o l on the outputs at time step t for all i t is as input so far. the gradient follows o l i l o i l l l o i y i we work our way backwards starting from the end of the sequence. at the final time step h only has o as a descendent so its gradient is simple h l v o l. we can then iterate backwards in time to back-propagate gradients through time down to t noting that h t has as descendents both from t o and h its gradient is thus given by t h l t h h w o h h t l t l diag h t h v o l o l where diag t hidden unit at time i i h t indicates the diagonal matrix containing the elements this is the jacobian of the hyperbolic tangent associated with the t chapter sequence modeling recurrent and recursive nets once the gradients on the internal nodes of the computational graph are obtained we can obtain the gradients on the parameter nodes. because the parameters are shared across many time steps we must take some care when denoting calculus operations involving these variables. the equations we wish to that computes the contribution implement use the bprop method of section w f of a single edge in the computational graph to the gradient. however the operator used in calculus takes into account the contribution of w to the value of f due to edges in the computational graph. to resolve this ambiguity we introduce dummy variables w that are defined to be copies of w but with each w used only at time step t. we may then use w to denote the contribution of the weights at time step to the gradient. all t using this notation the gradient on the remaining parameters is given by t t i i diag o c h b t t t t t o l h l l o i l h i l h i i v o i w h i u h h h i diag t t cl bl v l wl ul t h l h h l x o l h h l diag o l h t we do not need to compute the gradient with respect to x for training because it does not have any parameters as ancestors in the computational graph defining the loss. chapter sequence modeling recurrent and recursive nets recurrent networks as directed graphical models in the example recurrent network we have developed so far the losses l were cross-entropies between training targets y and outputs o as with a feedforward network it is in principle possible to use almost any loss with a recurrent network. the loss should be chosen based on the task. as with a feedforward network we usually wish to interpret the output of the rnn as a probability distribution and we usually use the cross-entropy associated with that distribution to define the loss. mean squared error is the cross-entropy loss associated with an output distribution that is a unit gaussian for example just as with a feedforward network. when we use a predictive log-likelihood training objective such as equation we train the rnn to estimate the conditional distribution of the next sequence element y given the past inputs. this may mean that we maximize the log-likelihood log y x or if the model includes connections from the output at one time step to the next time step t x y log y in the past to the current y decomposing the joint probability over the sequence of y values as a series of one-step probabilistic predictions is one way to capture the full joint distribution across the whole sequence. when we do not feed past y values as inputs that condition the next step prediction the directed graphical model contains no edges from any y in this case the outputs y are conditionally independent given the sequence of x values. when we do feed the actual y values their prediction but the actual observed or generated values back into the network the directed graphical model contains edges from all y values in the past to the current y value. y as a simple example let us consider the case where the rnn models only a sequence of scalar random variables y with no additional inputs x. the input at time step t is simply the output at time step t the rnn then defines a directed graphical model over the y variables. we parametrize the joint distribution of these observations using the chain rule for conditional probabilities p y p y p t y t y where the right-hand side of the bar is empty for t of course. hence the according to such a model negative log-likelihood of a set of values y chapter sequence modeling recurrent and recursive nets y y figure fully connected graphical model for a sequence y y every past observation y may influence the conditional distribution of some y t i given the previous values. parametrizing the graphical model directly according to this graph in equation might be very inefficient with an ever growing number of inputs and parameters for each element of the sequence. rnns obtain the same full connectivity but efficient parametrization as illustrated in figure is where l l t l log p y y t y t y y h y y y figure introducing the state variable in the graphical model of the rnn even though it is a deterministic function of its inputs helps to see how we can obtain a very efficient parametrization based on equation h and y involves the same structure same number of inputs for each node and can share the same parameters with the other stages. every stage in the sequence the edges in a graphical model indicate which variables depend directly on other variables. many graphical models aim to achieve statistical and computational efficiency by omitting edges that do not correspond to strong interactions. for chapter sequence modeling recurrent and recursive nets y t k example it is common to make the markov assumption that the graphical model to y rather than containing should only contain edges from edges from the entire past history. however in some cases we believe that all past inputs should have an influence on the next element of the sequence. rnns are useful when we believe that the distribution over y may depend on a value of y from the distant past in a way that is not captured by the effect of y on y t y t one way to interpret an rnn as a graphical model is to view the rnn as defining a graphical model whose structure is the complete graph able to represent direct dependencies between any pair of y values. the graphical model over the y values with the complete graph structure is shown in figure the complete graph interpretation of the rnn is based on ignoring the hidden units h by marginalizing them out of the model. it is more interesting to consider the graphical model structure of rnns that results from regarding the hidden units h as random including the hidden units in the graphical model reveals that the rnn provides a very efficient parametrization of the joint distribution over the observations. suppose that we represented an arbitrary joint distribution over discrete values with a tabular representation an array containing a separate entry for each possible assignment of values with the value of that entry giving the probability of that assignment occurring. if y can take on k different values the tabular representation would have ok parameters. by comparison due to parameter sharing the number of parameters in the rnn is as a function of sequence length. the number of parameters in the rnn may be adjusted to control model capacity but is not forced to scale with sequence length. equation shows that the rnn parametrizes long-term relationships between variables efficiently using recurrent applications of the same function f and same parameters at each time step. figure illustrates the graphical model interpretation. incorporating the h nodes in the graphical model decouples the past and the future acting as an intermediate quantity between them. a variable y in the distant past may influence a variable y via its effect on h. the structure of this graph shows that the model can be efficiently parametrized by using the same conditional probability distributions at each time step and that when the variables are all observed the probability of the joint assignment of all variables can be evaluated efficiently. even with the efficient parametrization of the graphical model some operations remain computationally challenging. for example it is difficult to predict missing conditional distribution over these variables given their parents is deterministic. this is perfectly legitimate though it is somewhat rare to design a graphical model with such deterministic hidden units. chapter sequence modeling recurrent and recursive nets values in the middle of the sequence. the price recurrent networks pay for their reduced number of parameters is that optimizing the parameters may be difficult. the parameter sharing used in recurrent networks relies on the assumption that the same parameters can be used for different time steps. equivalently the assumption is that the conditional probability distribution over the variables at time t given the variables at time t is stationary meaning that the relationship between the previous time step and the next time step does not depend on t. in principle it would be possible to use t as an extra input at each time step and let the learner discover any time-dependence while sharing as much as it can between different time steps. this would already be much better than using a different conditional probability distribution for each t but the network would then have to extrapolate when faced with new values of to complete our view of an rnn as a graphical model we must describe how to draw samples from the model. the main operation that we need to perform is simply to sample from the conditional distribution at each time step. however there is one additional complication. the rnn must have some mechanism for determining the length of the sequence. this can be achieved in various ways. in the case when the output is a symbol taken from a vocabulary one can add a special symbol corresponding to the end of a sequence when that symbol is generated the sampling process stops. in the training set we insert this symbol as an extra member of the sequence immediately after x in each training example. another option is to introduce an extra bernoulli output to the model that represents the decision to either continue generation or halt generation at each time step. this approach is more general than the approach of adding an extra symbol to the vocabulary because it may be applied to any rnn rather than only rnns that output a sequence of symbols. for example it may be applied to an rnn that emits a sequence of real numbers. the new output unit is usually a sigmoid unit trained with the cross-entropy loss. in this approach the sigmoid is trained to maximize the log-probability of the correct prediction as to whether the sequence ends or continues at each time step. another way to determine the sequence length is to add an extra output to the model that predicts the integer itself. the model can sample a value of and then sample steps worth of data. this approach requires adding an extra input to the recurrent update at each time step so that the recurrent update is aware of whether it is near the end of the generated sequence. this extra input can either consist of the value of or can consist of the number of remaining t chapter sequence modeling recurrent and recursive nets time steps. without this extra input the rnn might generate sequences that end abruptly such as a sentence that ends before it is complete. this approach is based on the decomposition p x p p x the strategy of predicting directly is used for example by goodfellow et al. modeling sequences conditioned on context with rnns in the previous section we described how an rnn could correspond to a directed graphical model over a sequence of random variables y with no inputs x. of course our development of rnns as in equation included a sequence of inputs x in general rnns allow the extension of the graphical model view to represent not only a joint distribution over the y variables but also a conditional distribution over y given x. as discussed in the context of p feedforward networks in section can be reinterpreted as a model representing a conditional distribution p with we can extend such a model to represent a distribution p y x by using the same py as before but making a function of x. in the case of an rnn this can be achieved in different ways. we review here the most common and obvious choices. any model representing a variable previously we have discussed rnns that take a sequence of vectors x for t as input. another option is to take only a single vector x as input. when x is a fixed-size vector we can simply make it an extra input of the rnn that generates the y sequence. some common ways of providing an extra input to an rnn are as an extra input at each time step or as the initial state h or both. the interaction the first and most common approach is illustrated in figure between the input x and each hidden unit vector h is parametrized by a newly introduced weight matrix r that was absent from the model of only the sequence r is added as additional input to the hidden of y values. the same product x units at every time step. we can think of the choice of x as determining the value chapter sequence modeling recurrent and recursive nets r that is effectively a new bias parameter used for each of the hidden units. of x the weights remain independent of the input. we can think of this model as taking the parameters of the non-conditional model and turning them into where the bias parameters within are now a function of the input. y y lt lt ot ot y t y ty y u l u l tl t o t o to v v v ht ht w w h w h th t h u w s r r r r r xx figure an rnn that maps a fixed-length vector x into a distribution over sequences y. this rnn is appropriate for tasks such as image captioning where a single image is used as input to a model that then produces a sequence of words describing the image. each element y of the observed output sequence serves both as input the current time step and during training as target the previous time step. rather than receiving only a single vector x as input the rnn may receive correx x that makes a a sequence of vectors x as input. the rnn described in equation sponds to a conditional distribution p y conditional independence assumption that this distribution factorizes as p t x to remove the conditional independence assumption we can add connections from the output at time t to the hidden unit at time t as shown in figure the model can then represent arbitrary probability distributions over the y sequence. this kind of model representing a distribution over a sequence given another chapter sequence modeling recurrent and recursive nets yt yt lt lt ot ot v w h ht ht u xt xt y y ty t l t l tl r r r w o v h u x t o to v w w t h th h u x tx t figure a conditional recurrent neural network mapping a variable-length sequence of x values into a distribution over sequences of y values of the same length. compared to figure this rnn contains connections from the previous output to the current state. these connections allow this rnn to model an arbitrary distribution over sequences of y given sequences of x of the same length. the rnn of figure is only able to represent distributions in which the y values are conditionally independent from each other given the values. x chapter sequence modeling recurrent and recursive nets sequence still has one restriction which is that the length of both sequences must be the same. we describe how to remove this restriction in section yt yt lt lt ot ot g g ht ht xt xt y y ty t l l tl t o t o to g g tg t h h th t x x tx t figure computation of a typical bidirectional recurrent neural network meant to learn to map input sequences x to target sequences y with loss l at each step t. the h recurrence propagates information forward in time the right while the g recurrence propagates information backward in time the left. thus at each point t the output units o can benefit from a relevant summary of the past in its h input and from a relevant summary of the future in its g input. bidirectional rnns all of the recurrent networks we have considered up to now have a causal structure meaning that the state at time t only captures information from the past x and the present input x some of the models we have discussed t also allow information from past y values to affect the current state when the y values are available. however in many applications we want to output a prediction of y which may chapter sequence modeling recurrent and recursive nets depend on the whole input sequence. for example in speech recognition the correct interpretation of the current sound as a phoneme may depend on the next few phonemes because of co-articulation and potentially may even depend on the next few words because of the linguistic dependencies between nearby words if there are two interpretations of the current word that are both acoustically plausible we may have to look far into the future the past to disambiguate them. this is also true of handwriting recognition and many other sequence-to-sequence learning tasks described in the next section. bidirectional recurrent neural networks bidirectional rnns were invented they have been extremely suc in applications where that need arises such as handwriting speech recogniet al. baldi to address that need and paliwal cessful recognition tion and schmidhuber graves et al. graves and schmidhuber and bioinformatics et al. as the name suggests bidirectional rnns combine an rnn that moves forward through time beginning from the start of the sequence with another rnn that moves backward through time beginning from the end of the sequence. figure illustrates the typical bidirectional rnn with h standing for the state of the sub-rnn that moves forward through time and g standing for the state of the sub-rnn that moves backward through time. this allows the output units o to compute a representation that depends on both the past and the future but is most sensitive to the input values around time t without having to specify a fixed-size window around t one would have to do with a feedforward network a convolutional network or a regular rnn with a fixed-size look-ahead buffer. four this idea can be naturally extended to input such as images by having rnns each one going in one of the four directions up down left right. at each point j of a grid an output oij could then compute a representation that would capture mostly local information but could also depend on long-range inputs if the rnn is able to learn to carry that information. compared to a convolutional network rnns applied to images are typically more expensive but allow for long-range lateral interactions between features in the same feature map indeed the forward propagation equations for such rnns may be written in a form that shows they use a convolution that computes the bottom-up input to each layer prior to the recurrent propagation across the feature map that incorporates the lateral interactions. visin et al. kalchbrenner et al. chapter sequence modeling recurrent and recursive nets encoder-decoder sequence-to-sequence architec tures we have seen in figure vector. we have seen in figure sequence. we have seen in figures map an input sequence to an output sequence of the same length. how an rnn can map an input sequence to a fixed-size how an rnn can map a fixed-size vector to a how an rnn can and encoder x xn x xn x cc decoder y y y y y y y figure example of an encoder-decoder or sequence-to-sequence rnn architecture for learning to generate an output sequence yn y given an input sequence x xnx. it is composed of an encoder rnn that reads the input sequence and a decoder rnn that generates the output sequence computes the probability of a given output sequence. the final hidden state of the encoder rnn is used to compute a generally fixed-size context variable c which represents a semantic summary of the input sequence and is given as input to the decoder rnn. here we discuss how an rnn can be trained to map an input sequence to an output sequence which is not necessarily of the same length. this comes up in many applications such as speech recognition machine translation or question chapter sequence modeling recurrent and recursive nets answering where the input and output sequences in the training set are generally not of the same length their lengths might be related. we often call the input to the rnn the context. we want to produce a representation of this context c the context c might be a vector or sequence of vectors that summarize the input sequence x x xnx et al. cho et al. the simplest rnn architecture for mapping a variable-length sequence to and another variable-length sequence was first proposed by shortly after by sutskever who independently developed that architecture and were the first to obtain state-of-the-art translation using this approach. the former system is based on scoring proposals generated by another machine translation system while the latter uses a standalone recurrent network to generate the translations. these authors respectively called this architecture illustrated in figure the encoder-decoder or sequence-to-sequence architecture. the idea is very simple an encoder or reader or input rnn processes the input sequence. the encoder emits the context c usually as a simple function of its final hidden state. a decoder or writer or output rnn is conditioned on that fixed-length vector like in figure to generate the output sequence y y the innovation of this kind of architecture over those presented in earlier sections of this chapter is that the lengths n x and ny can vary from each other while previous architectures constrained nx ny in a sequence-to-sequence architecture the two rnns are trained jointly to maximize the average of log p y xnx over all the pairs of x and y sequences in the training set. the last state hnx of the encoder rnn is typically used as a representation c of the input sequence that is provided as input to the decoder rnn. if the context c is a vector then the decoder rnn is simply a vector-tosequence rnn as described in section as we have seen there are at least two ways for a vector-to-sequence rnn to receive input. the input can be provided as the initial state of the rnn or the input can be connected to the hidden units at each time step. these two ways can also be combined. there is no constraint that the encoder must have the same size of hidden layer as the decoder. one clear limitation of this architecture is when the context c output by the encoder rnn has a dimension that is too small to properly summarize a long sequence. this phenomenon was observed by in the context of machine translation. they proposed to make c a variable-length sequence rather than a fixed-size vector. additionally they introduced an attention mechanism that learns to associate elements of the sequence c to elements of the output bahdanau et al. chapter sequence modeling recurrent and recursive nets sequence. see section for more details. deep recurrent networks the computation in most rnns can be decomposed into three blocks of parameters and associated transformations from the input to the hidden state from the previous hidden state to the next hidden state and from the hidden state to the output. with the rnn architecture of figure each of these three blocks is associated with a single weight matrix. in other words when the network is unfolded each of these corresponds to a shallow transformation. by a shallow transformation we mean a transformation that would be represented by a single layer within a deep mlp. typically this is a transformation represented by a learned affine transformation followed by a fixed nonlinearity. would it be advantageous to introduce depth in each of these operations? experimental evidence strongly suggests so. the experimental evidence is in agreement with the idea that we need enough depth in order to perform the required mappings. see also schmidhuber el hihi and bengio for earlier work on deep rnns. pascanu jaeger et al. et al. or et al. graves et al. were the first to show a significant benefit of decomposing we can think the state of an rnn into multiple layers as in figure of the lower layers in the hierarchy depicted in figure a as playing a role in transforming the raw input into a representation that is more appropriate at the higher levels of the hidden state. pascanu go a step further and propose to have a separate mlp deep for each of the three blocks enumerated above as illustrated in figure b. considerations of representational capacity suggest to allocate enough capacity in each of these three steps but doing so by adding depth may hurt learning by making optimization difficult. in general it is easier to optimize shallower architectures and adding the extra depth of t to a variable figure in time step t become longer. for example if an mlp with a single hidden layer is used for the state-to-state transition we have doubled the length of the shortest path between variables in any two different time steps compared with the this ordinary rnn of figure b makes the shortest path from a variable in time step however as argued by pascanu et al. chapter sequence modeling recurrent and recursive nets y h x y h x y z h x figure a recurrent neural network can be made deep in many ways et al. the hidden recurrent state can be broken down into groups organized hierarchically. deeper computation an mlp can be introduced in the input-tohidden hidden-to-hidden and hidden-to-output parts. this may lengthen the shortest path linking different time steps. the path-lengthening effect can be mitigated by introducing skip connections. chapter sequence modeling recurrent and recursive nets can be mitigated by introducing skip connections in the hidden-to-hidden path as illustrated in figure c. recursive neural networks ll oo yy u w u w u w v v v v figure a recursive network has a computational graph that generalizes that of the recurrent network from a chain to a tree. a variable-size sequence x x can be mapped to a fixed-size representation output o with a fixed set of parameters weight matrices u v w the figure illustrates a supervised learning case in which some target is provided which is associated with the whole sequence. y recursive neural represent yet another generalization of recurrent networks with a different kind of computational graph which is structured as a deep tree rather than the chain-like structure of rnns. the typical computational recursive neural graph for a recursive network is illustrated in figure suggest to not abbreviate recursive neural network as rnn to avoid confusion with recurrent neural network. chapter sequence modeling recurrent and recursive nets networks were introduced by pollack reason was described by applied to processing data structures as input to neural nets computer vision and their potential use for learning to recursive networks have been successfully bottou as well as in in natural language processing socher et al. c socher et al. et al. one clear advantage of recursive nets over recurrent nets is that for a sequence of the same length the depth as the number of compositions of nonlinear operations can be drastically reduced from to olog which might help deal with long-term dependencies. an open question is how to best structure the tree. one option is to have a tree structure which does not depend on the data such as a balanced binary tree. in some application domains external methods can suggest the appropriate tree structure. for example when processing natural language sentences the tree structure for the recursive network can be fixed to the structure of the parse tree of the sentence provided by a natural language parser ideally one would like the learner itself to discover and infer the tree structure that is appropriate for any given input as suggested by socher et al. bottou and et al. frasconi many variants of the recursive net idea are possible. for example frasconi associate the data with a tree structure et al. and associate the inputs and targets with individual nodes of the tree. the computation performed by each node does not have to be the traditional artificial neuron computation transformation of all inputs followed by a monotone nonlinearity. for example propose using tensor operations and bilinear forms which have previously been found useful to model relationships between concepts when the concepts are represented by continuous vectors socher et al. bordes et al. et al. the challenge of long-term dependencies the mathematical challenge of learning long-term dependencies in recurrent networks was introduced in section the basic problem is that gradients propagated over many stages tend to either vanish of the time or explode but with much damage to the optimization. even if we assume that the parameters are such that the recurrent network is stable store memories with gradients not exploding the difficulty with long-term dependencies arises from the exponentially smaller weights given to long-term interactions the multiplication of many jacobians compared to short-term ones. many other et al. sources provide a deeper treatment hochreiter doya bengio chapter sequence modeling recurrent and recursive nets t u p t u o f o n o i t c e j o r p input coordinate figure when composing many nonlinear functions the linear-tanh layer shown here the result is highly nonlinear typically with most of the values associated with a tiny derivative some values with a large derivative and many alternations between increasing and decreasing. in this plot we plot a linear projection of a hidden state down to a single dimension plotted on the y-axis. the x-axis is the coordinate of the initial state along a random direction in the space. we can thus view this plot as a linear cross-section of a high-dimensional function. the plots show the function after each time step or equivalently after each number of times the transition function has been composed. pascanu detail. the remaining sections describe approaches to overcoming the problem. in this section we describe the problem in more et al. recurrent networks involve the composition of the same function multiple times once per time step. these compositions can result in extremely nonlinear behavior as illustrated in figure in particular the function composition employed by recurrent neural networks somewhat resembles matrix multiplication. we can think of the recurrence relation as a very simple recurrent neural network lacking a nonlinear activation function and lacking inputs x. as described in section this recurrence relation essentially describes the power method. it may be simplified to h w t h h w t and if w admits an eigendecomposition of the form w q q chapter sequence modeling recurrent and recursive nets with orthogonal q the recurrence may be simplified further to h q the eigenvalues are raised to the power of t causing eigenvalues with magnitude less than one to decay to zero and eigenvalues with magnitude greater than one to explode. any component of that is not aligned with the largest eigenvector will eventually be discarded. this problem is particular to recurrent networks. in the scalar case imagine multiplying a weight w by itself many times. the product wt will either vanish or explode depending on the magnitude of w. however if we make a non-recurrent network that has a different weight w at each time step the situation is different. t w suppose if the initial state is given by then the state at time that the w values are generated randomly independently from one another with zero mean and variance v. the variance of the product is ov n. to obtain some desired variance v very deep feedforward networks with carefully chosen scaling can thus avoid the vanishing and exploding gradient problem as argued by we may choose the individual weights with variance v n sussillo t is given by v the vanishing and exploding gradient problem for rnns was independently discovered by separate researchers hochreiter bengio et al. one may hope that the problem can be avoided simply by staying in a region of parameter space where the gradients do not vanish or explode. unfortunately in order to store memories in a way that is robust to small perturbations the rnn must enter a region of parameter space where gradients vanish bengio et al. specifically whenever the model is able to represent long term dependencies the gradient of a long term interaction has exponentially smaller magnitude than the gradient of a short term interaction. it does not mean that it is impossible to learn but that it might take a very long time to learn long-term dependencies because the signal about these dependencies will tend to be hidden by the smallest fluctuations arising from short-term dependencies. in practice the experiments in show that as we increase the span of the dependencies that need to be captured gradient-based optimization becomes increasingly difficult with the probability of successful training of a traditional rnn via sgd rapidly reaching for sequences of only length or bengio et al. for a deeper treatment of recurrent networks as dynamical systems see doya with a review bengio et al. in pascanu the remaining sections of this chapter discuss various approaches that have been proposed to reduce the difficulty of learning longterm dependencies some cases allowing an rnn to learn dependencies across siegelmann and sontag et al. and chapter sequence modeling recurrent and recursive nets hundreds of steps but the problem of learning long-term dependencies remains one of the main challenges in deep learning. echo state networks the recurrent weights mapping from h t to h and the input weights mapping from x to h are some of the most difficult parameters to learn in a recurrent network. one proposed jaeger maass et al. jaeger and haas jaeger approach to avoiding this difficulty is to set the recurrent weights such that the recurrent hidden units do a good job of capturing the history of past inputs and learn only the output weights. this is the idea that was independently proposed for echo state networks or esns jaeger and haas jaeger and liquid state machines the latter is similar except that it uses spiking neurons binary outputs instead of the continuous-valued hidden units used for esns. both esns and liquid state machines are termed reservoir computing evi ius and jaeger to denote the fact that the hidden units form of reservoir of temporal features which may capture different aspects of the history of inputs. maass et al. one way to think about these reservoir computing recurrent networks is that they are similar to kernel machines they map an arbitrary length sequence history of inputs up to time t into a fixed-length vector recurrent state h on which a linear predictor a linear regression can be applied to solve the problem of interest. the training criterion may then be easily designed to be convex as a function of the output weights. for example if the output consists of linear regression from the hidden units to the output targets and the training criterion is mean squared error then it is convex and may be solved reliably with simple learning algorithms jaeger the important question is therefore how do we set the input and recurrent weights so that a rich set of histories can be represented in the recurrent neural network state? the answer proposed in the reservoir computing literature is to view the recurrent net as a dynamical system and set the input and recurrent weights such that the dynamical system is near the edge of stability. the original idea was to make the eigenvalues of the jacobian of the state-to an important state transition function be close to as explained in section characteristic of a recurrent network is the eigenvalue spectrum of the jacobians j s of particular importance is the spectral radius of j defined to t s be the maximum of the absolute values of its eigenvalues. chapter sequence modeling recurrent and recursive nets to understand the effect of the spectral radius consider the simple case of back-propagation with a jacobian matrix j that does not change with t. this case happens for example when the network is purely linear. suppose that j has an eigenvector v with corresponding eigenvalue consider what happens as we propagate a gradient vector backwards through time. if we begin with a gradient vector g then after one step of back-propagation we will have j g and after n steps we will have j n g. now consider what happens if we instead back-propagate a perturbed version of g. if we begin with g v then after one step we will have jg v. after n steps we will have j ng v from this we can see that back-propagation starting from g and back-propagation starting from g v diverge by j n v after n steps of back-propagation. if v is chosen to be a unit eigenvector of j with eigenvalue then multiplication by the jacobian simply scales the difference at each step. the two executions of back-propagation are n. when v corresponds to the largest value of separated by a distance of this perturbation achieves the widest possible separation of an initial perturbation of size n grows exponentially large. when the deviation size when the deviation size becomes exponentially small. of course this example assumed that the jacobian was the same at every time step corresponding to a recurrent network with no nonlinearity. when a nonlinearity is present the derivative of the nonlinearity will approach zero on many time steps and help to prevent the explosion resulting from a large spectral radius. indeed the most recent work on echo state networks advocates using a spectral radius much larger than unity yildiz et al. jaeger everything we have said about back-propagation via repeated matrix multiplication applies equally to forward propagation in a network with no nonlinearity where the state h w t h when a linear map w always shrinks h as measured by the norm then we say that the map is contractive. when the spectral radius is less than one the mapping from h to h is contractive so a small change becomes smaller after each time step. this necessarily makes the network forget information about the past when we use a finite level of precision as bit integers to store the state vector. t the jacobian matrix tells us how a small change of h propagates one step forward or equivalently how the gradient on h propagates one step backward during back-propagation. note that neither w nor j need to be symmetric they are square and real so they can have complex-valued eigenvalues and eigenvectors with imaginary components corresponding to potentially oscillatory t chapter sequence modeling recurrent and recursive nets behavior the same jacobian was applied iteratively. even though h or a small variation of h of interest in back-propagation are real-valued they can be expressed in such a complex-valued basis. what matters is what happens to the magnitude absolute value of these possibly complex-valued basis coefficients when we multiply the matrix by the vector. an eigenvalue with magnitude greater than one corresponds to magnification growth if applied iteratively or shrinking decay if applied iteratively. with a nonlinear map the jacobian is free to change at each step. the dynamics therefore become more complicated. however it remains true that a small initial variation can turn into a large variation after several steps. one difference between the purely linear case and the nonlinear case is that the use of a squashing nonlinearity such as tanh can cause the recurrent dynamics to become bounded. note that it is possible for back-propagation to retain unbounded dynamics even when forward propagation has bounded dynamics for example when a sequence of tanh units are all in the middle of their linear regime and are connected by weight matrices with spectral radius greater than however it is rare for all of the units to simultaneously lie at their linear activation point. tanh the strategy of echo state networks is simply to fix the weights to have some where information is carried forward through time but spectral radius such as does not explode due to the stabilizing effect of saturating nonlinearities like tanh. more recently it has been shown that the techniques used to set the weights the weights in a fully trainable recurrent netin esns could be used to work the hidden-to-hidden recurrent weights trained using back-propagation through time helping to learn long-term dependencies sutskever et al. in this setting an initial spectral radius of performs well combined with the sparse initialization scheme described in section initialize leaky units and other strategies for multiple time scales one way to deal with long-term dependencies is to design a model that operates at multiple time scales so that some parts of the model operate at fine-grained time scales and can handle small details while other parts operate at coarse time scales and transfer information from the distant past to the present more efficiently. various strategies for building both fine and coarse time scales are possible. these include the addition of skip connections across time leaky units that integrate signals with different time constants and the removal of some of the connections chapter sequence modeling recurrent and recursive nets used to model fine-grained time scales. adding skip connections through time one way to obtain coarse time scales is to add direct connections from variables in the distant past to variables in the present. the idea of using such skip connections dates back to and follows from the idea of incorporating delays in feedforward neural networks in an ordinary recurrent network a recurrent connection goes from a unit at time t to a unit at time t it is possible to construct recurrent networks with longer delays lang and hinton lin et al. bengio as we have seen in section gradients may vanish or explode exponentially with respect to the number of time steps. introduced recurrent connections with a time-delay of d to mitigate this problem. gradients now diminish exponentially as a function of rather than since there are both d delayed and single step connections gradients may still explode exponentially in this allows the learning algorithm to capture longer dependencies although not all long-term dependencies may be represented well in this way. lin et al. leaky units and a spectrum of different time scales another way to obtain paths on which the product of derivatives is close to one is to have units with linear self-connections and a weight near one on these connections. when we accumulate a running average of some value v by applying the t the parameter is an example of a linear selfupdate connection from t to when is near one the running average remembers information about the past for a long time and when is near zero information about the past is rapidly discarded. hidden units with linear self-connections can behave similarly to such running averages. such hidden units are called leaky units. skip connections through d time steps are a way of ensuring that a unit can always learn to be influenced by a value from d time steps earlier. the use of a linear self-connection with a weight near one is a different way of ensuring that the unit can access values from the past. the linear self-connection approach allows this effect to be adapted more smoothly and flexibly by adjusting the real-valued rather than by adjusting the integer-valued skip length. these ideas were proposed by el hihi and bengio leaky units were also found to be useful in the context of echo state networks jaeger et al. mozer and by chapter sequence modeling recurrent and recursive nets there are two basic strategies for setting the time constants used by leaky units. one strategy is to manually fix them to values that remain constant for example by sampling their values from some distribution once at initialization time. another strategy is to make the time constants free parameters and learn them. having such leaky units at different time scales appears to help with long-term dependencies mozer pascanu et al. removing connections another approach to handle long-term dependencies is the idea of organizing the state of the rnn at multiple time-scales with information flowing more easily through long distances at the slower time scales. el hihi and bengio this idea differs from the skip connections through time discussed earlier because it involves actively removing length-one connections and replacing them with longer connections. units modified in such a way are forced to operate on a long time scale. skip connections through time edges. units receiving such new connections may learn to operate on a long time scale but may also choose to focus on their other short-term connections. add there are different ways in which a group of recurrent units can be forced to operate at different time scales. one option is to make the recurrent units leaky but to have different groups of units associated with different fixed time scales. this was the proposal in pascanu et al. another option is to have explicit and discrete updates taking place at different times with a different frequency for different groups of units. this is the approach of el hihi and bengio it worked well on a number of benchmark datasets. and has been successfully used in mozer koutnik et al. and the long short-term memory and other gated rnns as of this writing the most effective sequence models used in practical applications are called gated rnns. these include the long short-term memory and networks based on the gated recurrent unit like leaky units gated rnns are based on the idea of creating paths through time that have derivatives that neither vanish nor explode. leaky units did this with connection weights that were either manually chosen constants or were parameters. gated rnns generalize this to connection weights that may change chapter sequence modeling recurrent and recursive nets at each time step. output self-loop state input input gate forget gate output gate figure block diagram of the lstm recurrent network cell. cells are connected recurrently to each other replacing the usual hidden units of ordinary recurrent networks. an input feature is computed with a regular artificial neuron unit. its value can be accumulated into the state if the sigmoidal input gate allows it. the state unit has a linear self-loop whose weight is controlled by the forget gate. the output of the cell can be shut off by the output gate. all the gating units have a sigmoid nonlinearity while the input unit can have any squashing nonlinearity. the state unit can also be used as an extra input to the gating units. the black square indicates a delay of a single time step. leaky units allow the network to accumulate information as evidence for a particular feature or category over a long duration. however once that information has been used it might be useful for the neural network to forget the old state. for example if a sequence is made of sub-sequences and we want a leaky unit to accumulate evidence inside each sub-subsequence we need a mechanism to forget the old state by setting it to zero. instead of manually deciding when to clear the state we want the neural network to learn to decide when to do it. this chapter sequence modeling recurrent and recursive nets is what gated rnns do. lstm gers et al. the clever idea of introducing self-loops to produce paths where the gradient can flow for long durations is a core contribution of the initial long short-term memory model and schmidhuber a crucial addition has been to make the weight on this self-loop conditioned on the context rather than fixed by making the weight of this self-loop gated by another hidden unit the time scale of integration can be changed dynamically. in this case we mean that even for an lstm with fixed parameters the time scale of integration can change based on the input sequence because the time constants are output by the model itself. the lstm has been found extremely successful in many applications such as unconstrained handwriting recognition et al. graves and jaitly handwriting generation image captioning and parsing machine translation kiros et al. vinyals speech recognition et al. xu graves et al. et al. et al. et al. et al. pascanu the lstm block diagram is illustrated in figure the corresponding forward propagation equations are given below in the case of a shallow recurrent network architecture. deeper architectures have also been successfully used et al. instead of a unit that simply applies an elementwise nonlinearity to the affine transformation of inputs and recurrent units lstm recurrent networks have lstm cells that have an internal recurrence self-loop in addition to the outer recurrence of the rnn. each cell has the same inputs and outputs as an ordinary recurrent network but has more parameters and a system of gating units that controls the flow of information. the most important component is the state unit s that has a linear self-loop similar to the leaky units described in the previous section. however here the self-loop weight the associated time constant is controlled by a forget gate unit f time step t and cell that sets this weight to a value between and via a sigmoid unit i i i f i bf i ij x u f j j j t j wf ij h is the current input vector and h where x is the current hidden layer vector containing the outputs of all the lstm cells and bf w f are respectively biases input weights and recurrent weights for the forget gates. the lstm cell chapter sequence modeling recurrent and recursive nets internal state is thus updated as follows but with a conditional self-loop weight f i t i f s i s i g i b i uijx j j j t wijh j where b u and w respectively denote the biases input weights and recurrent weights into the lstm cell. the external input gate unit g is computed similarly to the forget gate a sigmoid unit to obtain a gating value between and but with its own parameters i g i bg i ijx u g j t j w g ijh j the output h which also uses a sigmoid unit for gating i of the lstm cell can also be shut off via the output gate q j h i tanh s i q i q i bo i ijx u o j j j t j w o ij h i which has parameters bo u o w o for its biases input weights and recurrent weights respectively. among the variants one can choose to use the cell state s as an extra input its weight into the three gates of the i-th unit as shown in figure this would require three additional parameters. i lstm networks have been shown to learn long-term dependencies more easily than the simple recurrent architectures first on artificial data sets designed for testing the ability to learn long-term dependencies bengio et al. hochreiter then on challenging sequence and schmidhuber hochreiter processing tasks where state-of-the-art performance was obtained graves variants and alternatives to the lstm have been studied and used and are discussed next. sutskever et al. et al. et al. other gated rnns which pieces of the lstm architecture are actually necessary? what other successful architectures could be designed that allow the network to dynamically control the time scale and forgetting behavior of different units? chapter sequence modeling recurrent and recursive nets et al. some answers to these questions are given with the recent work on gated rnns cho et al. whose units are also known as gated recurrent units or grus chung the main et al. difference with the lstm is that a single gating unit simultaneously controls the forgetting factor and the decision to update the state unit. the update equations are the following jozefowicz chrupala et al. t h i u i t h i t u i t uijx j t wijr j t h j where u stands for update gate and r for reset gate. their value is defined as usual bu i ijx uu j w u ij h j u i and j bi j j j r i b r i ij x u r j j j w r ijh j the reset and updates gates can individually ignore parts of the state vector. the update gates act like conditional leaky integrators that can linearly gate any dimension thus choosing to copy it one extreme of the sigmoid or completely ignore it the other extreme by replacing it by the new target state value which the leaky integrator wants to converge. the reset gates control which parts of the state get used to compute the next target state introducing an additional nonlinear effect in the relationship between past state and future state. many more variants around this theme can be designed. for example the reset gate forget gate output could be shared across multiple hidden units. alternately the product of a global gate a whole group of units such as an entire layer and a local gate unit could be used to combine global control and local control. however several investigations over architectural variations of the lstm and gru found no variant that would clearly beat both of these greff across a wide range of tasks found that a crucial ingredient is the forget gate while et al. jozefowicz et al. found that adding a bias of to the lstm forget gate a practice advocated by gers et al. makes the lstm as strong as the best of the explored architectural variants. greff et al. jozefowicz et al. chapter sequence modeling recurrent and recursive nets optimization for long-term dependencies section problems that occur when optimizing rnns over many time steps. have described the vanishing and exploding gradient and section an interesting idea proposed by martens and sutskever is that second derivatives may vanish at the same time that first derivatives vanish. second-order optimization algorithms may roughly be understood as dividing the first derivative by the second derivative higher dimension multiplying the gradient by the inverse hessian. if the second derivative shrinks at a similar rate to the first derivative then the ratio of first and second derivatives may remain relatively constant. unfortunately second-order methods have many drawbacks including high computational cost the need for a large minibatch and a tendency to be attracted to saddle points. martens and sutskever found promising results using second-order methods. later sutskever found that simpler et al. methods such as nesterov momentum with careful initialization could achieve similar results. see sutskever for more detail. both of these approaches have largely been replaced by simply using sgd without momentum applied to lstms. this is part of a continuing theme in machine learning that it is often much easier to design a model that is easy to optimize than it is to design a more powerful optimization algorithm. clipping gradients as discussed in section strongly nonlinear functions such as those computed by a recurrent net over many time steps tend to have derivatives that can be either very large or very small in magnitude. this is illustrated in figure and figure in which we see that the objective function a function of the parameters has a landscape in which one finds cliffs wide and rather flat regions separated by tiny regions where the objective function changes quickly forming a kind of cliff. the difficulty that arises is that when the parameter gradient is very large a gradient descent parameter update could throw the parameters very far into a region where the objective function is larger undoing much of the work that had been done to reach the current solution. the gradient tells us the direction that corresponds to the steepest descent within an infinitesimal region surrounding the current parameters. outside of this infinitesimal region the cost function may begin to curve back upwards. the update must be chosen to be small enough to avoid traversing too much upward curvature. we typically use learning rates that chapter sequence modeling recurrent and recursive nets decay slowly enough that consecutive steps have approximately the same learning rate. a step size that is appropriate for a relatively linear part of the landscape is often inappropriate and causes uphill motion if we enter a more curved part of the landscape on the next step. figure example of the effect of gradient clipping in a recurrent network with two parameters w and b. gradient clipping can make gradient descent perform more reasonably in the vicinity of extremely steep cliffs. these steep cliffs commonly occur in recurrent networks near where a recurrent network behaves approximately linearly. the cliff is exponentially steep in the number of time steps because the weight matrix is multiplied by itself once for each time step. descent without gradient clipping overshoots the bottom of this small ravine then receives a very large gradient from the cliff face. the large gradient catastrophically propels the parameters outside the axes of the plot. gradient descent with gradient clipping has a more moderate reaction to the cliff. while it does ascend the cliff face the step size is restricted so that it cannot be propelled away from steep region near the solution. figure adapted with permission from pascanu et al. a simple type of solution has been in use by practitioners for many years clipping the gradient. there are different instances of this idea pascanu one option is to clip the parameter gradient from a minibatch just before the parameter update. another is to clip element-wise the norm just before the parameter update et al. g of the gradient g et al. gv g g g v if chapter sequence modeling recurrent and recursive nets where v is the norm threshold and g is used to update parameters. because the gradient of all the parameters different groups of parameters such as weights and biases is renormalized jointly with a single scaling factor the latter method has the advantage that it guarantees that each step is still in the gradient direction but experiments suggest that both forms work similarly. although the parameter update has the same direction as the true gradient with gradient norm clipping the parameter update vector norm is now bounded. this bounded gradient avoids performing a detrimental step when the gradient explodes. in fact even simply taking a random step when the gradient magnitude is above a threshold tends to work almost as well. if the explosion is so severe that the gradient is numerically inf or nan infinite or not-a-number then a random step of size v can be taken and will typically move away from the numerically unstable configuration. clipping the gradient norm per-minibatch will not change the direction of the gradient for an individual minibatch. however taking the average of the norm-clipped gradient from many minibatches is not equivalent to clipping the norm of the true gradient gradient formed from using all examples. examples that have large gradient norm as well as examples that appear in the same minibatch as such examples will have their contribution to the final direction diminished. this stands in contrast to traditional minibatch gradient descent where the true gradient direction is equal to the average over all minibatch gradients. put another way traditional stochastic gradient descent uses an unbiased estimate of the gradient while gradient descent with norm clipping introduces a heuristic bias that we know empirically to be useful. with elementwise clipping the direction of the update is not aligned with the true gradient or the minibatch gradient but it is still a descent direction. it has also been proposed to clip the back-propagated gradient respect to hidden units but no comparison has been published between these variants we conjecture that all these methods behave similarly. regularizing to encourage information flow gradient clipping helps to deal with exploding gradients but it does not help with vanishing gradients. to address vanishing gradients and better capture long-term dependencies we discussed the idea of creating paths in the computational graph of the unfolded recurrent architecture along which the product of gradients associated with arcs is near one approach to achieve this is with lstms and other selfloops and gating mechanisms described above in section another idea is to regularize or constrain the parameters so as to encourage information flow. h l being back-propagated to in particular we would like the gradient vector chapter sequence modeling recurrent and recursive nets maintain its magnitude even if the loss function only penalizes the output at the end of the sequence. formally we want to be as large as h h t h l h l. et al. with this objective pascanu propose the following regularizer h l h h t h l t computing the gradient of this regularizer may appear difficult but pascanu propose an approximation in which we consider the back-propagated et al. h l as if they were constants the purpose of this regularizer so vectors that there is no need to back-propagate through them. the experiments with this regularizer suggest that if combined with the norm clipping heuristic handles gradient explosion the regularizer can considerably increase the span of the dependencies that an rnn can learn. because it keeps the rnn dynamics on the edge of explosive gradients the gradient clipping is particularly important. without gradient clipping gradient explosion prevents learning from succeeding. a key weakness of this approach is that it is not as effective as the lstm for tasks where data is abundant such as language modeling. explicit memory intelligence requires knowledge and acquiring knowledge can be done via learning which has motivated the development of large-scale deep architectures. however there are different kinds of knowledge. some knowledge can be implicit subconscious and difficult to verbalize such as how to walk or how a dog looks different from a cat. other knowledge can be explicit declarative and relatively straightforward to put into words every day commonsense knowledge like a cat is a kind of animal or very specific facts that you need to know to accomplish your current goals like the meeting with the sales team is at pm in room neural networks excel at storing implicit knowledge. however they struggle to memorize facts. stochastic gradient descent requires many presentations of the chapter sequence modeling recurrent and recursive nets memory cells writing mechanism reading mechanism task network controlling the memory figure a schematic of an example of a network with an explicit memory capturing some of the key design elements of the neural turing machine. in this diagram we distinguish the representation part of the model task network here a recurrent net in the bottom from the memory part of the model set of cells which can store facts. the task network learns to control the memory deciding where to read from and where to write to within the memory the reading and writing mechanisms indicated by bold arrows pointing at the reading and writing addresses. chapter sequence modeling recurrent and recursive nets et al. same input before it can be stored in a neural network parameters and even then that input will not be stored especially precisely. graves hypothesized that this is because neural networks lack the equivalent of the working memory system that allows human beings to explicitly hold and manipulate pieces of information that are relevant to achieving some goal. such explicit memory components would allow our systems not only to rapidly and intentionally store and retrieve specific facts but also to sequentially reason with them. the need for neural networks that can process information in a sequence of steps changing the way the input is fed into the network at each step has long been recognized as important for the ability to reason rather than to make automatic intuitive responses to the input hinton et al. et al. to resolve this difficulty weston introduced memory networks that include a set of memory cells that can be accessed via an addressing mechanism. memory networks originally required a supervision signal instructing them how to use their memory cells. graves introduced the neural turing machine which is able to learn to read from and write arbitrary content to memory cells without explicit supervision about which actions to undertake and allowed end-to-end training without this supervision signal via the use of a content-based soft attention mechanism and section this soft addressing mechanism has become standard with other related architectures emulating algorithmic mechanisms in a way that still allows gradient-based optimization sukhbaatar et al. joulin and mikolov kumar grefenstette bahdanau et al. vinyals et al. et al. et al. each memory cell can be thought of as an extension of the memory cells in lstms and grus. the difference is that the network outputs an internal state that chooses which cell to read from or write to just as memory accesses in a digital computer read from or write to a specific address. it is difficult to optimize functions that produce exact integer addresses. to alleviate this problem ntms actually read to or write from many memory cells simultaneously. to read they take a weighted average of many cells. to write they modify multiple cells by different amounts. the coefficients for these operations are chosen to be focused on a small number of cells for example by producing them via a softmax function. using these weights with non-zero derivatives allows the functions controlling access to the memory to be optimized using gradient descent. the gradient on these coefficients indicates whether each of them should be increased or decreased but the gradient will typically be large only for those memory addresses receiving a large coefficient. these memory cells are typically augmented to contain a vector rather than chapter sequence modeling recurrent and recursive nets the single scalar stored by an lstm or gru memory cell. there are two reasons to increase the size of the memory cell. one reason is that we have increased the cost of accessing a memory cell. we pay the computational cost of producing a coefficient for many cells but we expect these coefficients to cluster around a small number of cells. by reading a vector value rather than a scalar value we can offset some of this cost. another reason to use vector-valued memory cells is that they allow for content-based addressing where the weight used to read to or write from a cell is a function of that cell. vector-valued cells allow us to retrieve a complete vector-valued memory if we are able to produce a pattern that matches some but not all of its elements. this is analogous to the way that people can recall the lyrics of a song based on a few words. we can think of a content-based read instruction as saying retrieve the lyrics of the song that has the chorus we all live in a yellow submarine. content-based addressing is more useful when we make the objects to be retrieved large if every letter of the song was stored in a separate memory cell we would not be able to find them this way. by comparison location-based addressing is not allowed to refer to the content of the memory. we can think of a location-based read instruction as saying retrieve the lyrics of the song in slot location-based addressing can often be a perfectly sensible mechanism even when the memory cells are small. if the content of a memory cell is copied forgotten at most time steps then the information it contains can be propagated forward in time and the gradients propagated backward in time without either vanishing or exploding. the explicit memory approach is illustrated in figure where we see that a task neural network is coupled with a memory. although that task neural network could be feedforward or recurrent the overall system is a recurrent network. the task network can choose to read from or write to specific memory addresses. explicit memory seems to allow models to learn tasks that ordinary rnns or lstm rnns cannot learn. one reason for this advantage may be because information and gradients can be propagated in time or backwards in time respectively for very long durations. as an alternative to back-propagation through weighted averages of memory cells we can interpret the memory addressing coefficients as probabilities and stochastically read just one cell and sutskever optimizing models that make discrete decisions requires specialized optimization algorithms described in section so far training these stochastic architectures that make discrete decisions remains harder than training deterministic algorithms that make soft decisions. whether it is soft back-propagation or stochastic and hard the chapter sequence modeling recurrent and recursive nets mechanism for choosing an address is in its form identical to the attention mechanism which had been previously introduced in the context of machine translation the idea of attention mechanisms for neural networks was introduced even earlier in the context of handwriting generation with an attention mechanism that was constrained to move only forward in time through the sequence. in the case of machine translation and memory networks at each step the focus of attention can move to a completely different place compared to the previous step. and discussed in section bahdanau et al. recurrent neural networks provide a way to extend deep learning to sequential data. they are the last major tool in our deep learning toolbox. our discussion now moves to how to choose and use these tools and how to apply them to real-world tasks. chapter practical methodology successfully applying deep learning techniques requires more than just a good knowledge of what algorithms exist and the principles that explain how they work. a good machine learning practitioner also needs to know how to choose an algorithm for a particular application and how to monitor and respond to feedback obtained from experiments in order to improve a machine learning system. during day to day development of machine learning systems practitioners need to decide whether to gather more data increase or decrease model capacity add or remove regularizing features improve the optimization of a model improve approximate inference in a model or debug the software implementation of the model. all of these operations are at the very least time-consuming to try out so it is important to be able to determine the right course of action rather than blindly guessing. most of this book is about different machine learning models training algorithms and objective functions. this may give the impression that the most important ingredient to being a machine learning expert is knowing a wide variety of machine learning techniques and being good at different kinds of math. in practice one can usually do much better with a correct application of a commonplace algorithm than by sloppily applying an obscure algorithm. correct application of an algorithm depends on mastering some fairly simple methodology. many of the recommendations in this chapter are adapted from ng we recommend the following practical design process determine your goals what error metric to use and your target value for this error metric. these goals and error metrics should be driven by the problem that the application is intended to solve. establish a working end-to-end pipeline as soon as possible including the chapter practical methodology estimation of the appropriate performance metrics. instrument the system well to determine bottlenecks in performance. diagnose which components are performing worse than expected and whether it is due to overfitting underfitting or a defect in the data or software. repeatedly make incremental changes such as gathering new data adjusting hyperparameters or changing algorithms based on specific findings from your instrumentation. goodfellow et al. as a running example we will use street view address number transcription system the purpose of this application is to add buildings to google maps. street view cars photograph the buildings and record the gps coordinates associated with each photograph. a convolutional network recognizes the address number in each photograph allowing the google maps database to add that address in the correct location. the story of how this commercial application was developed gives an example of how to follow the design methodology we advocate. we now describe each of the steps in this process. performance metrics determining your goals in terms of which error metric to use is a necessary first step because your error metric will guide all of your future actions. you should also have an idea of what level of performance you desire. keep in mind that for most applications it is impossible to achieve absolute zero error. the bayes error defines the minimum error rate that you can hope to achieve even if you have infinite training data and can recover the true probability distribution. this is because your input features may not contain complete information about the output variable or because the system might be intrinsically stochastic. you will also be limited by having a finite amount of training data. the amount of training data can be limited for a variety of reasons. when your goal is to build the best possible real-world product or service you can typically collect more data but must determine the value of reducing error further and weigh this against the cost of collecting more data. data collection can require time money or human suffering example if your data collection process involves performing invasive medical tests. when your goal is to answer a scientific question about which algorithm performs better on a fixed benchmark the benchmark chapter practical methodology specification usually determines the training set and you are not allowed to collect more data. how can one determine a reasonable level of performance to expect? typically in the academic setting we have some estimate of the error rate that is attainable based on previously published benchmark results. in the real-word setting we have some idea of the error rate that is necessary for an application to be safe cost-effective or appealing to consumers. once you have determined your realistic desired error rate your design decisions will be guided by reaching this error rate. another important consideration besides the target value of the performance metric is the choice of which metric to use. several different performance metrics may be used to measure the effectiveness of a complete application that includes machine learning components. these performance metrics are usually different from the cost function used to train the model. as described in section it is common to measure the accuracy or equivalently the error rate of a system. however many applications require more advanced metrics. sometimes it is much more costly to make one kind of a mistake than another. for example an e-mail spam detection system can make two kinds of mistakes incorrectly classifying a legitimate message as spam and incorrectly allowing a spam message to appear in the inbox. it is much worse to block a legitimate message than to allow a questionable message to pass through. rather than measuring the error rate of a spam classifier we may wish to measure some form of total cost where the cost of blocking legitimate messages is higher than the cost of allowing spam messages. sometimes we wish to train a binary classifier that is intended to detect some rare event. for example we might design a medical test for a rare disease. suppose that only one in every million people has this disease. we can easily achieve accuracy on the detection task by simply hard-coding the classifier to always report that the disease is absent. clearly accuracy is a poor way to characterize the performance of such a system. one way to solve this problem is to instead measure precision and recall. precision is the fraction of detections reported by the model that were correct while recall is the fraction of true events that were detected. a detector that says no one has the disease would achieve perfect precision but zero recall. a detector that says everyone has the disease would achieve perfect recall but precision equal to the percentage of people who have the disease in our example of a disease that only one people in a million have. when using precision and recall it is common to plot a pr curve with precision on the y-axis and recall on the x-axis. the classifier generates a score that is higher if the event to be detected occurred. for example a feedforward chapter practical methodology x estimating the network designed to detect a disease outputs y p probability that a person whose medical results are described by features x has the disease. we choose to report a detection whenever this score exceeds some threshold. by varying the threshold we can trade precision for recall. in many cases we wish to summarize the performance of the classifier with a single number rather than a curve. to do so we can convert precision p and recall r into an f-score given by f r p another option is to report the total area lying beneath the pr curve. in some applications it is possible for the machine learning system to refuse to make a decision. this is useful when the machine learning algorithm can estimate how confident it should be about a decision especially if a wrong decision can be harmful and if a human operator is able to occasionally take over. the street view transcription system provides an example of this situation. the task is to transcribe the address number from a photograph in order to associate the location where the photo was taken with the correct address in a map. because the value of the map degrades considerably if the map is inaccurate it is important to add an address only if the transcription is correct. if the machine learning system thinks that it is less likely than a human being to obtain the correct transcription then the best course of action is to allow a human to transcribe the photo instead. of course the machine learning system is only useful if it is able to dramatically reduce the amount of photos that the human operators must process. a natural performance metric to use in this situation is coverage. coverage is the fraction of examples for which the machine learning system is able to produce a response. it is possible to trade coverage for accuracy. one can always obtain accuracy by refusing to process any example but this reduces the coverage to for the street view task the goal for the project was to reach human-level transcription accuracy while maintaining coverage. human-level performance on this task is accuracy. many other metrics are possible. we can for example measure click-through rates collect user satisfaction surveys and so on. many specialized application areas have application-specific criteria as well. what is important is to determine which performance metric to improve ahead of time then concentrate on improving this metric. without clearly defined goals it can be difficult to tell whether changes to a machine learning system make progress or not. chapter practical methodology default baseline models after choosing performance metrics and goals the next step in any practical application is to establish a reasonable end-to-end system as soon as possible. in this section we provide recommendations for which algorithms to use as the first baseline approach in various situations. keep in mind that deep learning research progresses quickly so better default algorithms are likely to become available soon after this writing. depending on the complexity of your problem you may even want to begin without using deep learning. if your problem has a chance of being solved by just choosing a few linear weights correctly you may want to begin with a simple statistical model like logistic regression. if you know that your problem falls into an ai-complete category like object recognition speech recognition machine translation and so on then you are likely to do well by beginning with an appropriate deep learning model. first choose the general category of model based on the structure of your data. if you want to perform supervised learning with fixed-size vectors as input use a feedforward network with fully connected layers. if the input has known topological structure example if the input is an image use a convolutional network. in these cases you should begin by using some kind of piecewise linear unit or their generalizations like leaky relus prelus and maxout. if your input or output is a sequence use a gated recurrent net or gru. a reasonable choice of optimization algorithm is sgd with momentum with a decaying learning rate decay schemes that perform better or worse on different problems include decaying linearly until reaching a fixed minimum learning rate decaying exponentially or decreasing the learning rate by a factor of each time validation error plateaus. another very reasonable alternative is adam. batch normalization can have a dramatic effect on optimization performance especially for convolutional networks and networks with sigmoidal nonlinearities. while it is reasonable to omit batch normalization from the very first baseline it should be introduced quickly if optimization appears to be problematic. unless your training set contains tens of millions of examples or more you should include some mild forms of regularization from the start. early stopping should be used almost universally. dropout is an excellent regularizer that is easy to implement and compatible with many models and training algorithms. batch normalization also sometimes reduces generalization error and allows dropout to be omitted due to the noise in the estimate of the statistics used to normalize each variable. chapter practical methodology if your task is similar to another task that has been studied extensively you will probably do well by first copying the model and algorithm that is already known to perform best on the previously studied task. you may even want to copy a trained model from that task. for example it is common to use the features from a convolutional network trained on imagenet to solve other computer vision tasks girshick et al. iii a common question is whether to begin by using unsupervised learning described further in part this is somewhat domain specific. some domains such as natural language processing are known to benefit tremendously from unsupervised learning techniques such as learning unsupervised word embeddings. in other domains such as computer vision current unsupervised learning techniques do not bring a benefit except in the semi-supervised setting when the number of labeled examples is very small if your application is in a context where unsupervised learning is known to be important then include it in your first end-to-end baseline. otherwise only use unsupervised learning in your first attempt if the task you want to solve is unsupervised. you can always try adding unsupervised learning later if you observe that your initial baseline overfits. kingma et al. rasmus et al. determining whether to gather more data after the first end-to-end system is established it is time to measure the performance of the algorithm and determine how to improve it. many machine learning novices are tempted to make improvements by trying out many different algorithms. however it is often much better to gather more data than to improve the learning algorithm. how does one decide whether to gather more data? first determine whether the performance on the training set is acceptable. if performance on the training set is poor the learning algorithm is not using the training data that is already available so there is no reason to gather more data. instead try increasing the size of the model by adding more layers or adding more hidden units to each layer. also try improving the learning algorithm for example by tuning the learning rate hyperparameter. if large models and carefully tuned optimization algorithms do not work well then the problem might be the of the training data. the data may be too noisy or may not include the right inputs needed to predict the desired outputs. this suggests starting over collecting cleaner data or collecting a richer set of features. quality if the performance on the training set is acceptable then measure the per chapter practical methodology if the performance on the test set is also acceptable formance on a test set. then there is nothing left to be done. if test set performance is much worse than training set performance then gathering more data is one of the most effective solutions. the key considerations are the cost and feasibility of gathering more data the cost and feasibility of reducing the test error by other means and the amount of data that is expected to be necessary to improve test set performance significantly. at large internet companies with millions or billions of users it is feasible to gather large datasets and the expense of doing so can be considerably less than the other alternatives so the answer is almost always to gather more training data. for example the development of large labeled datasets was one of the most important factors in solving object recognition. in other contexts such as medical applications it may be costly or infeasible to gather more data. a simple alternative to gathering more data is to reduce the size of the model or improve regularization by adjusting hyperparameters such as weight decay coefficients or by adding regularization strategies such as dropout. if you find that the gap between train and test performance is still unacceptable even after tuning the regularization hyperparameters then gathering more data is advisable. when deciding whether to gather more data it is also necessary to decide how much to gather. it is helpful to plot curves showing the relationship between training set size and generalization error like in figure by extrapolating such curves one can predict how much additional training data would be needed to achieve a certain level of performance. usually adding a small fraction of the total number of examples will not have a noticeable impact on generalization error. it is therefore recommended to experiment with training set sizes on a logarithmic scale for example doubling the number of examples between consecutive experiments. if gathering much more data is not feasible the only other way to improve generalization error is to improve the learning algorithm itself. this becomes the domain of research and not the domain of advice for applied practitioners. selecting hyperparameters most deep learning algorithms come with many hyperparameters that control many aspects of the algorithm s behavior. some of these hyperparameters affect the time and memory cost of running the algorithm. some of these hyperparameters affect the quality of the model recovered by the training process and its ability to infer correct results when deployed on new inputs. there are two basic approaches to choosing these hyperparameters choosing them manually and choosing them automatically. choosing the hyperparameters chapter practical methodology manually requires understanding what the hyperparameters do and how machine learning models achieve good generalization. automatic hyperparameter selection algorithms greatly reduce the need to understand these ideas but they are often much more computationally costly. manual hyperparameter tuning to set hyperparameters manually one must understand the relationship between hyperparameters training error generalization error and computational resources and runtime. this means establishing a solid foundation on the fundamental ideas concerning the effective capacity of a learning algorithm from chapter the goal of manual hyperparameter search is usually to find the lowest generalization error subject to some runtime and memory budget. we do not discuss how to determine the runtime and memory impact of various hyperparameters here because this is highly platform-dependent. the primary goal of manual hyperparameter search is to adjust the effective capacity of the model to match the complexity of the task. effective capacity is constrained by three factors the representational capacity of the model the ability of the learning algorithm to successfully minimize the cost function used to train the model and the degree to which the cost function and training procedure regularize the model. a model with more layers and more hidden units per layer has higher representational capacity it is capable of representing more complicated functions. it can not necessarily actually learn all of these functions though if the training algorithm cannot discover that certain functions do a good job of minimizing the training cost or if regularization terms such as weight decay forbid some of these functions. the generalization error typically follows a u-shaped curve when plotted as a function of one of the hyperparameters as in figure at one extreme the hyperparameter value corresponds to low capacity and generalization error is high because training error is high. this is the underfitting regime. at the other extreme the hyperparameter value corresponds to high capacity and the generalization error is high because the gap between training and test error is high. somewhere in the middle lies the optimal model capacity which achieves the lowest possible generalization error by adding a medium generalization gap to a medium amount of training error. for some hyperparameters overfitting occurs when the value of the hyperparameter is large. the number of hidden units in a layer is one such example chapter practical methodology because increasing the number of hidden units increases the capacity of the model. for some hyperparameters overfitting occurs when the value of the hyperparameter is small. for example the smallest allowable weight decay coefficient of zero corresponds to the greatest effective capacity of the learning algorithm. not every hyperparameter will be able to explore the entire u-shaped curve. many hyperparameters are discrete such as the number of units in a layer or the number of linear pieces in a maxout unit so it is only possible to visit a few points along the curve. some hyperparameters are binary. usually these hyperparameters are switches that specify whether or not to use some optional component of the learning algorithm such as a preprocessing step that normalizes the input features by subtracting their mean and dividing by their standard deviation. these hyperparameters can only explore two points on the curve. other hyperparameters have some minimum or maximum value that prevents them from exploring some part of the curve. for example the minimum weight decay coefficient is zero. this means that if the model is underfitting when weight decay is zero we can not enter the overfitting region by modifying the weight decay coefficient. in other words some hyperparameters can only subtract capacity. if you the learning rate is perhaps the most important hyperparameter. it conhave time to tune only one hyperparameter tune the learning rate. trols the effective capacity of the model in a more complicated way than other hyperparameters the effective capacity of the model is highest when the learning rate is correct for the optimization problem not when the learning rate is especially large or especially small. the learning rate has a u-shaped curve for training error illustrated in figure when the learning rate is too large gradient descent can inadvertently increase rather than decrease the training error. in the idealized quadratic case this occurs if the learning rate is at least twice as large as its optimal value when the learning rate is too small training is not only slower but may become permanently stuck with a high training error. this effect is poorly understood would not happen for a convex loss function. lecun et al. tuning the parameters other than the learning rate requires monitoring both training and test error to diagnose whether your model is overfitting or underfitting then adjusting its capacity appropriately. if your error on the training set is higher than your target error rate you have no choice but to increase capacity. if you are not using regularization and you are confident that your optimization algorithm is performing correctly then you must add more layers to your network or add more hidden units. unfortunately this increases the computational costs associated with the model. if your error on the test set is higher than than your target error rate you can chapter practical methodology r o r r e i g n n i a r t learning rate scale figure typical relationship between the learning rate and the training error. notice the sharp rise in error when the learning is above an optimal value. this is for a fixed training time as a smaller learning rate may sometimes only slow down training by a factor proportional to the learning rate reduction. generalization error can follow this curve or be complicated by regularization effects arising out of having a too large or too small learning rates since poor optimization can to some degree reduce or prevent overfitting and even points with equivalent training error can have different generalization error. now take two kinds of actions. the test error is the sum of the training error and the gap between training and test error. the optimal test error is found by trading off these quantities. neural networks typically perform best when the training error is very low thus when capacity is high and the test error is primarily driven by the gap between train and test error. your goal is to reduce this gap without increasing training error faster than the gap decreases. to reduce the gap change regularization hyperparameters to reduce effective model capacity such as by adding dropout or weight decay. usually the best performance comes from a large model that is regularized well for example by using dropout. most hyperparameters can be set by reasoning about whether they increase or decrease model capacity. some examples are included in table while manually tuning hyperparameters do not lose sight of your end goal good performance on the test set. adding regularization is only one way to achieve this goal. as long as you have low training error you can always reduce generalization error by collecting more training data. the brute force way to practically guarantee success is to continually increase model capacity and training set size until the task is solved. this approach does of course increase the computational cost of training and inference so it is only feasible given appropriate resources. in chapter practical methodology reason caveats hyperparameter number of hidden units increases capacity when. increased learning rate tuned optimally convolution kernel width increased increasing the number of hidden units increases the representational capacity of the model. an improper learning rate whether too high or too low results in a model with low effective capacity due to optimization failure increasing the kernel width increases the number of parameters in the model increasing the number of hidden units increases both the time and memory cost of essentially every operation on the model. a wider kernel results in a narrower output dimension reducing model capacity unless you use implicit zero padding to reduce this effect. wider kernels require more memory for parameter storage and increase runtime but a narrower output reduces memory cost. increased time and memory cost of most operations. implicit padding zero weight decay coefficient dropout rate increased adding implicit zeros before convolution keeps the representation size large decreased decreasing the weight decay coefficient frees the model parameters to become larger decreased dropping units less often gives the units more opportunities to conspire with each other to fit the training set table the effect of various hyperparameters on model capacity. chapter practical methodology principle this approach could fail due to optimization difficulties but for many problems optimization does not seem to be a significant barrier provided that the model is chosen appropriately. automatic hyperparameter optimization algorithms the ideal learning algorithm just takes a dataset and outputs a function without requiring hand-tuning of hyperparameters. the popularity of several learning algorithms such as logistic regression and svms stems in part from their ability to perform well with only one or two tuned hyperparameters. neural networks can sometimes perform well with only a small number of tuned hyperparameters but often benefit significantly from tuning of forty or more hyperparameters. manual hyperparameter tuning can work very well when the user has a good starting point such as one determined by others having worked on the same type of application and architecture or when the user has months or years of experience in exploring hyperparameter values for neural networks applied to similar tasks. however for many applications these starting points are not available. in these cases automated algorithms can find useful values of the hyperparameters. if we think about the way in which the user of a learning algorithm searches for good values of the hyperparameters we realize that an optimization is taking place we are trying to find a value of the hyperparameters that optimizes an objective function such as validation error sometimes under constraints as a budget for training time memory or recognition time. it is therefore possible in principle to develop hyperparameter optimization algorithms that wrap a learning algorithm and choose its hyperparameters thus hiding the hyperparameters of the learning algorithm from the user. unfortunately hyperparameter optimization algorithms often have their own hyperparameters such as the range of values that should be explored for each of the learning algorithm s hyperparameters. however these secondary hyperparameters are usually easier to choose in the sense that acceptable performance may be achieved on a wide range of tasks using the same secondary hyperparameters for all tasks. grid search when there are three or fewer hyperparameters the common practice is to perform grid search. for each hyperparameter the user selects a small finite set of values to explore. the grid search algorithm then trains a model for every joint specification of hyperparameter values in the cartesian product of the set of values for each individual hyperparameter. the experiment that yields the best validation chapter practical methodology grid random figure comparison of grid search and random search. for illustration purposes we display two hyperparameters but we are typically interested in having many more. perform grid search we provide a set of values for each hyperparameter. the search algorithm runs training for every joint hyperparameter setting in the cross product of these sets. to perform random search we provide a probability distribution over joint hyperparameter configurations. usually most of these hyperparameters are independent from each other. common choices for the distribution over a single hyperparameter include uniform and log-uniform sample from a log-uniform distribution take the exp of a sample from a uniform distribution. the search algorithm then randomly samples joint hyperparameter configurations and runs training with each of them. both grid search and random search evaluate the validation set error and return the best configuration. the figure illustrates the typical case where only some hyperparameters have a significant influence on the result. in this illustration only the hyperparameter on the horizontal axis has a significant effect. grid search wastes an amount of computation that is exponential in the number of non-influential hyperparameters while random search tests a unique value of every influential hyperparameter on nearly every trial. figure reproduced with permission from bergstra and bengio chapter practical methodology set error is then chosen as having found the best hyperparameters. see the left of figure for an illustration of a grid of hyperparameter values. how should the lists of values to search over be chosen? in the case of numerical hyperparameters the smallest and largest element of each list is chosen conservatively based on prior experience with similar experiments to make sure that the optimal value is very likely to be in the selected range. typically a grid search involves picking values approximately on a logarithmic scale e.g. a learning rate taken within the set or a number of hidden units taken with the set grid search usually performs best when it is performed repeatedly. for example suppose that we ran a grid search over a hyperparameter using values of if the best value found is lies and we should shift the grid and run another search with in for example then we may wish to refine our then we underestimated the range in which the best if we find that the best value of is estimate by zooming in and running a grid search over the obvious problem with grid search is that its computational cost grows exponentially with the number of hyperparameters. if there are m hyperparameters each taking at most n values then the number of training and evaluation trials required grows as onm. the trials may be run in parallel and exploit loose parallelism almost no need for communication between different machines carrying out the search unfortunately due to the exponential cost of grid search even parallelization may not provide a satisfactory size of search. random search fortunately there is an alternative to grid search that is as simple to program more convenient to use and converges much faster to good values of the hyperparameters random search bergstra and bengio a random search proceeds as follows. first we define a marginal distribution for each hyperparameter e.g. a bernoulli or multinoulli for binary or discrete hyperparameters or a uniform distribution on a log-scale for positive real-valued hyperparameters. for example log learning rate u learning rate learning rate where ua b indicates a sample of the uniform distribution in the interval b. may be sampled from similarly the log number of hidden units chapter practical methodology unlike in the case of a grid search one should not discretize or bin the values of the hyperparameters. this allows one to explore a larger set of values and does not incur additional computational cost. in fact as illustrated in figure a random search can be exponentially more efficient than a grid search when there are several hyperparameters that do not strongly affect the performance measure. this is studied at length in who found that random search reduces the validation set error much faster than grid search in terms of the number of trials run by each method. bergstra and bengio as with grid search one may often want to run repeated versions of random search to refine the search based on the results of the first run. the main reason why random search finds good solutions faster than grid search is that there are no wasted experimental runs unlike in the case of grid search when two values of a hyperparameter values of the other hyperparameters would give the same result. in the case of grid search the other hyperparameters would have the same values for these two runs whereas with random search they would usually have different values. hence if the change between these two values does not marginally make much difference in terms of validation set error grid search will unnecessarily repeat two equivalent experiments while random search will still give two independent explorations of the other hyperparameters. model-based hyperparameter optimization the search for good hyperparameters can be cast as an optimization problem. the decision variables are the hyperparameters. the cost to be optimized is the validation set error that results from training using these hyperparameters. in simplified settings where it is feasible to compute the gradient of some differentiable error measure on the validation set with respect to the hyperparameters we can simply follow this gradient bengio et al. bengio maclaurin et al. unfortunately in most practical settings this gradient is unavailable either due to its high computation and memory cost or due to hyperparameters having intrinsically non-differentiable interactions with the validation set error as in the case of discrete-valued hyperparameters. to compensate for this lack of a gradient we can build a model of the validation set error then propose new hyperparameter guesses by performing optimization within this model. most model-based algorithms for hyperparameter search use a bayesian regression model to estimate both the expected value of the validation set error for each hyperparameter and the uncertainty around this expectation. optimization thus involves a tradeoff between exploration hyperparameters chapter practical methodology for which there is high uncertainty which may lead to a large improvement but may also perform poorly and exploitation hyperparameters which the model is confident will perform as well as any hyperparameters it has seen so far usually hyperparameters that are very similar to ones it has seen before. contemporary approaches to hyperparameter optimization include spearmint tpe bergstra et al. snoek et al. and smac hutter et al. currently we cannot unambiguously recommend bayesian hyperparameter optimization as an established tool for achieving better deep learning results or for obtaining those results with less effort. bayesian hyperparameter optimization sometimes performs comparably to human experts sometimes better but fails catastrophically on other problems. it may be worth trying to see if it works on a particular problem but is not yet sufficiently mature or reliable. that being said hyperparameter optimization is an important field of research that while often driven primarily by the needs of deep learning holds the potential to benefit not only the entire field of machine learning but the discipline of engineering in general. one drawback common to most hyperparameter optimization algorithms with more sophistication than random search is that they require for a training experiment to run to completion before they are able to extract any information from the experiment. this is much less efficient in the sense of how much information can be gleaned early in an experiment than manual search by a human practitioner since one can usually tell early on if some set of hyperparameters is completely pathological. have introduced an early version of an algorithm that maintains a set of multiple experiments. at various time points the hyperparameter optimization algorithm can choose to begin a new experiment to freeze a running experiment that is not promising or to thaw and resume an experiment that was earlier frozen but now appears promising given more information. swersky et al. debugging strategies when a machine learning system performs poorly it is usually difficult to tell whether the poor performance is intrinsic to the algorithm itself or whether there is a bug in the implementation of the algorithm. machine learning systems are difficult to debug for a variety of reasons. in most cases we do not know a priori what the intended behavior of the algorithm is. in fact the entire point of using machine learning is that it will discover useful behavior that we were not able to specify ourselves. if we train a chapter practical methodology classification task and it achieves test error we have neural network on a no straightforward way of knowing if this is the expected behavior or sub-optimal behavior. new a further difficulty is that most machine learning models have multiple parts that are each adaptive. if one part is broken the other parts can adapt and still achieve roughly acceptable performance. for example suppose that we are training a neural net with several layers parametrized by weights w and biases b. suppose further that we have manually implemented the gradient descent rule for each parameter separately and we made an error in the update for the biases b b where is the learning rate. this erroneous update does not use the gradient at all. it causes the biases to constantly become negative throughout learning which is clearly not a correct implementation of any reasonable learning algorithm. the bug may not be apparent just from examining the output of the model though. depending on the distribution of the input the weights may be able to adapt to compensate for the negative biases. most debugging strategies for neural nets are designed to get around one or both of these two difficulties. either we design a case that is so simple that the correct behavior actually can be predicted or we design a test that exercises one part of the neural net implementation in isolation. some important debugging tests include visualize the model in action when training a model to detect objects in images view some images with the detections proposed by the model displayed superimposed on the image. when training a generative model of speech listen to some of the speech samples it produces. this may seem obvious but it is easy to fall into the practice of only looking at quantitative performance measurements like accuracy or log-likelihood. directly observing the machine learning model performing its task will help to determine whether the quantitative performance numbers it achieves seem reasonable. evaluation bugs can be some of the most devastating bugs because they can mislead you into believing your system is performing well when it is not. visualize the worst mistakes most models are able to output some sort of confidence measure for the task they perform. for example classifiers based on a softmax output layer assign a probability to each class. the probability assigned to the most likely class thus gives an estimate of the confidence the model has in its classification decision. typically maximum likelihood training results in these values being overestimates rather than accurate probabilities of correct prediction chapter practical methodology but they are somewhat useful in the sense that examples that are actually less likely to be correctly labeled receive smaller probabilities under the model. by viewing the training set examples that are the hardest to model correctly one can often discover problems with the way the data has been preprocessed or labeled. for example the street view transcription system originally had a problem where the address number detection system would crop the image too tightly and omit some of the digits. the transcription network then assigned very low probability to the correct answer on these images. sorting the images to identify the most confident mistakes showed that there was a systematic problem with the cropping. modifying the detection system to crop much wider images resulted in much better performance of the overall system even though the transcription network needed to be able to process greater variation in the position and scale of the address numbers. reasoning about software using train and test error it is often difficult to determine whether the underlying software is correctly implemented. some clues can be obtained from the train and test error. if training error is low but test error is high then it is likely that that the training procedure works correctly and the model is overfitting for fundamental algorithmic reasons. an alternative possibility is that the test error is measured incorrectly due to a problem with saving the model after training then reloading it for test set evaluation or if the test data was prepared differently from the training data. if both train and test error are high then it is difficult to determine whether there is a software defect or whether the model is underfitting due to fundamental algorithmic reasons. this scenario requires further tests described next. fit a tiny dataset if you have high error on the training set determine whether it is due to genuine underfitting or due to a software defect. usually even small models can be guaranteed to be able fit a sufficiently small dataset. for example a classification dataset with only one example can be fit just by setting the biases of the output layer correctly. usually if you cannot train a classifier to correctly label a single example an autoencoder to successfully reproduce a single example with high fidelity or a generative model to consistently emit samples resembling a single example there is a software defect preventing successful optimization on the training set. this test can be extended to a small dataset with few examples. compare back-propagated derivatives to numerical derivatives if you are using a software framework that requires you to implement your own gradient computations or if you are adding a new operation to a differentiation library and must define its bprop method then a common source of error is implementing this gradient expression incorrectly. one way to verify that these derivatives are correct chapter practical methodology is to compare the derivatives computed by your implementation of automatic differentiation to the derivatives computed by a finite differences because f lim x f x f x we can approximate the derivative by using a small finite f x f x f x we can improve the accuracy of the approximation by using the centered difference f x f x f x the perturbation size must chosen to be large enough to ensure that the perturbation is not rounded down too much by finite-precision numerical computations. m r usually we will want to test the gradient or jacobian of a vector-valued function n. unfortunately finite differencing only allows us to take a single g r derivative at a time. we can either run finite differencing mn times to evaluate all of the partial derivatives of g or we can apply the test to a new function that uses random projections at both the input and output of g. for example we can apply our test of the implementation of the derivatives to fx where f ut gvx where u and v are randomly chosen vectors. computing f correctly requires being able to back-propagate through g correctly yet is efficient to do with finite differences because f has only a single input and a single output. it is usually a good idea to repeat this test for more than one value of u and v to reduce the chance that the test overlooks mistakes that are orthogonal to the random projection. if one has access to numerical computation on complex numbers then there is a very efficient way to numerically estimate the gradient by using complex numbers as input to the function and trapp the method is based on the observation that f x f x i i f x o real f x f x i o f x o imag f x i where i unlike in the real-valued case above there is no cancellation effect due to taking the difference between the value of f at different points. this allows which make the o error insignificant the use of tiny values of like for all practical purposes. chapter practical methodology monitor histograms of activations and gradient it is often useful to visualize statistics of neural network activations and gradients collected over a large amount of training iterations one epoch. the pre-activation value of hidden units can tell us if the units saturate or how often they do. for example for rectifiers how often are they off? are there units that are always off? for tanh units the average of the absolute value of the pre-activations tells us how saturated the unit is. in a deep network where the propagated gradients quickly grow or quickly vanish optimization may be hampered. finally it is useful to compare the magnitude of parameter gradients to the magnitude of the parameters themselves. as suggested by we would like the magnitude of parameter updates over a minibatch to represent something like of the magnitude of the parameter not or would make the parameters move too slowly. it may be that some groups of parameters are moving at a good pace while others are stalled. when the data is sparse in natural language some parameters may be very rarely updated and this should be kept in mind when monitoring their evolution. bottou iii finally many deep learning algorithms provide some sort of guarantee about the results produced at each step. for example in part we will see some approximate inference algorithms that work by using algebraic solutions to optimization problems. typically these can be debugged by testing each of their guarantees. some guarantees that some optimization algorithms offer include that the objective function will never increase after one step of the algorithm that the gradient with respect to some subset of variables will be zero after each step of the algorithm and that the gradient with respect to all variables will be zero at convergence. usually due to rounding error these conditions will not hold exactly in a digital computer so the debugging test should include some tolerance parameter. example multi-digit number recognition to provide an end-to-end description of how to apply our design methodology in practice we present a brief account of the street view transcription system from the point of view of designing the deep learning components. obviously many other components of the complete system such as the street view cars the database infrastructure and so on were of paramount importance. from the point of view of the machine learning task the process began with data collection. the cars collected the raw data and human operators provided labels. the transcription task was preceded by a significant amount of dataset curation including using other machine learning techniques to detect the house chapter practical methodology numbers prior to transcribing them. the transcription project began with a choice of performance metrics and desired values for these metrics. an important general principle is to tailor the choice of metric to the business goals for the project. because maps are only useful if they have high accuracy it was important to set a high accuracy requirement for this project. specifically the goal was to obtain human-level accuracy. this level of accuracy may not always be feasible to obtain. in order to reach this level of accuracy the street view transcription system sacrifices coverage. coverage thus became the main performance metric optimized during the project with accuracy held at as the convolutional network improved it became possible to reduce the confidence threshold below which the network refuses to transcribe the input eventually exceeding the goal of coverage. after choosing quantitative goals the next step in our recommended methodology is to rapidly establish a sensible baseline system. for vision tasks this means a convolutional network with rectified linear units. the transcription project began with such a model. at the time it was not common for a convolutional network to output a sequence of predictions. in order to begin with the simplest possible baseline the first implementation of the output layer of the model consisted of n different softmax units to predict a sequence of n characters. these softmax units were trained exactly the same as if the task were classification with each softmax unit trained independently. our recommended methodology is to iteratively refine the baseline and test whether each change makes an improvement. the first change to the street view transcription system was motivated by a theoretical understanding of the coverage metric and the structure of the data. specifically the network refuses to classify an input x whenever the probability of the output sequence py x t for some threshold t. initially the definition of py x was ad-hoc based on simply multiplying all of the softmax outputs together. this motivated the development of a specialized output layer and cost function that actually computed a principled log-likelihood. this approach allowed the example rejection mechanism to function much more effectively. at this point coverage was still below yet there were no obvious theoretical problems with the approach. our methodology therefore suggests to instrument the train and test set performance in order to determine whether the problem is underfitting or overfitting. in this case train and test set error were nearly identical. indeed the main reason this project proceeded so smoothly was the availability of a dataset with tens of millions of labeled examples. because train and test set error were so similar this suggested that the problem was either due chapter practical methodology to underfitting or due to a problem with the training data. one of the debugging strategies we recommend is to visualize the model s worst errors. in this case that meant visualizing the incorrect training set transcriptions that the model gave the highest confidence. these proved to mostly consist of examples where the input image had been cropped too tightly with some of the digits of the address being removed by the cropping operation. for example a photo of an address might be cropped too tightly with only the remaining visible. this problem could have been resolved by spending weeks improving the accuracy of the address number detection system responsible for determining the cropping regions. instead the team took a much more practical decision to simply expand the width of the crop region to be systematically wider than the address number detection system predicted. this single change added ten percentage points to the transcription system s coverage. finally the last few percentage points of performance came from adjusting hyperparameters. this mostly consisted of making the model larger while maintaining some restrictions on its computational cost. because train and test error remained roughly equal it was always clear that any performance deficits were due to underfitting as well as due to a few remaining problems with the dataset itself. overall the transcription project was a great success and allowed hundreds of millions of addresses to be transcribed both faster and at lower cost than would have been possible via human effort. we hope that the design principles described in this chapter will lead to many other similar successes. chapter applications in this chapter we describe how to use deep learning to solve applications in computer vision speech recognition natural language processing and other application areas of commercial interest. we begin by discussing the large scale neural network implementations required for most serious ai applications. next we review several specific application areas that deep learning has been used to solve. while one goal of deep learning is to design algorithms that are capable of solving a broad variety of tasks so far some degree of specialization is needed. for example vision tasks require processing a large number of input features per example. language tasks require modeling a large number of possible values in the vocabulary per input feature. large-scale deep learning deep learning is based on the philosophy of connectionism while an individual biological neuron or an individual feature in a machine learning model is not intelligent a large population of these neurons or features acting together can exhibit intelligent behavior. it truly is important to emphasize the fact that the number of neurons must be large. one of the key factors responsible for the improvement in neural network s accuracy and the improvement of the complexity of tasks they can solve between the and today is the dramatic increase in the size of the networks we use. as we saw in section network sizes have grown exponentially for the past three decades yet artificial neural networks are only as large as the nervous systems of insects. because the size of neural networks is of paramount importance deep learning chapter applications requires high performance hardware and software infrastructure. fast cpu implementations traditionally neural networks were trained using the cpu of a single machine. today this approach is generally considered insufficient. we now mostly use gpu computing or the cpus of many machines networked together. before moving to these expensive setups researchers worked hard to demonstrate that cpus could not manage the high computational workload required by neural networks. a description of how to implement efficient numerical cpu code is beyond the scope of this book but we emphasize here that careful implementation for specific cpu families can yield large improvements. for example in the best cpus available could run neural network workloads faster when using fixed-point arithmetic rather than floating-point arithmetic. by creating a carefully tuned fixedpoint implementation vanhoucke obtained a threefold speedup over a strong floating-point system. each new model of cpu has different performance characteristics so sometimes floating-point implementations can be faster too. the important principle is that careful specialization of numerical computation routines can yield a large payoff. other strategies besides choosing whether to use fixed or floating point include optimizing data structures to avoid cache misses and using vector instructions. many machine learning researchers neglect these implementation details but when the performance of an implementation restricts the size of the model the accuracy of the model suffers. et al. gpu implementations most modern neural network implementations are based on graphics processing units. graphics processing units are specialized hardware components that were originally developed for graphics applications. the consumer market for video gaming systems spurred development of graphics processing hardware. the performance characteristics needed for good video gaming systems turn out to be beneficial for neural networks as well. video game rendering requires performing many operations in parallel quickly. models of characters and environments are specified in terms of lists of coordinates of vertices. graphics cards must perform matrix multiplication and division on many vertices in parallel to convert these coordinates into on-screen coordinates. the graphics card must then perform many computations at each pixel in parallel to determine the color of each pixel. in both cases the chapter applications computations are fairly simple and do not involve much branching compared to the computational workload that a cpu usually encounters. for example each vertex in the same rigid object will be multiplied by the same matrix there is no need to evaluate an if statement per-vertex to determine which matrix to multiply by. the computations are also entirely independent of each other and thus may be parallelized easily. the computations also involve processing massive buffers of memory containing bitmaps describing the texture pattern of each object to be rendered. together this results in graphics cards having been designed to have a high degree of parallelism and high memory bandwidth at the cost of having a lower clock speed and less branching capability relative to traditional cpus. neural network algorithms require the same performance characteristics as the real-time graphics algorithms described above. neural networks usually involve large and numerous buffers of parameters activation values and gradient values each of which must be completely updated during every step of training. these buffers are large enough to fall outside the cache of a traditional desktop computer so the memory bandwidth of the system often becomes the rate limiting factor. gpus offer a compelling advantage over cpus due to their high memory bandwidth. neural network training algorithms typically do not involve much branching or sophisticated control so they are appropriate for gpu hardware. since neural networks can be divided into multiple individual neurons that can be processed independently from the other neurons in the same layer neural networks easily benefit from the parallelism of gpu computing. gpu hardware was originally so specialized that it could only be used for graphics tasks. over time gpu hardware became more flexible allowing custom subroutines to be used to transform the coordinates of vertices or assign colors to pixels. in principle there was no requirement that these pixel values actually be based on a rendering task. these gpus could be used for scientific computing by writing the output of a computation to a buffer of pixel values. steinkrau et al. implemented a two-layer fully connected neural network on a gpu and reported a threefold speedup over their cpu-based baseline. shortly thereafter chellapilla demonstrated that the same technique could be used to accelerate supervised convolutional networks. et al. the popularity of graphics cards for neural network training exploded after the advent of general purpose gpus. these gp-gpus could execute arbitrary code not just rendering subroutines. nvidia s cuda programming language provided a way to write this arbitrary code in a c-like language. with their relatively convenient programming model massive parallelism and high memory chapter applications bandwidth gp-gpus now offer an ideal platform for neural network programming. this platform was rapidly adopted by deep learning researchers soon after it became available raina et al. ciresan et al. writing efficient code for gp-gpus remains a difficult task best left to specialists. the techniques required to obtain good performance on gpu are very different from those used on cpu. for example good cpu-based code is usually designed to read information from the cache as much as possible. on gpu most writable memory locations are not cached so it can actually be faster to compute the same value twice rather than compute it once and read it back from memory. gpu code is also inherently multi-threaded and the different threads must be coordinated with each other carefully. for example memory operations are faster if they can be coalesced. coalesced reads or writes occur when several threads can each read or write a value that they need simultaneously as part of a single memory transaction. different models of gpus are able to coalesce different kinds of read or write patterns. typically memory operations are easier to coalesce if among n threads thread i accesses byte i j of memory and j is a multiple of some power of the exact specifications differ between models of gpu. another common consideration for gpus is making sure that each thread in a group executes the same instruction simultaneously. this means that branching can be difficult on gpu. threads are divided into small groups called warps. each thread in a warp executes the same instruction during each cycle so if different threads within the same warp need to execute different code paths these different code paths must be traversed sequentially rather than in parallel. due to the difficulty of writing high performance gpu code researchers should structure their workflow to avoid needing to write new gpu code in order to test new models or algorithms. typically one can do this by building a software library of high performance operations like convolution and matrix multiplication then specifying models in terms of calls to this library of operations. for example the machine learning library specifies all of its machine learning algorithms in terms of calls to theano bergstra et al. bastien which provide these high-performance operations. this factored approach can also ease support for multiple kinds of hardware. for example the same theano program can run on either cpu or gpu without needing to change any of the calls to theano itself. other libraries like tensorflow collobert et al. provide similar features. and cuda-convnet abadi et al. and torch krizhevsky et al. et al. chapter applications large-scale distributed implementations in many cases the computational resources available on a single machine are insufficient. we therefore want to distribute the workload of training and inference across many machines. distributing inference is simple because each input example we want to process can be run by a separate machine. this is known as data parallelism it is also possible to get model parallelism where multiple machines work together on a single datapoint with each machine running a different part of the model. this is feasible for both inference and training. data parallelism during training is somewhat harder. we can increase the size of the minibatch used for a single sgd step but usually we get less than linear returns in terms of optimization performance. it would be better to allow multiple machines to compute multiple gradient descent steps in parallel. unfortunately the standard definition of gradient descent is as a completely sequential algorithm the gradient at step is a function of the parameters produced by step t t et al. recht this can be solved using asynchronous stochastic gradient descent et al. in this approach several processor cores share the memory representing the parameters. each core reads parameters without a lock then computes a gradient then increments the parameters without a lock. this reduces the average amount of improvement that each gradient descent step yields because some of the cores overwrite each other s progress but the increased rate of production of steps causes the learning process to be faster overall. dean et al. pioneered the multi-machine implementation of this lock-free approach to gradient descent where the parameters are managed by a parameter server rather than stored in shared memory. distributed asynchronous gradient descent remains the primary strategy for training large deep networks and is used by most major deep learning groups in industry chilimbi et al. wu et al. academic deep learning researchers typically cannot afford the same scale of distributed learning systems but some research has focused on how to build distributed networks with relatively low-cost hardware available in the university setting coates et al. model compression in many commercial applications it is much more important that the time and memory cost of running inference in a machine learning model be low than that the time and memory cost of training be low. for applications that do not require chapter applications personalization it is possible to train a model once then deploy it to be used by billions of users. in many cases the end user is more resource-constrained than the developer. for example one might train a speech recognition network with a powerful computer cluster then deploy it on mobile phones. et al. a key strategy for reducing the cost of inference is model compression a the basic idea of model compression is to replace the original expensive model with a smaller model that requires less memory and runtime to store and evaluate. model compression is applicable when the size of the original model is driven primarily by a need to prevent overfitting. in most cases the model with the lowest generalization error is an ensemble of several independently trained models. evaluating all n ensemble members is expensive. sometimes even a single model generalizes better if it is large example if it is regularized with dropout. these large models learn some function fx but do so using many more parameters than are necessary for the task. their size is necessary only due to the limited number of training examples. as soon as we have fit this function f we can generate a training set containing infinitely many examples simply by applying f to randomly sampled points x. we then train the new smaller model to match f on these points. in order to most efficiently use the capacity of the new small model it is best to sample the new x points from a distribution resembling the actual test inputs that will be supplied to the model later. this can be done by corrupting training examples or by drawing points from a generative model trained on the original training set. alternatively one can train the smaller model only on the original training points but train it to copy other features of the model such as its posterior distribution over the incorrect classes et al. dynamic structure one strategy for accelerating data processing systems in general is to build systems that have dynamic structure in the graph describing the computation needed to process an input. data processing systems can dynamically determine which subset of many neural networks should be run on a given input. individual neural networks can also exhibit dynamic structure internally by determining which subset of features units to compute given information from the input. this form of dynamic structure inside neural networks is sometimes called conditional computation since many components of the architecture may be relevant only for a small amount of possible inputs the bengio bengio et al. chapter applications system can run faster by computing these features only when they are needed. dynamic structure of computations is a basic computer science principle applied generally throughout the software engineering discipline. the simplest versions of dynamic structure applied to neural networks are based on determining which subset of some group of neural networks other machine learning models should be applied to a particular input. a venerable strategy for accelerating inference in a classifier is to use a cascade of classifiers. the cascade strategy may be applied when the goal is to detect the presence of a rare object event. to know for sure that the object is present we must use a sophisticated classifier with high capacity that is expensive to run. however because the object is rare we can usually use much less computation to reject inputs as not containing the object. in these situations we can train a sequence of classifiers. the first classifiers in the sequence have low capacity and are trained to have high recall. in other words they are trained to make sure we do not wrongly reject an input when the object is present. the final classifier is trained to have high precision. at test time we run inference by running the classifiers in a sequence abandoning any example as soon as any one element in the cascade rejects it. overall this allows us to verify the presence of objects with high confidence using a high capacity model but does not force us to pay the cost of full inference for every example. there are two different ways that the cascade can achieve high capacity. one way is to make the later members of the cascade individually have high capacity. in this case the system as a whole obviously has high capacity because some of its individual members do. it is also possible to make a cascade in which every individual model has low capacity but the system as a whole has high capacity due to the combination of many small models. viola and jones used a cascade of boosted decision trees to implement a fast and robust face detector suitable for use in handheld digital cameras. their classifier localizes a face using essentially a sliding window approach in which many windows are examined and rejected if they do not contain faces. another version of cascades uses the earlier models to implement a sort of hard attention mechanism the early members of the cascade localize an object and later members of the cascade perform further processing given the location of the object. for example google transcribes address numbers from street view imagery using a two-step cascade that first locates the address number with one machine learning model and then transcribes it with another et al. decision trees themselves are an example of dynamic structure because each node in the tree determines which of its subtrees should be evaluated for each input. a simple way to accomplish the union of deep learning and dynamic structure chapter applications is to train a decision tree in which each node uses a neural network to make the splitting decision though this has typically not been done with the primary goal of accelerating inference computations. guo and gelfand et al. in the same spirit one can use a neural network called the gater to select which one out of several expert networks will be used to compute the output given the current input. the first version of this idea is called the mixture of experts jacobs in which the gater outputs a set of probabilities or weights via a softmax nonlinearity one per expert and the final output is obtained by the weighted combination of the output of the experts. in that case the use of the gater does not offer a reduction in computational cost but if a single expert is chosen by the gater for each example we obtain the hard mixture of experts which can considerably accelerate training and inference time. this strategy works well when the number of gating decisions is small because it is not combinatorial. but when we want to select different subsets of units or parameters it is not possible to use a soft switch because it requires enumerating computing outputs for all the gater configurations. to deal with this problem several approaches have been explored to train combinatorial gaters. experiment with several estimators of the gradient on the gating probabilities while bacon et al. use reinforcement learning techniques gradient to learn a form of conditional dropout on blocks of hidden units and get an actual reduction in computational cost without impacting negatively on the quality of the approximation. collobert et al. bengio et al. bengio et al. and another kind of dynamic structure is a switch where a hidden unit can receive input from different units depending on the context. this dynamic routing approach can be interpreted as an attention mechanism olshausen et al. so far the use of a hard switch has not proven effective on large-scale applications. contemporary approaches instead use a weighted average over many possible inputs and thus do not achieve all of the possible computational benefits of dynamic structure. contemporary attention mechanisms are described in section one major obstacle to using dynamically structured systems is the decreased degree of parallelism that results from the system following different code branches for different inputs. this means that few operations in the network can be described as matrix multiplication or batch convolution on a minibatch of examples. we can write more specialized sub-routines that convolve each example with different kernels or multiply each row of a design matrix by a different set of columns of weights. unfortunately these more specialized subroutines are difficult to implement efficiently. cpu implementations will be slow due to the lack of cache chapter applications coherence and gpu implementations will be slow due to the lack of coalesced memory transactions and the need to serialize warps when members of a warp take different branches. in some cases these issues can be mitigated by partitioning the examples into groups that all take the same branch and processing these groups of examples simultaneously. this can be an acceptable strategy for minimizing the time required to process a fixed amount of examples in an o ine setting. in a real-time setting where examples must be processed continuously partitioning the workload can result in load-balancing issues. for example if we assign one machine to process the first step in a cascade and another machine to process the last step in a cascade then the first will tend to be overloaded and the last will tend to be underloaded. similar issues arise if each machine is assigned to implement different nodes of a neural decision tree. specialized hardware implementations of deep networks since the early days of neural networks research hardware designers have worked on specialized hardware implementations that could speed up training andor inference of neural network algorithms. see early and more recent reviews of specialized hardware for deep networks lindsey and lindblad beiu et al. misra and saha et al. et al. chen pham different forms of specialized hardware and jackel mead and ismail kim have been developed over the last decades either with asics integrated circuit either with digital on binary representations of numbers analog and jackel mead and ismail on physical implementations of continuous values as voltages or currents or hybrid implementations digital and analog components. in recent years more flexible fpga programmable gated array implementations the particulars of the circuit can be written on the chip after it has been built have been developed. b et al. though software implementations on general-purpose processing units and gpus typically use or bits of precision to represent floating point numbers it has long been known that it was possible to use less precision at least at inference time and baker holi and hwang presley and haggard simard and graf wawrzynek et al. this has become a more pressing issue in recent years as deep learning has gained in popularity in industrial products and as the great impact of faster hardware was demonstrated with gpus. another factor that motivates current research on specialized hardware for deep networks is that the rate of progress of a single cpu or gpu core has slowed down and most recent improvements in savich et al. chapter applications computing speed have come from parallelization across cores in cpus or gpus. this is very different from the situation of the previous neural network era where the hardware implementations of neural networks might take two years from inception to availability of a chip could not keep up with the rapid progress and low prices of general-purpose cpus. building specialized hardware is thus a way to push the envelope further at a time when new hardware designs are being developed for low-power devices such as phones aiming for general-public applications of deep learning with speech computer vision or natural language. et al. gupta et al. et al. courbariaux recent work on low-precision implementations of backprop-based neural nets suggests that between and bits of precision can suffice for using or training deep neural networks with back-propagation. what is clear is that more precision is required during training than at inference time and that some forms of dynamic fixed point representation of numbers can be used to reduce how many bits are required per number. traditional fixed point numbers are restricted to a fixed range corresponds to a given exponent in a floating point representation. dynamic fixed point representations share that range among a set of numbers as all the weights in one layer. using fixed point rather than floating point representations and using less bits per number reduces the hardware surface area power requirements and computing time needed for performing multiplications and multiplications are the most demanding of the operations needed to use or train a modern deep network with backprop. computer vision computer vision has traditionally been one of the most active research areas for deep learning applications because vision is a task that is effortless for humans and many animals but challenging for computers many of the most popular standard benchmark tasks for deep learning algorithms are forms of object recognition or optical character recognition. ballard et al. computer vision is a very broad field encompassing a wide variety of ways of processing images and an amazing diversity of applications. applications of computer vision range from reproducing human visual abilities such as recognizing faces to creating entirely new categories of visual abilities. as an example of the latter category one recent computer vision application is to recognize sound waves from the vibrations they induce in objects visible in a video davis et al. most deep learning research on computer vision has not focused on such chapter applications exotic applications that expand the realm of what is possible with imagery but rather a small core of ai goals aimed at replicating human abilities. most deep learning for computer vision is used for object recognition or detection of some form whether this means reporting which object is present in an image annotating an image with bounding boxes around each object transcribing a sequence of symbols from an image or labeling each pixel in an image with the identity of the object it belongs to. because generative modeling has been a guiding principle of deep learning research there is also a large body of work on image synthesis using deep models. while image synthesis is usually not considered a computer vision endeavor models capable of image synthesis are usually useful for image restoration a computer vision task involving repairing defects in images or removing objects from images. ex nihilo preprocessing many application areas require sophisticated preprocessing because the original input comes in a form that is difficult for many deep learning architectures to represent. computer vision usually requires relatively little of this kind of preprocessing. the images should be standardized so that their pixels all lie in the same reasonable range like or mixing images that lie in with images that lie in will usually result in failure. formatting images to have the same scale is the only kind of preprocessing that is strictly necessary. many computer vision architectures require images of a standard size so images must be cropped or scaled to fit that size. even this rescaling is not always strictly necessary. some convolutional models accept variably-sized inputs and dynamically adjust the size of their pooling regions to keep the output size constant et al. other convolutional models have variable-sized output that automatically scales in size with the input such as models that denoise or label each pixel in an image hadsell et al. dataset augmentation may be seen as a way of preprocessing the training set only. dataset augmentation is an excellent way to reduce the generalization error of most computer vision models. a related idea applicable at test time is to show the model many different versions of the same input example the same image cropped at slightly different locations and have the different instantiations of the model vote to determine the output. this latter idea can be interpreted as an ensemble approach and helps to reduce generalization error. other kinds of preprocessing are applied to both the train and the test set with the goal of putting each example into a more canonical form in order to reduce the amount of variation that the model needs to account for. reducing the amount of chapter applications variation in the data can both reduce generalization error and reduce the size of the model needed to fit the training set. simpler tasks may be solved by smaller models and simpler solutions are more likely to generalize well. preprocessing of this kind is usually designed to remove some kind of variability in the input data that is easy for a human designer to describe and that the human designer is confident has no relevance to the task. when training with large datasets and large models this kind of preprocessing is often unnecessary and it is best to just let the model learn which kinds of variability it should become invariant to. for example the alexnet system for classifying imagenet only has one preprocessing step subtracting the mean across training examples of each pixel et al. contrast normalization one of the most obvious sources of variation that can be safely removed for many tasks is the amount of contrast in the image. contrast simply refers to the magnitude of the difference between the bright and the dark pixels in an image. there are many ways of quantifying the contrast of an image. in the context of deep learning contrast usually refers to the standard deviation of the pixels in an image or region of an image. suppose we have an image represented by a tensor with being the red intensity at row i and column j giving x the green intensity and giving the blue intensity. then the contrast of the entire image is given by r c r x xijk where x is the mean intensity of the entire image r c x r c xijk. global contrast normalization aims to prevent images from having varying amounts of contrast by subtracting the mean from each image then rescaling it so that the standard deviation across its pixels is equal to some constant s. this approach is complicated by the fact that no scaling factor can change the contrast of a zero-contrast image whose pixels all have equal intensity. images with very low but non-zero contrast often have little information content. dividing by the true standard deviation usually accomplishes nothing chapter applications more than amplifying sensor noise or compression artifacts in such cases. this motivates introducing a small positive regularization parameter to bias the estimate of the standard deviation. alternately one can constrain the denominator to be at least given an input image x gcn produces an output image x defined such that x xijk ijk s x max r c xijk x datasets consisting of large images cropped to interesting objects are unlikely to contain any images with nearly constant intensity. in these cases it is safe to practically ignore the small denominator problem by setting and avoid division by in extremely rare cases by setting to an extremely low value like on the dataset. small images cropped randomly are more likely to have nearly constant intensity making aggressive regularization more useful. used and on small randomly selected patches drawn from this is the approach used by goodfellow et al. coates et al. the scale parameter s can usually be set to as done by or chosen to make each individual pixel have standard deviation across examples close to as done by goodfellow et al. coates et al. is just a rescaling of the the standard deviation in equation norm of the image the mean of the image has already been removed. it is preferable to define gcn in terms of standard deviation rather than norm because the standard deviation includes division by the number of pixels so gcn based on standard deviation allows the same s to be used regardless of image size. however the observation that the norm is proportional to the standard deviation can help build a useful intuition. one can understand gcn as mapping examples to a spherical shell. see figure for an illustration. this can be a useful property because neural networks are often better at responding to directions in space rather than exact locations. responding to multiple distances in the same direction requires hidden units with collinear weight vectors but different biases. such coordination can be difficult for the learning algorithm to discover. additionally many shallow graphical models have problems with representing multiple separated modes along the same line. gcn avoids these problems by reducing each example to a direction rather than a direction and a distance. counterintuitively there is a preprocessing operation known as sphering and it is not the same operation as gcn. sphering does not refer to making the data lie on a spherical shell but rather to rescaling the principal components to have chapter applications raw input gcn gcn x x figure gcn maps examples onto a sphere. input data may have any norm. with maps all non-zero examples perfectly onto a sphere. here we use s and because we use gcn based on normalizing the standard deviation rather than the norm the resulting sphere is not the unit sphere. gcn with draws examples toward the sphere but does not completely discard the variation in their norm. we leave and the same as before. s equal variance so that the multivariate normal distribution used by pca has spherical contours. sphering is more commonly known as whitening global contrast normalization will often fail to highlight image features we would like to stand out such as edges and corners. if we have a scene with a large dark area and a large bright area as a city square with half the image in the shadow of a building then global contrast normalization will ensure there is a large difference between the brightness of the dark area and the brightness of the light area. it will not however ensure that edges within the dark region stand out. this motivates local contrast normalization. local contrast normalization ensures that the contrast is normalized across each small window rather than over the image as a whole. see figure for a comparison of global and local contrast normalization. various definitions of local contrast normalization are possible. in all cases one modifies each pixel by subtracting a mean of nearby pixels and dividing by a standard deviation of nearby pixels. in some cases this is literally the mean and standard deviation of all pixels in a rectangular window centered on the pixel to be modified in other cases this is a weighted mean and weighted standard deviation using gaussian weights centered on the pixel to be modified. in the case of color images some strategies process different color pinto et al. chapter applications input image gcn lcn figure a comparison of global and local contrast normalization. visually the effects of global contrast normalization are subtle. it places all images on roughly the same scale which reduces the burden on the learning algorithm to handle multiple scales. local contrast normalization modifies the image much more discarding all regions of constant intensity. this allows the model to focus on just the edges. regions of fine texture such as the houses in the second row may lose some detail due to the bandwidth of the normalization kernel being too high. channels separately while others combine information from different channels to normalize each pixel sermanet et al. local contrast normalization can usually be implemented efficiently by using separable convolution section to compute feature maps of local means and local standard deviations then using element-wise subtraction and element-wise division on different feature maps. local contrast normalization is a differentiable operation and can also be used as a nonlinearity applied to the hidden layers of a network as well as a preprocessing operation applied to the input. as with global contrast normalization we typically need to regularize local contrast normalization to avoid division by zero. in fact because local contrast normalization typically acts on smaller windows it is even more important to regularize. smaller windows are more likely to contain values that are all nearly the same as each other and thus more likely to have zero standard deviation. chapter applications dataset augmentation as described in section it is easy to improve the generalization of a classifier by increasing the size of the training set by adding extra copies of the training examples that have been modified with transformations that do not change the class. object recognition is a classification task that is especially amenable to this form of dataset augmentation because the class is invariant to so many transformations and the input can be easily transformed with many geometric operations. as described before classifiers can benefit from random translations rotations and in some cases flips of the input to augment the dataset. in specialized computer vision applications more advanced transformations are commonly used for dataset augmentation. these schemes include random perturbation of the colors in an image and nonlinear geometric distortions of the input krizhevsky et al. lecun et al. speech recognition the task of speech recognition is to map an acoustic signal containing a spoken natural language utterance into the corresponding sequence of words intended by the speaker. let x x denote the sequence of acoustic input vectors produced by splitting the audio into frames. most speech recognition systems preprocess the input using specialized hand-designed features but some deep learning systems learn features from raw input. let y yn denote the target output sequence a sequence of words or characters. the automatic speech recognition task consists of creating a function f asr that computes the most probable linguistic sequence given the acoustic sequence jaitly and hinton x y asr f x arg max p y y x x where p y. is the true conditional distribution relating the inputs x to the targets since the and until about state-of-the art speech recognition systems primarily combined hidden markov models and gaussian mixture models gmms modeled the association between acoustic features and phonemes while hmms modeled the sequence of phonemes. the gmm-hmm model family treats acoustic waveforms as being generated by the following process first an hmm generates a sequence of phonemes and discrete sub-phonemic states as the beginning middle and end of each bahl et al. chapter applications et al. et al. et al. konig phoneme then a gmm transforms each discrete symbol into a brief segment of audio waveform. although gmm-hmm systems dominated asr until recently speech recognition was actually one of the first areas where neural networks were applied and numerous asr systems from the late and early used robinson and neural nets and wellekens waibel fallside bengio at the time the performance of asr based on neural nets approximately matched the performance of gmm-hmm systems. for example robinson and fallside achieved phoneme error rate on the timit corpus phonemes to discriminate between which was better than or comparable to hmm-based systems. since then timit has been a benchmark for phoneme recognition playing a role similar to the role mnist plays for object recognition. however because of the complex engineering involved in software systems for speech recognition and the effort that had been invested in building these systems on the basis of gmm-hmms the industry did not see a compelling argument for switching to neural networks. as a consequence until the late both academic and industrial research in using neural nets for speech recognition mostly focused on using neural nets to learn extra features for gmm-hmm systems. garofolo et al. later with much larger and deeper models and much larger datasets recognition accuracy was dramatically improved by using neural networks to replace gmms for the task of associating acoustic features to phonemes sub-phonemic states. starting in speech researchers applied a form of deep learning based on unsupervised learning to speech recognition. this approach to deep learning was based on training undirected probabilistic models called restricted boltzmann machines to model the input data. rbms will be described in part iii to solve speech recognition tasks unsupervised pretraining was used to build deep feedforward networks whose layers were each initialized by training an rbm. these networks take spectral acoustic representations in a fixed-size input window a center frame and predict the conditional probabilities of hmm states for that center frame. training such deep networks helped to significantly improve bringing down the the recognition rate on timit phoneme error rate from about to see for an analysis of reasons for the success of these models. extensions to the basic phone recognition pipeline included the addition of speaker-adaptive features et al. that further reduced the error rate. this was quickly followed up by work to expand the architecture from phoneme recognition is what timit is focused on to large-vocabulary speech recognition which involves not just recognizing phonemes but also recognizing sequences of words from a large vocabulary. deep networks for speech recognition eventually mohamed et al. mohamed et al. dahl et al. chapter applications shifted from being based on pretraining and boltzmann machines to being based on techniques such as rectified linear units and dropout zeiler et al. dahl et al. by that time several of the major speech groups in industry had started exploring deep learning in collaboration with academic researchers. hinton et al. describe the breakthroughs achieved by these collaborators which are now deployed in products such as mobile phones. later as these groups explored larger and larger labeled datasets and incorporated some of the methods for initializing training and setting up the architecture of deep nets they realized that the unsupervised pretraining phase was either unnecessary or did not bring any significant improvement. these breakthroughs in recognition performance for word error rate in speech recognition were unprecedented improvement and were following a long period of about ten years during which error rates did not improve much with the traditional gmm-hmm technology in spite of the continuously growing size of training sets figure of deng and yu this created a rapid shift in the speech recognition community towards deep learning. in a matter of roughly two years most of the industrial products for speech recognition incorporated deep neural networks and this success spurred a new wave of research into deep learning algorithms and architectures for asr which is still ongoing today. one of these innovations was the use of convolutional networks sainath et al. that replicate weights across time and frequency improving over the earlier time-delay neural networks that replicated weights only across time. the new two-dimensional convolutional models regard the input spectrogram not as one long vector but as an image with one axis corresponding to time and the other to frequency of spectral components. another important push still ongoing has been towards end-to-end deep learning speech recognition systems that completely remove the hmm. the first major breakthrough in this direction came from graves who trained using map inference over the frame-toa deep lstm rnn section phoneme alignment as in graves has state variables et al. graves from several layers at each time step giving the unfolded graph two kinds of depth ordinary depth due to a stack of layers and depth due to time unfolding. this work brought the phoneme error rate on timit to a record low of see pascanu for other variants of deep rnns applied in other settings. lecun et al. a deep rnn and in the ctc framework et al. et al. graves et al. and et al. chung another contemporary step toward end-to-end deep learning asr is to let the system learn how to align the acoustic-level information with the phonetic-level chapter applications information chorowski et al. lu et al. natural language processing natural language processing is the use of human languages such as english or french by a computer. computer programs typically read and emit specialized languages designed to allow efficient and unambiguous parsing by simple programs. more naturally occurring languages are often ambiguous and defy formal description. natural language processing includes applications such as machine translation in which the learner must read a sentence in one human language and emit an equivalent sentence in another human language. many nlp applications are based on language models that define a probability distribution over sequences of words characters or bytes in a natural language. as with the other applications discussed in this chapter very generic neural network techniques can be successfully applied to natural language processing. however to achieve excellent performance and to scale well to large applications some domain-specific strategies become important. to build an efficient model of natural language we must usually use techniques that are specialized for processing sequential data. in many cases we choose to regard natural language as a sequence of words rather than a sequence of individual characters or bytes. because the total number of possible words is so large word-based language models must operate on an extremely high-dimensional and sparse discrete space. several strategies have been developed to make models of such a space efficient both in a computational and in a statistical sense. n a language model defines a probability distribution over sequences of tokens in a natural language. depending on how the model is designed a token may be a word a character or even a byte. tokens are always discrete entities. the earliest successful language models were based on models of fixed-length sequences of tokens called an is a sequence of tokens. n n n models based on n-grams define the conditional probability of the n-th token tokens. the model uses products of these conditional given the preceding n distributions to define the probability distribution over longer sequences p x x xn p x t xt n xt t n chapter applications this decomposition is justified by the chain rule of probability. the probability distribution over the initial sequence p xn may be modeled by a different model with a smaller value of training n-gram models is straightforward because the maximum likelihood estimate can be computed simply by counting how many times each possible n gram occurs in the training set. models based on n-grams have been the core building block of statistical language modeling for many decades and mercer katz chen and goodman for small values of n models have particular names unigram for bigram for and trigram for these names derive from the latin prefixes for the corresponding numbers and the greek suffix denoting something that is written. usually we train both an n-gram model and an n this makes it easy to compute gram model simultaneously. p x t xt n xt pnxt n n pn xt xt simply by looking up two stored probabilities. for this to exactly reproduce inference in pn we must omit the final character from each sequence when we train p n as an example we demonstrate how a trigram model computes the probability of the sentence the dog ran away. the first words of the sentence cannot be handled by the default formula based on conditional probability because there is no context at the beginning of the sentence. instead we must use the marginal probability over words at the start of the sentence. we thus evaluate dog ran. finally the last word may be predicted using the typical case of using the conditional distribution paway dog ran we obtain putting this together with equation p p the dog ran away the dog ran dog ran away dog ran a fundamental limitation of maximum likelihood for n-gram models is that pn as estimated from training set counts is very likely to be zero in many cases even though the tuple t n xt may appear in the test set. this can cause two different kinds of catastrophic outcomes. when pn is zero the ratio is undefined so the model does not even produce a sensible output. when pn is non-zero but pn is zero the test log-likelihood is to avoid such catastrophic outcomes most n-gram models employ some form of smoothing. smoothing techniques chapter applications chen and goodman shift probability mass from the observed tuples to unobserved ones that are similar. see for a review and empirical comparisons. one basic technique consists of adding non-zero probability mass to all of the possible next symbol values. this method can be justified as bayesian inference with a uniform or dirichlet prior over the count parameters. another very popular idea is to form a mixture model containing higher-order and lower-order n-gram models with the higher-order models providing more capacity and the lower-order models being more likely to avoid counts of zero. back-off methods look-up the lower-order n-grams if the frequency of the context xt x t n is too small to use the higher-order model. more formally they estimate the distribution over xt by using contexts xt n k for increasing k until a sufficiently reliable estimate is xt found. v n possible n-grams and classical n-gram models are particularly vulnerable to the curse of dimensionality. there are v is often very large. even with a massive training set and modest n most n-grams will not occur in the training set. one way to view a classical n-gram model is that it is performing nearest-neighbor lookup. in other words it can be viewed as a local non-parametric predictor similar to k-nearest neighbors. the statistical problems facing these extremely local predictors are described in section the problem for a language model is even more severe than usual because any two different words have the same distance from each other in one-hot vector space. it is thus difficult to leverage much information from any neighbors only training examples that repeat literally the same context are useful for local generalization. to overcome these problems a language model must be able to share knowledge between one word and other semantically similar words. et al. et al. ney and kneser niesler to improve the statistical efficiency of n-gram models class-based language models introduce the notion of word categories and then share statistical strength between words that are in the same category. the idea is to use a clustering algorithm to partition the set of words into clusters or classes based on their co-occurrence frequencies with other words. the model can then use word class ids rather than individual word ids to represent the context on the right side of the conditioning bar. composite models combining word-based and class-based models via mixing or back-off are also possible. although word classes provide a way to generalize between sequences in which some word is replaced by another of the same class much information is lost in this representation. chapter applications neural language models neural language models or nlms are a class of language model designed to overcome the curse of dimensionality problem for modeling natural language sequences by using a distributed representation of words bengio et al. unlike class-based n-gram models neural language models are able to recognize that two words are similar without losing the ability to encode each word as distinct from the other. neural language models share statistical strength between one word its context and other similar words and contexts. the distributed representation the model learns for each word enables this sharing by allowing the model to treat words that have features in common similarly. for example if the word dog and the word cat map to representations that share many attributes then sentences that contain the word cat can inform the predictions that will be made by the model for sentences that contain the word dog and vice-versa. because there are many such attributes there are many ways in which generalization can happen transferring information from each training sentence to an exponentially large number of semantically related sentences. the curse of dimensionality requires the model to generalize to a number of sentences that is exponential in the sentence length. the model counters this curse by relating each training sentence to an exponential number of similar sentences. we sometimes call these word representations word embeddings. in this interpretation we view the raw symbols as points in a space of dimension equal to the vocabulary size. the word representations embed those points in a feature space of lower dimension. in the original space every word is represented by from each a one-hot vector so every pair of words is at euclidean distance other. in the embedding space words that frequently appear in similar contexts any pair of words sharing some features learned by the model are close to each other. this often results in words with similar meanings being neighbors. figure zooms in on specific areas of a learned word embedding space to show how semantically similar words map to representations that are close to each other. neural networks in other domains also define embeddings. for example a hidden layer of a convolutional network provides an image embedding. usually nlp practitioners are much more interested in this idea of embeddings because natural language does not originally lie in a real-valued vector space. the hidden layer has provided a more qualitatively dramatic change in the way the data is represented. the basic idea of using distributed representations to improve models for natural language processing is not restricted to neural networks. it may also be used with graphical models that have distributed representations in the form of chapter applications multiple latent variables and hinton france china russian french english germany ontario iraq japan europe eu unionafrican africa assembly european british canada canadian north south figure two-dimensional visualizations of word embeddings obtained from a neural machine translation model zooming in on specific areas where semantically related words have embedding vectors that are close to each other. countries appear on the left and numbers on the right. keep in mind that these embeddings are for the purpose of visualization. in real applications embeddings typically have higher dimensionality and can simultaneously capture many kinds of similarity between words. bahdanau et al. high-dimensional outputs in many natural language applications we often want our models to produce words than characters as the fundamental unit of the output. for large vocabularies it can be very computationally expensive to represent an output distribution over the choice of a word because the vocabulary size is large. in many applications v contains hundreds of thousands of words. the naive approach to representing such a distribution is to apply an affine transformation from a hidden representation to the output space then apply the softmax function. suppose we have a vocabulary v with size v the weight matrix describing the linear component of this affine transformation is very large because its output dimension is v this imposes a high memory cost to represent the matrix and a high computational cost to multiply by it. because the softmax is normalized across all v outputs it is necessary to perform the full matrix multiplication at training time as well as test time we cannot calculate only the dot product with the weight vector for the correct output. the high computational costs of the output layer thus arise both at training time compute the likelihood and its gradient and at test time compute probabilities for all or selected words. for specialized chapter applications but loss functions the gradient can be computed efficiently the standard cross-entropy loss applied to a traditional softmax output layer poses many difficulties. vincent et al. suppose that h is the top hidden layer used to predict the output probabilities y. if we parametrize the transformation from h to y with learned weights w and learned biases b then the affine-softmax output layer performs the following computations ai bi wijhj i v yi j eai ea i v i v n h. with nh in the v in the hundreds of thousands this operation dominates the if h contains nh elements then the above operation is o thousands and computation of most neural language models. use of a short list bengio et al. the first neural language models dealt with the high cost of using a softmax over a large number of output words by limiting the vocabulary size to or words. schwenk and gauvain schwenk and built upon this approach by splitting the vocabulary v into a shortlist l of most frequent words by the neural net and a tail t v l of more rare words by an n-gram model. to be able to combine the two predictions the neural net also has to predict the probability that a word appearing after context c belongs to the tail list. this may be achieved by adding an extra sigmoid output unit to provide an estimate of p the extra output can then be used to achieve an estimate of the probability distribution over all words in as follows c t v i c p y i c i i c i l p y p y t t p i p i t t c c l is provided by the neural language model and p i where p i c i t is provided by the n-gram model. with slight modification this approach c i can also work using an extra output value in the neural language model s softmax layer rather than a separate sigmoid unit. an obvious disadvantage of the short list approach is that the potential generalization advantage of the neural language models is limited to the most frequent chapter applications words where arguably it is the least useful. this disadvantage has stimulated the exploration of alternative methods to deal with high-dimensional outputs described below. hierarchical softmax goodman to reducing the computational burden a classical approach of high-dimensional output layers over large vocabulary sets v is to decompose probabilities hierarchically. instead of necessitating a number of computations v also proportional to the number of hidden units nh proportional to the morin and bengio introduced this factorized approach to the context of neural language models. v factor can be reduced to as low as log bengio v and one can think of this hierarchy as building categories of words then categories of categories of words then categories of categories of categories of words etc. these nested categories form a tree with words at the leaves. in a balanced tree the tree has depth olog v the probability of a choosing a word is given by the product of the probabilities of choosing the branch leading to that word at every node on a path from the root of the tree to the leaf containing the word. figure also describe how to use multiple paths to identify a single word in order to better model words that have multiple meanings. computing the probability of a word then involves summation over all of the paths that lead to that word. illustrates a simple example. mnih and hinton to predict the conditional probabilities required at each node of the tree we typically use a logistic regression model at each node of the tree and provide the same context c as input to all of these models. because the correct output is encoded in the training set we can use supervised learning to train the logistic regression models. this is typically done using a standard cross-entropy loss corresponding to maximizing the log-likelihood of the correct sequence of decisions. because the output log-likelihood can be computed efficiently low as log v rather than v its gradients may also be computed efficiently. this includes not only the gradient with respect to the output parameters but also the gradients with respect to the hidden layer activations. it is possible but usually not practical to optimize the tree structure to minimize the expected number of computations. tools from information theory specify how to choose the optimal binary code given the relative frequencies of the words. to do so we could structure the tree so that the number of bits associated with a word is approximately equal to the logarithm of the frequency of that word. however in chapter applications and which respectively contain the sets of words figure illustration of a simple hierarchy of word categories with words organized into a three level hierarchy. the leaves of the tree represent actual specific words. internal nodes represent groups of words. any node can be indexed by the sequence of binary decisions to reach the node from the root. super-class contains the classes w and which and similarly super-class respectively contain the words w and w if the tree is sufficiently balanced the maximum depth of binary decisions is on the order of the logarithm of the number of words v words can be obtained by doing v operations for each of the nodes on the path from the root. in this example olog computing the probability of a word y can be done by multiplying three probabilities associated with the binary decisions to move left or right at each node on the path from the root to a node y. let biy be the i-th binary decision when traversing the tree towards the value y. the probability of sampling an output y decomposes into a product of conditional probabilities using the chain rule for conditional probabilities with each node indexed by the prefix of these bits. for example node corresponds to the prefix and the probability of w can be decomposed as follows v the choice of one out of contains the classes and p y w b chapter applications practice the computational savings are typically not worth the effort because the computation of the output probabilities is only one part of the total computation in the neural language model. for example suppose there are l fully connected hidden layers of width nh. let nb be the weighted average of the number of bits required to identify a word with the weighting given by the frequency of these words. in this example the number of operations needed to compute the hidden activations grows as as h while the output computations grow as onhnb. as long as nb lnh we can reduce computation more by shrinking nh than by shrinking nb. indeed nb is often small. because the size of the vocabulary rarely exceeds a million words and but nh is often much larger around or more. rather than carefully optimizing a tree with a branching factor of one can instead define a tree with depth two and a branching factor of v such a tree corresponds to simply defining a set of mutually exclusive word classes. the simple approach based on a tree of depth two captures most of the computational benefit of the hierarchical strategy. it is possible to reduce nb to about morin and bengio one question that remains somewhat open is how to best define these word classes or how to define the word hierarchy in general. early work used existing hierarchies but the hierarchy can also be learned ideally jointly with the neural language model. learning the hierarchy is difficult. an exact optimization of the log-likelihood appears intractable because the choice of a word hierarchy is a discrete one not amenable to gradient-based optimization. however one could use discrete optimization to approximately optimize the partition of words into word classes. an important advantage of the hierarchical softmax is that it brings computational benefits both at training time and at test time if at test time we want to compute the probability of specific words. v words will remain expensive even with the hierarchical softmax. another important operation is selecting the most likely word in a given context. unfortunately the tree structure does not provide an efficient and exact solution to this problem. of course computing the probability of all a disadvantage is that in practice the hierarchical softmax tends to give worse test results than sampling-based methods we will describe next. this may be due to a poor choice of word classes. importance sampling one way to speed up the training of neural language models is to avoid explicitly computing the contribution of the gradient from all of the words that do not appear chapter applications in the next position. every incorrect word should have low probability under the model. it can be computationally costly to enumerate all of these words. instead it is possible to sample only a subset of the words. using the notation introduced in equation the gradient can be written as follows p y c log log y ay i log softmaxy eay i eai log i ea i i c p y ai where a is the vector of pre-softmax activations scores with one element per word. the first term is the positive phase term ay up while the second term is the negative phase term ai down for all i with weight p c since the negative phase term is an expectation we can estimate it with a monte carlo sample. however that would require sampling from the model itself. sampling from the model requires computing p c for all i in the vocabulary which is precisely what we are trying to avoid. instead of sampling from the model one can sample from another distribution called the proposal distribution q and use appropriate weights to correct for the bias introduced by sampling from the wrong distribution and s n cal bengio and s n cal this is an application of a more general technique called importance sampling which will be described in more detail unfortunately even exact importance sampling is not efficient in section because it requires computing weights piqi where pi p c which can only be computed if all the scores ai are computed. the solution adopted for this application is called biased importance sampling where the importance weights are normalized to sum to when negative word ni is sampled the associated gradient is weighted by wi pni i n pnj these weights are used to give the appropriate importance to the m negative samples from q used to form the estimated negative phase contribution to the chapter applications gradient v p i c m a i m wi ani a unigram or a bigram distribution works well as the proposal distribution q it is easy to estimate the parameters of such a distribution from data. after estimating the parameters it is also possible to sample from such a distribution very efficiently. importance sampling is not only useful for speeding up models with large softmax outputs. more generally it is useful for accelerating training with large n sparse output layers where the output is a sparse vector rather than a an example is a bag of words. a bag of words is a sparse vector v where vi indicates the presence or absence of word i from the vocabulary in the document. alternately vi can indicate the number of times that word i appears. machine learning models that emit such sparse vectors can be expensive to train for a variety of reasons. early in learning the model may not actually choose to make the output truly sparse. moreover the loss function we use for training might most naturally be described in terms of comparing every element of the output to every element of the target. this means that it is not always clear that there is a computational benefit to using sparse outputs because the model may choose to make the majority of the output non-zero and all of these non-zero values need to be compared to the corresponding training target even if the training target is zero. dauphin demonstrated that such models can be accelerated using importance sampling. the efficient algorithm minimizes the loss reconstruction for the positive words that are non-zero in the target and an equal number of negative words. the negative words are chosen randomly using a heuristic to sample words that are more likely to be mistaken. the bias introduced by this heuristic oversampling can then be corrected using importance weights. et al. in all of these cases the computational complexity of gradient estimation for the output layer is reduced to be proportional to the number of negative samples rather than proportional to the size of the output vector. noise-contrastive estimation and ranking loss other approaches based on sampling have been proposed to reduce the computational cost of training neural language models with large vocabularies. an early example is the ranking loss proposed by collobert and weston which views the output of the neural language model for each word as a score and tries to make the score of the correct word ay be ranked high in comparison to the other chapter applications scores ai the ranking loss proposed then is l ay ai. i the gradient is zero for the i-th term if the score of the observed word a y is greater than the score of the negative word ai by a margin of one issue with this criterion is that it does not provide estimated conditional probabilities which are useful in some applications including speech recognition and text generation conditional text generation tasks such as translation. a more recently used training objective for neural language model is noisecontrastive estimation which is introduced in section this approach has been successfully applied to neural language models and teh mnih and kavukcuoglu combining neural language models with n a major advantage of n-gram models over neural networks is that n-gram models achieve high model capacity storing the frequencies of very many tuples while requiring very little computation to process an example looking up only a few tuples that match the current context. if we use hash tables or trees to access the counts the computation used for n-grams is almost independent of capacity. in comparison doubling a neural network s number of parameters typically also roughly doubles its computation time. exceptions include models that avoid using all parameters on each pass. embedding layers index only a single embedding in each pass so we can increase the vocabulary size without increasing the computation time per example. some other models such as tiled convolutional networks can add parameters while reducing the degree of parameter sharing in order to maintain the same amount of computation. however typical neural network layers based on matrix multiplication use an amount of computation proportional to the number of parameters. one easy way to add capacity is thus to combine both approaches in an ensemble consisting of a neural language model and an n-gram language model et al. as with any ensemble this technique can reduce test error if the ensemble members make independent mistakes. the field of ensemble learning provides many ways of combining the ensemble members predictions including uniform weighting and weights chosen on a validation set. mikolov extended the ensemble to include not just two models but a large array of models. it is also possible to pair a neural network with a maximum entropy model and this approach can be viewed as training train both jointly et al. et al. chapter applications a neural network with an extra set of inputs that are connected directly to the output and not connected to any other part of the model. the extra inputs are indicators for the presence of particular n-grams in the input context so these variables are very high-dimensional and very sparse. the increase in model capacity sv n parameters but is huge the new portion of the architecture contains up to the amount of added computation needed to process an input is minimal because the extra inputs are very sparse. neural machine translation machine translation is the task of reading a sentence in one natural language and emitting a sentence with the equivalent meaning in another language. machine translation systems often involve many components. at a high level there is often one component that proposes many candidate translations. many of these translations will not be grammatical due to differences between the languages. for example many languages put adjectives after nouns so when translated to english directly they yield phrases such as apple red. the proposal mechanism suggests many variants of the suggested translation ideally including red apple. a second component of the translation system a language model evaluates the proposed translations and can score red apple as better than apple red. schwenk the earliest use of neural networks for machine translation was to upgrade the language model of a translation system by using a neural language model et al. previously most machine translation systems had used an n-gram model for this component. the n-gram based models used for machine translation include not just traditional back-off n-gram models and mercer katz chen and goodman but also maximum entropy language models in which an affine-softmax layer predicts the next word given the presence of frequent berger et al. in the context. n traditional language models simply report the probability of a natural language sentence. because machine translation involves producing an output sentence given an input sentence it makes sense to extend the natural language model to be conditional. as described in section it is straightforward to extend a model that defines a marginal distribution over some variable to define a conditional distribution over that variable given a context c where c might be a single variable or a list of variables. beat the state-of-the-art in some statistical machine translation benchmarks by using an mlp to score a phrase tk in the target language given a phrase s n in the source language. the mlp estimates p tk sn the estimate formed by this mlp replaces the estimate provided by conditional devlin et al. models. n chapter applications output object sentence decoder intermediate semantic representation encoder source object sentence or image figure the encoder-decoder architecture to map back and forth between a surface representation as a sequence of words or an image and a semantic representation. by using the output of an encoder of data from one modality as the encoder mapping from french sentences to hidden representations capturing the meaning of sentences as the input to a decoder for another modality as the decoder mapping from hidden representations capturing the meaning of sentences to english we can train systems that translate from one modality to another. this idea has been applied successfully not just to machine translation but also to caption generation from images. a drawback of the mlp-based approach is that it requires the sequences to be preprocessed to be of fixed length. to make the translation more flexible we would like to use a model that can accommodate variable length inputs and variable length outputs. an rnn provides this ability. section describes several ways of constructing an rnn that represents a conditional distribution over a sequence given some input and section describes how to accomplish this conditioning when the input is a sequence. in all cases one model first reads the input sequence and emits a data structure that summarizes the input sequence. we call this summary the context c the context c may be a list of vectors or it may be a vector or tensor. the model that reads the input to produce c may be an rnn cho et al. sutskever or a convolutional network and blunsom a second model usually an rnn then reads the context c and generates a sentence in the target language. this general idea of an encoder-decoder framework for machine translation is illustrated in figure jean et al. et al. in order to generate an entire sentence conditioned on the source sentence the model must have a way to represent the entire source sentence. earlier models were only able to represent individual words or phrases. from a representation chapter applications learning point of view it can be useful to learn a representation in which sentences that have the same meaning have similar representations regardless of whether they were written in the source language or the target language. this strategy was explored first using a combination of convolutions and rnns and later work introduced the use of an rnn for scoring proposed blunsom translations sutskever et al. and for generating translated sentences scaled these models to larger vocabularies. cho et al. jean et al. using an attention mechanism and aligning pieces of data cc t t h t h th ht ht bahdanau et al. figure a modern attention mechanism as introduced by is essentially a weighted average. a context vector c is formed by taking a weighted average of feature vectors h with weights in some applications the feature vectors h are hidden units of a neural network but they may also be raw input to the model. the weights are produced by the model itself. they are usually values in the interval and are intended to concentrate around just one h so that the weighted average approximates reading that one specific time step precisely. the weights are usually produced by applying a softmax function to relevance scores emitted by another portion of the model. the attention mechanism is more expensive computationally than directly indexing the desired h but direct indexing cannot be trained with gradient descent. the attention mechanism based on weighted averages is a smooth differentiable approximation that can be trained with existing optimization algorithms. using a fixed-size representation to capture all the semantic details of a very long sentence of say words is very difficult. it can be achieved by training a sufficiently large rnn well enough and for long enough as demonstrated by cho et al. however a more efficient approach is to read the whole sentence or paragraph get the context and the gist of what sutskever et al. and chapter applications is being expressed then produce the translated words one at a time each time focusing on a different part of the input sentence in order to gather the semantic details that are required to produce the next output word. that is exactly the idea that first introduced. the attention mechanism used to focus on specific parts of the input sequence at each time step is illustrated in figure bahdanau et al. we can think of an attention-based system as having three components a process that reads raw data as source words in a source sentence and converts them into distributed representations with one feature vector associated with each word position. a list of feature vectors storing the output of the reader. this can be containing a sequence of facts which can be understood as a retrieved later not necessarily in the same order without having to visit all of them. memory a process that the content of the memory to sequentially perform a task at each time step having the ability put attention on the content of one memory element a few with a different weight. exploits the third component generates the translated sentence. when words in a sentence written in one language are aligned with corresponding words in a translated sentence in another language it becomes possible to relate the corresponding word embeddings. earlier work showed that one could learn a kind of translation matrix relating the word embeddings in one language with the word embeddings in another isk yielding lower alignment error rates than traditional approaches based on the frequency counts in the phrase table. there is even earlier work on learning cross-lingual word vectors et al. many extensions to this approach are possible. for example more efficient cross-lingual alignment allows training on larger datasets. gouws et al. et al. historical perspective the idea of distributed representations for symbols was introduced by rumelhart et al. in one of the first explorations of back-propagation with symbols corresponding to the identity of family members and the neural network capturing the relationships between family members with training examples forming triplets such as mother victoria. the first layer of the neural network learned a representation of each family member. for example the features for colin chapter applications might represent which family tree colin was in what branch of that tree he was in what generation he was from etc. one can think of the neural network as computing learned rules relating these attributes together in order to obtain the desired predictions. the model can then make predictions such as inferring who is the mother of colin. the idea of forming an embedding for a symbol was extended to the idea of an these embeddings were learned embedding for a word by deerwester using the svd. later embeddings would be learned by neural networks. et al. the history of natural language processing is marked by transitions in the popularity of different ways of representing the input to the model. following this early work on symbols or words some of the earliest applications of neural networks to nlp represented the input as a sequence of characters. miikkulainen and dyer schmidhuber bengio et al. returned the focus to modeling words and introduced neural language models which produce interpretable word embeddings. these neural models have scaled up from defining representations of a small set of symbols in the to millions of words proper nouns and misspellings in modern applications. this computational scaling effort led to the invention of the techniques described above in section initially the use of words as the fundamental units of language models yielded improved language modeling performance to this day new techniques continually push both character-based models et al. and word-based models forward with recent work even modeling individual bytes of unicode characters. bengio et al. gillick et al. the ideas behind neural language models have been extended into several henderson natural language processing applications such as parsing collobert part-of-speech tagging semantic role labeling chunking etc sometimes using a single multi-task learning architecture and weston collobert in which the word embeddings are shared across tasks. et al. two-dimensional visualizations of embeddings became a popular tool for analyzing language models following the development of the t-sne dimensionality reduction algorithm der maaten and hinton and its high-profile application to visualization word embeddings by joseph turian in chapter applications other applications in this section we cover a few other types of applications of deep learning that are different from the standard object recognition speech recognition and natural language processing tasks discussed above. part of this book will expand that scope even further to tasks that remain primarily research areas. iii recommender systems one of the major families of applications of machine learning in the information technology sector is the ability to make recommendations of items to potential users or customers. two major types of applications can be distinguished online advertising and item recommendations these recommendations are still for the purpose of selling a product. both rely on predicting the association between a user and an item either to predict the probability of some action user buying the product or some proxy for this action or the expected gain may depend on the value of the product if an ad is shown or a recommendation is made regarding that product to that user. the internet is currently financed in great part by various forms of online advertising. there are major parts of the economy that rely on online shopping. companies including amazon and ebay use machine learning including deep learning for their product recommendations. sometimes the items are not products that are actually for sale. examples include selecting posts to display on social network news feeds recommending movies to watch recommending jokes recommending advice from experts matching players for video games or matching people in dating services. often this association problem is handled like a supervised learning problem given some information about the item and about the user predict the proxy of interest clicks on ad user enters a rating user clicks on a like button user buys product user spends some amount of money on the product user spends time visiting a page for the product etc. this often ends up being either a regression problem some conditional expected value or a probabilistic classification problem the conditional probability of some discrete event. the early work on recommender systems relied on minimal information as inputs for these predictions the user id and the item id. in this context the only way to generalize is to rely on the similarity between the patterns of values of the target variable for different users or for different items. suppose that user and user both like items a b and c. from this we may infer that user and chapter applications user have similar tastes. if user likes item d then this should be a strong cue that user will also like d. algorithms based on this principle come under the name of collaborative filtering. both non-parametric approaches as nearest-neighbor methods based on the estimated similarity between patterns of preferences and parametric methods are possible. parametric methods often rely on learning a distributed representation called an embedding for each user and for each item. bilinear prediction of the target variable as a rating is a simple parametric method that is highly successful and often found as a component of state-of-the-art systems. the prediction is obtained by the dot product between the user embedding and the item embedding corrected by constants that depend only on either the user id or the item id. let r be the matrix containing our predictions a a matrix with user embeddings in its rows and b a matrix with item embeddings in its columns. let b and c be vectors that contain respectively a kind of bias for each user how grumpy or positive that user is in general and for each item its general popularity. the bilinear prediction is thus obtained as follows rui bu ci a ujbji. j typically one wants to minimize the squared error between predicted ratings rui and actual ratings rui user embeddings and item embeddings can then be conveniently visualized when they are first reduced to a low dimension or three or they can be used to compare users or items against each other just like word embeddings. one way to obtain these embeddings is by performing a singular value decomposition of the matrix r of actual targets as ratings. this corresponds to factorizing r u dv a normalized variant into the product of two factors the lower rank matrices a u d and b v one problem with the svd is that it treats the missing entries in an arbitrary way as if they corresponded to a target value of instead we would like to avoid paying any cost for the predictions made on missing entries. fortunately the sum of squared errors on the observed ratings can also be easily minimized by gradientbased optimization. the svd and the bilinear prediction of equation both performed very well in the competition for the netflix prize bennett and lanning aiming at predicting ratings for films based only on previous ratings by a large set of anonymous users. many machine learning experts participated in this competition which took place between and it raised the level of research in recommender systems using advanced machine learning and yielded improvements in recommender systems. even though it did not win by itself the simple bilinear prediction or svd was a component of the ensemble models chapter applications presented by most of the competitors including the winners koren t scher et al. beyond these bilinear models with distributed representations one of the first uses of neural networks for collaborative filtering is based on the rbm undirected rbms were an important element probabilistic model of the ensemble of methods that won the netflix competition scher more advanced variants on the idea of factorizing the ratings matrix koren have also been explored in the neural networks community and mnih et al. et al. however there is a basic limitation of collaborative filtering systems when a new item or a new user is introduced its lack of rating history means that there is no way to evaluate its similarity with other items or users or the degree of association between say that new user and existing items. this is called the problem of cold-start recommendations. a general way of solving the cold-start recommendation problem is to introduce extra information about the individual users and items. for example this extra information could be user profile information or features of each item. systems that use such information are called content-based recommender systems. the mapping from a rich set of user features or item features to an embedding can be learned through a deep learning architecture huang et al. elkahky et al. specialized deep learning architectures such as convolutional networks have also been applied to learn to extract features from rich content such as from musical audio tracks for music recommendation den o rd in that work the convolutional net takes acoustic features as input and computes an embedding for the associated song. the dot product between this song embedding and the embedding for a user is then used to predict whether a user will listen to the song. et al. exploration versus exploitation langford and zhang lu et al. when making recommendations to users an issue arises that goes beyond ordinary supervised learning and into the realm of reinforcement learning. many recommendation problems are most accurately described theoretically as contextual bandits the issue is that when we use the recommendation system to collect data we get a biased and incomplete view of the preferences of users we only see the responses of users to the items they were recommended and not to the other items. in addition in some cases we may not get any information on users for whom no recommendation has been made example with ad auctions it may be that the price proposed for an chapter applications ad was below a minimum price threshold or does not win the auction so the ad is not shown at all. more importantly we get no information about what outcome would have resulted from recommending any of the other items. this would be like training a classifier by picking one class y for each training example x the class with the highest probability according to the model and then only getting as feedback whether this was the correct class or not. clearly each example conveys less information than in the supervised case where the true label y is directly accessible so more examples are necessary. worse if we are not careful we could end up with a system that continues picking the wrong decisions even as more and more data is collected because the correct decision initially had a very low probability until the learner picks that correct decision it does not learn about the correct decision. this is similar to the situation in reinforcement learning where only the reward for the selected action is observed. in general reinforcement learning can involve a sequence of many actions and many rewards. the bandits scenario is a special case of reinforcement learning in which the learner takes only a single action and receives a single reward. the bandit problem is easier in the sense that the learner knows which reward is associated with which action. in the general reinforcement learning scenario a high reward or a low reward might have been caused by a recent action or by an action in the distant past. the term contextual bandits refers to the case where the action is taken in the context of some input variable that can inform the decision. for example we at least know the user identity and we want to pick an item. the mapping from context to action is also called a policy. the feedback loop between the learner and the data distribution now depends on the actions of the learner is a central research issue in the reinforcement learning and bandits literature. reinforcement learning requires choosing a tradeoff between exploration and exploitation. exploitation refers to taking actions that come from the current best version of the learned policy actions that we know will achieve a high reward. exploration refers to taking actions specifically in order to obtain more training data. if we know that given context x action a gives us a reward of we do not know whether that is the best possible reward. we may want to exploit our current policy and continue taking action a in order to be relatively sure of obtaining a reward of however we may also want to explore by trying action a we do not know what will happen if we try action a but we either way we at least gain some knowledge. run the risk of getting a reward of we hope to get a reward of exploration can be implemented in many ways ranging from occasionally taking random actions intended to cover the entire space of possible actions to model-based approaches that compute a choice of action based on its expected reward and the model s amount of uncertainty about that reward. chapter applications many factors determine the extent to which we prefer exploration or exploitation. one of the most prominent factors is the time scale we are interested in. if the agent has only a short amount of time to accrue reward then we prefer more exploitation. if the agent has a long time to accrue reward then we begin with more exploration so that future actions can be planned more effectively with more knowledge. as time progresses and our learned policy improves we move toward more exploitation. supervised learning has no tradeoff between exploration and exploitation because the supervision signal always specifies which output is correct for each input. there is no need to try out different outputs to determine if one is better than the model s current output we always know that the label is the best output. another difficulty arising in the context of reinforcement learning besides the exploration-exploitation trade-off is the difficulty of evaluating and comparing different policies. reinforcement learning involves interaction between the learner and the environment. this feedback loop means that it is not straightforward to evaluate the learner s performance using a fixed set of test set input values. the policy itself determines which inputs will be seen. present techniques for evaluating contextual bandits. dudik et al. knowledge representation reasoning and question an swering rumelhart et al. deep learning approaches have been very successful in language modeling machine translation and natural language processing due to the use of embeddings for symbols et al. these embeddings represent semantic knowledge about individual words and concepts. a research frontier is to develop embeddings for phrases and for relations between words and facts. search engines already use machine learning for this purpose but much more remains to be done to improve these more advanced representations. and words deerwester et al. bengio knowledge relations and question answering one interesting research direction is determining how distributed representations can be trained to capture the relations between two entities. these relations allow us to formalize facts about objects and how objects interact with each other. in mathematics a binary relation is a set of ordered pairs of objects. pairs that are in the set are said to have the relation while those who are not in the set chapter applications by defining the set of ordered pairs s do not. for example we can define the relation is less than on the set of entities once this relation is defined we can use it like a verb. because s we say that is less than because s we can not say that is less than of course the entities that are related to one another need not be numbers. we could define a relation containing tuples like is_a_type_of dog mammal in the context of ai we think of a relation as a sentence in a syntactically simple and highly structured language. the relation plays the role of a verb while two arguments to the relation play the role of its subject and object. these sentences take the form of a triplet of tokens verb object with values relationj entity k. we can also define an attribute a concept analogous to a relation but taking only one argument attribute j. for example we could define the has_fur attribute and apply it to entities like dog. many applications require representing relations and reasoning about them. how should we best do this within the context of neural networks? machine learning models of course require training data. we can infer relations between entities from training datasets consisting of unstructured natural language. there are also structured databases that identify relations explicitly. a common structure for these databases is the relational database which stores this same kind of information albeit not formatted as three token sentences. when a database is intended to convey commonsense knowledge about everyday life or expert knowledge about an application area to an artificial intelligence system we call the database a knowledge base. knowledge bases range from general ones like freebase opencyc wordnet or wikibase etc. to more specialized knowledge bases like representations for entities and relations can be learned by considering each triplet in a knowledge base as a training example and maximizing a training objective that captures their joint distribution et al. available from these web sites freebase.com cyc.comopencyc wordnet. princeton.edu wikiba.se chapter applications in addition to training data we also need to define a model family to train. a common approach is to extend neural language models to model entities and relations. neural language models learn a vector that provides a distributed representation of each word. they also learn about interactions between words such as which word is likely to come after a sequence of words by learning functions of these vectors. we can extend this approach to entities and relations by learning an embedding vector for each relation. in fact the parallel between modeling language and modeling knowledge encoded as relations is so close that researchers and have trained representations of such entities by using both natural language sentences or combining data from multiple relational databases many possibilities exist for the particular parametrization associated with such a model. early work on learning about relations between entities paccanaro and hinton posited highly constrained parametric forms linear relational embeddings often using a different form of representation for the relation than for the entities. for example paccanaro and hinton used vectors for entities and matrices for relations with the idea that a relation acts like an operator on entities. alternatively relations can be considered as any other entity et al. allowing us to make statements about relations but more flexibility is put in the machinery that combines them in order to model their joint distribution. knowledge bases bordes et al. wang bordes et al. bordes et al. et al. and a practical short-term application of such models is link prediction predicting missing arcs in the knowledge graph. this is a form of generalization to new facts based on old facts. most of the knowledge bases that currently exist have been constructed through manual labor which tends to leave many and probably the majority of true relations absent from the knowledge base. see wang et al. lin et al. for examples of such an application. garcia-duran et al. and evaluating the performance of a model on a link prediction task is difficult because we have only a dataset of positive examples that are known to be true. if the model proposes a fact that is not in the dataset we are unsure whether the model has made a mistake or discovered a new previously unknown fact. the metrics are thus somewhat imprecise and are based on testing how the model ranks a held-out of set of known true positive facts compared to other facts that are less likely to be true. a common way to construct interesting examples that are probably negative that are probably false is to begin with a true fact and create corrupted versions of that fact for example by replacing one entity in the relation with a different entity selected at random. the popular precision at metric counts how many times the model ranks a correct fact among the top of all corrupted versions of that fact. chapter applications another application of knowledge bases and distributed representations for them is word-sense disambiguation and velardi bordes et al. which is the task of deciding which of the senses of a word is the appropriate one in some context. eventually knowledge of relations combined with a reasoning process and understanding of natural language could allow us to build a general question answering system. a general question answering system must be able to process input information and remember important facts organized in a way that enables it to retrieve and reason about them later. this remains a difficult open problem which can only be solved in restricted toy environments. currently the best approach to remembering and retrieving specific declarative facts is to use an memory networks were explicit memory mechanism as described in section first proposed to solve a toy question answering task kumar et al. have proposed an extension that uses gru recurrent nets to read the input into the memory and to produce the answer given the contents of the memory. et al. deep learning has been applied to many other applications besides the ones described here and will surely be applied to even more after this writing. it would be impossible to describe anything remotely resembling a comprehensive coverage of such a topic. this survey provides a representative sample of what is possible as of this writing. ii this concludes part which has described modern practices involving deep networks comprising all of the most successful methods. generally speaking these methods involve using the gradient of a cost function to find the parameters of a model that approximates some desired function. with enough training data this approach is extremely powerful. we now turn to part in which we step into the territory of research methods that are designed to work with less training data or to perform a greater variety of tasks where the challenges are more difficult and not as close to being solved as the situations we have described so far. iii part iii deep learning research this part of the book describes the more ambitious and advanced approaches to deep learning currently pursued by the research community. in the previous parts of the book we have shown how to solve supervised learning problems how to learn to map one vector to another given enough examples of the mapping. not all problems we might want to solve fall into this category. we may wish to generate new examples or determine how likely some point is or handle missing values and take advantage of a large set of unlabeled examples or examples from related tasks. a shortcoming of the current state of the art for industrial applications is that our learning algorithms require large amounts of supervised data to achieve good accuracy. in this part of the book we discuss some of the speculative approaches to reducing the amount of labeled data necessary for existing models to work well and be applicable across a broader range of tasks. accomplishing these goals usually requires some form of unsupervised or semi-supervised learning. many deep learning algorithms have been designed to tackle unsupervised learning problems but none have truly solved the problem in the same way that deep learning has largely solved the supervised learning problem for a wide variety of tasks. in this part of the book we describe the existing approaches to unsupervised learning and some of the popular thought about how we can make progress in this field. a central cause of the difficulties with unsupervised learning is the high dimensionality of the random variables being modeled. this brings two distinct challenges a statistical challenge and a computational challenge. the statistical challenge regards generalization the number of configurations we may want to distinguish can grow exponentially with the number of dimensions of interest and this quickly becomes much larger than the number of examples one can possibly have use with bounded computational resources. the computational challenge associated with high-dimensional distributions arises because many algorithms for learning or using a trained model those based on estimating an explicit probability function involve intractable computations that grow exponentially with the number of dimensions. with probabilistic models this computational challenge arises from the need to perform intractable inference or simply from the need to normalize the distribution. intractable inference inference is discussed mostly in chapter it regards the question of guessing the probable values of some variables a given other variables b with respect to a model that captures the joint distribution over a b and c. in order to even compute such conditional probabilities one needs to sum over the values of the variables c as well as compute a normalization constant which sums over the values of a and c. intractable normalization constants partition function the partition function is discussed mostly in chapter normalizing constants of probability functions come up in inference as well as in learning. many probabilistic models involve such a normalizing constant. unfortunately learning such a model often requires computing the gradient of the logarithm of the partition function with respect to the model parameters. that computation is generally as intractable as computing the partition function itself. monte carlo markov chain methods are often used to deal with the partition function it or its gradient. unfortunately mcmc methods suffer when the modes of the model distribution are numerous and well-separated especially in high-dimensional spaces one way to confront these intractable computations is to approximate them and many approaches have been proposed as discussed in this third part of the book. another interesting way also discussed here would be to avoid these intractable computations altogether by design and methods that do not require such computations are thus very appealing. several generative models have been proposed in recent years with that motivation. a wide variety of contemporary approaches to generative modeling are discussed in chapter iii part is the most important for a researcher someone who wants to understand the breadth of perspectives that have been brought to the field of deep learning and push the field forward towards true artificial intelligence. chapter linear factor models many of the research frontiers in deep learning involve building a probabilistic model of the input pmodelx. such a model can in principle use probabilistic inference to predict any of the variables in its environment given any of the other variables. many of these models also have latent variables h with pmodel x h these latent variables provide another means of representing the data. distributed representations based on latent variables can obtain all of the advantages of representation learning that we have seen with deep feedforward and recurrent networks. ehpmodel x in this chapter we describe some of the simplest probabilistic models with latent variables linear factor models. these models are sometimes used as building ghahramani and hinton blocks of mixture models they roweis also show many of the basic approaches necessary to build generative models that the more advanced deep models will extend further. or larger deep probabilistic models et al. et al. et al. tang a linear factor model is defined by the use of a stochastic linear decoder function that generates x by adding noise to a linear transformation of h these models are interesting because they allow us to discover explanatory factors that have a simple joint distribution. the simplicity of using a linear decoder made these models some of the first latent variable models to be extensively studied. a linear factor model describes the data generation process as follows. first we sample the explanatory factors h h from a distribution p where ph is a factorial distribution with ph i phi so that it is easy to chapter linear factor models sample from. next we sample the real-valued observable variables given the factors x w h b noise where the noise is typically gaussian and diagonal across dimensions. this is illustrated in figure x x w w h h n ois e n ois e figure the directed graphical model describing the linear factor model family in which we assume that an observed data vector x is obtained by a linear combination of independent latent factors h plus some noise. different models such as probabilistic pca factor analysis or ica make different choices about the form of the noise and of the prior p probabilistic pca and factor analysis probabilistic pca components analysis factor analysis and other linear factor models are special cases of the above equations and only differ in the choices made for the noise distribution and the model s prior over latent variables before observing and x h bartholomew basilevsky the latent variable in factor analysis prior is just the unit variance gaussian n h i while the observed variables xi are assumed to be conditionally independent given h. specifically the noise is assumed to be drawn from a diagonal covariance gaussian distribution with covariance matrix diag with a vector of per-variable variances. n the role of the latent variables is thus to capture the dependencies between the different observed variables xi. indeed it can easily be shown that x is just a multivariate normal random variable with n x b w w chapter linear factor models in order to cast pca in a probabilistic framework we can make a slight modification to the factor analysis model making the conditional variances i i where equal to each other. in that case the covariance of x is just w w is now a scalar. this yields the conditional distribution x or equivalently n b w w x w h z n where z iterative em algorithm for estimating the parameters tipping and bishop i is gaussian noise. andw then show an this probabilistic pca model takes advantage of the observation that most variations in the data can be captured by the latent variables h up to some small residual reconstruction error as shown by in that case the conditional expected probabilistic pca becomes pca as value of h given x becomes an orthogonal projection of x onto the space spanned by the tipping and bishop like in pca. columns of w d b as the density model defined by probabilistic pca becomes very sharp around these d dimensions spanned by the columns of w this can make the model assign very low likelihood to the data if the data does not actually cluster near a hyperplane. independent component analysis independent component analysis is among the oldest representation learning herault and ans jutten and herault comon algorithms hyv rinen hyv rinen it is an approach to modeling linear factors that seeks to separate an observed signal into many underlying signals that are scaled and added together to form the observed data. these signals are intended to be fully independent rather than merely decorrelated from each hinton teh et al. et al. et al. many different specific methodologies are referred to as ica. the variant that is most similar to the other generative models we have described here is a variant that trains a fully parametric generative model. the prior distribution over the underlying factors ph must be fixed ahead of time by the user. the model then deterministically generates x w h. we can perform a pham et al. section dent variables. for a discussion of the difference between uncorrelated variables and indepen chapter linear factor models nonlinear change of variables equation the model then proceeds as usual using maximum likelihood. to determine px. learning the motivation for this approach is that by choosing ph to be independent we can recover underlying factors that are as close as possible to independent. this is commonly used not to capture high-level abstract causal factors but to recover low-level signals that have been mixed together. in this setting each training example is one moment in time each xi is one sensor s observation of the mixed signals and each hi is one estimate of one of the original signals. for example we might have n people speaking simultaneously. if we have n different microphones placed in different locations ica can detect the changes in the volume between each speaker as heard by each microphone and separate the signals so that each h i contains only one person speaking clearly. this is commonly used in neuroscience for electroencephalography a technology for recording electrical signals originating in the brain. many electrode sensors placed on the subject s head are used to measure many electrical signals coming from the body. the experimenter is typically only interested in signals from the brain but signals from the subject s heart and eyes are strong enough to confound measurements taken at the subject s scalp. the signals arrive at the electrodes mixed together so ica is necessary to separate the electrical signature of the heart from the signals originating in the brain and to separate signals in different brain regions from each other. as mentioned before many variants of ica are possible. some add some noise in the generation of x rather than using a deterministic decoder. most do not use the maximum likelihood criterion but instead aim to make the elements of independent from each other. many criteria that accomplish this goal h w w which can be are possible. equation an expensive and numerically unstable operation. some variants of ica avoid this problematic operation by constraining requires taking the determinant of to be orthogonal. w all variants of ica require that ph be non-gaussian. this is because if ph is an independent prior with gaussian components then w is not identifiable. we can obtain the same distribution over px for many values of w this is very different from other linear factor models like probabilistic pca and factor analysis that often require ph to be gaussian in order to make many operations on the model have closed form solutions. in the maximum likelihood approach where the user explicitly specifies the distribution a typical choice is to use phi d dhi typical choices of these non-gaussian distributions have larger peaks near than does the gaussian distribution so we can also see most implementations of ica as learning sparse features. chapter linear factor models many variants of ica are not generative models in the sense that we use the phrase. in this book a generative model either represents px or can draw samples from it. many variants of ica only know how to transform between x and h but do not have any way of representing ph and thus do not impose a distribution over px. for example many ica variants aim to increase the sample kurtosis of because high kurtosis indicates that ph is non-gaussian but this is h w accomplished without explicitly representing ph. this is because ica is more often used as an analysis tool for separating signals rather than for generating data or estimating its density. and roberts and everson just as pca can be generalized to the nonlinear autoencoders described in chapter ica can be generalized to a nonlinear generative model in which we use a nonlinear function f to generate the observed data. see hyv rinen and pajunen for the initial work on nonlinear ica and its successful use with ensemble learning by lappalainen et al. another nonlinear extension of ica is the approach of nonlinear independent components estimation or nice which stacks a series of invertible transformations stages that have the property that the determinant of the jacobian of each transformation can be computed efficiently. this makes it possible to compute the likelihood exactly and like ica attempts to transform the data into a space where it has a factorized marginal distribution but is more likely to succeed thanks to the nonlinear encoder. because the encoder is associated with a decoder that is its perfect inverse it is straightforward to generate samples from the model first sampling from ph and then applying the decoder. dinh et al. et al. another generalization of ica is to learn groups of features with statistical dependence allowed within a group but discouraged between groups rinen and hoyer hyv rinen when the groups of related units are chosen to be non-overlapping this is called independent subspace analysis. it is also possible to assign spatial coordinates to each hidden unit and form overlapping groups of spatially neighboring units. this encourages nearby units to learn similar features. when applied to natural images this topographic ica approach learns gabor filters such that neighboring features have similar orientation location or frequency. many different phase offsets of similar gabor functions occur within each region so that pooling over small regions yields translation invariance. slow feature analysis slow feature analysis is a linear factor model that uses information from chapter linear factor models time signals to learn invariant features wiskott and sejnowski slow feature analysis is motivated by a general principle called the slowness principle. the idea is that the important characteristics of scenes change very slowly compared to the individual measurements that make up a description of a scene. for example in computer vision individual pixel values can change very rapidly. if a zebra moves from left to right across the image an individual pixel will rapidly change from black to white and back again as the zebra s stripes pass over the pixel. by comparison the feature indicating whether a zebra is in the image will not change at all and the feature describing the zebra s position will change slowly. we therefore may wish to regularize our model to learn features that change slowly over time. the slowness principle predates slow feature analysis and has been applied hinton f ldi k mobahi et al. to a wide variety of models bergstra and bengio in general we can apply the slowness principle to any differentiable model trained with gradient descent. the slowness principle may be introduced by adding a term to the cost function of the form l f t f x t where is a hyperparameter determining the strength of the slowness regularization term t is the index into a time sequence of examples f is the feature extractor to be regularized and l is a loss function measuring the distance between fx and f is the mean squared difference. a common choice for l t slow feature analysis is a particularly efficient application of the slowness principle. it is efficient because it is applied to a linear feature extractor and can thus be trained in closed form. like some variants of ica sfa is not quite a generative model per se in the sense that it defines a linear map between input space and feature space but does not define a prior over feature space and thus does not impose a distribution on input space. p the sfa algorithm and sejnowski consists of defining f to be a linear transformation and solving the optimization problem et x t min f subject to the constraints and etf et x i chapter linear factor models the constraint that the learned feature have zero mean is necessary to make the problem have a unique solution otherwise we could add a constant to all feature values and obtain a different solution with equal value of the slowness objective. the constraint that the features have unit variance is necessary to prevent the pathological solution where all features collapse to like pca the sfa features are ordered with the first feature being the slowest. to learn multiple features we must also add the constraint i j et x if this specifies that the learned features must be linearly decorrelated from each other. without this constraint all of the learned features would simply capture the one slowest signal. one could imagine using other mechanisms such as minimizing reconstruction error to force the features to diversify but this decorrelation mechanism admits a simple solution due to the linearity of sfa features. the sfa problem may be solved in closed form by a linear algebra package. sfa is typically used to learn nonlinear features by applying a nonlinear basis expansion to x before running sfa. for example it is common to replace x by the quadratic basis expansion a vector containing elements x ixj for all i and j. linear sfa modules may then be composed to learn deep nonlinear slow feature extractors by repeatedly learning a linear sfa feature extractor applying a nonlinear basis expansion to its output and then learning another linear sfa feature extractor on top of that expansion. when trained on small spatial patches of videos of natural scenes sfa with quadratic basis expansions learns features that share many characteristics with those of complex cells in cortex and wiskott when trained on videos of random motion within computer rendered environments deep sfa learns features that share many characteristics with the features represented by neurons in rat brains that are used for navigation sfa thus seems to be a reasonably biologically plausible model. et al. a major advantage of sfa is that it is possibly to theoretically predict which features sfa will learn even in the deep nonlinear setting. to make such theoretical predictions one must know about the dynamics of the environment in terms of configuration space in the case of random motion in the rendered environment the theoretical analysis proceeds from knowledge of the probability distribution over position and velocity of the camera. given the knowledge of how the underlying factors actually change it is possible to analytically solve for the optimal functions expressing these factors. in practice experiments with deep sfa applied to simulated data seem to recover the theoretically predicted functions. chapter linear factor models this is in comparison to other learning algorithms where the cost function depends highly on specific pixel values making it much more difficult to determine what features the model will learn. et al. deep sfa has also been used to learn features for object recognition and pose estimation so far the slowness principle has not become the basis for any state of the art applications. it is unclear what factor has limited its performance. we speculate that perhaps the slowness prior is too strong and that rather than imposing a prior that features should be approximately constant it would be better to impose a prior that features should be easy to predict from one time step to the next. the position of an object is a useful feature regardless of whether the object s velocity is high or low but the slowness principle encourages the model to ignore the position of objects that have high velocity. sparse coding olshausen and field sparse coding is a linear factor model that has been heavily studied as an unsupervised feature learning and feature extraction mechanism. strictly speaking the term sparse coding refers to the process of inferring the value of h in this model while sparse modeling refers to the process of designing and learning the model but the term sparse coding is often used to refer to both. like most other linear factor models it uses a linear decoder plus noise to obtain reconstructions of x as specified in equation more specifically sparse coding models typically assume that the linear factors have gaussian noise with isotropic precision n p x h x w h b i. the distribution ph is chosen to be one with sharp peaks near and field common choices include factorized laplace cauchy or factorized student-t distributions. for example the laplace prior parametrized in terms of the sparsity penalty coefficient is given by p h i laplacehi and the student- prior by t p h i i e h i chapter linear factor models training sparse coding with maximum likelihood is intractable. instead the training alternates between encoding the data and training the decoder to better reconstruct the data given the encoding. this approach will be justified further as a principled approximation to maximum likelihood later in section for models such as pca we have seen the use of a parametric encoder function that predicts h and consists only of multiplication by a weight matrix. the encoder that we use with sparse coding is not a parametric encoder. instead the encoder is an optimization algorithm that solves an optimization problem in which we seek the single most likely code value when combined with equation optimization problem and equation this yields the following h arg max f x h h x p arg max h p h x arg max h arg min h log p h x x w h h where we have dropped terms not depending on h and divided by positive scaling factors to simplify the equation. h due to the imposition of an norm on h this procedure will yield a sparse section to train the model rather than just perform inference we alternate between minimization with respect to h and minimization with respect to w in this presentation we treat as a hyperparameter. typically it is set to because its role in this optimization problem is shared with and there is no need for both hyperparameters. in principle we could also treat as a parameter of the model and learn it. our presentation here has discarded some terms that do not depend on h but do depend on to learn these terms must be included or will collapse to not all approaches to sparse coding explicitly build a ph and a px h often we are just interested in learning a dictionary of features with activation values that will often be zero when extracted using this inference procedure. if we sample h from a laplace prior it is in fact a zero probability event for an element of h to actually be zero. the generative model itself is not especially describe approximate sparse only the feature extractor is. goodfellow et al. chapter linear factor models inference in a different model family the spike and slab sparse coding model for which samples from the prior usually contain true zeros. the sparse coding approach combined with the use of the non-parametric encoder can in principle minimize the combination of reconstruction error and log-prior better than any specific parametric encoder. another advantage is that there is no generalization error to the encoder. a parametric encoder must learn how to map x to h in a way that generalizes. for unusual x that do not resemble the training data a learned parametric encoder may fail to find an h that results in accurate reconstruction or a sparse code. for the vast majority of formulations of sparse coding models where the inference problem is convex the optimization procedure will always find the optimal code degenerate cases such as replicated weight vectors occur. obviously the sparsity and reconstruction costs can still rise on unfamiliar points but this is due to generalization error in the decoder weights rather than generalization error in the encoder. the lack of generalization error in sparse coding s optimization-based encoding process may result in better generalization when sparse coding is used as a feature extractor for a classifier than when a parametric function is used to predict the code. coates and ng demonstrated that sparse coding features generalize better for object recognition tasks than the features of a related model based on a parametric encoder the linear-sigmoid autoencoder. inspired by their work goodfellow et al. showed that a variant of sparse coding generalizes better than other feature extractors in the regime where extremely few labels are available or fewer labels per class. the primary disadvantage of the non-parametric encoder is that it requires greater time to compute h given x because the non-parametric approach requires running an iterative algorithm. the parametric autoencoder approach developed in chapter uses only a fixed number of layers often only one. another disadvantage is that it is not straight-forward to back-propagate through the non-parametric encoder which makes it difficult to pretrain a sparse coding model with an unsupervised criterion and then fine-tune it using a supervised criterion. modified versions of sparse coding that permit approximate derivatives do exist but are not widely used bagnell and bradley sparse coding like other linear factor models often produces poor samples as shown in figure this happens even when the model is able to reconstruct the data well and provide useful features for a classifier. the reason is that each individual feature may be learned well but the factorial prior on the hidden code results in the model including random subsets of all of the features in each generated sample. this motivates the development of deeper models that can impose a non chapter linear factor models figure example samples and weights from a spike and slab sparse coding model trained on the mnist dataset. samples from the model do not resemble the training examples. at first glance one might assume the model is poorly fit. the weight vectors of the model have learned to represent penstrokes and sometimes complete digits. the model has thus learned useful features. the problem is that the factorial prior over features results in random subsets of features being combined. few such subsets are appropriate to form a recognizable mnist digit. this motivates the development of generative models that have more powerful distributions over their latent codes. figure reproduced with permission from goodfellow et al. factorial distribution on the deepest code layer as well as the development of more sophisticated shallow models. manifold interpretation of pca hinton et al. linear factor models including pca and factor analysis can be interpreted as learning a manifold we can view probabilistic pca as defining a thin pancake-shaped region of high probability a gaussian distribution that is very narrow along some axes just as a pancake is very flat along its vertical axis but is elongated along other axes just as a pancake is wide along its horizontal axes. this is illustrated in figure pca can be interpreted as aligning this pancake with a linear manifold in a higher-dimensional space. this interpretation applies not just to traditional pca but also to any linear autoencoder that learns matrices w and v with the goal of making the reconstruction of x lie as close to x as possible let the encoder be h x w x chapter linear factor models the encoder computes a low-dimensional representation of h. with the autoencoder view we have a decoder computing the reconstruction x h b v h figure flat gaussian capturing probability concentration near a low-dimensional manifold. the figure shows the upper half of the pancake above the manifold plane which goes through its middle. the variance in the direction orthogonal to the manifold is very small pointing out of plane and can be considered like noise while the other variances are large in the plane and correspond to signal and a coordinate system for the reduced-dimension data. the choices of linear encoder and decoder that minimize reconstruction error x x e correspond to v w b ex and the columns of w form an orthonormal basis which spans the same subspace as the principal eigenvectors of the covariance matrix x x c in the case of pca the columns of w are these eigenvectors ordered by the magnitude of the corresponding eigenvalues are all real and non-negative. one can also show that eigenvalue i of c corresponds to the variance of x d with d d then the in the direction of eigenvector v if x d and h r r chapter linear factor models optimal reconstruction error x min b v x and d w as above is i i d hence if the covariance has rank d the eigenvalues to d are and reconstruction error is furthermore one can also show that the above solution can be obtained by maximizing the variances of the elements of h under orthogonal w instead of minimizing reconstruction error. linear factor models are some of the simplest generative models and some of the simplest models that learn a representation of data. much as linear classifiers and linear regression models may be extended to deep feedforward networks these linear factor models may be extended to autoencoder networks and deep probabilistic models that perform the same tasks but with a much more powerful and flexible model family. chapter autoencoders an autoencoder is a neural network that is trained to attempt to copy its input to its output. internally it has a hidden layer h that describes a code used to represent the input. the network may be viewed as consisting of two parts an encoder function h f and a decoder that produces a reconstruction r gh. this architecture is presented in figure if an autoencoder succeeds in simply learning to set gf x everywhere then it is not especially useful. instead autoencoders are designed to be unable to learn to copy perfectly. usually they are restricted in ways that allow them to copy only approximately and to copy only input that resembles the training data. because the model is forced to prioritize which aspects of the input should be copied it often learns useful properties of the data. modern autoencoders have generalized the idea of an encoder and a de and coder beyond deterministic functions to stochastic mappings pencoderh x pdecoder x h the idea of autoencoders has been part of the historical landscape of neural networks for decades lecun bourlard and kamp hinton and zemel traditionally autoencoders were used for dimensionality reduction or feature learning. recently theoretical connections between autoencoders and latent variable models have brought autoencoders to the forefront of generative modeling as we will see in chapter autoencoders may be thought of as being a special case of feedforward networks and may be trained with all of the same techniques typically minibatch gradient descent following gradients computed by back-propagation. unlike general feedforward networks autoencoders may also be trained using recirculation and mcclelland a learning algorithm based on comparing the activations of the network on the original input chapter autoencoders to the activations on the reconstructed input. recirculation is regarded as more biologically plausible than back-propagation but is rarely used for machine learning applications. hh g rr f xx figure the general structure of an autoencoder mapping an input to an output reconstruction r through an internal representation or code h. the autoencoder has two components the encoder f x to h and the decoder g h to r. x undercomplete autoencoders copying the input to the output may sound useless but we are typically not interested in the output of the decoder. instead we hope that training the autoencoder to perform the input copying task will result in h taking on useful properties. one way to obtain useful features from the autoencoder is to constrain h to have smaller dimension than x. an autoencoder whose code dimension is less than the input dimension is called undercomplete. learning an undercomplete representation forces the autoencoder to capture the most salient features of the training data. the learning process is described simply as minimizing a loss function l g f where l is a loss function penalizing gf for being dissimilar from x such as the mean squared error. when the decoder is linear and l is the mean squared error an undercomplete autoencoder learns to span the same subspace as pca. in this case an autoencoder trained to perform the copying task has learned the principal subspace of the training data as a side-effect. autoencoders with nonlinear encoder functions f and nonlinear decoder functions g can thus learn a more powerful nonlinear generalization of pca. unfortu chapter autoencoders nately if the encoder and decoder are allowed too much capacity the autoencoder can learn to perform the copying task without extracting useful information about the distribution of the data. theoretically one could imagine that an autoencoder with a one-dimensional code but a very powerful nonlinear encoder could learn to represent each training example x with the code i. the decoder could learn to map these integer indices back to the values of specific training examples. this specific scenario does not occur in practice but it illustrates clearly that an autoencoder trained to perform the copying task can fail to learn anything useful about the dataset if the capacity of the autoencoder is allowed to become too great. regularized autoencoders undercomplete autoencoders with code dimension less than the input dimension can learn the most salient features of the data distribution. we have seen that these autoencoders fail to learn anything useful if the encoder and decoder are given too much capacity. a similar problem occurs if the hidden code is allowed to have dimension equal to the input and in the overcomplete case in which the hidden code has dimension greater than the input. in these cases even a linear encoder and linear decoder can learn to copy the input to the output without learning anything useful about the data distribution. ideally one could train any architecture of autoencoder successfully choosing the code dimension and the capacity of the encoder and decoder based on the complexity of distribution to be modeled. regularized autoencoders provide the ability to do so. rather than limiting the model capacity by keeping the encoder and decoder shallow and the code size small regularized autoencoders use a loss function that encourages the model to have other properties besides the ability to copy its input to its output. these other properties include sparsity of the representation smallness of the derivative of the representation and robustness to noise or to missing inputs. a regularized autoencoder can be nonlinear and overcomplete but still learn something useful about the data distribution even if the model capacity is great enough to learn a trivial identity function. in addition to the methods described here which are most naturally interpreted as regularized autoencoders nearly any generative model with latent variables and equipped with an inference procedure computing latent representations given input may be viewed as a particular form of autoencoder. two generative modeling approaches that emphasize this connection with autoencoders are the such as the variational descendants of the helmholtz machine hinton et al. chapter autoencoders and the generative stochastic networks autoencoder these models naturally learn high-capacity overcomplete encodings of the input and do not require regularization for these encodings to be useful. their encodings are naturally useful because the models were trained to approximately maximize the probability of the training data rather than to copy the input to the output. sparse autoencoders a sparse autoencoder is simply an autoencoder whose training criterion involves a sparsity penalty on the code layer h in addition to the reconstruction error l g f h x where gh is the decoder output and typically we have h f the encoder output. sparse autoencoders are typically used to learn features for another task such as classification. an autoencoder that has been regularized to be sparse must respond to unique statistical features of the dataset it has been trained on rather than simply acting as an identity function. in this way training to perform the copying task with a sparsity penalty can yield a model that has learned useful features as a byproduct. we can think of the penalty simply as a regularizer term added to a feedforward network whose primary task is to copy the input to the output learning objective and possibly also perform some supervised task a supervised learning objective that depends on these sparse features. unlike other regularizers such as weight decay there is not a straightforward bayesian interpretation to this regularizer. as described in section training with weight decay and other regularization penalties can be interpreted as a map approximation to bayesian inference with the added regularizing penalty corresponding to a prior probability distribution over the model parameters. in this view regularized maximum likelihood corresponds to maximizing p x which is equivalent to maximizing log px term is the usual data log-likelihood term and the log p term the log-prior over parameters incorporates the preference over particular values of this view was described in section regularized autoencoders defy such an interpretation because the regularizer depends on the data and is therefore by definition not a prior in the formal sense of the word. we can still think of these regularization terms as implicitly expressing a preference over functions. log p the log px rather than thinking of the sparsity penalty as a regularizer for the copying task we can think of the entire sparse autoencoder framework as approximating chapter autoencoders maximum likelihood training of a generative model that has latent variables. suppose we have a model with visible variables x and latent variables h with an explicit joint distribution pmodelx h we refer to pmodelh as the model s prior distribution over the latent variables representing the model s beliefs prior to seeing x. this is different from the way we have previously used the word prior to refer to the distribution p encoding our beliefs about the model s parameters before we have seen the training data. the log-likelihood can be decomposed as pmodelhpmodelx h log pmodel log x pmodel x h we can think of the autoencoder as approximating this sum with a point estimate for just one highly likely value for h. this is similar to the sparse coding generative h being the output of the parametric encoder rather model than the result of an optimization that infers the most likely h. from this point of view with this chosen we are maximizing but with h log pmodel h x log pmodel log h pmodel x h the log pmodel term can be sparsity-inducing. for example the laplace prior pmodelhi hi e corresponds to an absolute value sparsity penalty. expressing the log-prior as an absolute value penalty we obtain hi h h log pmodel i i i log const h where the constant term depends only on and not h. we typically treat as a hyperparameter and discard the constant term since it does not affect the parameter learning. other priors such as the student-t prior can also induce sparsity. from this point of view of sparsity as resulting from the effect of pmodelh on approximate maximum likelihood learning the sparsity penalty is not a regularization term at all. it is just a consequence of the model s distribution over its latent variables. this view provides a different motivation for training an autoencoder it is a way of approximately training a generative model. it also provides a different reason for chapter autoencoders why the features learned by the autoencoder are useful they describe the latent variables that explain the input. ranzato et al. early work on sparse autoencoders explored various forms of sparsity and proposed a connection between the sparsity penalty and the log z term that arises when applying maximum likelihood to an undirected probabilistic model px px. the idea is that minimizing log z prevents a z probabilistic model from having high probability everywhere and imposing sparsity on an autoencoder prevents the autoencoder from having low reconstruction error everywhere. in this case the connection is on the level of an intuitive understanding of a general mechanism rather than a mathematical correspondence. the interpretation of the sparsity penalty as corresponding to log pmodelh in a directed model pmodel pmodel is more mathematically straightforward. x h one way to achieve actual zeros in h for sparse denoising autoencoders was introduced in the idea is to use rectified linear units to produce the code layer. with a prior that actually pushes the representations to zero the absolute value penalty one can thus indirectly control the average number of zeros in the representation. glorot et al. denoising autoencoders rather than adding a penalty to the cost function we can obtain an autoencoder that learns something useful by changing the reconstruction error term of the cost function. traditionally autoencoders minimize some function l g f where l is a loss function penalizing gf for being dissimilar from x such as the norm of their difference. this encourages g to learn to be merely an identity function if they have the capacity to do so. f a denoising autoencoder or dae instead minimizes l g f x where x is a copy of x that has been corrupted by some form of noise. denoising autoencoders must therefore undo this corruption rather than simply copying their input. denoising training forces f and g to implicitly learn the structure of pdata denoising alain and bengio bengio et al. as shown by and chapter autoencoders autoencoders thus provide yet another example of how useful properties can emerge as a byproduct of minimizing reconstruction error. they are also an example of how overcomplete high-capacity models may be used as autoencoders so long as care is taken to prevent them from learning the identity function. denoising autoencoders are presented in more detail in section regularizing by penalizing derivatives another strategy for regularizing an autoencoder is to use a penalty autoencoders l g f x h x but with a different form of h x xhi i as in sparse this forces the model to learn a function that does not change much when x changes slightly. because this penalty is applied only at training examples it forces the autoencoder to learn features that capture information about the training distribution. an autoencoder regularized in this way is called a contractive autoencoder or cae. this approach has theoretical connections to denoising autoencoders manifold learning and probabilistic modeling. the cae is described in more detail in section representational power layer size and depth autoencoders are often trained with only a single layer encoder and a single layer decoder. however this is not a requirement. in fact using deep encoders and decoders offers many advantages. recall from section that there are many advantages to depth in a feedforward network. because autoencoders are feedforward networks these advantages also apply to autoencoders. moreover the encoder is itself a feedforward network as is the decoder so each of these components of the autoencoder can individually benefit from depth. one major advantage of non-trivial depth is that the universal approximator theorem guarantees that a feedforward neural network with at least one hidden layer can represent an approximation of any function a broad class to an chapter autoencoders arbitrary degree of accuracy provided that it has enough hidden units. this means that an autoencoder with a single hidden layer is able to represent the identity function along the domain of the data arbitrarily well. however the mapping from input to code is shallow. this means that we are not able to enforce arbitrary constraints such as that the code should be sparse. a deep autoencoder with at least one additional hidden layer inside the encoder itself can approximate any mapping from input to code arbitrarily well given enough hidden units. depth can exponentially reduce the computational cost of representing some functions. depth can also exponentially decrease the amount of training data needed to learn some functions. see section for a review of the advantages of depth in feedforward networks. experimentally deep autoencoders yield much better compression than corre sponding shallow or linear autoencoders and salakhutdinov a common strategy for training a deep autoencoder is to greedily pretrain the deep architecture by training a stack of shallow autoencoders so we often encounter shallow autoencoders even when the ultimate goal is to train a deep autoencoder. stochastic encoders and decoders autoencoders are just feedforward networks. the same loss functions and output unit types that can be used for traditional feedforward networks are also used for autoencoders. as described in section a general strategy for designing the output units and the loss function of a feedforward network is to define an output distribution py x in that setting y was a vector of targets such as class labels. and minimize the negative log-likelihood log py x in the case of an autoencoder x is now the target as well as the input. however we can still apply the same machinery as before. given a hidden code h we may think of the decoder as providing a conditional distribution p decoderx h we may then train the autoencoder by minimizing the exact form of this loss function will change depending on the form of pdecoder as with traditional feedforward networks we usually use linear output units to parametrize the mean of a gaussian distribution if x is real-valued. in that case the negative log-likelihood yields a mean squared error criterion. similarly binary x values correspond to a bernoulli distribution whose parameters are given by a sigmoid output unit discrete x values correspond to a softmax distribution and so on. log pdecoder x h chapter autoencoders typically the output variables are treated as being conditionally independent given h so that this probability distribution is inexpensive to evaluate but some techniques such as mixture density outputs allow tractable modeling of outputs with correlations. hh pencoder h x pdecoder x h xx rr figure the structure of a stochastic autoencoder in which both the encoder and the decoder are not simple functions but instead involve some noise injection meaning that their output can be seen as sampled from a distribution pencoderh x for the encoder and pdecoder for the decoder. x h to make a more radical departure from the feedforward networks we have seen previously we can also generalize the notion of an encoding function f to an encoding distribution pencoder any latent variable model pmodel as illustrated in figure h x defines a stochastic encoder x pencoder h x pmodel h x and a stochastic decoder pdecoder x h pmodel x h in general the encoder and decoder distributions are not necessarily conditional distributions compatible with a unique joint distribution pmodelx h alain et al. showed that training the encoder and decoder as a denoising autoencoder will tend to make them compatible asymptotically enough capacity and examples. denoising autoencoders the denoising autoencoder is an autoencoder that receives a corrupted data point as input and is trained to predict the original uncorrupted data point as its output. the dae training procedure is illustrated in figure we introduce a which represents a conditional distribution over corruption process c x x chapter autoencoders hh g ll f x x xx c x x figure the computational graph of the cost function for a denoising autoencoder which is trained to reconstruct the clean data point x from its corrupted version x. this is accomplished by minimizing the loss l f x where x is a corrupted version of the data example x obtained through a given corruption process c x x typically the distribution pdecoder is a factorial distribution whose mean parameters are emitted by a feedforward network log pdecoderx h corrupted samples x given a data sample x. the autoencoder then learns a x estimated from training pairs reconstruction distribution preconstruct x as follows sample a training example x from the training data. sample a corrupted version x from c x x use x as a training example for estimating the autoencoder reconstruction with h the output of encoder distribution preconstructx f x and pdecoder typically defined by a decoder x pdecoderx h g typically we can simply perform gradient-based approximate minimization log pdecoderx h as minibatch gradient descent on the negative log-likelihood so long as the encoder is deterministic the denoising autoencoder is a feedforward network and may be trained with exactly the same techniques as any other feedforward network. we can therefore view the dae as performing stochastic gradient descent on the following expectation x log pdecoder pdata e x c x ex x h f x where pdata is the training distribution. chapter autoencoders x g f x x c x x x figure a denoising autoencoder is trained to map a corrupted data point x back to the original data point x. we illustrate training examples x as red crosses lying near a low-dimensional manifold illustrated with the bold black line. we illustrate the corruption process c x x with a gray circle of equiprobable corruptions. a gray arrow demonstrates how one training example is transformed into one sample from this corruption process. when the denoising autoencoder is trained to minimize the average of squared errors x the reconstruction g x estimates e x x. the vector gf x x points approximately towards the nearest point on the manifold since gf x gf x estimates the center of mass of the clean points x which could have given rise to x. the autoencoder thus learns a vector field gf x indicated by the green arrows. this vector field estimates the score xlog pdata up to a multiplicative factor that is the average root mean square reconstruction error. pdata x c x x x chapter autoencoders estimating the score hyv rinen score matching is an alternative to maximum likelihood. it provides a consistent estimator of probability distributions based on encouraging the model to have the same score as the data distribution at every training point x. in this context the score is a particular gradient field x log p x score matching is discussed further in section for the present discussion regarding autoencoders it is sufficient to understand that learning the gradient field of log pdata is one way to learn the structure of pdata itself. a very important property of daes is that their training criterion makes the autoencoder learn a vector field x that estimates the score of the data distribution. this is illustrated conditionally gaussian p x h in figure vincent denoising training of a specific kind of autoencoder hidden units linear reconstruction units using gaussian noise and mean squared error as the reconstruction cost is equivalent to training a specific kind of undirected probabilistic model called an rbm with gaussian visible units. this kind of model will be described in detail in section for the present discussion it suffices to know that it is a model that provides an explicit pmodelx when the rbm is trained using denoising score matching kingma and lecun its learning algorithm is equivalent to denoising training in the corresponding autoencoder. with a fixed noise level regularized score matching is not a consistent estimator it instead recovers a blurred version of the distribution. however if the noise level is chosen to approach when the number of examples approaches infinity then consistency is recovered. denoising score matching is discussed in more detail in section other connections between autoencoders and rbms exist. score matching applied to rbms yields a cost function that is identical to reconstruction error combined with a regularization term similar to the contractive penalty of the cae showed that an autoencoder gradient provides an approximation to contrastive divergence training of rbms. bengio and delalleau et al. for continuous-valued x the denoising criterion with gaussian corruption and reconstruction distribution yields an estimator of the score that is applicable to general encoder and decoder parametrizations this means a generic encoder-decoder architecture may be made to estimate the score alain and bengio chapter autoencoders by training with the squared error criterion g f x n c x x x and corruption x x x i with noise variance see figure for an illustration of how this works. figure vector field learned by a denoising autoencoder around a curved manifold near which the data concentrates in a space. each arrow is proportional to the reconstruction minus input vector of the autoencoder and points towards higher probability according to the implicitly estimated probability distribution. the vector field has zeros at both maxima of the estimated density function the data manifolds and at minima of that density function. for example the spiral arm forms a one-dimensional manifold of local maxima that are connected to each other. local minima appear near the middle of the gap between two arms. when the norm of reconstruction error by the length of the arrows is large it means that probability can be significantly increased by moving in the direction of the arrow and that is mostly the case in places of low probability. the autoencoder maps these low probability points to higher probability reconstructions. where probability is maximal the arrows shrink because the reconstruction becomes more accurate. figure reproduced with permission from alain and bengio in general there is no guarantee that the reconstruction gf minus the input x corresponds to the gradient of any function let alone to the score. that is chapter autoencoders vincent why the early results where g vincent generalized the results of kamyshanska and memisevic identifying a family of shallow autoencoders such that gf a score for all members of the family. are specialized to particular parametrizations x may be obtained by taking the derivative of another function. by x corresponds to so far we have described only how the denoising autoencoder learns to represent a probability distribution. more generally one may want to use the autoencoder as a generative model and draw samples from this distribution. this will be described later in section historical perspective gallinari et al. behnke lecun the idea of using mlps for denoising dates back to the work of and also used recurrent networks to denoise images. denoising autoencoders are in some sense just mlps trained to denoise. however the name denoising autoencoder refers to a model that is intended not merely to learn to denoise its input but to learn a good internal representation as a side effect of learning to denoise. this idea came much later et al. the learned representation may then be used to pretrain a deeper unsupervised network or a supervised network. like sparse autoencoders sparse coding contractive autoencoders and other regularized autoencoders the motivation for daes was to allow the learning of a very high-capacity encoder while preventing the encoder and decoder from learning a useless identity function. prior to the introduction of the modern dae inayoshi and kurita explored some of the same goals with some of the same methods. their approach minimizes reconstruction error in addition to a supervised objective while injecting noise in the hidden layer of a supervised mlp with the objective to improve generalization by introducing the reconstruction error and the injected noise. however their method was based on a linear encoder and could not learn function families as powerful as can the modern dae. learning manifolds with autoencoders like many other machine learning algorithms autoencoders exploit the idea that data concentrates around a low-dimensional manifold or a small set of such manifolds as described in section some machine learning algorithms exploit this idea only insofar as that they learn a function that behaves correctly on the manifold but may have unusual behavior if given an input that is off the manifold. chapter autoencoders autoencoders take this idea further and aim to learn the structure of the manifold. to understand how autoencoders do this we must present some important characteristics of manifolds. an important characterization of a manifold is the set of its tangent planes. at a point x on a d-dimensional manifold the tangent plane is given by d basis vectors that span the local directions of variation allowed on the manifold. as x illustrated in figure infinitesimally while staying on the manifold. these local directions specify how one can change all autoencoder training procedures involve a compromise between two forces learning a representation h of a training example x such that x can be approximately recovered from h through a decoder. the fact that x is drawn from the training data is crucial because it means the autoencoder need not successfully reconstruct inputs that are not probable under the data generating distribution. satisfying the constraint or regularization penalty. this can be an architectural constraint that limits the capacity of the autoencoder or it can be a regularization term added to the reconstruction cost. these techniques generally prefer solutions that are less sensitive to the input. clearly neither force alone would be useful copying the input to the output is not useful on its own nor is ignoring the input. instead the two forces together are useful because they force the hidden representation to capture information about the structure of the data generating distribution. the important principle is that the autoencoder can afford to represent only the variations that are needed to reconstruct training examples. if the data generating distribution concentrates near a low-dimensional manifold this yields representations that implicitly capture a local coordinate system for this manifold only the variations tangent to the manifold around x need to correspond to changes in h fx. hence the encoder learns a mapping from the input space x to a representation space a mapping that is only sensitive to changes along the manifold directions but that is insensitive to changes orthogonal to the manifold. a one-dimensional example is illustrated in figure showing that by making the reconstruction function insensitive to perturbations of the input around the data points we cause the autoencoder to recover the manifold structure. to understand why autoencoders are useful for manifold learning it is instructive to compare them to other approaches. what is most commonly learned to characterize a manifold is a representation of the data points on near chapter autoencoders figure an illustration of the concept of a tangent hyperplane. here we create a one-dimensional manifold in space. we take an mnist image with pixels and transform it by translating it vertically. the amount of vertical translation defines a coordinate along a one-dimensional manifold that traces out a curved path through image space. this plot shows a few points along this manifold. for visualization we have projected the manifold into two dimensional space using pca. an n-dimensional manifold has an n-dimensional tangent plane at every point. this tangent plane touches the manifold exactly at that point and is oriented parallel to the surface at that point. it defines the space of directions in which it is possible to move while remaining on the manifold. this one-dimensional manifold has a single tangent line. we indicate an example tangent line at one point with an image showing how this tangent direction appears in image space. gray pixels indicate pixels that do not change as we move along the tangent line white pixels indicate pixels that brighten and black pixels indicate pixels that darken. chapter autoencoders x r identity optimal reconstruction x x figure if the autoencoder learns a reconstruction function that is invariant to small perturbations near the data points it captures the manifold structure of the data. here the manifold structure is a collection of manifolds. the dashed diagonal line indicates the identity function target for reconstruction. the optimal reconstruction function crosses the identity function wherever there is a data point. the horizontal arrows at the bottom of the plot indicate the r x reconstruction direction vector at the base of the arrow in input space always pointing towards the nearest manifold single datapoint in the case. the denoising autoencoder explicitly tries to make the derivative of the reconstruction function rx small around the data points. the contractive autoencoder does the same for the encoder. although the derivative of rx is asked to be small around the data points it can be large between the data points. the space between the data points corresponds to the region between the manifolds where the reconstruction function must have a large derivative in order to map corrupted points back onto the manifold. the manifold. such a representation for a particular example is also called its embedding. it is typically given by a low-dimensional vector with less dimensions than the ambient space of which the manifold is a low-dimensional subset. some algorithms manifold learning algorithms discussed below directly learn an embedding for each training example while others learn a more general mapping sometimes called an encoder or representation function that maps any point in the ambient space input space to its embedding. manifold learning has mostly focused on unsupervised learning procedures that attempt to capture these manifolds. most of the initial machine learning research on learning nonlinear manifolds has focused on non-parametric methods based on the nearest-neighbor graph. this graph has one node per training example and edges connecting near neighbors to each other. these methods lkopf brand belkin et al. roweis and saul tenenbaum et al. chapter autoencoders figure non-parametric manifold learning procedures build a nearest neighbor graph in which nodes represent training examples a directed edges indicate nearest neighbor relationships. various procedures can thus obtain the tangent plane associated with a neighborhood of the graph as well as a coordinate system that associates each training example with a real-valued vector position or embedding. it is possible to generalize such a representation to new examples by a form of interpolation. so long as the number of examples is large enough to cover the curvature and twists of the manifold these approaches work well. images from the qmul multiview face dataset gong et al. and niyogi donoho and grimes weinberger and saul hinton and roweis van der maaten and hinton associate each of nodes with a tangent plane that spans the directions of variations associated with the difference vectors between the example and its neighbors as illustrated in figure a global coordinate system can then be obtained through an optimization or solving a linear system. figure illustrates how a manifold can be tiled by a large number of locally linear gaussian-like patches pancakes because the gaussians are flat in the tangent directions. however there is a fundamental difficulty with such local non-parametric approaches to manifold learning raised in if the manifolds are not very smooth have many peaks and troughs and twists one may need a very large number of training examples to cover each one of bengio and monperrus chapter autoencoders figure if the tangent planes figure at each location are known then they can be tiled to form a global coordinate system or a density function. each local patch can be thought of as a local euclidean coordinate system or as a locally flat gaussian or pancake with a very small variance in the directions orthogonal to the pancake and a very large variance in the directions defining the coordinate system on the pancake. a mixture of these gaussians provides an estimated density function as in the manifold parzen window algorithm or its non-local neural-net based variant bengio et al. vincent and bengio these variations with no chance to generalize to unseen variations. indeed these methods can only generalize the shape of the manifold by interpolating between neighboring examples. unfortunately the manifolds involved in ai problems can have very complicated structure that can be difficult to capture from only local interpolation. consider for example the manifold resulting from translation shown in figure xi as the image is translated we will observe that one coordinate encounters a peak or a trough in its value once for every peak or trough in brightness in the image. in other words the complexity of the patterns of brightness in an underlying image template drives the complexity of the manifolds that are generated by performing simple image transformations. this motivates the use of distributed representations and deep learning for capturing manifold structure. if we watch just one coordinate within the input vector chapter autoencoders contractive autoencoders the contractive autoencoder introduces an explicit regularizer on the code h fx encouraging the derivatives of f to be as small as possible rifai et al. b h f x f the penalty is the squared frobenius norm of squared elements of the jacobian matrix of partial derivatives associated with the encoder function. alain and bengio there is a connection between the denoising autoencoder and the contractive autoencoder showed that in the limit of small gaussian input noise the denoising reconstruction error is equivalent to a contractive penalty on the reconstruction function that maps x to r g fx. in other words denoising autoencoders make the reconstruction function resist small but finite-sized perturbations of the input while contractive autoencoders make the feature extraction function resist infinitesimal perturbations of the input. when using the jacobian-based contractive penalty to pretrain features fx for use with a classifier the best classification accuracy usually results from applying the contractive penalty to f rather than to gf a contractive penalty on f also has close connections to score matching as discussed in section the name contractive arises from the way that the cae warps space. specifically because the cae is trained to resist perturbations of its input it is encouraged to map a neighborhood of input points to a smaller neighborhood of output points. we can think of this as contracting the input neighborhood to a smaller output neighborhood. to clarify the cae is contractive only locally all perturbations of a training point x are mapped near to f x. globally two different points x and x may be mapped to fx and fx points that are farther apart than the original points. it is plausible that f be expanding in-between or far from the data manifolds for example what happens in the toy example of figure penalty is applied to sigmoidal units one easy way to shrink the jacobian is to make the sigmoid units saturate to this encourages the cae to encode input points with extreme values of the sigmoid that may be interpreted as a binary code. it also ensures that the cae will spread its code values throughout most of the hypercube that its sigmoidal hidden units can span. when the or we can think of the jacobian matrix j at a point x as approximating the nonlinear encoder f as being a linear operator. this allows us to use the word contractive more formally. in the theory of linear operators a linear operator chapter autoencoders is said to be contractive if the norm of j x remains less than or equal to for all unit-norm x. in other words j is contractive if it shrinks the unit sphere. we can think of the cae as penalizing the frobenius norm of the local linear approximation of f at every training point x in order to encourage each of these local linear operator to become a contraction. as described in section regularized autoencoders learn manifolds by in the case of the cae these two forces are balancing two opposing forces. reconstruction error and the contractive penalty reconstruction error alone would encourage the cae to learn an identity function. the contractive penalty alone would encourage the cae to learn features that are constant with respect to x. the compromise between these two forces yields an autoencoder whose derivatives f are mostly tiny. only a small number of hidden units corresponding to a small number of directions in the input may have significant derivatives. x rifai et al. the goal of the cae is to learn the manifold structure of the data. directions x with large j x rapidly change h so these are likely to be directions which approximate the tangent planes of the manifold. experiments by rifai et al. and show that training the cae results in most singular values of j dropping below in magnitude and therefore becoming contractive. however some singular values remain above because the reconstruction error penalty encourages the cae to encode the directions with the most local variance. the directions corresponding to the largest singular values are interpreted as the tangent directions that the contractive autoencoder has learned. ideally these tangent directions should correspond to real variations in the data. for example a cae applied to images should learn tangent vectors that show how the image changes as objects in the image gradually change pose as shown in figure visualizations of the experimentally obtained singular vectors do seem to correspond to meaningful transformations of the input image as shown in figure et al. one practical issue with the cae regularization criterion is that although it is cheap to compute in the case of a single hidden layer autoencoder it becomes much more expensive in the case of deeper autoencoders. the strategy followed by rifai is to separately train a series of single-layer autoencoders each trained to reconstruct the previous autoencoder s hidden layer. the composition of these autoencoders then forms a deep autoencoder. because each layer was separately trained to be locally contractive the deep autoencoder is contractive as well. the result is not the same as what would be obtained by jointly training the entire architecture with a penalty on the jacobian of the deep model but it captures many of the desirable qualitative characteristics. another practical issue is that the contraction penalty can obtain useless results chapter autoencoders input point tangent vectors local pca sharing across regions contractive autoencoder figure illustration of tangent vectors of the manifold estimated by local pca and by a contractive autoencoder. the location on the manifold is defined by the input image of a dog drawn from the dataset. the tangent vectors are estimated by the leading singular vectors of the jacobian matrix h of the input-to-code mapping. x although both local pca and the cae can capture local tangents the cae is able to form more accurate estimates from limited training data because it exploits parameter sharing across different locations that share a subset of active hidden units. the cae tangent directions typically correspond to moving or changing parts of the object as the head or legs. images reproduced with permission from rifai et al. if we do not impose some sort of scale on the decoder. for example the encoder could consist of multiplying the input by a small constant and the decoder could consist of dividing the code by as approaches the encoder drives the contractive penalty to approach without having learned anything about the distribution. meanwhile the decoder maintains perfect reconstruction. in rifai et al. f and g. both f and g are standard neural network layers consisting of an affine transformation followed by an element-wise nonlinearity so it is straightforward to set the weight matrix of g to be the transpose of the weight matrix of this is prevented by tying the weights of predictive sparse decomposition predictive sparse decomposition is a model that is a hybrid of sparse coding and parametric autoencoders a parametric encoder is trained to predict the output of iterative inference. psd has been applied to unsupervised feature learning for object recognition in images and video as well f and a as for audio decoder gh that are both parametric. during training h is controlled by the et al. henaff et al. the model consists of an encoder jarrett farabet et al. et al. et al. chapter autoencoders optimization algorithm. training proceeds by minimizing x x g h h f like in sparse coding the training algorithm alternates between minimization with respect to h and minimization with respect to the model parameters. minimization with respect to h is fast because fx provides a good initial value of h and the cost function constrains h to remain near f anyway. simple gradient descent can obtain reasonable values of in as few as ten steps. h the training procedure used by psd is different from first training a sparse coding model and then training fx to predict the values of the sparse coding features. the psd training procedure regularizes the decoder to use parameters for which can infer good code values. f this topic is developed further. the tools presented in chapter predictive sparse coding is an example of learned approximate inference. in section make it clear that psd can be interpreted as training a directed sparse coding probabilistic model by maximizing a lower bound on the log-likelihood of the model. in practical applications of psd the iterative optimization is only used during training. the parametric encoder f is used to compute the learned features when the model is deployed. evaluating f is computationally inexpensive compared to inferring h via gradient descent. because f is a differentiable parametric function psd models may be stacked and used to initialize a deep network to be trained with another criterion. applications of autoencoders autoencoders have been successfully applied to dimensionality reduction and information retrieval tasks. dimensionality reduction was one of the first applications of representation learning and deep learning. it was one of the early motivations for studying autoencoders. for example hinton and salakhutdinov trained a stack of rbms and then used their weights to initialize a deep autoencoder with gradually smaller hidden layers culminating in a bottleneck of units. the resulting code yielded less reconstruction error than pca into dimensions and the learned representation was qualitatively easier to interpret and relate to the underlying categories with these categories manifesting as well-separated clusters. lower-dimensional representations can improve performance on many tasks such as classification. models of smaller spaces consume less memory and runtime. chapter autoencoders many forms of dimensionality reduction place semantically related examples near each other as observed by salakhutdinov and hinton et al. the hints provided by the mapping to the lower-dimensional space aid generalization. torralba and one task that benefits even more than usual from dimensionality reduction is information retrieval the task of finding entries in a database that resemble a query entry. this task derives the usual benefits from dimensionality reduction that other tasks do but also derives the additional benefit that search can become extremely efficient in certain kinds of low dimensional spaces. specifically if we train the dimensionality reduction algorithm to produce a code that is lowdimensional and then we can store all database entries in a hash table mapping binary code vectors to entries. this hash table allows us to perform information retrieval by returning all database entries that have the same binary code as the query. we can also search over slightly less similar entries very efficiently just by flipping individual bits from the encoding of the query. this approach to information retrieval via dimensionality reduction and binarization is called semantic hashing and hinton and has been applied to both textual input and hinton and images krizhevsky and hinton weiss binary et al. et al. to produce binary codes for semantic hashing one typically uses an encoding function with sigmoids on the final layer. the sigmoid units must be trained to be saturated to nearly or nearly for all input values. one trick that can accomplish this is simply to inject additive noise just before the sigmoid nonlinearity during training. the magnitude of the noise should increase over time. to fight that noise and preserve as much information as possible the network must increase the magnitude of the inputs to the sigmoid function until saturation occurs. the idea of learning a hashing function has been further explored in several directions including the idea of training the representations so as to optimize a loss more directly linked to the task of finding nearby examples in the hash table norouzi and fleet chapter representation learning in this chapter we first discuss what it means to learn representations and how the notion of representation can be useful to design deep architectures. we discuss how learning algorithms share statistical strength across different tasks including using information from unsupervised tasks to perform supervised tasks. shared representations are useful to handle multiple modalities or domains or to transfer learned knowledge to tasks for which few or no examples are given but a task representation exists. finally we step back and argue about the reasons for the success of representation learning starting with the theoretical advantages of distributed representations and deep representations and ending with the more general idea of underlying assumptions about the data generating process in particular about underlying causes of the observed data. et al. many information processing tasks can be very easy or very difficult depending on how the information is represented. this is a general principle applicable to daily life computer science in general and to machine learning. for example it is straightforward for a person to divide by using long division. the task becomes considerably less straightforward if it is instead posed using the roman numeral representation of the numbers. most modern people asked to divide ccx by vi would begin by converting the numbers to the arabic numeral representation permitting long division procedures that make use of the place value system. more concretely we can quantify the asymptotic runtime of various operations using appropriate or inappropriate representations. for example inserting a number into the correct position in a sorted list of numbers is an on operation if the list is represented as a linked list but only olog n if the list is represented as a red-black tree. in the context of machine learning what makes one representation better than chapter representation learning another? generally speaking a good representation is one that makes a subsequent learning task easier. the choice of representation will usually depend on the choice of the subsequent learning task. we can think of feedforward networks trained by supervised learning as performing a kind of representation learning. specifically the last layer of the network is typically a linear classifier such as a softmax regression classifier. the rest of the network learns to provide a representation to this classifier. training with a supervised criterion naturally leads to the representation at every hidden layer more so near the top hidden layer taking on properties that make the classification task easier. for example classes that were not linearly separable in the input features may become linearly separable in the last hidden layer. in principle the last layer could be another kind of model such as a nearest neighbor classifier and hinton the features in the penultimate layer should learn different properties depending on the type of the last layer. supervised training of feedforward networks does not involve explicitly imposing any condition on the learned intermediate features. other kinds of representation learning algorithms are often explicitly designed to shape the representation in some particular way. for example suppose we want to learn a representation that makes density estimation easier. distributions with more independences are easier to model so we could design an objective function that encourages the elements of the representation vector h to be independent. just like supervised networks unsupervised deep learning algorithms have a main training objective but also learn a representation as a side effect. regardless of how a representation was obtained it can be used for another task. alternatively multiple tasks supervised some unsupervised can be learned together with some shared internal representation. most representation learning problems face a tradeoff between preserving as much information about the input as possible and attaining nice properties as independence. representation learning is particularly interesting because it provides one way to perform unsupervised and semi-supervised learning. we often have very large amounts of unlabeled training data and relatively little labeled training data. training with supervised learning techniques on the labeled subset often results in severe overfitting. semi-supervised learning offers the chance to resolve this overfitting problem by also learning from the unlabeled data. specifically we can learn good representations for the unlabeled data and then use these representations to solve the supervised learning task. humans and animals are able to learn from very few labeled examples. we do chapter representation learning not yet know how this is possible. many factors could explain improved human performance for example the brain may use very large ensembles of classifiers or bayesian inference techniques. one popular hypothesis is that the brain is able to leverage unsupervised or semi-supervised learning. there are many ways to leverage unlabeled data. in this chapter we focus on the hypothesis that the unlabeled data can be used to learn a good representation. greedy layer-wise unsupervised pretraining unsupervised learning played a key historical role in the revival of deep neural networks enabling researchers for the first time to train a deep supervised network without requiring architectural specializations like convolution or recurrence. we call this procedure unsupervised pretraining or more precisely greedy layerwise unsupervised pretraining. this procedure is a canonical example of how a representation learned for one task learning trying to capture the shape of the input distribution can sometimes be useful for another task learning with the same input domain. greedy layer-wise unsupervised pretraining relies on a single-layer representation learning algorithm such as an rbm a single-layer autoencoder a sparse coding model or another model that learns latent representations. each layer is pretrained using unsupervised learning taking the output of the previous layer and producing as output a new representation of the data whose distribution its relation to other variables such as categories to predict is hopefully simpler. see algorithm for a formal description. greedy layer-wise training procedures based on unsupervised criteria have long been used to sidestep the difficulty of jointly training the layers of a deep neural net for a supervised task. this approach dates back at least as far as the neocognitron the deep learning renaissance of began with the discovery that this greedy learning procedure could be used to find a good initialization for a joint learning procedure over all the layers and that this approach could be used to successfully train even fully connected architectures hinton and salakhutdinov hinton bengio et al. prior to this discovery only convolutional deep networks or networks whose depth resulted from recurrence were regarded as feasible to train. today we now know that greedy layer-wise pretraining is not required to train fully connected deep architectures but the unsupervised pretraining approach was the first method to succeed. et al. ranzato et al. greedy layer-wise pretraining is called greedy because it is a greedy algo chapter representation learning rithm meaning that it optimizes each piece of the solution independently one piece at a time rather than jointly optimizing all pieces. it is called layer-wise because these independent pieces are the layers of the network. specifically greedy layer-wise pretraining proceeds one layer at a time training the k-th layer while keeping the previous ones fixed. in particular the lower layers are trained first are not adapted after the upper layers are introduced. it is called unsupervised because each layer is trained with an unsupervised representation learning algorithm. however it is also called pretraining because it is supposed to be only a first step before a joint training algorithm is applied to fine-tune all the layers together. in the context of a supervised learning task it can be viewed as a regularizer some experiments pretraining decreases test error without decreasing training error and a form of parameter initialization. it is common to use the word pretraining to refer not only to the pretraining stage itself but to the entire two phase protocol that combines the pretraining phase and a supervised learning phase. the supervised learning phase may involve training a simple classifier on top of the features learned in the pretraining phase or it may involve supervised fine-tuning of the entire network learned in the pretraining phase. no matter what kind of unsupervised learning algorithm or what model type is employed in the vast majority of cases the overall training scheme is nearly the same. while the choice of unsupervised learning algorithm will obviously impact the details most applications of unsupervised pretraining follow this basic protocol. greedy layer-wise unsupervised pretraining can also be used as initialization for other unsupervised learning algorithms such as deep autoencoders and probabilistic models with many layers of latent and salakhutdinov variables. such models include deep belief networks and deep boltzmann machines and hinton these deep generative models will be described in chapter hinton et al. as discussed in section it is also possible to have greedy layer-wise supervised pretraining. this builds on the premise that training a shallow network is easier than training a deep one which seems to have been validated in several contexts erhan et al. when and why does unsupervised pretraining work? on many tasks greedy layer-wise unsupervised pretraining can yield substantial improvements in test error for classification tasks. this observation was responsible for the renewed interested in deep neural networks starting in et al. chapter representation learning l algorithm greedy layer-wise unsupervised pretraining protocol. given the following unsupervised feature learning algorithm which takes a training set of examples and returns an encoder or feature function f. the raw input data is x with one row per example and f is the output of the first t stage encoder on x. in the case where fine-tuning is performed we use a learner which takes an initial function f input examples x in the supervised fine-tuning case associated targets y and returns a tuned function. the number of stages is identity function f x x for do m l x k f f f x f x f end for t if fine-tuning then f x y f end if return f et al. et al. ranzato ma et al. bengio on many other tasks however unsupervised pretraining either does not confer a benefit or even causes noticeable harm. studied the effect of pretraining on machine learning models for chemical activity prediction and found that on average pretraining was slightly harmful but for many tasks was significantly helpful. because unsupervised pretraining is sometimes helpful but often harmful it is important to understand when and why it works in order to determine whether it is applicable to a particular task. at the outset it is important to clarify that most of this discussion is restricted to greedy unsupervised pretraining in particular. there are other completely different paradigms for performing semi-supervised learning with neural networks such as virtual adversarial training described in section it is also possible to train an autoencoder or generative model at the same time as the supervised model. examples of this single-stage approach include the discriminative rbm and bengio in which the total objective is an explicit sum of the two terms using the labels and one only using the input. and the ladder network rasmus et al. unsupervised pretraining combines two different ideas. first it makes use of chapter representation learning the idea that the choice of initial parameters for a deep neural network can have a significant regularizing effect on the model to a lesser extent that it can improve optimization. second it makes use of the more general idea that learning about the input distribution can help to learn about the mapping from inputs to outputs. both of these ideas involve many complicated interactions between several parts of the machine learning algorithm that are not entirely understood. the first idea that the choice of initial parameters for a deep neural network can have a strong regularizing effect on its performance is the least well understood. at the time that pretraining became popular it was understood as initializing the model in a location that would cause it to approach one local minimum rather than another. today local minima are no longer considered to be a serious problem for neural network optimization. we now know that our standard neural network training procedures usually do not arrive at a critical point of any kind. it remains possible that pretraining initializes the model in a location that would otherwise be inaccessible for example a region that is surrounded by areas where the cost function varies so much from one example to another that minibatches give only a very noisy estimate of the gradient or a region surrounded by areas where the hessian matrix is so poorly conditioned that gradient descent methods must use very small steps. however our ability to characterize exactly what aspects of the pretrained parameters are retained during the supervised training stage is limited. this is one reason that modern approaches typically use simultaneous unsupervised learning and supervised learning rather than two sequential stages. one may also avoid struggling with these complicated ideas about how optimization in the supervised learning stage preserves information from the unsupervised learning stage by simply freezing the parameters for the feature extractors and using supervised learning only to add a classifier on top of the learned features. the other idea that a learning algorithm can use information learned in the unsupervised phase to perform better in the supervised learning stage is better understood. the basic idea is that some features that are useful for the unsupervised task may also be useful for the supervised learning task. for example if we train a generative model of images of cars and motorcycles it will need to know about wheels and about how many wheels should be in an image. if we are fortunate the representation of the wheels will take on a form that is easy for the supervised learner to access. this is not yet understood at a mathematical theoretical level so it is not always possible to predict which tasks will benefit from unsupervised learning in this way. many aspects of this approach are highly dependent on the specific models used. for example if we wish to add a linear classifier on chapter representation learning top of pretrained features the features must make the underlying classes linearly separable. these properties often occur naturally but do not always do so. this is another reason that simultaneous supervised and unsupervised learning can be preferable the constraints imposed by the output layer are naturally included from the start. from the point of view of unsupervised pretraining as learning a representation we can expect unsupervised pretraining to be more effective when the initial representation is poor. one key example of this is the use of word embeddings. words represented by one-hot vectors are not very informative because every two distinct one-hot vectors are the same distance from each other distance of learned word embeddings naturally encode similarity between words by their distance from each other. because of this unsupervised pretraining is especially useful when processing words. it is less useful when processing images perhaps because images already lie in a rich vector space where distances provide a low quality similarity metric. from the point of view of unsupervised pretraining as a regularizer we can expect unsupervised pretraining to be most helpful when the number of labeled examples is very small. because the source of information added by unsupervised pretraining is the unlabeled data we may also expect unsupervised pretraining to perform best when the number of unlabeled examples is very large. the advantage of semi-supervised learning via unsupervised pretraining with many unlabeled examples and few labeled examples was made particularly clear in with unsupervised pretraining winning two international transfer learning competitions in settings where the number of labeled examples in the target task was small a handful to dozens of examples per class. these effects were also documented in carefully controlled experiments by paine mesnil et al. goodfellow et al. et al. other factors are likely to be involved. for example unsupervised pretraining is likely to be most useful when the function to be learned is extremely complicated. unsupervised learning differs from regularizers like weight decay because it does not bias the learner toward discovering a simple function but rather toward discovering feature functions that are useful for the unsupervised learning task. if the true underlying functions are complicated and shaped by regularities of the input distribution unsupervised learning can be a more appropriate regularizer. these caveats aside we now analyze some success cases where unsupervised pretraining is known to cause an improvement and explain what is known about why this improvement occurs. unsupervised pretraining has usually been used to improve classifiers and is usually most interesting from the point of view of chapter representation learning erhan et al. erhan et al. figure visualization via nonlinear projection of the learning trajectories of different neural networks in function space parameter space to avoid the issue of many-to-one mappings from parameter vectors to functions with different random initializations and with or without unsupervised pretraining. each point corresponds to a different neural network at a particular time during its training process. this figure is adapted a coordinate in function space is an infinitewith permission from dimensional vector associating every input x with an output y. made a linear projection to high-dimensional space by concatenating the y for many specific x points. they then made a further nonlinear projection to by isomap et al. color indicates time. all networks are initialized near the center of the plot to the region of functions that produce approximately uniform distributions over the class y for most inputs. over time learning moves the function outward to points that make strong predictions. training consistently terminates in one region when using pretraining and in another non-overlapping region when not using pretraining. isomap tries to preserve global relative distances hence volumes so the small region corresponding to pretrained models may indicate that the pretraining-based estimator has reduced variance. chapter representation learning reducing test set error. however unsupervised pretraining can help tasks other than classification and can act to improve optimization rather than being merely a regularizer. for example it can improve both train and test reconstruction error for deep autoencoders and salakhutdinov erhan et al. performed many experiments to explain several successes of unsupervised pretraining. both improvements to training error and improvements to test error may be explained in terms of unsupervised pretraining taking the parameters into a region that would otherwise be inaccessible. neural network training is non-deterministic and converges to a different function every time it is run. training may halt at a point where the gradient becomes small a point where early stopping ends training to prevent overfitting or at a point where the gradient is large but it is difficult to find a downhill step due to problems such as stochasticity or poor conditioning of the hessian. neural networks that receive unsupervised pretraining consistently halt in the same region of function space while neural networks without pretraining consistently halt in another region. see figure for a visualization of this phenomenon. the region where pretrained networks arrive is smaller suggesting that pretraining reduces the variance of the estimation process which can in turn reduce the risk of severe over-fitting. in other words unsupervised pretraining initializes neural network parameters into a region that they do not escape and the results following this initialization are more consistent and less likely to be very bad than without this initialization. erhan et al. also provide some answers as to pretraining works best the mean and variance of the test error were most reduced by pretraining for deeper networks. keep in mind that these experiments were performed before the invention and popularization of modern techniques for training very deep networks linear units dropout and batch normalization so less is known about the effect of unsupervised pretraining in conjunction with contemporary approaches. when an important question is how unsupervised pretraining can act as a regularizer. one hypothesis is that pretraining encourages the learning algorithm to discover features that relate to the underlying causes that generate the observed data. this is an important idea motivating many other algorithms besides unsupervised pretraining and is described further in section compared to other forms of unsupervised learning unsupervised pretraining has the disadvantage that it operates with two separate training phases. many regularization strategies have the advantage of allowing the user to control the strength of the regularization by adjusting the value of a single hyperparameter. unsupervised pretraining does not offer a clear way to adjust the the strength of the regularization arising from the unsupervised stage. instead there are chapter representation learning very many hyperparameters whose effect may be measured after the fact but is often difficult to predict ahead of time. when we perform unsupervised and supervised learning simultaneously instead of using the pretraining strategy there is a single hyperparameter usually a coefficient attached to the unsupervised cost that determines how strongly the unsupervised objective will regularize the supervised model. one can always predictably obtain less regularization by decreasing this coefficient. in the case of unsupervised pretraining there is not a way of flexibly adapting the strength of the regularization either the supervised model is initialized to pretrained parameters or it is not. another disadvantage of having two separate training phases is that each phase has its own hyperparameters. the performance of the second phase usually cannot be predicted during the first phase so there is a long delay between proposing hyperparameters for the first phase and being able to update them using feedback from the second phase. the most principled approach is to use validation set error in the supervised phase in order to select the hyperparameters of the pretraining phase as discussed in in practice some hyperparameters like the number of pretraining iterations are more conveniently set during the pretraining phase using early stopping on the unsupervised objective which is not ideal but computationally much cheaper than using the supervised objective. larochelle et al. today unsupervised pretraining has been largely abandoned except in the field of natural language processing where the natural representation of words as one-hot vectors conveys no similarity information and where very large unlabeled sets are available. in that case the advantage of pretraining is that one can pretrain once on a huge unlabeled set example with a corpus containing billions of words learn a good representation of words but also of sentences and then use this representation or fine-tune it for a supervised task for which the training set contains substantially fewer examples. this approach was pioneered by by collobert and weston turian et al. and remains in common use today. collobert and et al. deep learning techniques based on supervised learning regularized with dropout or batch normalization are able to achieve human-level performance on very many tasks but only with extremely large labeled datasets. these same techniques outperform unsupervised pretraining on medium-sized datasets such as and mnist which have roughly labeled examples per class. on extremely small datasets such as the alternative splicing dataset bayesian methods outperform methods based on unsupervised pretraining for these reasons the popularity of unsupervised pretraining has declined. nevertheless unsupervised pretraining remains an important milestone in the history of deep learning research chapter representation learning and continues to influence contemporary approaches. the idea of pretraining has been generalized to supervised pretraining discussed in section as a very common approach for transfer learning. supervised pretraining for transfer learning is popular for use with convolutional networks pretrained on the imagenet dataset. practitioners publish the parameters of these trained networks for this purpose just like pretrained word vectors are published for natural language tasks collobert et al. mikolov oquab et al. yosinski et al. et al. transfer learning and domain adaptation transfer learning and domain adaptation refer to the situation where what has been learned in one setting distribution is exploited to improve generalization in another setting distribution p this generalizes the idea presented in the previous section where we transferred representations between an unsupervised learning task and a supervised learning task. in transfer learning the learner must perform two or more different tasks but we assume that many of the factors that explain the variations in are relevant to the variations that need to be captured for learning this is typically understood in a supervised learning context where the input is the same but the target may be of a different nature. for example we may learn about one set of visual categories such as cats and dogs in the first setting then learn about a different set of visual categories such as ants and wasps in the second setting. if there is significantly more data in the first setting from p then that may help to learn representations that are useful to quickly generalize from only very few examples drawn from many visual categories share low-level notions of edges and visual shapes the effects of geometric changes changes in lighting etc. in general transfer learning multi-task learning and domain adaptation can be achieved via representation learning when there exist features that are useful for the different settings or tasks corresponding to underlying factors that appear in more than one setting. this is illustrated in figure with shared lower layers and task-dependent upper layers. however sometimes what is shared among the different tasks is not the semantics of the input but the semantics of the output. for example a speech recognition system needs to produce valid sentences at the output layer but the earlier layers near the input may need to recognize very different versions of the same phonemes or sub-phonemic vocalizations depending on which person is speaking. in cases like these it makes more sense to share the upper layers the output of the neural network and have a task-specific preprocessing as chapter representation learning illustrated in figure yy hshared hshared selection switch y has the same semantics for all tasks while the input variable figure example architecture for multi-task or transfer learning when the output variable has a different meaning possibly even a different dimension for each task for example each user called and for three tasks. the lower levels to the selection switch are task-specific while the upper levels are shared. the lower levels learn to translate their task-specific input into a generic set of features. x in the related case of domain adaptation the task the optimal input-tooutput mapping remains the same between each setting but the input distribution is slightly different. for example consider the task of sentiment analysis which consists of determining whether a comment expresses positive or negative sentiment. comments posted on the web come from many categories. a domain adaptation scenario can arise when a sentiment predictor trained on customer reviews of media content such as books videos and music is later used to analyze comments about consumer electronics such as televisions or smartphones. one can imagine that there is an underlying function that tells whether any statement is positive neutral or negative but of course the vocabulary and style may vary from one domain to another making it more difficult to generalize across domains. simple unsupervised pretraining denoising autoencoders has been found to be very successful for sentiment analysis with domain adaptation glorot et al. a related problem is that of concept drift which we can view as a form of transfer learning due to gradual changes in the data distribution over time. both concept drift and transfer learning can be viewed as particular forms of chapter representation learning multi-task learning. while the phrase multi-task learning typically refers to supervised learning tasks the more general notion of transfer learning is applicable to unsupervised learning and reinforcement learning as well. in all of these cases the objective is to take advantage of data from the first setting to extract information that may be useful when learning or even when directly making predictions in the second setting. the core idea of representation learning is that the same representation may be useful in both settings. using the same representation in both settings allows the representation to benefit from the training data that is available for both tasks. as mentioned before unsupervised deep learning for transfer learning has found mesnil et al. goodfellow success in some machine learning competitions et al. in the first of these competitions the experimental setup is the following. each participant is first given a dataset from the first setting distribution illustrating examples of some set of categories. the participants must use this to learn a good feature space the raw input to some representation such that when we apply this learned transformation to inputs from the transfer setting a linear classifier can be trained and generalize well from very few labeled examples. one of the most striking results found in this competition is that as an architecture makes use of deeper and deeper representations in a purely unsupervised way from data collected in the first setting p the learning curve on the new categories of the second setting p becomes much better. for deep representations fewer labeled examples of the transfer tasks are necessary to achieve the apparently asymptotic generalization performance. two extreme forms of transfer learning are one-shot learning and zero-shot learning sometimes also called zero-data learning. only one labeled example of the transfer task is given for one-shot learning while no labeled examples are given at all for the zero-shot learning task. et al. one-shot learning is possible because the representation learns to cleanly separate the underlying classes during the first stage. during the transfer learning stage only one labeled example is needed to infer the label of many possible test examples that all cluster around the same point in representation space. this works to the extent that the factors of variation corresponding to these invariances have been cleanly separated from the other factors in the learned representation space and we have somehow learned which factors do and do not matter when discriminating objects of certain categories. as an example of a zero-shot learning setting consider the problem of having a learner read a large collection of text and then solve object recognition problems. chapter representation learning it may be possible to recognize a specific object class even without having seen an image of that object if the text describes the object well enough. for example having read that a cat has four legs and pointy ears the learner might be able to guess that an image is a cat without having seen a cat before. et al. et al. socher and zero-shot learning zero-data learning palatucci et al. are only possible because additional information has been exploited during training. we can think of the zero-data learning scenario as including three random variables the traditional inputs x the traditional outputs or targets y and an additional random variable describing the task t the model is trained to estimate the conditional distribution py x t where t is a description of the task we wish the model to perform. in our example of recognizing cats after having read about cats the output is a binary variable y with y indicating yes and y indicating no. the task variable t then represents questions to be answered such as is there a cat in this image? if we have a training set containing unsupervised examples of objects that live in the same space as t we may be able to infer the meaning of unseen instances of t in our example of recognizing cats without having seen an image of the cat it is important that we have had unlabeled text data containing sentences such as cats have four legs or cats have pointy ears. zero-shot learning requires t to be represented in a way that allows some sort of generalization. for example t cannot be just a one-hot code indicating an object category. provide instead a distributed representation of object categories by using a learned word embedding for the word associated with each category. socher et al. et al. et al. et al. gouws a similar phenomenon happens in machine translation mikolov we have words in one language and the relationships between words can be learned from unilingual corpora on the other hand we have translated sentences which relate words in one language with words in the other. even though we may not have labeled examples translating word a in language x to word b in language y we can generalize and guess a translation for word a because we have learned a distributed representation for words in language x a distributed representation for words in language y and created a link two-way relating the two spaces via training examples consisting of matched pairs of sentences in both languages. this transfer will be most successful if all three ingredients two representations and the relations between them are learned jointly. zero-shot learning is a particular form of transfer learning. the same principle explains how one can perform multi-modal learning capturing a representation chapter representation learning hx fx hy fy fy space x fx xtest space y y test pairs in the training set x y fx encoder function for x fy encoder function for y relationship between embedded points within one of the domains maps between representation spaces figure transfer learning between two domains x and y enables zero-shot learning. labeled or unlabeled examples of x allow one to learn a representation function fx and similarly with examples of y to learn f y. each application of the fx and fy functions appears as an upward arrow with the style of the arrows indicating which function is applied. distance in hx space provides a similarity metric between any pair of points in x space that may be more meaningful than distance in x space. likewise distance in hy space provides a similarity metric between any pair of points in y space. both of these similarity functions are indicated with dotted bidirectional arrows. labeled examples horizontal lines are pairs y which allow one to learn a one-way or two-way map bidirectional arrow between the representations fxx and the representations fy and anchor these representations to each other. zero-data learning is then enabled as follows. one can associate an image xtest to a word y test even if no image of that word was ever presented simply because word-representations f yytest and image-representations fx can be related to each other via the maps between representation spaces. it works because although that image and that word were never paired their respective feature vectors fxxtest and fy ytest have been related to each other. figure inspired from suggestion by hrant khachatrian. chapter representation learning in one modality a representation in the other and the relationship general a joint distribution between pairs y consisting of one observation x in one modality and another observation y in the other modality and salakhutdinov by learning all three sets of parameters x to its representation from y to its representation and the relationship between the two representations concepts in one representation are anchored in the other and vice-versa allowing one to meaningfully generalize to new pairs. the procedure is illustrated in figure semi-supervised disentangling of causal factors an important question about representation learning is what makes one representation better than another? one hypothesis is that an ideal representation is one in which the features within the representation correspond to the underlying causes of the observed data with separate features or directions in feature space corresponding to different causes so that the representation disentangles the causes from one another. this hypothesis motivates approaches in which we first seek a good representation for px. such a representation may also be a good representation for computing py x if y is among the most salient causes of x. this idea has guided a large amount of deep learning research since at least the and hinton hinton and sejnowski in more detail. for other arguments about when semi-supervised learning can outperform pure supervised learning we refer the reader to section of chapelle et al. in other approaches to representation learning we have often been concerned with a representation that is easy to model for example one whose entries are sparse or independent from each other. a representation that cleanly separates the underlying causal factors may not necessarily be one that is easy to model. however a further part of the hypothesis motivating semi-supervised learning via unsupervised representation learning is that for many ai tasks these two properties coincide once we are able to obtain the underlying explanations for what we observe it generally becomes easy to isolate individual attributes from the others. specifically if a representation h represents many of the underlying causes of the observed x and the outputs y are among the most salient causes then it is easy to predict from h y first let us see how semi-supervised learning can fail because unsupervised consider for example the case x. clearly y x learning of px is of no help to learn py x where px is uniformly distributed and we want to learn f ey observing a training set of values alone gives us no information about p x chapter representation learning x p x figure example of a density over x that is a mixture over three components. the component identity is an underlying explanatory factor y. because the mixture components natural object classes in image data are statistically salient just modeling p x in an unsupervised way with no labeled example already reveals the factor y. next let us see a simple example of how semi-supervised learning can succeed. consider the situation where x arises from a mixture with one mixture component per value of y as illustrated in figure if the mixture components are wellseparated then modeling px reveals precisely where each component is and a single labeled example of each class will then be enough to perfectly learn py x but more generally what could make be tied together? y x p and p x if y is closely associated with one of the causal factors of x then px and py will be strongly tied and unsupervised representation learning that tries to disentangle the underlying factors of variation is likely to be useful as a semi-supervised learning strategy. consider the assumption that y is one of the causal factors of x and let h represent all those factors. the true generative process can be conceived as structured according to this directed graphical model with x as the parent of h as a consequence the data has marginal probability p x p p x h p x x h ehp from this straightforward observation we conclude that the best possible model of x a generalization point of view is the one that uncovers the above true chapter representation learning structure with h as a latent variable that explains the observed variations in x. the ideal representation learning discussed above should thus recover these latent factors. if y is one of these closely related to one of them then it will be very easy to learn to predict y from such a representation. we also see that the conditional distribution of y given x is tied by bayes rule to the components in the above equation p y x p x y p p thus the marginal px is intimately tied to the conditional py x and knowledge of the structure of the former should be helpful to learn the latter. therefore in situations respecting these assumptions semi-supervised learning should improve performance. an important research problem regards the fact that most observations are formed by an extremely large number of underlying causes. suppose y hi but the unsupervised learner does not know which hi. the brute force solution is for an unsupervised learner to learn a representation that captures the reasonably salient generative factors hj and disentangles them from each other thus making it easy to predict from regardless of which h i is associated with all h y in practice the brute force solution is not feasible because it is not possible to capture all or most of the factors of variation that influence an observation. for example in a visual scene should the representation always encode all of the smallest objects in the background? it is a well-documented psychological phenomenon that human beings fail to perceive changes in their environment that are not immediately relevant to the task they are performing see e.g. simons and levin an important research frontier in semi-supervised learning is determining what to encode in each situation. currently two of the main strategies for dealing with a large number of underlying causes are to use a supervised learning signal at the same time as the unsupervised learning signal so that the model will choose to capture the most relevant factors of variation or to use much larger representations if using purely unsupervised learning. an emerging strategy for unsupervised learning is to modify the definition of which underlying causes are most salient. historically autoencoders and generative models have been trained to optimize a fixed criterion often similar to mean squared error. these fixed criteria determine which causes are considered salient. for example mean squared error applied to the pixels of an image implicitly specifies that an underlying cause is only salient if it significantly changes the brightness of a large number of pixels. this can be problematic if the task we wish to solve involves interacting with small objects. see figure for an example chapter representation learning input reconstruction figure an autoencoder trained with mean squared error for a robotics task has failed to reconstruct a ping pong ball. the existence of the ping pong ball and all of its spatial coordinates are important underlying causal factors that generate the image and are relevant to the robotics task. unfortunately the autoencoder has limited capacity and the training with mean squared error did not identify the ping pong ball as being salient enough to encode. images graciously provided by chelsea finn. of a robotics task in which an autoencoder has failed to learn to encode a small ping pong ball. this same robot is capable of successfully interacting with larger objects such as baseballs which are more salient according to mean squared error. other definitions of salience are possible. for example if a group of pixels follow a highly recognizable pattern even if that pattern does not involve extreme brightness or darkness then that pattern could be considered extremely salient. one way to implement such a definition of salience is to use a recently developed approach called generative adversarial networks goodfellow et al. in this approach a generative model is trained to fool a feedforward classifier. the feedforward classifier attempts to recognize all samples from the generative model as being fake and all samples from the training set as being real. in this framework any structured pattern that the feedforward network can recognize is highly salient. the generative adversarial network will be described in more detail for the purposes of the present discussion it is sufficient to in section understand that they learn how to determine what is salient. lotter et al. showed that models trained to generate images of human heads will often neglect to generate the ears when trained with mean squared error but will successfully generate the ears when trained with the adversarial framework. because the ears are not extremely bright or dark compared to the surrounding skin they are not especially salient according to mean squared error loss but their highly chapter representation learning ground truth mse adversarial figure predictive generative networks provide an example of the importance of learning which features are salient. in this example the predictive generative network has been trained to predict the appearance of a model of a human head at a specific viewing angle. truth. this is the correct image that the network should emit. image produced by a predictive generative network trained with mean squared error alone. because the ears do not cause an extreme difference in brightness compared to the neighboring skin they were not sufficiently salient for the model to learn to represent them. produced by a model trained with a combination of mean squared error and adversarial loss. using this learned cost function the ears are salient because they follow a predictable pattern. learning which underlying causes are important and relevant enough to model is an important active area of research. figures graciously provided by lotter et al. recognizable shape and consistent position means that a feedforward network can easily learn to detect them making them highly salient under the generative adversarial framework. see figure for example images. generative adversarial networks are only one step toward determining which factors should be represented. we expect that future research will discover better ways of determining which factors to represent and develop mechanisms for representing different factors depending on the task. is that if the true generative process has a benefit of learning the underlying causal factors as pointed out by sch lkopf et al. x as an effect and y as a cause then modeling px y is robust to changes in py. if the cause-effect relationship was reversed this would not be true since by bayes rule p x y would be sensitive to changes in py. very often when we consider changes in distribution due to different domains temporal non-stationarity or changes in the nature of the task the causal mechanisms remain invariant laws of the universe are constant while the marginal distribution over the underlying causes can change. hence better generalization and robustness to all kinds of changes can chapter representation learning be expected via learning a generative model that attempts to recover the causal factors x h p h and distributed representation distributed representations of concepts representations composed of many elements that can be set separately from each other are one of the most important tools for representation learning. distributed representations are powerful because they can use n features with k values to describe k n different concepts. as we have seen throughout this book both neural networks with multiple hidden units and probabilistic models with multiple latent variables make use of the strategy of distributed representation. we now introduce an additional observation. many deep learning algorithms are motivated by the assumption that the hidden units can learn to represent the underlying causal factors that explain the data as discussed in section distributed representations are natural for this approach because each direction in representation space can correspond to the value of a different underlying configuration variable. an example of a distributed representation is a vector of n binary features which can take n configurations each potentially corresponding to a different region in input space as illustrated in figure this can be compared with a symbolic representation where the input is associated with a single symbol or category. if there are n symbols in the dictionary one can imagine n feature detectors each corresponding to the detection of the presence of the associated category. in that case only n different configurations of the representation space are possible carving n different regions in input space as illustrated in figure such a symbolic representation is also called a one-hot representation since it can be captured by a binary vector with n bits that are mutually exclusive one of them can be active. a symbolic representation is a specific example of the broader class of non-distributed representations which are representations that may contain many entries but without significant meaningful separate control over each entry. examples of learning algorithms based on non-distributed representations include clustering methods including the k-means algorithm each input point is assigned to exactly one cluster. k-nearest neighbors algorithms one or a few templates or prototype examples are associated with a given input. in the case of k there are multiple chapter representation learning h h h h h h h i h into two half-planes. let h corresponds to the region h figure illustration of how a learning algorithm based on a distributed representation breaks up the input space into regions. in this example there are three binary features and each feature is defined by thresholding the output of a learned linear transformation. each feature divides r i be the set of input be the set of input points for which hi in this points for which hi and h illustration each line represents the decision boundary for one hi with the corresponding arrow pointing to the h i side of the boundary. the representation as a whole takes on a unique value at each possible intersection of these half-planes. for example the representation value compare this to the h non-distributed representations in figure d input dimensions in the general case of a distributed representation divides r d by intersecting half-spaces rather than half-planes. the distributed representation with n features assigns unique codes to ond different regions while the nearest neighbor algorithm with n examples assigns unique codes to only n regions. the distributed representation is thus able to distinguish exponentially many more regions than the non-distributed one. keep in mind that not all h values are feasible is no h in this example and that a linear classifier on top of the distributed representation is not able to assign different class identities to every neighboring region even a deep linear-threshold network has a vc dimension of only ow wlog where w is the number of weights the combination of a powerful representation layer and a weak classifier layer can be a strong regularizer a classifier trying to learn the concept of person versus not a person does not need to assign a different class to an input represented as woman with glasses than it assigns to an input represented as man without glasses. this capacity constraint encourages each classifier to focus on few hi and encourages to learn to represent the classes in a linearly separable way. sontag h chapter representation learning values describing each input but they can not be controlled separately from each other so this does not qualify as a true distributed representation. decision trees only one leaf the nodes on the path from root to leaf is activated when an input is given. gaussian mixtures and mixtures of experts the templates centers or experts are now associated with a degree of activation. as with the k-nearest neighbors algorithm each input is represented with multiple values but those values cannot readily be controlled separately from each other. kernel machines with a gaussian kernel other similarly local kernel although the degree of activation of each support vector or template example is now continuous-valued the same issue arises as with gaussian mixtures. language or translation models based on n-grams. the set of contexts of symbols is partitioned according to a tree structure of suffixes. a leaf may correspond to the last two words being and for example. separate parameters are estimated for each leaf of the tree some sharing being possible. for some of these non-distributed algorithms the output is not constant by parts but instead interpolates between neighboring regions. the relationship between the number of parameters examples and the number of regions they can define remains linear. an important related concept that distinguishes a distributed representation from a symbolic one is that generalization arises due to shared attributes between different concepts. as pure symbols cat and dog are as far from each other as any other two symbols. however if one associates them with a meaningful distributed representation then many of the things that can be said about cats can generalize to dogs and vice-versa. for example our distributed representation may contain entries such as has_fur or number_of_legs that have the same value for the embedding of both cat and dog. neural language models that operate on distributed representations of words generalize much better than other models that operate directly on one-hot representations of words as discussed in section similarity space in which semantically close concepts inputs are close in distance a property that is absent from purely symbolic representations. distributed representations induce a rich when and why can there be a statistical advantage from using a distributed representation as part of a learning algorithm? distributed representations can chapter representation learning figure illustration of how the nearest neighbor algorithm breaks up the input space into different regions. the nearest neighbor algorithm provides an example of a learning algorithm based on a non-distributed representation. different non-distributed algorithms may have different geometry but they typically break the input space into regions with a separate set of parameters for each region. the advantage of a non-distributed approach is that given enough parameters it can fit the training set without solving a difficult optimization algorithm because it is straightforward to choose a different output independently for each region. the disadvantage is that such non-distributed models generalize only locally via the smoothness prior making it difficult to learn a complicated function with more peaks and troughs than the available number of examples. contrast this with a distributed representation figure chapter representation learning v have a statistical advantage when an apparently complicated structure can be compactly represented using a small number of parameters. some traditional nondistributed learning algorithms generalize only due to the smoothness assumption then the target function f to be learned has the which states that if u property that fu fv in general. there are many ways of formalizing such an assumption but the end result is that if we have an example y for which we y then we choose an estimator f that approximately satisfies know that f these constraints while changing as little as possible when we move to a nearby input x this assumption is clearly very useful but it suffers from the curse of dimensionality in order to learn a target function that increases and decreases many times in many different we may need a number of examples that is at least as large as the number of distinguishable regions. one can think of each of these regions as a category or symbol by having a separate degree of freedom for each symbol region we can learn an arbitrary decoder mapping from symbol to value. however this does not allow us to generalize to new symbols for new regions. if we are lucky there may be some regularity in the target function besides being smooth. for example a convolutional network with max-pooling can recognize an object regardless of its location in the image even though spatial translation of the object may not correspond to smooth transformations in the input space. let us examine a special case of a distributed representation learning algorithm that extracts binary features by thresholding linear functions of the input. each d into a pair of half-spaces as binary feature in this representation divides r n illustrated in figure of the corresponding half-spaces determines how many regions this distributed representation learner can distinguish. how many regions are generated by an d by applying a general result concerning the arrangement of n hyperplanes in r intersection of hyperplanes that the number of regions this binary feature representation can distinguish is the exponentially large number of intersections of one can show zaslavsky pascanu et al. d n j nd therefore we see a growth that is exponential in the input size and polynomial in the number of hidden units. potentially we may want to learn a function whose behavior is distinct in exponentially many regions in a d-dimensional space with at least different values to distinguish per dimension we might want different regions requiring d training examples. to differ in f chapter representation learning this provides a geometric argument to explain the generalization power of distributed representation with ond parameters n linear-threshold features d we can distinctly represent ond regions in input space. if instead we made in r no assumption at all about the data and used a representation with one unique symbol for each region and separate parameters for each symbol to recognize its d then specifying ond regions would require ond corresponding portion of r examples. more generally the argument in favor of the distributed representation could be extended to the case where instead of using linear threshold units we use nonlinear possibly continuous feature extractors for each of the attributes in the distributed representation. the argument in this case is that if a parametric transformation with k parameters can learn about r regions in input space with k and if obtaining such a representation was useful to the task of interest then we could potentially generalize much better in this way than in a non-distributed setting where we would need or examples to obtain the same features and associated partitioning of the input space into r regions. using fewer parameters to represent the model means that we have fewer parameters to fit and thus require far fewer training examples to generalize well. r wlog a further part of the argument for why models based on distributed representations generalize well is that their capacity remains limited despite being able to distinctly encode so many different regions. for example the vc dimension of a neural network of linear threshold units is only ow where w is the number of weights this limitation arises because while we can assign very many unique codes to representation space we cannot use absolutely all of the code space nor can we learn arbitrary functions mapping from the representation space h to the output y using a linear classifier. the use of a distributed representation combined with a linear classifier thus expresses a prior belief that the classes to be recognized are linearly separable as a function of the underlying causal factors captured by h. we will typically want to learn categories such as the set of all images of all green objects or the set of all images of cars but not categories that require nonlinear xor logic. for example we typically do not want to partition the data into the set of all red cars and green trucks as one class and the set of all green cars and red trucks as another class. zhou et al. the ideas discussed so far have been abstract but they may be experimentally validated. find that hidden units in a deep convolutional network trained on the imagenet and places benchmark datasets learn features that are very often interpretable corresponding to a label that humans would naturally assign. in practice it is certainly not always the case that hidden units learn something that has a simple linguistic name but it is interesting to see this emerge near the top levels of the best computer vision deep networks. what such features have in chapter representation learning figure a generative model has learned a distributed representation that disentangles the concept of gender from the concept of wearing glasses. if we begin with the representation of the concept of a man with glasses then subtract the vector representing the concept of a man without glasses and finally add the vector representing the concept of a woman without glasses we obtain the vector representing the concept of a woman with glasses. the generative model correctly decodes all of these representation vectors to images that may be recognized as belonging to the correct class. images reproduced with permission from radford et al. radford et al. common is that one could imagine learning about each of them without having to see all the configurations of all the others. demonstrated that a generative model can learn a representation of images of faces with separate directions in representation space capturing different underlying factors of variation. figure demonstrates that one direction in representation space corresponds to whether the person is male or female while another corresponds to whether the person is wearing glasses. these features were discovered automatically not fixed a priori. there is no need to have labels for the hidden unit classifiers gradient descent on an objective function of interest naturally learns semantically interesting features so long as the task requires such features. we can learn about the distinction between male and female or about the presence or absence of glasses without having to characterize all of the configurations of the n other features by examples covering all of these combinations of values. this form of statistical separability is what allows one to generalize to new configurations of a person s features that have never been seen during training. chapter representation learning exponential gains from depth we have seen in section that multilayer perceptrons are universal approximators and that some functions can be represented by exponentially smaller deep networks compared to shallow networks. this decrease in model size leads to improved statistical efficiency. in this section we describe how similar results apply more generally to other kinds of models with distributed hidden representations. in section we saw an example of a generative model that learned about the explanatory factors underlying images of faces including the person s gender and whether they are wearing glasses. the generative model that accomplished this task was based on a deep neural network. it would not be reasonable to expect a shallow network such as a linear network to learn the complicated relationship between these abstract explanatory factors and the pixels in the image. in this and other ai tasks the factors that can be chosen almost independently from each other yet still correspond to meaningful inputs are more likely to be very high-level and related in highly nonlinear ways to the input. we argue that this demands deep distributed representations where the higher level features as functions of the input or factors as generative causes are obtained through the composition of many nonlinearities. it has been proven in many different settings that organizing computation through the composition of many nonlinearities and a hierarchy of reused features can give an exponential boost to statistical efficiency on top of the exponential boost given by using a distributed representation. many kinds of networks with saturating nonlinearities boolean gates sumproducts or rbf units with a single hidden layer can be shown to be universal approximators. a model family that is a universal approximator can approximate a large class of functions all continuous functions up to any non-zero tolerance level given enough hidden units. however the required number of hidden units may be very large. theoretical results concerning the expressive power of deep architectures state that there are families of functions that can be represented efficiently by an architecture of depth k but would require an exponential number of hidden units respect to the input size with insufficient depth or depth k in section we saw that deterministic feedforward networks are universal approximators of functions. many structured probabilistic models with a single hidden layer of latent variables including restricted boltzmann machines and deep belief networks are universal approximators of probability distributions roux and bengio mont far and ay mont far krause et al. chapter representation learning in section we saw that a sufficiently deep feedforward network can have an exponential advantage over a network that is too shallow. such results can also be obtained for other models such as probabilistic models. one such probabilistic model is the sum-product network or spn and domingos these models use polynomial circuits to compute the probability distribution over a set of random variables. showed that there exist probability distributions for which a minimum depth of spn is required to avoid needing an exponentially large model. later martens and medabalimi showed that there are significant differences between every two finite depths of spn and that some of the constraints used to make spns tractable may limit their representational power. delalleau and bengio another interesting development is a set of theoretical results for the expressive power of families of deep circuits related to convolutional nets highlighting an exponential advantage for the deep circuit even when the shallow circuit is allowed to only approximate the function computed by the deep circuit cohen et al. by comparison previous theoretical work made claims regarding only the case where the shallow circuit must exactly replicate particular functions. providing clues to discover underlying causes to close this chapter we come back to one of our original questions what makes one representation better than another? one answer first introduced in section is that an ideal representation is one that disentangles the underlying causal factors of variation that generated the data especially those factors that are relevant to our applications. most strategies for representation learning are based on introducing clues that help the learning to find these underlying factors of variations. the clues can help the learner separate these observed factors from the others. supervised learning provides a very strong clue a label y presented with each x that usually specifies the value of at least one of the factors of variation directly. more generally to make use of abundant unlabeled data representation learning makes use of other less direct hints about the underlying factors. these hints take the form of implicit prior beliefs that we the designers of the learning algorithm impose in order to guide the learner. results such as the no free lunch theorem show that regularization strategies are necessary to obtain good generalization. while it is impossible to find a universally superior regularization strategy one goal of deep learning is to find a set of fairly generic regularization strategies that are applicable to a wide variety of ai tasks similar to the tasks that people and animals are able to solve. chapter representation learning we provide here a list of these generic regularization strategies. the list is clearly not exhaustive but gives some concrete examples of ways that learning algorithms can be encouraged to discover features that correspond to underlying factors. this list was introduced in section of and has been partially expanded here. bengio et al. smoothness this is the assumption that fx d f for unit d and small this assumption allows the learner to generalize from training examples to nearby points in input space. many machine learning algorithms leverage this idea but it is insufficient to overcome the curse of dimensionality. linearity many learning algorithms assume that relationships between some variables are linear. this allows the algorithm to make predictions even very far from the observed data but can sometimes lead to overly extreme predictions. most simple machine learning algorithms that do not make the smoothness assumption instead make the linearity assumption. these are in fact different assumptions linear functions with large weights applied to high-dimensional spaces may not be very smooth. see goodfellow et al. for a further discussion of the limitations of the linearity assumption. multiple explanatory factors many representation learning algorithms are motivated by the assumption that the data is generated by multiple underlying explanatory factors and that most tasks can be solved easily given the state of each of these factors. section describes how this view motivates semi supervised learning via representation learning. learning the structure of px requires learning some of the same features that are useful for modeling py x because both refer to the same underlying explanatory factors. section describes how this view motivates the use of distributed representations with separate directions in representation space corresponding to separate factors of variation. causal factors the model is constructed in such a way that it treats the factors of variation described by the learned representation h as the causes of the observed data x and not vice-versa. as discussed in section this is advantageous for semi-supervised learning and makes the learned model more robust when the distribution over the underlying causes changes or when we use the model for a new task. or a hierarchical organization of explanatory factors depth high-level abstract concepts can be defined in terms of simple concepts forming a hierarchy. from another point of view the use of a deep architecture chapter representation learning expresses our belief that the task should be accomplished via a multi-step program with each step referring back to the output of the processing accomplished via previous steps. shared factors across tasks in the context where we have many tasks corresponding to different yi variables sharing the same input x or where each task is associated with a subset or a function f of a global input x the assumption is that each y i is associated with a different subset from a common pool of relevant factors h. because these subsets overlap learning all the p i allows sharing of statistical strength between the tasks. x via a shared intermediate representation p x manifolds probability mass concentrates and the regions in which it concentrates are locally connected and occupy a tiny volume. in the continuous case these regions can be approximated by low-dimensional manifolds with a much smaller dimensionality than the original space where the data lives. many machine learning algorithms behave sensibly only on this manifold some machine learning algorithms especially goodfellow et al. autoencoders attempt to explicitly learn the structure of the manifold. natural clustering many machine learning algorithms assume that each connected manifold in the input space may be assigned to a single class. the data may lie on many disconnected manifolds but the class remains constant within each one of these. this assumption motivates a variety of learning algorithms including tangent propagation double backprop the manifold tangent classifier and adversarial training. temporal and spatial coherence slow feature analysis and related algorithms make the assumption that the most important explanatory factors change slowly over time or at least that it is easier to predict the true underlying explanatory factors than to predict raw observations such as pixel values. see section for further description of this approach. sparsity most features should presumably not be relevant to describing most inputs there is no need to use a feature that detects elephant trunks when representing an image of a cat. it is therefore reasonable to impose a prior that any feature that can be interpreted as present or absent should be absent most of the time. simplicity of factor dependencies in good high-level representations the factors are related to each other through simple dependencies. the simplest chapter representation learning possible is marginal independence p i p but linear dependencies or those captured by a shallow autoencoder are also reasonable assumptions. this can be seen in many laws of physics and is assumed when plugging a linear predictor or a factorized prior on top of a learned representation. the concept of representation learning ties together all of the many forms of deep learning. feedforward and recurrent networks autoencoders and deep probabilistic models all learn and exploit representations. learning the best possible representation remains an exciting avenue of research. chapter structured probabilistic models for deep learning deep learning draws upon many modeling formalisms that researchers can use to guide their design efforts and describe their algorithms. one of these formalisms is the idea of structured probabilistic models. we have already discussed structured probabilistic models briefly in section that brief presentation was sufficient to understand how to use structured probabilistic models as a language to describe some of the algorithms in part structured probabilistic models are a key ingredient of many of the most important research topics in deep learning. in order to prepare to discuss these research ideas this chapter describes structured probabilistic models in much greater detail. this chapter is intended to be self-contained the reader does not need to review the earlier introduction before continuing with this chapter. now in part ii iii a structured probabilistic model is a way of describing a probability distribution using a graph to describe which random variables in the probability distribution interact with each other directly. here we use graph in the graph theory sense a set of vertices connected to one another by a set of edges. because the structure of the model is defined by a graph these models are often also referred to as graphical models. the graphical models research community is large and has developed many different models training algorithms and inference algorithms. in this chapter we provide basic background on some of the most central ideas of graphical models with an emphasis on the concepts that have proven most useful to the deep learning research community. if you already have a strong background in graphical models you may wish to skip most of this chapter. however even a graphical model expert chapter structured probabilistic models for deep learning in which we may benefit from reading the final section of this chapter section highlight some of the unique ways that graphical models are used for deep learning algorithms. deep learning practitioners tend to use very different model structures learning algorithms and inference procedures than are commonly used by the rest of the graphical models research community. in this chapter we identify these differences in preferences and explain the reasons for them. in this chapter we first describe the challenges of building large-scale probabilistic models. next we describe how to use a graph to describe the structure of a probability distribution. while this approach allows us to overcome many challenges it is not without its own complications. one of the major difficulties in graphical modeling is understanding which variables need to be able to interact directly i.e. which graph structures are most suitable for a given problem. we outline two approaches to resolving this difficulty by learning about the dependencies in section finally we close with a discussion of the unique emphasis that deep learning practitioners place on specific approaches to graphical modeling in section the challenge of unstructured modeling the goal of deep learning is to scale machine learning to the kinds of challenges needed to solve artificial intelligence. this means being able to understand highdimensional data with rich structure. for example we would like ai algorithms to be able to understand natural audio waveforms representing speech and documents containing multiple words and punctuation characters. classification algorithms can take an input from such a rich high-dimensional distribution and summarize it with a categorical label what object is in a photo what word is spoken in a recording what topic a document is about. the process of classification discards most of the information in the input and produces a single output a probability distribution over values of that single output. the classifier is also often able to ignore many parts of the input. for example when recognizing an object in a photo it is usually possible to ignore the background of the photo. it is possible to ask probabilistic models to do many other tasks. these tasks are often more expensive than classification. some of them require producing multiple output values. most require a complete understanding of the entire structure of a natural image is an image that might be captured by a camera in a reasonably ordinary environment as opposed to a synthetically rendered image a screenshot of a web page etc. chapter structured probabilistic models for deep learning the input with no option to ignore sections of it. these tasks include the following density estimation given an input x the machine learning system returns an estimate of the true density px under the data generating distribution. this requires only a single output but it does require a complete understanding of the entire input. if even one element of the vector is unusual the system must assign it a low probability. denoising given a damaged or incorrectly observed input x the machine learning system returns an estimate of the original or correct x. for example the machine learning system might be asked to remove dust or scratches from an old photograph. this requires multiple outputs element of the estimated clean example x and an understanding of the entire input even one damaged area will still reveal the final estimate as being damaged. missing value imputation given the observations of some elements of x the model is asked to return estimates of or a probability distribution over some or all of the unobserved elements of x. this requires multiple outputs. because the model could be asked to restore any of the elements of x it must understand the entire input. sampling the model generates new samples from the distribution px. applications include speech synthesis i.e. producing new waveforms that sound like natural human speech. this requires multiple output values and a good model of the entire input. if the samples have even one element drawn from the wrong distribution then the sampling process is wrong. for an example of a sampling task using small natural images see figure modeling a rich distribution over thousands or millions of random variables is a challenging task both computationally and statistically. suppose we only wanted to model binary variables. this is the simplest possible case and yet already it seems overwhelming. for a small possible binary images of this form. this number is over times larger than the estimated number of atoms in the universe. pixel color image there are in general if we wish to model a distribution over a random vector x containing n discrete variables capable of taking on k values each then the naive approach of representing p by storing a lookup table with one probability value per possible outcome requires kn parameters! this is not feasible for several reasons chapter structured probabilistic models for deep learning pixel color figure probabilistic modeling of natural images. images from the dataset samples drawn from a structured probabilistic model trained on this dataset. each sample appears at the same position in the grid as the training example that is closest to it in euclidean space. this comparison allows us to see that the model is truly synthesizing new images rather than memorizing the training data. contrast of both sets of images has been adjusted for display. figure reproduced with permission from krizhevsky and hinton courville et al. chapter structured probabilistic models for deep learning memory the cost of storing the representation for all but very small values of n and k representing the distribution as a table will require too many values to store. statistical efficiency as the number of parameters in a model increases so does the amount of training data needed to choose the values of those parameters using a statistical estimator. because the table-based model has an astronomical number of parameters it will require an astronomically large training set to fit accurately. any such model will overfit the training set very badly unless additional assumptions are made linking the different entries in the table example like in back-off or smoothed n-gram models section runtime the cost of inference suppose we want to perform an inference task where we use our model of the joint distribution p to compute some other distribution such as the marginal distribution p or the conditional computing these distributions will require summing distribution p across the entire table so the runtime of these operations is as high as the intractable memory cost of storing the model. runtime the cost of sampling likewise suppose we want to draw a sample u from the model. the naive way to do this is to sample some value u then iterate through the table adding up the probability values until they exceed u and return the outcome corresponding to that position in the table. this requires reading through the whole table in the worst case so it has the same exponential cost as the other operations. the problem with the table-based approach is that we are explicitly modeling every possible kind of interaction between every possible subset of variables. the probability distributions we encounter in real tasks are much simpler than this. usually most variables influence each other only indirectly. for example consider modeling the finishing times of a team in a relay race. suppose the team consists of three runners alice bob and carol. at the start of the race alice carries a baton and begins running around a track. after completing her lap around the track she hands the baton to bob. bob then runs his own lap and hands the baton to carol who runs the final lap. we can model each of their finishing times as a continuous random variable. alice s finishing time does not depend on anyone else s since she goes first. bob s finishing time depends on alice s because bob does not have the opportunity to start his lap until alice has completed hers. if alice finishes faster bob will finish faster all else being chapter structured probabilistic models for deep learning equal. finally carol s finishing time depends on both her teammates. if alice is slow bob will probably finish late too. as a consequence carol will have quite a late starting time and thus is likely to have a late finishing time as well. however carol s finishing time depends only indirectly on alice s finishing time via bob s. if we already know bob s finishing time we will not be able to estimate carol s finishing time better by finding out what alice s finishing time was. this means we can model the relay race using only two interactions alice s effect on bob and bob s effect on carol. we can omit the third indirect interaction between alice and carol from our model. structured probabilistic models provide a formal framework for modeling only direct interactions between random variables. this allows the models to have significantly fewer parameters and therefore be estimated reliably from less data. these smaller models also have dramatically reduced computational cost in terms of storing the model performing inference in the model and drawing samples from the model. using graphs to describe model structure structured probabilistic models use graphs the graph theory sense of nodes or vertices connected by edges to represent interactions between random variables. each node represents a random variable. each edge represents a direct interaction. these direct interactions imply other indirect interactions but only the direct interactions need to be explicitly modeled. there is more than one way to describe the interactions in a probability distribution using a graph. in the following sections we describe some of the most popular and useful approaches. graphical models can be largely divided into two categories models based on directed acyclic graphs and models based on undirected graphs. directed models one kind of structured probabilistic model is the directed graphical model otherwise known as the belief network bayesian network or directed graphical models are called directed because their edges are directed judea pearl suggested using the term bayesian network when one wishes to emphasize the judgmental nature of the values computed by the network i.e. to highlight that they usually represent degrees of belief rather than frequencies of events. chapter structured probabilistic models for deep learning alice bob carol figure a directed graphical model depicting the relay race example. alice s finishing time influences bob s finishing time because bob does not get to start running until alice finishes. likewise carol only gets to start running after bob finishes so bob s finishing time directly influences carol s finishing time that is they point from one vertex to another. this direction is represented in the drawing with an arrow. the direction of the arrow indicates which variable s probability distribution is defined in terms of the other s. drawing an arrow from a to b means that we define the probability distribution over b via a conditional distribution with a as one of the variables on the right side of the conditioning bar. in other words the distribution over b depends on the value of a. continuing with the relay race example from section suppose we name alice s finishing time bob s finishing time and carol s finishing time as we saw earlier our estimate of t depends on our estimate of depends directly on but only indirectly on we can draw this relationship in a directed graphical model illustrated in figure g formally a directed graphical model defined on variables x is defined by a whose vertices are the random variables in the model p ag where the probability distribution over x is given directed acyclic graph and a set of local conditional probability distributions pxi p agxi gives the parents of xi in by g p x i pxi p agxi in our relay race example this means that using the graph drawn in figure this is our first time seeing a structured probabilistic model in action. we can examine the cost of using it in order to observe how structured modeling has many advantages relative to unstructured modeling. suppose we represented time by discretizing time ranging from minute to minute into second chunks. this would make and each be a discrete variable with possible values. if we attempted to represent p with a table it would need to store values values of values of minus since the probability of one of the configurations is made values of chapter structured probabilistic models for deep learning redundant by the constraint that the sum of the probabilities be if instead we only make a table for each of the conditional probability distributions then the distribution over requires values the table defining given requires values and so does the table defining given this comes to a total of values. this means that using the directed graphical model reduced our number of parameters by a factor of more than in general to model n discrete variables each having k values the cost of the single table approach scales like ok n as we have observed before. now suppose we build a directed graphical model over these variables. if m is the maximum number of variables appearing either side of the conditioning bar in a single conditional probability distribution then the cost of the tables for the directed model scales like o km. as long as we can design a model such that m n we get very dramatic savings. in other words so long as each variable has few parents in the graph the distribution can be represented with very few parameters. some restrictions on the graph structure such as requiring it to be a tree can also guarantee that operations like computing marginal or conditional distributions over subsets of variables are efficient. it is important to realize what kinds of information can and cannot be encoded in the graph. the graph encodes only simplifying assumptions about which variables are conditionally independent from each other. it is also possible to make other kinds of simplifying assumptions. for example suppose we assume bob always runs the same regardless of how alice performed. reality alice s performance probably influences bob s performance depending on bob s personality if alice runs especially fast in a given race this might encourage bob to push hard and match her exceptional performance or it might make him overconfident and lazy. then the only effect alice has on bob s finishing time is that we must add alice s finishing time to the total amount of time we think bob needs to run. this observation allows us to define a model with ok parameters instead of ok however note that and are still directly dependent with this assumption because represents the absolute time at which bob finishes not the total time he himself spends running. this means our graph must still contain an arrow from to the assumption that bob s personal running time is independent from all other factors cannot be encoded in a graph over and instead we encode this information in the definition of the conditional distribution itself. the conditional distribution is no longer a k element table indexed by and but is now a slightly more complicated formula using only k parameters. the directed graphical model syntax does not place any constraint on how we define k chapter structured probabilistic models for deep learning our conditional distributions. it only defines which variables they are allowed to take in as arguments. undirected models directed graphical models give us one language for describing structured probabilistic models. another popular language is that of undirected models otherwise known as markov random fields or markov networks as their name implies undirected models use graphs whose edges are undirected. directed models are most naturally applicable to situations where there is a clear reason to draw each arrow in one particular direction. often these are situations where we understand the causality and the causality only flows in one direction. one such situation is the relay race example. earlier runners affect the finishing times of later runners later runners do not affect the finishing times of earlier runners. not all situations we might want to model have such a clear direction to their interactions. when the interactions seem to have no intrinsic direction or to operate in both directions it may be more appropriate to use an undirected model. as an example of such a situation suppose we want to model a distribution over three binary variables whether or not you are sick whether or not your coworker is sick and whether or not your roommate is sick. as in the relay race example we can make simplifying assumptions about the kinds of interactions that take place. assuming that your coworker and your roommate do not know each other it is very unlikely that one of them will give the other an infection such as a cold directly. this event can be seen as so rare that it is acceptable not to model it. however it is reasonably likely that either of them could give you a cold and that you could pass it on to the other. we can model the indirect transmission of a cold from your coworker to your roommate by modeling the transmission of the cold from your coworker to you and the transmission of the cold from you to your roommate. in this case it is just as easy for you to cause your roommate to get sick as it is for your roommate to make you sick so there is not a clean uni-directional narrative on which to base the model. this motivates using an undirected model. as with directed models if two nodes in an undirected model are connected by an edge then the random variables corresponding to those nodes interact with each other directly. unlike directed models the edge in an undirected model has no arrow and is not associated with a conditional probability distribution. chapter structured probabilistic models for deep learning hrhr hyhy hchc figure an undirected graph representing how your roommate s health hr your health hy and your work colleague s health hc affect each other. you and your roommate might infect each other with a cold and you and your work colleague might do the same but assuming that your roommate and your colleague do not know each other they can only infect each other indirectly via you. we denote the random variable representing your health as hy the random variable representing your roommate s health as hr and the random variable representing your colleague s health as hc. see figure for a drawing of the graph representing this scenario. g c formally an undirected graphical model is a structured probabilistic model in the a factor defined on an undirected graph called a clique potential measures the affinity of the variables in that clique for being in each of their possible joint states. the factors are constrained to be non-negative. together they define an unnormalized probability distribution for each clique c c c g p x the unnormalized probability distribution is efficient to work with so long as all the cliques are small. it encodes the idea that states with higher affinity are more likely. however unlike in a bayesian network there is little structure to the definition of the cliques so there is nothing to guarantee that multiplying them together will yield a valid probability distribution. see figure for an example of reading factorization information from an undirected graph. our example of the cold spreading between you your roommate and your colleague contains two cliques. one clique contains h y and hc. the factor for this clique can be defined by a table and might have values resembling these hy hy hc hc clique of the graph is a subset of nodes that are all connected to each other by an edge of the graph. chapter structured probabilistic models for deep learning a state of indicates good health while a state of indicates poor health been infected with a cold. both of you are usually healthy so the corresponding state has the highest affinity. the state where only one of you is sick has the lowest affinity because this is a rare state. the state where both of you are sick one of you has infected the other is a higher affinity state though still not as common as the state where both are healthy. to complete the model we would need to also define a similar factor for the clique containing hy and hr the partition function while the unnormalized probability distribution is guaranteed to be non-negative everywhere it is not guaranteed to sum or integrate to to obtain a valid probability distribution we must use the corresponding normalized probability p p z where z is the value that results in the probability distribution summing or integrating to z p d x you can think of z as a constant when the functions are held constant. note that if the functions have parameters then z is a function of those parameters. it is common in the literature to write z with its arguments omitted to save space. the normalizing constant z is known as the partition function a term borrowed from statistical physics. since z is an integral or sum over all possible joint assignments of the state x it is often intractable to compute. in order to be able to obtain the normalized probability distribution of an undirected model the model structure and the definitions of the functions must be conducive to computing z efficiently. in the context of deep learning z is usually intractable. due to the intractability of computing z exactly we must resort to approximations. such approximate algorithms are the topic of chapter one important consideration to keep in mind when designing undirected models is that it is possible to specify the factors in such a way that z does not exist. this happens if some of the variables in the model are continuous and the integral distribution defined by normalizing a product of clique potentials is also called a gibbs distribution. chapter structured probabilistic models for deep learning of p over their domain diverges. for example suppose we want to model a single scalar variable x with a single clique potential in this case x x z r since this integral diverges there is no probability distribution corresponding to this choice of sometimes the choice of some parameter of the functions determines whether the probability distribution is defined. for example for exp the parameter determines whether z exists. positive results in a gaussian distribution over x but all other values of make impossible to normalize. one key difference between directed modeling and undirected modeling is that directed models are defined directly in terms of probability distributions from the start while undirected models are defined more loosely by functions that are then converted into probability distributions. this changes the intuitions one must develop in order to work with these models. one key idea to keep in mind while working with undirected models is that the domain of each of the variables has dramatic effect on the kind of probability distribution that a given set of functions corresponds to. for example consider an n-dimensional vector-valued random variable x and an undirected model parametrized by a vector of biases b. suppose we have one clique for each element of x expbixi. what kind of probability distribution does this result in? the answer is that we do not have enough information because we have not yet specified the domain of x. n then the integral defining z diverges and no probability distribution if x n then px factorizes into n independent distributions with exists. if x px i sigmoid if the domain of x is the set of elementary basis vectors then px softmaxb so a large value of bi actually reduces px j for j i. often it is possible to leverage the effect of a carefully chosen domain of a variable in order to obtain complicated behavior from a relatively simple set of functions. we will explore a practical application of this idea later in section r energy-based models many interesting theoretical results about undirected models depend on the asx px a convenient way to enforce this condition is to use sumption that an energy-based model where e exp x p chapter structured probabilistic models for deep learning a d b e c f a b b figure z tions. this b c c graph implies b e e that pa b c d e f can be written as e f f for an appropriate choice of the func a d d and ex is known as the energy function. because expz is positive for all z this guarantees that no energy function will result in a probability of zero for any state x. being completely free to choose the energy function makes learning simpler. if we learned the clique potentials directly we would need to use constrained optimization to arbitrarily impose some specific minimal probability value. by learning the energy function we can use unconstrained the probabilities in an energy-based model can approach arbitrarily close to zero but never reach it. et al. et al. ackley is an example of a any distribution of the form given by equation boltzmann distribution. for this reason many energy-based models are called boltzmann machines et al. hinton and sejnowski there is no accepted guideline for when to call a model an energy-based model and when to call it a boltzmann machine. the term boltzmann machine was first introduced to describe a model with exclusively binary variables but today many models such as the mean-covariance restricted boltzmann machine incorporate real-valued variables as well. while boltzmann machines were originally defined to encompass both models with and without latent variables the term boltzmann machine is today most often used to designate models with latent variables while boltzmann machines without latent variables are more often called markov random fields or log-linear models. hinton cliques in an undirected graph correspond to factors of the unnormalized probability function. because expa expb exp a b this means that different cliques in the undirected graph correspond to the different terms of the energy function. in other words an energy-based model is just a special kind of markov network the exponentiation makes each term in the energy function correspond to a factor for a different clique. see figure for an example of how to read the some models we may still need to use constrained optimization to make sure z exists. chapter structured probabilistic models for deep learning a d b e c f figure this graph implies that ea b c d e f b c c e e energy functions. note that we can obtain the functions in figure to the exponential of the corresponding negative energy e.g. a b b e f f for an appropriate choice of the per-clique by setting each a b b exp e a b can be written as e a d d e b e e e form of the energy function from an undirected graph structure. one can view an energy-based model with multiple terms in its energy function as being a product of experts each term in the energy function corresponds to another factor in the probability distribution. each term of the energy function can be thought of as an expert that determines whether a particular soft constraint is satisfied. each expert may enforce only one constraint that concerns only a low-dimensional projection of the random variables but when combined by multiplication of probabilities the experts together enforce a complicated highdimensional constraint. this sign in equation one part of the definition of an energy-based model serves no functional purpose from a machine learning point of view the sign could be incorporated into the definition of e. for many choices of the function e the learning algorithm is free to determine the sign of the energy anyway. the sign is present primarily to preserve compatibility between the machine learning literature and the physics literature. many advances in probabilistic modeling were originally developed by statistical physicists for whom e refers to actual physical energy and does not have arbitrary sign. terminology such as energy and partition function remains associated with these techniques even though their mathematical applicability is broader than the physics context in which they were developed. some machine learning researchers who referred to negative energy as harmony have chosen to emit the negation but this is not the standard convention. smolensky many algorithms that operate on probabilistic models do not need to compute pmodel but only log pmodelx. for energy-based models with latent variables h these algorithms are sometimes phrased in terms of the negative of this quantity chapter structured probabilistic models for deep learning a s b a s b figure the path between random variable a and random variable b through s is active because s is not observed. this means that a and b are not separated. here s is shaded in to indicate that it is observed. because the only path between a and b is through s and that path is inactive we can conclude that a and b are separated given s. called the free energy f x log h e x h exp in this book we usually prefer the more general log pmodel formulation. separation and d-separation the edges in a graphical model tell us which variables directly interact. we often need to know which variables indirectly interact. some of these indirect interactions can be enabled or disabled by observing other variables. more formally we would like to know which subsets of variables are conditionally independent from each other given the values of other subsets of variables. identifying the conditional independences in a graph is very simple in the case of undirected models. in this case conditional independence implied by the graph is called separation. we say that a set of variables a is separated from another set of variables b given a third set of variables s if the graph structure implies that a is independent from b given s. if two variables a and b are connected by a path involving only unobserved variables then those variables are not separated. if no path exists between them or all paths contain an observed variable then they are separated. we refer to paths involving only unobserved variables as active and paths including an observed variable as inactive. when we draw a graph we can indicate observed variables by shading them in. for a depiction of how active and inactive paths in an undirected for an example of reading see figure model look when drawn in this way. see figure separation from an undirected graph. similar concepts apply to directed models except that in the context of directed models these concepts are referred to as d-separation. the d stands for dependence. d-separation for directed graphs is defined the same as separation chapter structured probabilistic models for deep learning a d b c figure an example of reading separation properties from an undirected graph. here b is shaded to indicate that it is observed. because observing b blocks the only path from a to c we say that a and c are separated from each other given b the observation of b also blocks one path between a and d but there is a second active path between them. therefore a and d are not separated given b. for undirected graphs we say that a set of variables a is d-separated from another set of variables b given a third set of variables s if the graph structure implies that is independent from given s a b as with undirected models we can examine the independences implied by the graph by looking at what active paths exist in the graph. as before two variables are dependent if there is an active path between them and d-separated if no such path exists. in directed nets determining whether a path is active is somewhat more complicated. see figure for a guide to identifying active paths in a directed model. see figure for an example of reading some properties from a graph. it is important to remember that separation and d-separation tell us only about those conditional independences that are implied by the graph. there is no requirement that the graph imply all independences that are present. in particular it is always legitimate to use the complete graph graph with all possible edges to represent any distribution. in fact some distributions contain independences that are not possible to represent with existing graphical notation. contextspecific independences are independences that are present dependent on the value of some variables in the network. for example consider a model of three binary variables a b and c suppose that when a is b and c are independent but when a is b is deterministically equal to c. encoding the behavior when a requires an edge connecting b and c. the graph then fails to indicate that b and c are independent when a in general a graph will never imply that an independence exists when it does not. however a graph may fail to encode an independence. chapter structured probabilistic models for deep learning a a b b s s a b a a s b b s s c any path with arrows proceeding directly from figure all of the kinds of active paths of length two that can exist between random variables a and b a to b or vice versa. this kind of path becomes blocked if s is observed. we have already seen this kind of path in the relay race example. and b are connected by a common cause s. for example suppose s is a variable indicating whether or not there is a hurricane and a and b measure the wind speed at two different nearby weather monitoring outposts. if we observe very high winds at station a we might expect to also see high winds at b. this kind of path can be blocked by observing s. if we already know there is a hurricane we expect to see high winds at b regardless of what is observed at a. a lower than expected wind at a a hurricane would not change our expectation of winds at b there is a hurricane. however if s is not observed then a and b are dependent i.e. the path is active. and b are both parents of s. this is called a v-structure or the collider case. the v-structure causes a and b to be related by the explaining away effect. in this case the path is actually active when s is observed. for example suppose s is a variable indicating that your colleague is not at work. the variable a represents her being sick while b represents her being on vacation. if you observe that she is not at work you can presume she is probably sick or on vacation but it is not especially likely that both have happened at the same time. if you find out that she is on vacation her absence. you can infer that she is probably not also this fact is sufficient to sick. s is observed! for example suppose that c is a variable representing whether you have received a report from your colleague. if you notice that you have not received the report this increases your estimate of the probability that she is not at work today which in turn makes it more likely that she is either sick or on vacation. the only way to block a path through a v-structure is to observe none of the descendants of the shared child. the explaining away effect happens even if any descendant of explain chapter structured probabilistic models for deep learning a d c b e figure from this graph we can read out several d-separation properties. examples include a and b are d-separated given the empty set. we can also see that some variables are no longer d-separated when we observe some variables a and e are d-separated given c. d and e are d-separated given c. a and b are not d-separated given c. a and b are not d-separated given d. chapter structured probabilistic models for deep learning converting between undirected and directed graphs we often refer to a specific machine learning model as being undirected or directed. for example we typically refer to rbms as undirected and sparse coding as directed. this choice of wording can be somewhat misleading because no probabilistic model is inherently directed or undirected. instead some models are most easily described using a directed graph or most easily described using an undirected graph. directed models and undirected models both have their advantages and disadvantages. neither approach is clearly superior and universally preferred. instead we should choose which language to use for each task. this choice will partially depend on which probability distribution we wish to describe. we may choose to use either directed modeling or undirected modeling based on which approach can capture the most independences in the probability distribution or which approach uses the fewest edges to describe the distribution. there are other factors that can affect the decision of which language to use. even while working with a single probability distribution we may sometimes switch between different modeling languages. sometimes a different language becomes more appropriate if we observe a certain subset of variables or if we wish to perform a different computational task. for example the directed model description often provides a straightforward approach to efficiently draw samples from the model in section while the undirected model formulation is often useful for deriving approximate inference procedures we will see in chapter where the role of undirected models is highlighted in equation every probability distribution can be represented by either a directed model or by an undirected model. in the worst case one can always represent any distribution by using a complete graph. in the case of a directed model the complete graph is any directed acyclic graph where we impose some ordering on the random variables and each variable has all other variables that precede it in the ordering as its ancestors in the graph. for an undirected model the complete graph is simply a graph containing a single clique encompassing all of the variables. see figure for an example. of course the utility of a graphical model is that the graph implies that some variables do not interact directly. the complete graph is not very useful because it does not imply any independences. when we represent a probability distribution with a graph we want to choose a graph that implies as many independences as possible without implying any independences that do not actually exist. from this point of view some distributions can be represented more efficiently chapter structured probabilistic models for deep learning figure examples of complete graphs which can describe any probability distribution. here we show examples with four random variables. complete undirected graph. in the undirected case the complete graph is unique. a complete directed graph. in the directed case there is not a unique complete graph. we choose an ordering of the variables and draw an arc from each variable to every variable that comes after it in the ordering. there are thus a factorial number of complete graphs for every set of random variables. in this example we order the variables from left to right top to bottom. using directed models while other distributions can be represented more efficiently using undirected models. in other words directed models can encode some independences that undirected models cannot encode and vice versa. directed models are able to use one specific kind of substructure that undirected models cannot represent perfectly. this substructure is called an immorality. the structure occurs when two random variables a and b are both parents of a third random variable c and there is no edge directly connecting a and b in either direction. name immorality may seem strange it was coined in the graphical u models literature as a joke about unmarried parents. to convert a directed model with graph for u every pair of variables x and y we add an undirected edge connecting x and y to or if x is known as a for examples of converting directed models to into an undirected model we need to create a new graph d if there is a directed edge either direction connecting x and y in of a third variable z. the resulting and y are both parents in moralized graph. see figure undirected models via moralization. d d u d likewise undirected models can include substructures that no directed model cannot capture all of the can represent perfectly. specifically a directed graph conditional independences implied by an undirected graph contains a loop of length greater than three unless that loop also contains a chord a loop is a sequence of variables connected by undirected edges with the last variable in the sequence connected back to the first variable in the sequence. a chord is a connection between any two non-consecutive variables in the sequence defining a loop. if has loops of length four or greater and does not have chords for these loops we must add the chords before we can convert it to a directed model. adding u u u if chapter structured probabilistic models for deep learning a b c a b c a b c a b c figure examples of converting directed models row to undirected models row by constructing moralized graphs. simple chain can be converted to a moralized graph merely by replacing its directed edges with undirected edges. the resulting undirected model implies exactly the same set of independences and conditional independences. this graph is the simplest directed model that cannot be converted to an undirected model without losing some independences. this graph consists entirely of a single immorality. because a and b are parents of c they are connected by an active path when c is observed. to capture this dependence the undirected model must include a clique encompassing all three variables. this clique fails to encode the fact that a b general moralization may add many edges to the graph thus losing many implied independences. for example this sparse coding graph requires adding moralizing edges between every pair of hidden units thus introducing a quadratic number of new direct dependences. chapter structured probabilistic models for deep learning a d b c a d b c a d b c b d figure converting an undirected model to a directed model. undirected model cannot be converted directed to a directed model because it has a loop of length four with no chords. specifically the undirected model encodes two different independences that no directed model can capture simultaneously a c to convert the undirected model to a directed model we must triangulate the graph by ensuring that all loops of greater than length three have a chord. to do so we can either add an edge connecting a and c or we can add an edge connecting b and d. in this example we choose to add the edge connecting a and c. to finish the conversion process we must assign a direction to each edge. when doing so we must not create any directed cycles. one way to avoid directed cycles is to impose an ordering over the nodes and always point each edge from the node that comes earlier in the ordering to the node that comes later in the ordering. in this example we use the variable names to impose alphabetical order. a c and b d u u these chords discards some of the independence information that was encoded in the graph formed by adding chords to is known as a chordal or triangulated graph because all the loops can now be described in terms of smaller triangular loops. to build a directed graph from the chordal graph we need to also assign d directions to the edges. when doing so we must not create a directed cycle in or the result does not define a valid directed probabilistic model. one way to assign directions to the edges in is to impose an ordering on the random variables then point each edge from the node that comes earlier in the ordering to the node that comes later in the ordering. see figure for a demonstration. d d factor graphs factor graphs are another way of drawing undirected models that resolve an ambiguity in the graphical representation of standard undirected model syntax. in an undirected model the scope of every function must be a of some clique in the graph. ambiguity arises because it is not clear if each clique actually has a corresponding factor whose scope encompasses the entire clique for example a clique containing three nodes may correspond to a factor over all three nodes or may correspond to three factors that each contain only a pair of the nodes. subset chapter structured probabilistic models for deep learning factor graphs resolve this ambiguity by explicitly representing the scope of each function. specifically a factor graph is a graphical representation of an undirected model that consists of a bipartite undirected graph. some of the nodes are drawn as circles. these nodes correspond to random variables as in a standard undirected model. the rest of the nodes are drawn as squares. these nodes correspond to the factors of the unnormalized probability distribution. variables and factors may be connected with undirected edges. a variable and a factor are connected in the graph if and only if the variable is one of the arguments to the factor in the unnormalized probability distribution. no factor may be connected to another factor in the graph nor can a variable be connected to a variable. see figure for an example of how factor graphs can resolve ambiguity in the interpretation of undirected networks. a b a c b c a b c figure an example of how a factor graph can resolve ambiguity in the interpretation of undirected networks. undirected network with a clique involving three variables a b and c. a factor graph corresponding to the same undirected model. this factor graph has one factor over all three variables. another valid factor graph for the same undirected model. this factor graph has three factors each over only two variables. representation inference and learning are all asymptotically cheaper in this factor graph than in the factor graph depicted in the center even though both require the same undirected graph to represent. sampling from graphical models graphical models also facilitate the task of drawing samples from a model. one advantage of directed graphical models is that a simple and efficient procedure called ancestral sampling can produce a sample from the joint distribution represented by the model. the basic idea is to sort the variables xi in the graph into a topological ordering so that for all i and j j is greater than i if xi is a parent of xj the variables chapter structured probabilistic models for deep learning p and so on until finally we sample p p can then be sampled in this order. in other words we first sample p agxn. then sample p p agxi is easy to sample from so long as each conditional distribution pxi then the whole model is easy to sample from. the topological sorting operation guarantees that we can read the conditional distributions in equation and sample from them in order. without the topological sorting we might attempt to sample a variable before its parents are available. for some graphs more than one topological ordering is possible. ancestral sampling may be used with any of these topological orderings. ancestral sampling is generally very fast sampling from each condi tional is easy and convenient. one drawback to ancestral sampling is that it only applies to directed graphical models. another drawback is that it does not support every conditional sampling operation. when we wish to sample from a subset of the variables in a directed graphical model given some other variables we often require that all the conditioning variables come earlier than the variables to be sampled in the ordered graph. in this case we can sample from the local conditional probability distributions specified by the model distribution. otherwise the conditional distributions we need to sample from are the posterior distributions given the observed variables. these posterior distributions are usually not explicitly specified and parametrized in the model. inferring these posterior distributions can be costly. in models where this is the case ancestral sampling is no longer efficient. unfortunately ancestral sampling is applicable only to directed models. we can sample from undirected models by converting them to directed models but this often requires solving intractable inference problems determine the marginal distribution over the root nodes of the new directed graph or requires introducing so many edges that the resulting directed model becomes intractable. sampling from an undirected model without first converting it to a directed model seems to require resolving cyclical dependencies. every variable interacts with every other variable so there is no clear beginning point for the sampling process. unfortunately drawing samples from an undirected graphical model is an expensive multi-pass process. the conceptually simplest approach is gibbs sampling. suppose we have a graphical model over an n-dimensional vector of random variables x. we iteratively visit each variable xi and draw a sample conditioned on all of the other variables from pxi i. due to the separation properties of the graphical model we can equivalently condition on only the neighbors of xi. unfortunately after we have made one pass through the graphical model and sampled all n variables we still do not have a fair sample from px. instead we must repeat the x chapter structured probabilistic models for deep learning process and resample all n variables using the updated values of their neighbors. asymptotically after many repetitions this process converges to sampling from the correct distribution. it can be difficult to determine when the samples have reached a sufficiently accurate approximation of the desired distribution. sampling techniques for undirected models are an advanced topic covered in more detail in chapter advantages of structured modeling the primary advantage of using structured probabilistic models is that they allow us to dramatically reduce the cost of representing probability distributions as well as learning and inference. sampling is also accelerated in the case of directed models while the situation can be complicated with undirected models. the primary mechanism that allows all of these operations to use less runtime and memory is choosing to not model certain interactions. graphical models convey information by leaving edges out. anywhere there is not an edge the model specifies the assumption that we do not need to model a direct interaction. a less quantifiable benefit of using structured probabilistic models is that they allow us to explicitly separate representation of knowledge from learning of knowledge or inference given existing knowledge. this makes our models easier to develop and debug. we can design analyze and evaluate learning algorithms and inference algorithms that are applicable to broad classes of graphs. independently we can design models that capture the relationships we believe are important in our data. we can then combine these different algorithms and structures and obtain a cartesian product of different possibilities. it would be much more difficult to design end-to-end algorithms for every possible situation. learning about dependencies a good generative model needs to accurately capture the distribution over the observed or visible variables v often the different elements of v are highly dependent on each other. in the context of deep learning the approach most commonly used to model these dependencies is to introduce several latent or hidden variables h. the model can then capture dependencies between any pair of variables v i and vj indirectly via direct dependencies between vi and h and direct dependencies between and v h j. a good model of v which did not contain any latent variables would need to chapter structured probabilistic models for deep learning have very large numbers of parents per node in a bayesian network or very large cliques in a markov network. just representing these higher order interactions is costly both in a computational sense because the number of parameters that must be stored in memory scales exponentially with the number of members in a clique but also in a statistical sense because this exponential number of parameters requires a wealth of data to estimate accurately. when the model is intended to capture dependencies between visible variables with direct connections it is usually infeasible to connect all variables so the graph must be designed to connect those variables that are tightly coupled and omit edges between other variables. an entire field of machine learning called structure learning is devoted to this problem for a good reference on structure learning see and friedman most structure learning techniques are a form of greedy search. a structure is proposed a model with that structure is trained then given a score. the score rewards high training set accuracy and penalizes model complexity. candidate structures with a small number of edges added or removed are then proposed as the next step of the search. the search proceeds to a new structure that is expected to increase the score. using latent variables instead of adaptive structure avoids the need to perform discrete searches and multiple rounds of training. a fixed structure over visible and hidden variables can use direct interactions between visible and hidden units to impose indirect interactions between visible units. using simple parameter learning techniques we can learn a model with a fixed structure that imputes the right structure on the marginal p latent variables have advantages beyond their role in efficiently capturing pv. the new variables h also provide an alternative representation for v. for example as discussed in section the mixture of gaussians model learns a latent variable that corresponds to which category of examples the input was drawn from. this means that the latent variable in a mixture of gaussians model can be used to do classification. in chapter we saw how simple probabilistic models like sparse coding learn latent variables that can be used as input features for a classifier or as coordinates along a manifold. other models can be used in this same way but deeper models and models with different kinds of interactions can create even richer descriptions of the input. many approaches accomplish feature learning by learning latent variables. often given some model of v and h experimental observations show that eh v or argmaxhph v is a good feature mapping for v. chapter structured probabilistic models for deep learning inference and approximate inference one of the main ways we can use a probabilistic model is to ask questions about how variables are related to each other. given a set of medical tests we can ask what disease a patient might have. in a latent variable model we might want to extract features eh v describing the observed variables v. sometimes we need to solve such problems in order to perform other tasks. we often train our models using the principle of maximum likelihood. because p h v log log p v v h p h v eh p we often want to compute ph v in order to implement a learning rule. all of these are examples of inference problems in which we must predict the value of some variables given other variables or predict the probability distribution over some variables given the value of other variables. unfortunately for most interesting deep models these inference problems are intractable even when we use a structured graphical model to simplify them. the graph structure allows us to represent complicated high-dimensional distributions with a reasonable number of parameters but the graphs used for deep learning are usually not restrictive enough to also allow efficient inference. it is straightforward to see that computing the marginal probability of a general graphical model is hard. the complexity class is a generalization of the complexity class np. problems in np require determining only whether a problem has a solution and finding a solution if one exists. problems in require counting the number of solutions. to construct a worst-case graphical model imagine that we define a graphical model over the binary variables in a problem. we can impose a uniform distribution over these variables. we can then add one binary latent variable per clause that indicates whether each clause is satisfied. we can then add another latent variable indicating whether all of the clauses are satisfied. this can be done without making a large clique by building a reduction tree of latent variables with each node in the tree reporting whether two other variables are satisfied. the leaves of this tree are the variables for each clause. the root of the tree reports whether the entire problem is satisfied. due to the uniform distribution over the literals the marginal distribution over the root of the reduction tree specifies what fraction of assignments satisfy the problem. while this is a contrived worst-case example np hard graphs commonly arise in practical real-world scenarios. this motivates the use of approximate inference. in the context of deep learning this usually refers to variational inference in which we approximate the chapter structured probabilistic models for deep learning v by seeking an approximate distribution q v true distribution ph that is as close to the true one as possible. this and other techniques are described in depth in chapter the deep learning approach to structured prob abilistic models deep learning practitioners generally use the same basic computational tools as other machine learning practitioners who work with structured probabilistic models. however in the context of deep learning we usually make different design decisions about how to combine these tools resulting in overall algorithms and models that have a very different flavor from more traditional graphical models. deep learning does not always involve especially deep graphical models. in the context of graphical models we can define the depth of a model in terms of the graphical model graph rather than the computational graph. we can think of a latent variable hi as being at depth j if the shortest path from h i to an observed variable is j steps. we usually describe the depth of the model as being the greatest depth of any such hi. this kind of depth is different from the depth induced by the computational graph. many generative models used for deep learning have no latent variables or only one layer of latent variables but use deep computational graphs to define the conditional distributions within a model. deep learning essentially always makes use of the idea of distributed representations. even shallow models used for deep learning purposes as pretraining shallow models that will later be composed to form deep ones nearly always have a single large layer of latent variables. deep learning models typically have more latent variables than observed variables. complicated nonlinear interactions between variables are accomplished via indirect connections that flow through multiple latent variables. by contrast traditional graphical models usually contain mostly variables that are at least occasionally observed even if many of the variables are missing at random from some training examples. traditional models mostly use higher-order terms and structure learning to capture complicated nonlinear interactions between variables. if there are latent variables they are usually few in number. the way that latent variables are designed also differs in deep learning. the deep learning practitioner typically does not intend for the latent variables to take on any specific semantics ahead of time the training algorithm is free to invent the concepts it needs to model a particular dataset. the latent variables are chapter structured probabilistic models for deep learning usually not very easy for a human to interpret after the fact though visualization techniques may allow some rough characterization of what they represent. when latent variables are used in the context of traditional graphical models they are often designed with some specific semantics in mind the topic of a document the intelligence of a student the disease causing a patient s symptoms etc. these models are often much more interpretable by human practitioners and often have more theoretical guarantees yet are less able to scale to complex problems and are not reusable in as many different contexts as deep models. another obvious difference is the kind of connectivity typically used in the deep learning approach. deep graphical models typically have large groups of units that are all connected to other groups of units so that the interactions between two groups may be described by a single matrix. traditional graphical models have very few connections and the choice of connections for each variable may be individually designed. the design of the model structure is tightly linked with the choice of inference algorithm. traditional approaches to graphical models typically aim to maintain the tractability of exact inference. when this constraint is too limiting a popular approximate inference algorithm is an algorithm called loopy belief propagation. both of these approaches often work well with very sparsely connected graphs. by comparison models used in deep learning tend to connect each visible unit vi to very many hidden units hj so that h can provide a distributed representation of vi probably several other observed variables too. distributed representations have many advantages but from the point of view of graphical models and computational complexity distributed representations have the disadvantage of usually yielding graphs that are not sparse enough for the traditional techniques of exact inference and loopy belief propagation to be relevant. as a consequence one of the most striking differences between the larger graphical models community and the deep graphical models community is that loopy belief propagation is almost never used for deep learning. most deep models are instead designed to make gibbs sampling or variational inference algorithms efficient. another consideration is that deep learning models contain a very large number of latent variables making efficient numerical code essential. this provides an additional motivation besides the choice of high-level inference algorithm for grouping the units into layers with a matrix describing the interaction between two layers. this allows the individual steps of the algorithm to be implemented with efficient matrix product operations or sparsely connected generalizations like block diagonal matrix products or convolutions. finally the deep learning approach to graphical modeling is characterized by a marked tolerance of the unknown. rather than simplifying the model until all quantities we might want can be computed exactly we increase the power of chapter structured probabilistic models for deep learning the model until it is just barely possible to train or use. we often use models whose marginal distributions cannot be computed and are satisfied simply to draw approximate samples from these models. we often train models with an intractable objective function that we cannot even approximate in a reasonable amount of time but we are still able to approximately train the model if we can efficiently obtain an estimate of the gradient of such a function. the deep learning approach is often to figure out what the minimum amount of information we absolutely need is and then to figure out how to get a reasonable approximation of that information as quickly as possible. example the restricted boltzmann machine or smolensky the restricted boltzmann machine harmonium is the quintessential example of how graphical models are used for deep learning. the rbm is not itself a deep model. instead it has a single layer of latent variables that may be used to learn a representation for the input. in chapter we will see how rbms can be used to build many deeper models. here we show how the rbm exemplifies many of the practices used in a wide variety of deep graphical models its units are organized into large groups called layers the connectivity between layers is described by a matrix the connectivity is relatively dense the model is designed to allow efficient gibbs sampling and the emphasis of the model design is on freeing the training algorithm to learn latent variables whose semantics were not specified by the designer. later in section we will revisit the rbm in more detail. the canonical rbm is an energy-based model with binary visible and hidden units. its energy function is e h b c h v v w h where b c and w are unconstrained real-valued learnable parameters. we can see that the model is divided into two groups of units v and h and the interaction between them is described by a matrix w the model is depicted graphically in figure as this figure makes clear an important aspect of this model is that there are no direct interactions between any two visible units or between any two hidden units the restricted a general boltzmann machine may have arbitrary connections. the restrictions on the rbm structure yield the nice properties p h v iphi v chapter structured probabilistic models for deep learning figure an rbm drawn as a markov network. and p v h ipv i h. the individual conditionals are simple to compute as well. for the binary rbm we obtain p p v v v v wi bi wi bi together these properties allow for efficient block gibbs sampling which alternates between sampling all of h simultaneously and sampling all of v simultaneously. samples generated by gibbs sampling from an rbm model are shown in figure since the energy function itself is just a linear function of the parameters it is easy to take its derivatives. for example vihj. e h wij these two properties efficient gibbs sampling and efficient derivatives make we will see that undirected models may be training convenient. in chapter trained by computing such derivatives applied to samples from the model. v h as a set of features to describe training the model induces a representation h of the data v. we can often use eh p overall the rbm demonstrates the typical deep learning approach to graphical models representation learning accomplished via layers of latent variables combined with efficient interactions between layers parametrized by matrices. the language of graphical models provides an elegant flexible and clear language for describing probabilistic models. in the chapters ahead we use this language among other perspectives to describe a wide variety of deep probabilistic models. chapter structured probabilistic models for deep learning lisa figure samples from a trained rbm and its weights. image reproduced with permission from from a model trained on mnist drawn using gibbs sampling. each column is a separate gibbs sampling process. each row represents the output of another steps of gibbs sampling. successive samples are highly correlated with one another. the corresponding weight vectors. compare this to the samples and weights of a linear factor model shown in figure the samples here are much better because the rbm prior ph is not constrained to be factorial. the rbm can learn which features should appear together when sampling. on the other hand the rbm posterior is not so the sparse coding model may be better for feature extraction. other models are able to have both a non-factorial is factorial while the sparse coding posterior and a non-factorial h v h v h v p p p p chapter monte carlo methods randomized algorithms fall into two rough categories las vegas algorithms and monte carlo algorithms. las vegas algorithms always return precisely the correct answer report that they failed. these algorithms consume a random amount of resources usually memory or time. in contrast monte carlo algorithms return answers with a random amount of error. the amount of error can typically be reduced by expending more resources running time and memory. for any fixed computational budget a monte carlo algorithm can provide an approximate answer. many problems in machine learning are so difficult that we can never expect to obtain precise answers to them. this excludes precise deterministic algorithms and las vegas algorithms. instead we must use deterministic approximate algorithms or monte carlo approximations. both approaches are ubiquitous in machine learning. in this chapter we focus on monte carlo methods. sampling and monte carlo methods many important technologies used to accomplish machine learning goals are based on drawing samples from some probability distribution and using these samples to form a monte carlo estimate of some desired quantity. why sampling? there are many reasons that we may wish to draw samples from a probability distribution. sampling provides a flexible way to approximate many sums and chapter monte carlo methods integrals at reduced cost. sometimes we use this to provide a significant speedup to a costly but tractable sum as in the case when we subsample the full training cost with minibatches. in other cases our learning algorithm requires us to approximate an intractable sum or integral such as the gradient of the log partition function of an undirected model. in many other cases sampling is actually our goal in the sense that we want to train a model that can sample from the training distribution. basics of monte carlo sampling when a sum or an integral cannot be computed exactly example the sum has an exponential number of terms and no exact simplification is known it is often possible to approximate it using monte carlo sampling. the idea is to view the sum or integral as if it was an expectation under some distribution and to approximate the expectation by a corresponding average. let s p x f e p f x or s p x d f e p f x x be the sum or integral to estimate rewritten as an expectation with the constraint that p is a probability distribution the sum or a probability density the integral over random variable we can approximate s by drawing n samples x from p and then forming the empirical average n n f sn this approximation is justified by a few different properties. the first trivial observation is that the estimator s is unbiased since e sn n n e x n n s s. but in addition the law of large numbers states that if the samples x are i.i.d. then the average converges almost surely to the expected value sn s lim n chapter monte carlo methods provided that the variance of the individual terms varf is bounded. to see this more clearly consider the variance of sn as n increases. the variance var sn decreases and converges to so long as var x var sn n var f x var f x n this convenient result also tells us how to estimate the uncertainty in a monte carlo average or equivalently the amount of expected error of the monte carlo approximation. we compute both the empirical average of the f and their empirical and then divide the estimated variance by the number of samples n to obtain an estimator of var s n. the central limit theorem tells us that the distribution of the average sn converges to a normal distribution with mean s and variance var f x this allows us to estimate confidence intervals n around the estimate sn using the cumulative distribution of the normal density. however all this relies on our ability to easily sample from the base distribution px but doing so is not always possible. when it is not feasible to sample from p an alternative is to use importance sampling presented in section a more general approach is to form a sequence of estimators that converge towards the distribution of interest. that is the approach of monte carlo markov chains importance sampling an important step in the decomposition of the integrand summand used by the monte carlo method in equation is deciding which part of the integrand should play the role the probability px and which part of the integrand should play the role of the quantity fx whose expected value that probability distribution is to be estimated. there is no unique decomposition because pxfx can always be rewritten as p q x f p f q where we now sample from q and average pf in many cases we wish to compute q an expectation for a given p and an f and the fact that the problem is specified unbiased estimator of the variance is often preferred in which the sum of squared differences is divided by n instead of n chapter monte carlo methods from the start as an expectation suggests that this p and f would be a natural choice of decomposition. however the original specification of the problem may not be the the optimal choice in terms of the number of samples required to obtain a given level of accuracy. fortunately the form of the optimal choice q can be derived easily. the optimal q corresponds to what is called optimal importance sampling. because of the identity shown in equation any monte carlo estimator n n sp f p i x can be transformed into an importance sampling estimator sq n n px x q i x qx we see readily that the expected value of the estimator does not depend on eq sq eq sp s. however the variance of an importance sampling estimator can be greatly sensitive to the choice of the variance is given by q var sq var p f q the minimum variance occurs when isq q p f z where z is the normalization constant chosen so that q sums or integrates to as appropriate. better importance sampling distributions put more weight where the integrand is larger. in fact when fx does not change sign var sq when the optimal distribution is used. meaning that of course this is only because the computation of q has essentially solved the original problem so it is usually not practical to use this approach of drawing a single sample from the optimal distribution. a single sample is sufficient any choice of sampling distribution q is valid the sense of yielding the is the optimal one the sense of yielding minimum is usually infeasible but other choices of q can be correct expected value and q variance. sampling from q feasible while still reducing the variance somewhat. chapter monte carlo methods another approach is to use biased importance sampling which has the advantage of not requiring normalized p or q. in the case of discrete variables the biased importance sampling estimator is given by n n n sbis f px qx f px qx n px qx n px qx n px qx px qx f where p and q are the unnormalized forms of p and q and the x are the samples s except asymptotically when from q. this estimator is biased because e s bis converges to hence this estimator n is called asymptotically unbiased. and the denominator of equation q for which p f q we see that if there are samples of although a good choice of q can greatly improve the efficiency of monte carlo estimation a poor choice of q can make the efficiency much worse. going back to equation is large then the variance of the estimator can get very large. this may happen when qx is tiny while neither px nor f are small enough to cancel it. the q distribution is usually chosen to be a very simple distribution so that it is easy to sample from. when x is high-dimensional this simplicity in q causes it to match p or p f importance sampling collects useless samples tiny numbers or zeros. on the other hand when which will happen more rarely the ratio can be huge. qx because these latter events are rare they may not show up in a typical sample yielding typical underestimation of s compensated rarely by gross overestimation. such very large or very small numbers are typical when x is high dimensional because in high dimension the dynamic range of joint probabilities can be very large. poorly. when qx fx f px px in spite of this danger importance sampling and its variants have been found very useful in many machine learning algorithms including deep learning algorithms. for example see the use of importance sampling to accelerate training in neural language models with a large vocabulary or other neural nets with a large number of outputs. see also how importance sampling has been used to estimate a partition function normalization constant of a probability chapter monte carlo methods and to estimate the log-likelihood in deep directed distribution in section models such as the variational autoencoder in section importance sampling may also be used to improve the estimate of the gradient of the cost function used to train model parameters with stochastic gradient descent particularly for models such as classifiers where most of the total value of the cost function comes from a small number of misclassified examples. sampling more difficult examples more frequently can reduce the variance of the gradient in such cases hinton markov chain monte carlo methods in many cases we wish to use a monte carlo technique but there is no tractable method for drawing exact samples from the distribution pmodelx or from a good variance importance sampling distribution q in the context of deep learning this most often happens when pmodelx is represented by an undirected model. in these cases we introduce a mathematical tool called a markov chain to approximately sample from pmodel the family of algorithms that use markov chains to perform monte carlo estimates is called markov chain monte carlo methods markov chain monte carlo methods for machine learning are described at greater length in koller and friedman the most standard generic guarantees for mcmc techniques are only applicable when the model does not assign zero probability to any state. therefore it is most convenient to present these techniques as sampling from an energy-based model px in the ebm formulation every state is guaranteed to have non-zero probability. mcmc methods are in fact more broadly applicable and can be used with many probability distributions that contain zero probability states. however the theoretical guarantees concerning the behavior of mcmc methods must be proven on a case-by-case basis for different families of such distributions. in the context of deep learning it is most common to rely on the most general theoretical guarantees that naturally apply to all energy-based models. exp e as described in section to understand why drawing samples from an energy-based model is difficult a b in order consider an ebm over just two variables defining a distribution to sample a we must draw a from pa b and in order to sample b we must draw it from pb it seems to be an intractable chicken-and-egg problem. directed models avoid this because their graph is directed and acyclic. to perform ancestral sampling one simply samples each of the variables in topological order conditioning on each variable s parents which are guaranteed to have already been sampled ancestral sampling defines an efficient single-pass method p a chapter monte carlo methods of obtaining a sample. in an ebm we can avoid this chicken and egg problem by sampling using a markov chain. the core idea of a markov chain is to have a state x that begins as an arbitrary value. over time we randomly update x repeatedly. eventually x becomes nearly a fair sample from px. formally a markov chain is defined by a random state x and a transition distribution tx x specifying the probability that a random update will go to state x if it starts in state x. running the markov chain means repeatedly updating the state x to a value x sampled from t x. to gain some theoretical understanding of how mcmc methods work it is useful to reparametrize the problem. first we restrict our attention to the case where the random variable x has countably many states. we can then represent the state as just a positive integer x. different integer values of x map back to different states in the original problem. x consider what happens when we run infinitely many markov chains in parallel. all of the states of the different markov chains are drawn from some distribution q where t indicates the number of time steps that have elapsed. at the beginning is some distribution that we used to arbitrarily initialize x for each markov chain. later q is influenced by all of the markov chain steps that have run so far. our goal is for q to converge to p x because we have reparametrized the problem in terms of positive integer x we can describe the probability distribution q using a vector v with q x i i. v new state x consider what happens when we update a single markov chain s state x to a the probability of a single state landing in state x is given by t q x q t x x using our integer parametrization we can represent the effect of the transition operator t using a matrix a we define aij x a i so that x j rather than writing it in using this definition we can now rewrite equation terms of q and t to understand how a single state is updated we may now use v and a to describe how the entire distribution over all the different markov chains in parallel shifts as we apply an update t v av chapter monte carlo methods applying the markov chain update repeatedly corresponds to multiplying by the matrix a repeatedly. in other words we can think of the process as exponentiating the matrix v atv the matrix a has special structure because each of its columns represents a probability distribution. such matrices are called stochastic matrices. if there is a non-zero probability of transitioning from any state x to any other state x for some power t then the perron-frobenius theorem perron frobenius guarantees that the largest eigenvalue is real and equal to over time we can see that all of the eigenvalues are exponentiated v v diag v t v diag tv this process causes all of the eigenvalues that are not equal to to decay to zero. under some additional mild conditions a is guaranteed to have only one eigenvector stationary distribution with eigenvalue sometimes also called the at convergence the process thus converges to a equilibrium distribution v av v and this same condition holds for every additional step. this is an eigenvector equation. to be a stationary point v must be an eigenvector with corresponding eigenvalue this condition guarantees that once we have reached the stationary distribution repeated applications of the transition sampling procedure do not change the over the states of all the various markov chains transition operator does change each individual state of course. distribution if we have chosen t correctly then the stationary distribution q will be equal to the distribution p we wish to sample from. we will describe how to choose t shortly in section most properties of markov chains with countable states can be generalized to continuous variables. in this situation some authors call the markov chain a harris chain but we use the term markov chain to describe both conditions. in general a markov chain with transition operator t will converge under mild conditions to a fixed point described by the equation q qt ex x x is discrete which in the discrete case is just rewriting equation the expectation corresponds to a sum and when x is continuous the expectation corresponds to an integral. when chapter monte carlo methods regardless of whether the state is continuous or discrete all markov chain methods consist of repeatedly applying stochastic updates until eventually the state begins to yield samples from the equilibrium distribution. running the markov chain until it reaches its equilibrium distribution is called burning in the markov chain. after the chain has reached equilibrium a sequence of infinitely many samples may be drawn from from the equilibrium distribution. they are identically distributed but any two successive samples will be highly correlated with each other. a finite sequence of samples may thus not be very representative of the equilibrium distribution. one way to mitigate this problem is to return only every n successive samples so that our estimate of the statistics of the equilibrium distribution is not as biased by the correlation between an mcmc sample and the next several samples. markov chains are thus expensive to use because of the time required to burn in to the equilibrium distribution and the time required to transition from one sample to another reasonably decorrelated sample after reaching equilibrium. if one desires truly independent samples one can run multiple markov chains in parallel. this approach uses extra parallel computation to eliminate latency. the strategy of using only a single markov chain to generate all samples and the strategy of using one markov chain for each desired sample are two extremes deep learning practitioners usually use a number of chains that is similar to the number of examples in a minibatch and then draw as many samples as are needed from this fixed set of markov chains. a commonly used number of markov chains is another difficulty is that we do not know in advance how many steps the markov chain must run before reaching its equilibrium distribution. this length of time is called the mixing time. it is also very difficult to test whether a markov chain has reached equilibrium. we do not have a precise enough theory for guiding us in answering this question. theory tells us that the chain will converge but not much more. if we analyze the markov chain from the point of view of a matrix a acting on a vector of probabilities v then we know that the chain mixes when at has effectively lost all of the eigenvalues from a besides the unique eigenvalue of this means that the magnitude of the second largest eigenvalue will determine the mixing time. however in practice we cannot actually represent our markov chain in terms of a matrix. the number of states that our probabilistic model can visit is exponentially large in the number of variables so it is infeasible to represent v a or the eigenvalues of a. due to these and other obstacles we usually do not know whether a markov chain has mixed. instead we simply run the markov chain for an amount of time that we roughly estimate to be sufficient and use heuristic methods to determine whether the chain has mixed. these heuristic methods include manually inspecting samples or measuring correlations between chapter monte carlo methods successive samples. gibbs sampling x t so far we have described how to draw samples from a distribution qx by repeatedly updating x x. however we have not described how to ensure that qx is a useful distribution. two basic approaches are considered in this book. the first one is to derive t from a given learned pmodel described below with the case of sampling from ebms. the second one is to directly parametrize t and learn it so that its stationary distribution implicitly defines the pmodel of interest. examples of this second approach are discussed in sections and in the context of deep learning we commonly use markov chains to draw samples from an energy-based model defining a distribution pmodelx. in this case we want the qx for the markov chain to be pmodelx. to obtain the desired q we must choose an appropriate t x. g a conceptually simple and effective approach to building a markov chain that samples from pmodelx is to use gibbs sampling in which sampling from x is accomplished by selecting one variable xi and sampling it from pmodel t conditioned on its neighbors in the undirected graph defining the structure of the energy-based model. it is also possible to sample several variables at the same time so long as they are conditionally independent given all of their neighbors. as shown in the rbm example in section all of the hidden units of an rbm may be sampled simultaneously because they are conditionally independent from each other given all of the visible units. likewise all of the visible units may be sampled simultaneously because they are conditionally independent from each other given all of the hidden units. gibbs sampling approaches that update many variables simultaneously in this way are called block gibbs sampling. alternate approaches to designing markov chains to sample from pmodel are possible. for example the metropolis-hastings algorithm is widely used in other disciplines. in the context of the deep learning approach to undirected modeling it is rare to use any approach other than gibbs sampling. improved sampling techniques are one possible research frontier. the challenge of mixing between separated modes the primary difficulty involved with mcmc methods is that they have a tendency to mix poorly. ideally successive samples from a markov chain designed to sample chapter monte carlo methods from px would be completely independent from each other and would visit many different regions in x space proportional to their probability. instead especially in high dimensional cases mcmc samples become very correlated. we refer to such behavior as slow mixing or even failure to mix. mcmc methods with slow mixing can be seen as inadvertently performing something resembling noisy gradient descent on the energy function or equivalently noisy hill climbing on the probability with respect to the state of the chain random variables being sampled. the chain tends to take small steps the space of the state of the markov chain from a configuration x t to a configuration x with the energy ex generally lower or approximately equal to the energy ex t with a preference for moves that yield lower energy configurations. when starting from a rather improbable configuration energy than the typical ones from px the chain tends to gradually reduce the energy of the state and only occasionally move to another mode. once the chain has found a region of low energy example if the variables are pixels in an image a region of low energy might be a connected manifold of images of the same object which we call a mode the chain will tend to walk around that mode a kind of random walk. once in a while it will step out of that mode and generally return to it or it finds an escape route move towards another mode. the problem is that successful escape routes are rare for many interesting distributions so the markov chain will continue to sample the same mode longer than it should. this is very clear when we consider the gibbs sampling algorithm in this context consider the probability of going from one mode to a nearby mode within a given number of steps. what will determine that probability is the shape of the energy barrier between these modes. transitions between two modes that are separated by a high energy barrier region of low probability are exponentially less likely terms of the height of the energy barrier. this is illustrated in figure the problem arises when there are multiple modes with high probability that are separated by regions of low probability especially when each gibbs sampling step must update only a small subset of variables whose values are largely determined by the other variables. as a simple example consider an energy-based model over two variables a and wab b which are both binary with a sign taking on values for some large positive number w then the model expresses a strong belief that a and b have the same sign. consider updating b using a gibbs sampling step with a a the conditional distribution over b is given by pb if w is large the sigmoid saturates and the probability of also assigning b to be is close to likewise if a is close to according to pmodela b both signs of both variables are equally likely. the probability of assigning b to be and if e b chapter monte carlo methods figure paths followed by gibbs sampling for three distributions with the markov chain initialized at the mode in both cases. multivariate normal distribution with two independent variables. gibbs sampling mixes well because the variables are independent. a multivariate normal distribution with highly correlated variables. the correlation between variables makes it difficult for the markov chain to mix. because the update for each variable must be conditioned on the other variable the correlation reduces the rate at which the markov chain can move away from the starting point. mixture of gaussians with widely separated modes that are not axis-aligned. gibbs sampling mixes very slowly because it is difficult to change modes while altering only one variable at a time. according to pmodela b that gibbs sampling will only very rarely flip the signs of these variables. both variables should have the same sign. this means in more practical scenarios the challenge is even greater because we care not only about making transitions between two modes but more generally between all the many modes that a real model might contain. if several such transitions are difficult because of the difficulty of mixing between modes then it becomes very expensive to obtain a reliable set of samples covering most of the modes and convergence of the chain to its stationary distribution is very slow. sometimes this problem can be resolved by finding groups of highly dependent units and updating all of them simultaneously in a block. unfortunately when the dependencies are complicated it can be computationally intractable to draw a sample from the group. after all the problem that the markov chain was originally introduced to solve is this problem of sampling from a large group of variables. in the context of models with latent variables which define a joint distribution we often draw samples of x by alternating between sampling from and sampling from p modelh x from the point of view of mixing pmodelx h pmodelx h chapter monte carlo methods figure an illustration of the slow mixing problem in deep probabilistic models. each panel should be read left to right top to bottom. samples from gibbs sampling applied to a deep boltzmann machine trained on the mnist dataset. consecutive samples are similar to each other. because the gibbs sampling is performed in a deep graphical model this similarity is based more on semantic rather than raw visual features but it is still difficult for the gibbs chain to transition from one mode of the distribution to another for example by changing the digit identity. consecutive ancestral samples from a generative adversarial network. because ancestral sampling generates each sample independently from the others there is no mixing problem. rapidly we would like pmodelh x to have very high entropy. however from the point of view of learning a useful representation of h we would like h to encode enough information about x to reconstruct it well which implies that h and x should have very high mutual information. these two goals are at odds with each other. we often learn generative models that very precisely encode x into h but are not able to mix very well. this situation arises frequently with boltzmann machines the sharper the distribution a boltzmann machine learns the harder it is for a markov chain sampling from the model distribution to mix well. this problem is illustrated in figure all this could make mcmc methods less useful when the distribution of interest has a manifold structure with a separate manifold for each class the distribution is concentrated around many modes and these modes are separated by vast regions of high energy. this type of distribution is what we expect in many classification problems and would make mcmc methods converge very slowly because of poor mixing between modes. chapter monte carlo methods tempering to mix between modes when a distribution has sharp peaks of high probability surrounded by regions of low probability it is difficult to mix between the different modes of the distribution. several techniques for faster mixing are based on constructing alternative versions of the target distribution in which the peaks are not as high and the surrounding valleys are not as low. energy-based models provide a particularly simple way to do so. so far we have described an energy-based model as defining a probability distribution x e exp p energy-based models may be augmented with an extra parameter controlling how sharply peaked the distribution is p x exp e x the parameter is often described as being the reciprocal of the temperature reflecting the origin of energy-based models in statistical physics. when the temperature falls to zero and rises to infinity the energy-based model becomes deterministic. when the temperature rises to infinity and falls to zero the distribution discrete becomes uniform. x typically a model is trained to be evaluated at however we can make use of other temperatures particularly those where tempering is a general strategy of mixing between modes of p rapidly by drawing samples with iba neal markov chains based on tempered transitions temporarily sample from higher-temperature distributions in order to mix to different modes then resume sampling from the unit temperature distribution. these techniques have been applied to models such as rbms another approach is to use parallel tempering in which the markov chain simulates many different states in parallel at different temperatures. the highest temperature states mix slowly while the lowest temperature states at temperature provide accurate samples from the model. the transition operator includes stochastically swapping states between two different temperature levels so that a sufficiently high-probability sample from a high-temperature slot can jump into a lower temperature slot. this approach has also been applied to rbms et al. although tempering is a promising approach at this point it has not allowed researchers to make a strong advance in solving the challenge of sampling from complex ebms. one possible reason is that there are critical temperatures around which the temperature transition must be very slow the temperature is gradually reduced in order for tempering to be effective. cho et al. chapter monte carlo methods depth may help mixing x h into encodes x too well then sampling from px h we have seen that if when drawing samples from a latent variable model ph x ph x will not change x very much and mixing will be poor. one way to resolve this problem is to make h be a deep representation that encodes in such a way that a markov chain in the space of h can mix more easily. many representation learning algorithms such as autoencoders and rbms tend to yield a marginal distribution over h that is more uniform and more unimodal than the original data distribution over x. it can be argued that this arises from trying to minimize reconstruction error while using all of the available representation space because minimizing reconstruction error over the training examples will be better achieved when different training examples are easily distinguishable from each other in h-space and thus well separated. bengio observed that deeper stacks of regularized autoencoders or rbms yield marginal distributions in the top-level h-space that appeared more spread out and more uniform with less of a gap between the regions corresponding to different modes in the experiments. training an rbm in that higher-level space allowed gibbs sampling to mix faster between modes. it remains however unclear how to exploit this observation to help better train and sample from deep generative models. et al. despite the difficulty of mixing monte carlo techniques are useful and are often the best tool available. indeed they are the primary tool used to confront the intractable partition function of undirected models discussed next. chapter confronting the partition function in section we saw that many probabilistic models known as undirected graphical models are defined by an unnormalized probability distribution px we must normalize p by dividing by a partition function z in order to obtain a valid probability distribution p x p the partition function is an integral continuous variables or sum discrete variables over the unnormalized probability of all states z p x d or p x this operation is intractable for many interesting models. as we will see in chapter several deep learning models are designed to have a tractable normalizing constant or are designed to be used in ways that do not involve computing px at all. however other models directly confront the challenge of intractable partition functions. in this chapter we describe techniques used for training and evaluating models that have intractable partition functions. chapter confronting the partition function the log-likelihood gradient what makes learning undirected models by maximum likelihood particularly difficult is that the partition function depends on the parameters. the gradient of the log-likelihood with respect to the parameters has a term corresponding to the gradient of the partition function log p log p x log this is a well-known decomposition into the positive phase and negative phase of learning. for most undirected models of interest the negative phase is difficult. models with no latent variables or with few interactions between latent variables typically have a tractable positive phase. the quintessential example of a model with a straightforward positive phase and difficult negative phase is the rbm which has hidden units that are conditionally independent from each other given the visible units. the case where the positive phase is difficult with complicated interactions between latent variables is primarily covered in chapter this chapter focuses on the difficulties of the negative phase. let us look more closely at the gradient of log z log z z z p x z p z x for models that guarantee px for all x we can substitute exp p for p exp p z log p exp p x x x x z p z p log p log p chapter confronting the partition function ex p x log p p p this derivation made use of summation over discrete x but a similar result applies using integration over continuous x. in the continuous version of the derivation we use leibniz s rule for differentiation under the integral sign to obtain the identity x d d x this identity is applicable only under certain regularity conditions on p and px. in measure theoretic terms the conditions are the unnormalized distribution p must be a lebesgue-integrable function of x for every value of the gradient px must exist for all and almost all x there must exist an integrable rx for all function rx that bounds and almost all x. fortunately most machine learning models of interest have these properties. px in the sense that maxi px i this identity log z ex p x log p is the basis for a variety of monte carlo methods for approximately maximizing the likelihood of models with intractable partition functions. the monte carlo approach to learning undirected models provides an intuitive framework in which we can think of both the positive phase and the negative phase. in the positive phase we increase log px for x drawn from the data. in the negative phase we decrease the partition function by decreasing log px drawn from the model distribution. in the deep learning literature it is common to parametrize log p in terms of an energy function in this case we can interpret the positive phase as pushing down on the energy of training examples and the negative phase as pushing up on the energy of samples drawn from the model as illustrated in figure stochastic maximum likelihood and contrastive divergence the naive way of implementing equation is to compute it by burning in a set of markov chains from a random initialization every time the gradient is needed. when learning is performed using stochastic gradient descent this means the chains must be burned in once per gradient step. this approach leads to the chapter confronting the partition function the high cost of burning in the training procedure presented in algorithm markov chains in the inner loop makes this procedure computationally infeasible but this procedure is the starting point that other more practical algorithms aim to approximate. algorithm a naive mcmc algorithm for maximizing the log-likelihood with an intractable partition function using gradient ascent. set the step size to a small positive number. set k the number of gibbs steps high enough to allow burn in. perhaps to train an rbm on a small image patch. while not converged do x sample a minibatch of log px g initialize a set of m samples to random values from a uniform or normal distribution or possibly a distribution with marginals matched to the model s marginals. for from the training set. x examples m m m i for to k to j x do m do gibbs_update x end for end for g m g m log p x end while we can view the mcmc approach to maximum likelihood as trying to achieve balance between two forces one pushing up on the model distribution where the data occurs and another pushing down on the model distribution where the model samples occur. figure illustrates this process. the two forces correspond to maximizing log p and minimizing log z several approximations to the negative phase are possible. each of these approximations can be understood as making the negative phase computationally cheaper but also making it push down in the wrong locations. because the negative phase involves drawing samples from the model s distribution we can think of it as finding points that the model believes in strongly. because the negative phase acts to reduce the probability of those points they are generally considered to represent the model s incorrect beliefs about the world. they are frequently referred to in the literature as hallucinations or fantasy particles. in fact the negative phase has been proposed as a possible explanation chapter confronting the partition function the positive phase the negative phase pmodel pdata pmodel pdata x p x p x x figure the view of algorithm as having a positive phase and negative phase. the positive phase we sample points from the data distribution and push up on their unnormalized probability. this means points that are likely in the data get pushed up on more. the negative phase we sample points from the model distribution and push down on their unnormalized probability. this counteracts the positive phase s tendency to just add a large constant to the unnormalized probability everywhere. when the data distribution and the model distribution are equal the positive phase has the same chance to push up at a point as the negative phase has to push down. when this occurs there is no longer any gradient expectation and training must terminate. the idea for dreaming in humans and other animals and mitchison being that the brain maintains a probabilistic model of the world and follows the gradient of log p while experiencing real events while awake and follows the negative gradient of log p to minimize log z while sleeping and experiencing events sampled from the current model. this view explains much of the language used to describe algorithms with a positive and negative phase but it has not been proven to be correct with neuroscientific experiments. in machine learning models it is usually necessary to use the positive and negative phase simultaneously rather than in separate time periods of wakefulness and rem sleep. as we will see in section other machine learning algorithms draw samples from the model distribution for other purposes and such algorithms could also provide an account for the function of dream sleep. given this understanding of the role of the positive and negative phase of learning we can attempt to design a less expensive alternative to algorithm the main cost of the naive mcmc algorithm is the cost of burning in the markov chains from a random initialization at each step. a natural solution is to initialize the markov chains from a distribution that is very close to the model distribution chapter confronting the partition function so that the burn in operation does not take as many steps. this approach is presented as algorithm the contrastive divergence or cd-k to indicate cd with k gibbs steps algorithm initializes the markov chain at each step with samples from the data distribution obtaining samples from the data distribution is free because they are already available in the data set. initially the data distribution is not close to the model distribution so the negative phase is not very accurate. fortunately the positive phase can still accurately increase the model s probability of the data. after the positive phase has had some time to act the model distribution is closer to the data distribution and the negative phase starts to become accurate. algorithm the contrastive divergence algorithm using gradient ascent as the optimization procedure. set the step size to a small positive number. set k the number of gibbs steps high enough to allow a markov chain sampling from px to mix when initialized from pdata. perhaps to train an rbm on a small image patch. while not converged do sample a minibatch of g for log px do x from the training set. examples m m m to m x i x do m do gibbs_update x end for for i for to k to j x end for end for g m g m log p x end while of course cd is still an approximation to the correct negative phase. the main way that cd qualitatively fails to implement the correct negative phase is that it fails to suppress regions of high probability that are far from actual training examples. these regions that have high probability under the model but low probability under the data generating distribution are called spurious modes. figure illustrates why this happens. essentially it is because modes in the model distribution that are far from the data distribution will not be visited by chapter confronting the partition function pmodel pdata x p x figure an illustration of how the negative phase of contrastive divergence can fail to suppress spurious modes. a spurious mode is a mode that is present in the model distribution but absent in the data distribution. because contrastive divergence initializes its markov chains from data points and runs the markov chain for only a few steps it is unlikely to visit modes in the model that are far from the data points. this means that when sampling from the model we will sometimes get samples that do not resemble the data. it also means that due to wasting some of its probability mass on these modes the model will struggle to place high probability mass on the correct modes. for the purpose of visualization this figure uses a somewhat simplified concept of distance the spurious mode is far from the correct mode along the number line in r. this corresponds to a markov chain based on making local moves with a single x variable in r. for most deep probabilistic models the markov chains are based on gibbs sampling and can make non-local moves of individual variables but cannot move all of the variables simultaneously. for these problems it is usually better to consider the edit distance between modes rather than the euclidean distance. however edit distance in a high dimensional space is difficult to depict in a plot. markov chains initialized at training points unless k is very large. carreira-perpi an and hinton showed experimentally that the cd estimator is biased for rbms and fully visible boltzmann machines in that it converges to different points than the maximum likelihood estimator. they argue that because the bias is small cd could be used as an inexpensive way to initialize a model that could later be fine-tuned via more expensive mcmc methods. bengio and delalleau showed that cd can be interpreted as discarding the smallest terms of the correct mcmc update gradient which explains the bias. cd is useful for training shallow models like rbms. these can in turn be stacked to initialize deeper models like dbns or dbms. however cd does not provide much help for training deeper models directly. this is because it is difficult chapter confronting the partition function to obtain samples of the hidden units given samples of the visible units. since the hidden units are not included in the data initializing from training points cannot solve the problem. even if we initialize the visible units from the data we will still need to burn in a markov chain sampling from the distribution over the hidden units conditioned on those visible samples. the cd algorithm can be thought of as penalizing the model for having a markov chain that changes the input rapidly when the input comes from the data. this means training with cd somewhat resembles autoencoder training. even though cd is more biased than some of the other training methods it can be useful for pretraining shallow models that will later be stacked. this is because the earliest models in the stack are encouraged to copy more information up to their latent variables thereby making it available to the later models. this should be thought of more of as an often-exploitable side effect of cd training rather than a principled design advantage. sutskever and tieleman showed that the cd update direction is not the gradient of any function. this allows for situations where cd could cycle forever but in practice this is not a serious problem. a different strategy that resolves many of the problems with cd is to initialize the markov chains at each gradient step with their states from the previous gradient step. this approach was first discovered under the name stochastic maximum likelihood in the applied mathematics and statistics community and later independently rediscovered under the name persistent contrastive divergence or pcd-k to indicate the use of k gibbs steps per update in the deep learning community the basic idea of this approach is that so long as the steps taken by the stochastic gradient algorithm are small then the model from the previous step will be similar to the model from the current step. it follows that the samples from the previous model s distribution will be very close to being fair samples from the current model s distribution so a markov chain initialized with these samples will not require much time to mix. see algorithm tieleman because each markov chain is continually updated throughout the learning process rather than restarted at each gradient step the chains are free to wander far enough to find all of the model s modes. sml is thus considerably more resistant to forming models with spurious modes than cd is. moreover because it is possible to store the state of all of the sampled variables whether visible or latent sml provides an initialization point for both the hidden and visible units. cd is only able to provide an initialization for the visible units and therefore requires burn-in for deep models. sml is able to train deep models efficiently. chapter confronting the partition function et al. compared sml to many of the other criteria presented in marlin this chapter. they found that sml results in the best test set log-likelihood for an rbm and that if the rbm s hidden units are used as features for an svm classifier sml results in the best classification accuracy. sml is vulnerable to becoming inaccurate if the stochastic gradient algorithm can move the model faster than the markov chain can mix between steps. this can happen if k is too small or is too large. the permissible range of values is unfortunately highly problem-dependent. there is no known way to test formally whether the chain is successfully mixing between steps. subjectively if the learning rate is too high for the number of gibbs steps the human operator will be able to observe that there is much more variance in the negative phase samples across gradient steps rather than across different markov chains. for example a model trained on mnist might sample exclusively on one step. the learning process will then push down strongly on the mode corresponding to and the model might sample exclusively on the next step. algorithm the stochastic maximum likelihood persistent contrastive divergence algorithm using gradient ascent as the optimization procedure. set the step size to a small positive number. set k the number of gibbs steps high enough to allow a markov chain sampling from px g to burn in starting from samples from px perhaps for rbm on a small image patch or for a more complicated model like a dbm. initialize a set of m samples to random values from a uniform or normal distribution or possibly a distribution with marginals matched to the model s marginals. while not converged do sample a minibatch of g for x from the training set. x examples m log px do m do gibbs_update x m log p x i for m m to k to j x end for end for g m g end while care must be taken when evaluating the samples from a model trained with sml. it is necessary to draw the samples starting from a fresh markov chain chapter confronting the partition function initialized from a random starting point after the model is done training. the samples present in the persistent negative chains used for training have been influenced by several recent versions of the model and thus can make the model appear to have greater capacity than it actually does. berglund and raiko performed experiments to examine the bias and variance in the estimate of the gradient provided by cd and sml. cd proves to have lower variance than the estimator based on exact sampling. sml has higher variance. the cause of cd s low variance is its use of the same training points in both the positive and negative phase. if the negative phase is initialized from different training points the variance rises above that of the estimator based on exact sampling. all of these methods based on using mcmc to draw samples from the model can in principle be used with almost any variant of mcmc. this means that techniques such as sml can be improved by using any of the enhanced mcmc techniques described in chapter desjardins et al. cho such as parallel tempering et al. one approach to accelerating mixing during learning relies not on changing the monte carlo sampling technology but rather on changing the parametrization of the model and the cost function. fast pcd or fpcd tieleman and hinton involves replacing the parameters of a traditional model with an expression slow fast there are now twice as many parameters as before and they are added together element-wise to provide the parameters used by the original model definition. the fast copy of the parameters is trained with a much larger learning rate allowing it to adapt rapidly in response to the negative phase of learning and push the markov chain to new territory. this forces the markov chain to mix rapidly though this effect only occurs during learning while the fast weights are free to change. typically one also applies significant weight decay to the fast weights encouraging them to converge to small values after only transiently taking on large values long enough to encourage the markov chain to change modes. one key benefit to the mcmc-based methods described in this section is that they provide an estimate of the gradient of log z and thus we can essentially decompose the problem into the log p contribution and the log z contribution. we can then use any other method to tackle log px and just add our negative phase gradient onto the other method s gradient. in particular this means that our positive phase can make use of methods that provide only a lower bound on p. most of the other methods of dealing with log z presented in this chapter are chapter confronting the partition function incompatible with bound-based positive phase methods. pseudolikelihood monte carlo approximations to the partition function and its gradient directly confront the partition function. other approaches sidestep the issue by training the model without computing the partition function. most of these approaches are based on the observation that it is easy to compute ratios of probabilities in an undirected probabilistic model. this is because the partition function appears in both the numerator and the denominator of the ratio and cancels out p p p p z z p p the pseudolikelihood is based on the observation that conditional probabilities take this ratio-based form and thus can be computed without knowledge of the partition function. suppose that we partition x into a b and c where a contains the variables we want to find the conditional distribution over b contains the variables we want to condition on and c contains the variables that are not part of our query. a b p p b p p b a c p b c p b a c p b c this quantity requires marginalizing out a which can be a very efficient operation provided that a and c do not contain very many variables. in the extreme case a can be a single variable and c can be empty making this operation require only as many evaluations of p as there are values of a single random variable. unfortunately in order to compute the log-likelihood we need to marginalize out large sets of variables. if there are n variables total we must marginalize a set of size by the chain rule of probability n p xn log log p x p log in this case we have made a maximally small but c can be as large as what if we simply move c into b to reduce the computational cost? this yields the pseudolikelihood objective function based on predicting the value of feature xi given all of the other features x i besag x i. log xi n chapter confronting the partition function if each random variable has k different values this requires only k n evaluations of p to compute as opposed to the kn evaluations needed to compute the partition function. this may look like an unprincipled hack but it can be proven that estimation by maximizing the pseudolikelihood is asymptotically consistent mase of course in the case of datasets that do not approach the large sample limit pseudolikelihood may display different behavior from the maximum likelihood estimator. it is possible to trade computational complexity for deviation from maximum likelihood behavior by using the generalized pseudolikelihood estimator the generalized pseudolikelihood estimator uses m different sets and ogata i m of indices of variables that appear together on the left side of the s n the generalized conditioning bar. in the extreme case of m and s pseudolikelihood recovers the log-likelihood. in the extreme case of m n and i the generalized pseudolikelihood recovers the pseudolikelihood. the s generalized pseudolikelihood objective function is given by m log x s x s the performance of pseudolikelihood-based approaches depends largely on how the model will be used. pseudolikelihood tends to perform poorly on tasks that require a good model of the full joint px such as density estimation and sampling. however it can perform better than maximum likelihood for tasks that require only the conditional distributions used during training such as filling in small amounts of missing values. generalized pseudolikelihood techniques are especially powerful if the data has regular structure that allows the s index sets to be designed to capture the most important correlations while leaving out groups of variables that only have negligible correlation. for example in natural images pixels that are widely separated in space also have weak correlation so the generalized pseudolikelihood can be applied with each set being a small spatially localized window. s one weakness of the pseudolikelihood estimator is that it cannot be used with other approximations that provide only a lower bound on px such as variational p appears in the inference which will be covered in chapter denominator. a lower bound on the denominator provides only an upper bound on the expression as a whole and there is no benefit to maximizing an upper bound. this makes it difficult to apply pseudolikelihood approaches to deep models such as deep boltzmann machines since variational methods are one of the dominant approaches to approximately marginalizing out the many layers of hidden variables this is because chapter confronting the partition function that interact with each other. however pseudolikelihood is still useful for deep learning because it can be used to train single layer models or deep models using approximate inference methods that are not based on lower bounds. pseudolikelihood has a much greater cost per gradient step than sml due to its explicit computation of all of the conditionals. however generalized pseudolikelihood and similar criteria can still perform well if only one randomly selected conditional is computed per example thereby bringing the computational cost down to match that of sml. et al. though the pseudolikelihood estimator does not explicitly minimize log z it can still be thought of as having something resembling a negative phase. the denominators of each conditional distribution result in the learning algorithm suppressing the probability of all states that have only one variable differing from a training example. see marlin and de freitas for a theoretical analysis of the asymptotic efficiency of pseudolikelihood. score matching and ratio matching hyv rinen score matching provides another consistent means of training a model without estimating z or its derivatives. the name score matching comes from terminology in which the derivatives of a log density with respect to its x log px are called its score. the strategy used by score matching argument is to minimize the expected squared difference between the derivatives of the model s log density with respect to the input and the derivatives of the data s log density with respect to the input l j x log pmodel l x log pdata min j this objective function avoids the difficulties associated with differentiating the partition function z because z is not a function of x and therefore xz initially score matching appears to have a new difficulty computing the score of the data distribution requires knowledge of the true distribution generating the training data pdata. fortunately minimizing the expected value of is l chapter confronting the partition function log pmodel equivalent to minimizing the expected value of l n j log pmodel x xj where n is the dimensionality of x because score matching requires taking derivatives with respect to x it is not applicable to models of discrete data. however the latent variables in the model may be discrete. like the pseudolikelihood score matching only works when we are able to evaluate log px and its derivatives directly. it is not compatible with methods that only provide a lower bound on log px because score matching requires the derivatives and second derivatives of log px and a lower bound conveys no information about its derivatives. this means that score matching cannot be applied to estimating models with complicated interactions between the hidden units such as sparse coding models or deep boltzmann machines. while score matching can be used to pretrain the first hidden layer of a larger model it has not been applied as a pretraining strategy for the deeper layers of a larger model. this is probably because the hidden layers of such models usually contain some discrete variables. while score matching does not explicitly have a negative phase it can be viewed as a version of contrastive divergence using a specific kind of markov chain the markov chain in this case is not gibbs sampling but hyv rinen rather a different approach that makes local moves guided by the gradient. score matching is equivalent to cd with this type of markov chain when the size of the local moves approaches zero. lyu generalized score matching to the discrete case made an error marlin et al. marlin et al. generalized score matching does not work in high in their derivation that was corrected by dimensional discrete spaces where the observed probability of many events is found that a more successful approach to extending the basic ideas of score matching to discrete data is ratio matching ratio matching applies specifically to binary data. ratio matching consists of minimizing the average over examples of the following objective function hyv rinen l x n pmodel pmodel f x chapter confronting the partition function f x j returns with the bit at position flipped. ratio matching avoids where the partition function using the same trick as the pseudolikelihood estimator in a ratio of two probabilities the partition function cancels out. marlin et al. found that ratio matching outperforms sml pseudolikelihood and gsm in terms of the ability of models trained with ratio matching to denoise test set images. j like the pseudolikelihood estimator ratio matching requires n evaluations of p per data point making its computational cost per update roughly n times higher than that of sml. as with the pseudolikelihood estimator ratio matching can be thought of as pushing down on all fantasy states that have only one variable different from a training example. since ratio matching applies specifically to binary data this means that it acts on all fantasy states within hamming distance of the data. ratio matching can also be useful as the basis for dealing with high-dimensional sparse data such as word count vectors. this kind of data poses a challenge for mcmc-based methods because the data is extremely expensive to represent in dense format yet the mcmc sampler does not yield sparse values until the model has learned to represent the sparsity in the data distribution. dauphin and bengio overcame this issue by designing an unbiased stochastic approximation to ratio matching. the approximation evaluates only a randomly selected subset of the terms of the objective and does not require the model to generate complete fantasy samples. see marlin and de freitas for a theoretical analysis of the asymptotic efficiency of ratio matching. denoising score matching in some cases we may wish to regularize score matching by fitting a distribution y q x y rather than the true pdata. the distribution qx y one that forms by adding a small amount of noise to psmoothed p data x y dy is a corruption process usually denoising score matching is especially useful because in practice we usually do not have access to the true pdata but rather only an empirical distribution defined by samples from it. any consistent estimator will given enough capacity make pmodel into a set of dirac distributions centered on the training points. smoothing by q helps to reduce this problem at the loss of the asymptotic consistency property chapter confronting the partition function introduced a procedure for described in section performing regularized score matching with the smoothing distribution q being normally distributed noise. kingma and lecun recall from section that several autoencoder training algorithms are equivalent to score matching or denoising score matching. these autoencoder training algorithms are therefore a way of overcoming the partition function problem. noise-contrastive estimation most techniques for estimating models with intractable partition functions do not provide an estimate of the partition function. sml and cd estimate only the gradient of the log partition function rather than the partition function itself. score matching and pseudolikelihood avoid computing quantities related to the partition function altogether. noise-contrastive estimation and hyvarinen takes a different strategy. in this approach the probability distribution estimated by the model is represented explicitly as log pmodel log x pmodel x c log z rather than where c is explicitly introduced as an approximation of estimating only the noise contrastive estimation procedure treats c as just another parameter and estimates and c simultaneously using the same algorithm for both. the resulting log p modelx thus may not correspond exactly to a valid probability distribution but will become closer and closer to being valid as the estimate of improves. c such an approach would not be possible using maximum likelihood as the criterion for the estimator. the maximum likelihood criterion would choose to set to create a valid probability distribution. c arbitrarily high rather than setting c nce works by reducing the unsupervised learning problem of estimating px to that of learning a probabilistic binary classifier in which one of the categories corresponds to the data generated by the model. this supervised learning problem is constructed in such a way that maximum likelihood estimation in this supervised is also applicable to problems with a tractable partition function where there is no need to introduce the extra parameter c. however it has generated the most interest as a means of estimating models with difficult partition functions. chapter confronting the partition function learning problem defines an asymptotically consistent estimator of the original problem. specifically we introduce a second distribution the noise distribution pnoisex. the noise distribution should be tractable to evaluate and to sample from. we can now construct a model over both x and a new binary class variable y in the new joint model we specify that pjoint y pjoint x y pmodel and pjoint x y pnoise in other words y is a switch variable that determines whether we will generate x from the model or from the noise distribution. we can construct a similar joint model of training data. in this case the switch variable determines whether we draw x from the data or from the noise distribution. formally ptrainy y p data x and ptrain x ptrainx pnoise y we can now just use standard maximum likelihood learning on the supervised learning problem of fitting pjoint to ptrain py c arg max ex log pjoint y train x the distribution pjoint is essentially a logistic regression model applied to the difference in log probabilities of the model and the noise distribution pjoint y x pmodel p model p noise pnoise pmodel exp log log pnoise pmodel pnoise pmodel pmodel x log p noise chapter confronting the partition function nce is thus simple to apply so long as log p model is easy to back-propagate through and as specified above pnoise is easy to evaluate order to evaluate pjoint and sample from order to generate the training data. nce is most successful when applied to problems with few random variables but can work well even if those random variables can take on a high number of values. for example it has been successfully applied to modeling the conditional distribution over a word given the context of the word and kavukcuoglu though the word may be drawn from a large vocabulary there is only one word. when nce is applied to problems with many random variables it becomes less efficient. the logistic regression classifier can reject a noise sample by identifying any one variable whose value is unlikely. this means that learning slows down greatly after pmodel has learned the basic marginal statistics. imagine learning a model of images of faces using unstructured gaussian noise as pnoise if pmodel learns about eyes it can reject almost all unstructured noise samples without having learned anything about other facial features such as mouths. the constraint that pnoise must be easy to evaluate and easy to sample from can be overly restrictive. when pnoise is simple most samples are likely to be too obviously distinct from the data to force pmodel to improve noticeably. like score matching and pseudolikelihood nce does not work if only a lower bound on p is available. such a lower bound could be used to construct a lower x but it can only be used to construct an upper bound on bound on pjointy x which appears in half the terms of the nce objective. likewise pjointy a lower bound on p noise is not useful because it provides only an upper bound on pjoint x y goodfellow when the model distribution is copied to define a new noise distribution before each gradient step nce defines a procedure called self-contrastive estimation whose expected gradient is equivalent to the expected gradient of maximum likelihood the special case of nce where the noise samples are those generated by the model suggests that maximum likelihood can be interpreted as a procedure that forces a model to constantly learn to distinguish reality from its own evolving beliefs while noise contrastive estimation achieves some reduced computational cost by only forcing the model to distinguish reality from a fixed baseline noise model. using the supervised task of classifying between training samples and generated samples the model energy function used in defining the classifier to provide a gradient on the model was introduced earlier in various forms et al. bengio chapter confronting the partition function noise contrastive estimation is based on the idea that a good generative model should be able to distinguish data from noise. a closely related idea is that a good generative model should be able to generate samples that no classifier can distinguish from data. this idea yields generative adversarial networks estimating the partition function while much of this chapter is dedicated to describing methods that avoid needing to compute the intractable partition function z associated with an undirected graphical model in this section we discuss several methods for directly estimating the partition function. estimating the partition function can be important because we require it if we wish to compute the normalized likelihood of data. this is often important in evaluating the model monitoring training performance and comparing models to each other. m for example imagine we have two models model a defining a probability distribution pax a b defining a probability za distribution pbx b pbx b a common way to compare the models zb is to evaluate and compare the likelihood that both models assign to an i.i.d. test dataset. suppose the test set consists of m examples if x pax a and model m i pax a i pbx b or equivalently if a is a better model than then we say that b at least it is a better model of the test set in the sense that it has a better test log-likelihood. unfortunately testing whether this condition holds requires knowledge of the partition function. unfortunately equation seems to require evaluating the log probability that the model assigns to each point which in turn requires evaluating the partition function. we can simplify the situation slightly by re-arranging equation into a form where we need to know only the ratio of the two model s partition functions log pax a log pbx b i i i log pax a pbx b m log z a z b log pa a i m log pb b m i chapter confronting the partition function m m a is a better model than b without knowing we can thus determine whether the partition function of either model but only their ratio. as we will see shortly we can estimate this ratio using importance sampling provided that the two models are similar. m if however we wanted to compute the actual probability of the test data under b we would need to compute the actual value of the partition either functions. that said if we knew the ratio of two partition functions r z b z a and we knew the actual value of just one of the two say z a we could compute the value of the other a or m z b a z b z a z a. a simple way to estimate the partition function is to use a monte carlo method such as simple importance sampling. we present the approach in terms of continuous variables using integrals but it can be readily applied to discrete variables by replacing the integrals with summation. we use a proposal distribution which supports tractable sampling and tractable evaluation of both the partition function and the unnormalized distribution p dx dx k k dx x s t in the last line we make a monte carlo estimator of the integral using samples drawn from and then weight each sample with the ratio of the unnormalized and the proposal we see also that this approach allows us to estimate the ratio between the partition functions as k k x s t p this value can then be used directly to compare two models as described in equation chapter confronting the partition function if the distribution is close to equation can be an effective way of estimating the partition function unfortunately most of the time is both complicated multimodal and defined over a high dimensional space. it is difficult to find a tractable that is simple enough to evaluate while still being close enough to to result in a high quality approximation. if and are not close most samples from will have low probability under and therefore make negligible contribution to the sum in equation having few samples with significant weights in this sum will result in an estimator that is of poor quality due to high variance. this can be understood quantitatively through an estimate of the variance of our estimate var k this quantity is largest when there is significant deviation in the values of the importance weights we now turn to two related strategies developed to cope with the challenging task of estimating partition functions for complex distributions over highdimensional spaces annealed importance sampling and bridge sampling. both start with the simple importance sampling strategy introduced above and both attempt to overcome the problem of the proposal being too far from p by introducing intermediate distributions that attempt to and bridge the gap between annealed importance sampling in situations where d is large where there is little overlap between and a strategy called annealed importance sampling attempts to bridge the gap by introducing intermediate distributions jarzynski neal consider a sequence of distributions p n n so that the first and last distributions in the sequence are and respectively. with p n this approach allows us to estimate the partition function of a multimodal distribution defined over a high-dimensional space as the distribution defined by a trained rbm. we begin with a simpler model with a known partition function as an rbm with zeroes for weights and estimate the ratio between the two model s partition functions. the estimate of this ratio is based on the estimate of the ratios of a sequence of many similar distributions such as the sequence of rbms with weights interpolating between zero and the learned weights. chapter confronting the partition function we can now write the ratio as z n z n z n z n z n z z n z z z z z z j are sufficiently n provided the distributions p j j close we can reliably estimate each of the factors z z j sampling and then use these to obtain an estimate of and p j for all using simple importance p n where do these intermediate distributions come from? just as the original proposal distribution is a design choice so is the sequence of distributions p that is it can be specifically constructed to suit the problem domain. one general-purpose and popular choice for the intermediate distributions is to use the weighted geometric average of the target distribution and the starting proposal distribution which the partition function is known j p j p j in order to sample from these intermediate distributions we define a series of x that define the conditional probability given we are currently at x. the transition markov chain transition functions t j distribution of transitioning to x operator t j x is defined to leave p j p j p j invariant x dx j these transitions may be constructed as any markov chain monte carlo method metropolis-hastings gibbs including methods involving multiple passes through all of the random variables or other kinds of iterations. the ais sampling strategy is then to generate samples from and then use the transition operators to sequentially generate samples from the intermediate distributions until we arrive at samples from the target distribution for k k sample x chapter confronting the partition function sample x sample x n sample x n t x t n t n n n x n x n end for sample k we can derive the importance weight by chaining together the importance weights for the jumps between the intermediate distributions given in equation w p p p p n n to avoid numerical issues such as overflow it is probably best to compute log w by adding and subtracting log probabilities rather than computing w by multiplying and dividing probabilities. with the sampling procedure thus defined and the importance weights given in equation the estimate of the ratio of partition functions is given by k k w in order to verify that this procedure defines a valid importance sampling scheme we can show that the ais procedure corresponds to simple importance sampling on an extended state space with points sampled over the product space to do this we define the distribution over the extended space as x n neal px x n n p t n x t n n x n t x where ta is the reverse of the transition operator defined by t a an application of bayes rule tax x pax pa t ax x pa pa tax x plugging the above into the expression for the joint distribution on the extended state space given in equation we get px x n x chapter confronting the partition function p n n p n t n x n p i p i i t i x i n n p n t n x n p p p i t i x i we now have means of generating samples from the joint proposal distribution q over the extended sample via a sampling scheme given above with the joint distribution given by qx x n x p x t n x n we have a joint distribution on the extended space given by equation qx which we will draw samples it remains to determine the importance weights taking as the proposal distribution on the extended state space from x n w px qx x n x n x p n n p p these weights are the same as proposed for ais. thus we can interpret ais as simple importance sampling applied to an extended state and its validity follows immediately from the validity of importance sampling. neal annealed importance sampling was first discovered by jarzynski it is currently the most common and then again independently by way of estimating the partition function for undirected probabilistic models. the reasons for this may have more to do with the publication of an influential paper and murray describing its application to estimating the partition function of restricted boltzmann machines and deep belief networks than with any inherent advantage the method has over the other method described below. a discussion of the properties of the ais estimator its variance and efficiency can be found in neal bridge sampling is another method that like ais addresses the bridge sampling shortcomings of importance sampling. rather than chaining together a series of bennett chapter confronting the partition function intermediate distributions bridge sampling relies on a single distribution p known as the bridge to interpolate between a distribution with known partition function and a distribution for which we are trying to estimate the partition function bridge sampling estimates the ratio as the ratio of the expected impor tance weights between and p and between and p p p k z z k if the bridge distribution p is chosen carefully to have a large overlap of support with both and then bridge sampling can allow the distance between two distributions more formally p to be much larger than with standard importance sampling. it can be shown that the optimal bridging distribution is given by p x where r at first this appears to be an unworkable solution r x as it would seem to require the very quantity we are trying to estimate however it is possible to start with a coarse estimate of r and use the resulting bridge distribution to refine our estimate iteratively that is we iteratively re-estimate the ratio and use each iteration to update the value of neal linked importance sampling both ais and bridge sampling have their advantages. if dkl is not too large and are sufficiently close bridge sampling can be a more effective means of estimating the ratio of partition functions than ais. if however the two distributions are too far apart for a single distribution p to bridge the gap then one can at least use ais with potentially many intermediate distributions to span the distance between and neal showed how his linked importance sampling method leveraged the power of the bridge sampling strategy to bridge the intermediate distributions used in ais to significantly improve the overall partition function estimates. estimating the partition function while training while ais has become accepted as the standard method for estimating the partition function for many undirected models it is sufficiently computationally intensive that it remains infeasible to use during training. however alternative strategies that have been explored to maintain an estimate of the partition function throughout training using a combination of bridge sampling short-chain ais and parallel tempering devised a scheme to track the partition function of an et al. desjardins chapter confronting the partition function rbm throughout the training process. the strategy is based on the maintenance of independent estimates of the partition functions of the rbm at every temperature operating in the parallel tempering scheme. the authors combined bridge sampling estimates of the ratios of partition functions of neighboring chains from parallel tempering with ais estimates across time to come up with a low variance estimate of the partition functions at every iteration of learning. the tools described in this chapter provide many different ways of overcoming the problem of intractable partition functions but there can be several other difficulties involved in training and using generative models. foremost among these is the problem of intractable inference which we confront next. chapter approximate inference many probabilistic models are difficult to train because it is difficult to perform inference in them. in the context of deep learning we usually have a set of visible variables v and a set of latent variables h. the challenge of inference usually refers to the difficult problem of computing ph v or taking expectations with respect to it. such operations are often necessary for tasks like maximum likelihood learning. many simple graphical models with only one hidden layer such as restricted boltzmann machines and probabilistic pca are defined in a way that makes inference operations like computing ph v or taking expectations with respect to it simple. unfortunately most graphical models with multiple layers of hidden variables have intractable posterior distributions. exact inference requires an exponential amount of time in these models. even some models with only a single layer such as sparse coding have this problem. in this chapter we introduce several of the techniques for confronting these we will describe how to use intractable inference problems. later in chapter these techniques to train probabilistic models that would otherwise be intractable such as deep belief networks and deep boltzmann machines. intractable inference problems in deep learning usually arise from interactions between latent variables in a structured graphical model. see figure for some examples. these interactions may be due to direct interactions in undirected models or explaining away interactions between mutual ancestors of the same visible unit in directed models. chapter approximate inference osindero and hinton figure intractable inference problems in deep learning are usually the result of interactions between latent variables in a structured graphical model. these can be due to edges directly connecting one latent variable to another or due to longer paths that are activated when the child of a v-structure is observed. semi-restricted boltzmann machine with connections between hidden units. these direct connections between latent variables make the posterior distribution intractable due to large cliques of latent variables. a deep boltzmann machine organized into layers of variables without intra-layer connections still has an intractable posterior distribution due to the connections between layers. this directed model has interactions between latent variables when the visible variables are observed because every two latent variables are co-parents. some probabilistic models are able to provide tractable inference over the latent variables despite having one of the graph structures depicted above. this is possible if the conditional probability distributions are chosen to introduce additional independences beyond those described by the graph. for example probabilistic pca has the graph structure shown in the right yet still has simple inference due to special properties of the specific conditional distributions it uses conditionals with mutually orthogonal basis vectors. chapter approximate inference inference as optimization many approaches to confronting the problem of difficult inference make use of the observation that exact inference can be described as an optimization problem. approximate inference algorithms may then be derived by approximating the underlying optimization problem. to construct the optimization problem assume we have a probabilistic model consisting of observed variables v and latent variables h. we would like to compute the log probability of the observed data log pv sometimes it is too difficult to compute log pv if it is costly to marginalize out h. instead we can compute q on log pv this bound is called the evidence lower a lower bound bound another commonly used name for this lower bound is the negative variational free energy. specifically the evidence lower bound is defined to be l l v q log p v dkl q h v p h v where q is an arbitrary probability distribution over l h because the difference between log pv and q is given by the kl l divergence and because the kl divergence is always non-negative we can see that always has at most the same value as the desired log probability. the two are q is the same distribution as p h v equal if and only if l surprisingly simple algebra shows that we can rearrange can be considerably easier to compute for some distributions q. into a much more convenient form l l v q log p v log p v log p v dkl q log eh q log eh q h v q p q p p h v h v h v h v v p q h v log p h v log p v q eh q h v q eh p h v log p v log this yields the more canonical definition of the evidence lower bound l for an appropriate choice of q is tractable to compute. for any choice that are better of q provides a lower bound on the likelihood. for qh v p h v h q l v q q eh l chapter approximate inference approximations of ph v l closer to log pv. when q v v l log p v l q l the lower bound p v will be tighter in other words the approximation is perfect and exact inference maximizes we can thus think of inference as the procedure for finding the q that maximizes perfectly by searching over a family of functions q that includes ph v throughout this chapter we will show how to derive different forms of approximate inference by using approximate optimization to find q. we can make the optimization procedure less expensive but approximate by restricting the family of distributions q the optimization is allowed to search over or by using an imperfect optimization procedure that may not completely maximize but merely increase it by a significant amount. l no matter what choice of q we use is a lower bound. we can get tighter or looser bounds that are cheaper or more expensive to compute depending on how we choose to approach this optimization problem. we can obtain a poorly matched q but reduce the computational cost by using an imperfect optimization procedure or by using a perfect optimization procedure over a restricted family of q distributions. l expectation maximization the first algorithm we introduce based on maximizing a lower bound is the expectation maximization algorithm a popular training algorithm for models with latent variables. we describe here a view on the em algorithm developed by unlike most of the other algorithms we describe in this chapter em is not an approach to approximate inference but rather an approach to learning with an approximate posterior. neal and hinton l the em algorithm consists of alternating between two steps until convergence the e-step step let denote the value of the parameters at the beginning of the step. set qh v for all indices i of the training examples v we want to train on batch and minibatch variants are valid. by this we mean q is defined in terms of the current parameter value of if we vary then ph v will change but q will remain equal to p h v v ph h v the m-step step completely or partially maximize l i q chapter approximate inference with respect to using your optimization algorithm of choice. l step we maximize respect to this can be viewed as a coordinate ascent algorithm to maximize with respect to q and on the other we maximize l on one with l stochastic gradient ascent on latent variable models can be seen as a special case of the em algorithm where the m step consists of taking a single gradient step. other variants of the em algorithm can make much larger steps. for some model families the m step can even be performed analytically jumping all the way to the optimal solution for given the current q even though the e-step involves exact inference we can think of the em algorithm as using approximate inference in some sense. specifically the m-step assumes that the same value of q can be used for all values of this will introduce and the true log pv as the m-step moves further and further a gap between away from the value used in the e-step. fortunately the e-step reduces the gap to zero again as we enter the loop for the next time. l the em algorithm contains a few different insights. first there is the basic structure of the learning process in which we update the model parameters to improve the likelihood of a completed dataset where all missing variables have their values provided by an estimate of the posterior distribution. this particular insight is not unique to the em algorithm. for example using gradient descent to maximize the log-likelihood also has this same property the log-likelihood gradient computations require taking expectations with respect to the posterior distribution over the hidden units. another key insight in the em algorithm is that we can continue to use one value of q even after we have moved to a different value of this particular insight is used throughout classical machine learning to derive large m-step updates. in the context of deep learning most models are too complex to admit a tractable solution for an optimal large m-step update so this second insight which is more unique to the em algorithm is rarely used. map inference and sparse coding we usually use the term inference to refer to computing the probability distribution over one set of variables given another. when training probabilistic models with latent variables we are usually interested in computing ph v an alternative form of inference is to compute the single most likely value of the missing variables rather than to infer the entire distribution over their possible values. in the context chapter approximate inference of latent variable models this means computing h v p arg max h h this is known as maximum a posteriori inference abbreviated map inference. map inference is usually not thought of as approximate inference it does l compute the exact most likely value of h however if we wish to develop a q then it is helpful to think of map h learning process based on maximizing inference as a procedure that provides a value of q. in this sense we can think of map inference as approximate inference because it does not provide the optimal q. recall from section l v that exact inference consists of maximizing q q eh p h v h q with respect to q over an unrestricted family of probability distributions using an exact optimization algorithm. we can derive map inference as a form of approximate inference by restricting the family of distributions q may be drawn from. specifically we require to take on a dirac distribution q h v q h l that this means that we can now control q entirely via dropping terms of do not vary with we are left with the optimization problem arg max log p h v which is equivalent to the map inference problem h arg max h h v p we can thus justify a learning procedure similar to em in which we alternate and then update to increase between performing map inference to infer h l log ph v. as with em this is a form of coordinate ascent on where we with respect to q and using alternate between using inference to optimize l with respect to the procedure as a whole can parameter updates to optimize is a lower bound on log pv. in the case of map be justified by the fact that inference this justification is rather vacuous because the bound is infinitely loose due to the dirac distribution s differential entropy of negative infinity. however adding noise to would make the bound meaningful again. l l chapter approximate inference map inference is commonly used in deep learning as both a feature extractor and a learning mechanism. it is primarily used for sparse coding models. recall from section that sparse coding is a linear factor model that imposes a sparsity-inducing prior on its hidden units. a common choice is a factorial laplace prior with p h i hi e the visible units are then generated by performing a linear transformation and adding noise n p x h v w h b computing or even representing ph v is difficult. every pair of variables hi and hj are both parents of v. this means that when v is observed the graphical model contains an active path connecting hi and hj. all of the hidden units thus participate in one massive clique in ph v if the model were gaussian then these interactions could be modeled efficiently via the covariance matrix but the sparse prior makes these interactions non-gaussian. is intractable so is the computation of the log-likelihood and its gradient. we thus cannot use exact maximum likelihood learning. instead we use map inference and learn the parameters by maximizing the elbo defined by the dirac distribution around the map estimate of because ph v if we concatenate all of the h vectors in the training set into a matrix h and then the sparse coding learning vectors into a matrix v concatenate all of the process consists of minimizing v j w hij ij ij v hw ij most applications of sparse coding also involve weight decay or a constraint on the norms of the columns of w in order to prevent the pathological solution with extremely small and large w h we can minimize j by alternating between minimization with respect to h and minimization with respect to w both sub-problems are convex. in fact the minimization with respect to w is just a linear regression problem. however minimization of j with respect to both arguments is usually not a convex problem. minimization with respect to h requires specialized algorithms such as the feature-sign search algorithm lee et al. chapter approximate inference variational inference and learning l l q is a lower bound on we have seen how the evidence lower bound l with respect to q and log pv how inference can be viewed as maximizing with respect to we have seen how learning can be viewed as maximizing that the em algorithm allows us to make large learning steps with a fixed q and that learning algorithms based on map inference allow us to learn using a point estimate of ph v rather than inferring the entire distribution. now we develop the more general approach to variational learning. the core idea behind variational learning is that we can maximize over a restricted family of distributions q this family should be chosen so that it is easy to compute eq log ph v a typical way to do this is to introduce assumptions about how factorizes. q l a common approach to variational learning is to impose the restriction that q is a factorial distribution h v q v. q h i i this is called the mean field approach. more generally we can impose any graphical model structure we choose on q to flexibly determine how many interactions we want our approximation to capture. this fully general graphical model approach is called structured variational inference saul and jordan the beauty of the variational approach is that we do not need to specify a specific parametric form for q. we specify how it should factorize but then the optimization problem determines the optimal probability distribution within those factorization constraints. for discrete latent variables this just means that we use traditional optimization techniques to optimize a finite number of variables describing the q distribution. for continuous latent variables this means that we use a branch of mathematics called calculus of variations to perform optimization over a space of functions and actually determine which function should be used to represent q calculus of variations is the origin of the names variational learning and variational inference though these names apply even when the latent variables are discrete and calculus of variations is not needed. in the case of continuous latent variables calculus of variations is a powerful technique that removes much of the responsibility from the human designer of the model who now must specify only how q factorizes rather than needing to guess how to design a specific that can accurately approximate the posterior. l we ph v with respect to q as minimizing dklqh v ph v dkl v q is defined to be log pv can think of maximizing because l q chapter approximate inference pmodel. as illustrated in figure in this sense we are fitting q to p however we are doing so with the opposite direction of the kl divergence than we are used to using for fitting an approximation. when we use maximum likelihood learning to fit a model to data we minimize d klpdata this means that maximum likelihood encourages the model to have high probability everywhere that the data has high probability while our optimization-based inference procedure encourages q to have low probability everywhere the true posterior has low probability. both directions of the kl divergence can have desirable and undesirable properties. the choice of which to use depends on which properties are the highest priority for each application. in the case of the inference optimization problem we choose to use dklqh v ph v for computational reasons. specifically computing d klqh v ph v involves evaluating expectations with respect to q so by designing q to be simple we can simplify the required expectations. the opposite direction of the kl divergence would require computing expectations with respect to the true posterior. because the form of the true posterior is determined by the choice of model we cannot design a reduced-cost approach to computing d kl q h v p h v exactly. discrete latent variables variational inference with discrete latent variables is relatively straightforward. we define a distribution q typically one where each factor of q is just defined by a lookup table over discrete states. in the simplest case h is binary and we make the mean field assumption that hi. in this case we can parametrize q with a vector h whose entries are probabilities. then q h i factorizes over each individual hi. v q after determining how to represent q we simply optimize its parameters. in the case of discrete latent variables this is just a standard optimization problem. in principle the selection of q could be done with any optimization algorithm such as gradient descent. because this optimization must occur in the inner loop of a learning algorithm it must be very fast. to achieve this speed we typically use special optimization algorithms that are designed to solve comparatively small and simple problems in very few iterations. a popular choice is to iterate fixed point equations in other words to solve l hi for hi we repeatedly update different elements of h until we satisfy a convergence chapter approximate inference criterion. to make this more concrete we show how to apply variational inference to the binary sparse coding model present here the model developed by henniges et al. but demonstrate traditional generic mean field applied to the model while they introduce a specialized algorithm. this derivation goes into considerable mathematical detail and is intended for the reader who wishes to fully resolve any ambiguity in the high-level conceptual description of variational inference and learning we have presented so far. readers who do not plan to derive or implement variational learning algorithms may safely skip to the next section without missing any new high-level concepts. readers who proceed with the binary sparse coding example are encouraged to review the list of useful properties of functions that commonly arise in probabilistic models in section we use these properties liberally throughout the following derivations without highlighting exactly where we use each one. in the binary sparse coding model the input v n is generated from the model by adding gaussian noise to the sum of m different components which can each be present or absent. each component is switched on or off by the corresponding hidden unit in h m r p h i bi n p v h v w h where b is a learnable set of biases w is a learnable weight matrix and is a learnable diagonal precision matrix. training this model with maximum likelihood requires taking the derivative with respect to the parameters. consider the derivative with respect to one of the biases log v bi b i p p b i p v h p b i h p p v h p h p v h p h v p p b i p bi p h ph v b i log p h chapter approximate inference figure the graph structure of a binary sparse coding model with four hidden units. graph structure of ph v note that the edges are directed and that every two hidden units are co-parents of every visible unit. ph v in order to account for the active paths between co-parents the posterior distribution needs an edge between all of the hidden units. the graph structure of learning instead. we can make a mean field approximation is a complicated distribution. see figure this requires computing expectations with respect to ph v unfortunately ph v for the graph structure of ph v and ph v the posterior distribution corresponds to the complete graph over the hidden units so variable elimination algorithms do not help us to compute the required expectations any faster than brute force. we can resolve this difficulty by using variational inference and variational h v q v. q h i i the latent variables of the binary sparse coding model are binary so to represent a factorial q we simply need to model m bernoulli distributions qhi v. a natural way to represent the means of the bernoulli distributions is with a vector h of v hi we impose a restriction that h i is never probabilities with qhi equal to or to in order to avoid errors when computing for example log hi. hi we will see that the variational inference equations never assign or to chapter approximate inference or analytically. however in a software implementation machine rounding error could result in values. in software we may wish to implement binary sparse coding using an unrestricted vector of variational parameters z and obtain h via the relation h we can thus safely compute log hi on a computer by using the identity log zi zi relating the sigmoid and the softplus. to begin our derivation of variational learning in the binary sparse coding model we show that the use of this mean field approximation makes learning tractable. q the evidence lower bound is given by l v qlog qlog log h q p v h p h v log p h m q h v h v log hi hilog bi log eh q log i q m m m n n n log vi log hi hilog hi b i i exp hilog b i hi hi hilog bi log hi log i i i h w ij hj wijwik hj hk j k j while these equations are somewhat unappealing aesthetically they show that can be expressed in a small number of simple arithmetic operations. the evidence lower bound as a replacement for the intractable log-likelihood. is therefore tractable. we can use l l l in principle we could simply run gradient ascent on both v and h and this would make a perfectly acceptable combined inference and training algorithm. usually however we do not do this for two reasons. first this would require storing h for each v. we typically prefer algorithms that do not require perexample memory. it is difficult to scale learning algorithms to billions of examples if we must remember a dynamically updated vector associated with each example. chapter approximate inference second we would like to be able to extract the features h very quickly in order to recognize the content of v in a realistic deployed setting we would need to be able to compute h in real time. for both these reasons we typically do not use gradient descent to compute the mean field parameters h. instead we rapidly estimate them with fixed point equations. the idea behind fixed point equations is that we are seeking a local maximum with respect to h where h we cannot efficiently solve this equation with respect to all of h simultaneously. however we can solve for a single variable h l h l hi we can then iteratively apply the solution to the equation for i m and repeat the cycle until we satisfy a converge criterion. common convergence criteria include stopping when a full cycle of updates does not improve by more than some tolerance amount or when the cycle does not change h by more than some amount. l iterating mean field fixed point equations is a general technique that can provide fast variational inference in a broad variety of models. to make this more concrete we show how to derive the updates for the binary sparse coding model in particular. first we must write an expression for the derivatives with respect to hi. to do so we substitute equation into the left side of equation hj bj log h j hj bj hi hi h m l n log log bi log j j v j hi w ji n j vjwji hj h k jwj bi log h i w jk hk wjkwjl hk hl l k wjkwji hk k i chapter approximate inference log hi hi v wi w wi wi w hj. j i to apply the fixed point update inference rule we solve for the hi that sets equation to hi bi v wi wi w wi w hj j i at this point we can see that there is a close connection between recurrent neural networks and inference in graphical models. specifically the mean field fixed point equations defined a recurrent neural network. the task of this network is to perform inference. we have described how to derive this network from a model description but it is also possible to train the inference network directly. several ideas based on this theme are described in chapter in the case of binary sparse coding we can see that the recurrent network connection specified by equation consists of repeatedly updating the hidden units based on the changing values of the neighboring hidden units. the input always sends a fixed message of v w to the hidden units but the hidden units constantly update the message they send to each other. specifically two units hi and hj inhibit each other when their weight vectors are aligned. this is a form of competition between two hidden units that both explain the input only the one that explains the input best will be allowed to remain active. this competition is the mean field approximation s attempt to capture the explaining away interactions in the binary sparse coding posterior. the explaining away effect actually should cause a multi-modal posterior so that if we draw samples from the posterior some samples will have one unit active other samples will have the other unit active but very few samples have both active. unfortunately explaining away interactions cannot be modeled by the factorial q used for mean field so the mean field approximation is forced to choose one mode to model. this is an instance of the behavior illustrated in figure we can rewrite equation into an equivalent form that reveals some further insights hi bi v j i wj hj wi wi w hj in this reformulation we see the input at each step as consisting of v rather than v. we can thus think of unit i as attempting to encode the residual wj i j chapter approximate inference error in v given the code of the other units. we can thus think of sparse coding as an iterative autoencoder that repeatedly encodes and decodes its input attempting to fix mistakes in the reconstruction after each iteration. in this example we have derived an update rule that updates a single unit at a time. it would be advantageous to be able to update more units simultaneously. some graphical models such as deep boltzmann machines are structured in such a way that we can solve for many entries of h simultaneously. unfortunately binary sparse coding does not admit such block updates. instead we can use a heuristic technique called damping to perform block updates. in the damping approach we solve for the individually optimal values of every element of h then move all of the values in a small step in that direction. this approach is no longer guaranteed at each step but works well in practice for many models. see koller to increase and friedman for more information about choosing the degree of synchrony and damping strategies in message passing algorithms. l calculus of variations before continuing with our presentation of variational learning we must briefly introduce an important set of mathematical tools used in variational learning calculus of variations. many machine learning techniques are based on minimizing a function j by n for which it takes on its minimal value. this can finding the input vector be accomplished with multivariate calculus and linear algebra by solving for the j in some cases we actually want to solve for a critical points where function fx such as when we want to find the probability density function over some random variable. this is what calculus of variations enables us to do. r a function of a function f is known as a functional j much as we can take partial derivatives of a function with respect to elements of its vectorvalued argument we can take functional derivatives also known as variational derivatives of a functional j f with respect to individual values of the function f at any specific value of x. the functional derivative of the functional j with respect to the value of the function is denoted at point j x f f x a complete formal development of functional derivatives is beyond the scope of this book. for our purposes it is sufficient to state that for differentiable functions f x with continuous derivatives that and differentiable functions g y f g f x x d y g f x chapter approximate inference to gain some intuition for this identity one can think of fx as being a vector with uncountably many elements indexed by a real vector x. in this incomplete view the identity providing the functional derivatives is the same as we would obtain for a vector n indexed by positive integers r i j g j j i g i i many results in other machine learning publications are presented using the more general euler-lagrange equation which allows g to depend on the derivatives of f as well as the value of f but we do not need this fully general form for the results presented in this book. to optimize a function with respect to a vector we take the gradient of the function with respect to the vector and solve for the point where every element of the gradient is equal to zero. likewise we can optimize a functional by solving for the function where the functional derivative at every point is equal to zero. as an example of how this process works consider the problem of finding the r that has maximal differential entropy. probability distribution function over x recall that the entropy of a probability distribution is defined as p x h p ex log x for continuous values the expectation is an integral h p p x log p x dx. we cannot simply maximize hp with respect to the function px because the result might not be a probability distribution. instead we need to use lagrange multipliers to add a constraint that px integrates to also the entropy increases without bound as the variance increases. this makes the question of which distribution has the greatest entropy uninteresting. instead we ask which distribution has maximal entropy for fixed variance finally the problem is underdetermined because the distribution can be shifted arbitrarily without changing the entropy. to impose a unique solution we add a constraint that the mean of the distribution be the lagrangian functional for this optimization problem is l p p p x dx e x x e chapter approximate inference x p x x x x p x log p x dx to minimize the lagrangian with respect to p we set the functional derivatives equal to x l p x x x log p x this condition now tells us the functional form of px. by algebraically re-arranging the equation we obtain p x exp x we never assumed directly that p x would take this functional form we obtained the expression itself by analytically minimizing a functional. to finish the minimization problem we must choose the values to ensure that all of our constraints are satisfied. we are free to choose any values because the gradient of the lagrangian with respect to the variables is zero so long as the constraints are satisfied. to satisfy all of the constraints we may set and to obtain log n p x x this is one reason for using the normal distribution when we do not know the true distribution. because the normal distribution has the maximum entropy we impose the least possible amount of structure by making this assumption. while examining the critical points of the lagrangian functional for the entropy we found only one critical point corresponding to maximizing the entropy for fixed variance. what about the probability distribution function that minimizes the entropy? why did we not find a second critical point corresponding to the minimum? the reason is that there is no specific function that achieves minimal entropy. as functions place more probability density on the two points x and x and place less probability density on all other values of x they lose entropy while maintaining the desired variance. however any function placing exactly zero mass on all but two points does not integrate to one and is not a valid probability distribution. there thus is no single minimal entropy probability distribution function much as there is no single minimal positive real number. instead we can say that there is a sequence of probability distributions converging toward putting mass only on these two points. this degenerate scenario may be chapter approximate inference described as a mixture of dirac distributions. because dirac distributions are not described by a single probability distribution function no dirac or mixture of dirac distribution corresponds to a single specific point in function space. these distributions are thus invisible to our method of solving for a specific point where the functional derivatives are zero. this is a limitation of the method. distributions such as the dirac must be found by other methods such as guessing the solution and then proving that it is correct. continuous latent variables when our graphical model contains continuous latent variables we may still perform variational inference and learning by maximizing however we must now use calculus of variations when maximizing with respect to h v l q in most cases practitioners need not solve any calculus of variations problems themselves. instead there is a general equation for the mean field fixed point updates. if we make the mean field approximation h v q q h i v i l v for all j and fix qhj normalizing the unnormalized distribution qh v exp q h i eh i i i then the optimal qh i v log p h v may be obtained by so long as p does not assign probability to any joint configuration of variables. carrying out the expectation inside the equation will yield the correct functional form of qhi v. it is only necessary to derive functional forms of q directly using calculus of variations if one wishes to develop a new form of variational learning equation yields the mean field approximation for any probabilistic model. equation is a fixed point equation designed to be iteratively applied for each value of i repeatedly until convergence. however it also tells us more than that. it tells us the functional form that the optimal solution will take whether we arrive there by fixed point equations or not. this means we can take the functional form from that equation but regard some of the values that appear in it as parameters that we can optimize with any optimization algorithm we like. as an example consider a very simple probabilistic model with latent variables i and h h we could actually simplify this model by integrating pv out h the result is just a gaussian distribution over v. the model itself is not and just one visible variable v. suppose that ph r h n n chapter approximate inference interesting we have constructed it only to provide a simple demonstration of how calculus of variations may be applied to probabilistic modeling. the true posterior is given up to a normalizing constant by p h v p v p v h exp h exp v due to the presence of the terms multiplying and together we can see that the true posterior does not factorize over and applying equation we find that v log p h v v q h exp exp from this we can see that there are effectively only two values we need to obtain from qh we obtain qh v and writing these as qh v eh and q h v exp h h w n from this we can see that q has the functional form of a gaussian. we can where and diagonal are variational thus conclude q v parameters that we can optimize using any technique we choose. it is important to recall that we did not ever assume that q would be gaussian its gaussian form was derived automatically by using calculus of variations to maximize q with chapter approximate inference l respect to functional form of using the same approach on a different model could yield a different this was of course just a small case constructed for demonstration purposes. for examples of real applications of variational learning with continuous variables in the context of deep learning see goodfellow et al. interactions between learning and inference using approximate inference as part of a learning algorithm affects the learning process and this in turn affects the accuracy of the inference algorithm. specifically the training algorithm tends to adapt the model in a way that makes the approximating assumptions underlying the approximate inference algorithm become more true. when training the parameters variational learning increases q log eh for a specific v this increases ph v under qh v and decreases ph v under h v q p v h for values of h that have high probability for values of h that have low probability this behavior causes our approximating assumptions to become self-fulfilling prophecies. if we train the model with a unimodal approximate posterior we will obtain a model with a true posterior that is far closer to unimodal than we would have obtained by training the model with exact inference. l computing the true amount of harm imposed on a model by a variational approximation is thus very difficult. there exist several methods for estimating log pv. we often estimate log pv after training the model and find that q is small. from this we can conclude that our variational the gap with approximation is accurate for the specific value of that we obtained from the learning process. we should not conclude that our variational approximation is accurate in general or that the variational approximation did little harm to the learning process. to measure the true amount of harm induced by the variational l max log p v it is possible for approximation we would need to know l log pv q to hold simultaneously. if maxq because induces too complicated of a posterior distribution for our q family to capture then the learning process will never approach such a problem is very difficult to detect because we can only know for sure that it happened if we have a superior learning algorithm that can find for comparison. log pv and log p q log pv chapter approximate inference learned approximate inference l we have seen that inference can be thought of as an optimization procedure that increases the value of a function explicitly performing optimization via iterative procedures such as fixed point equations or gradient-based optimization is often very expensive and time-consuming. many approaches to inference avoid this expense by learning to perform approximate inference. specifically we can l think of the optimization process as a function f that maps an input v to an approximate distribution q q. once we think of the multi-step iterative optimization process as just being a function we can approximate it with a neural network that implements an approximation f arg maxq wake-sleep et al. frey one of the main difficulties with training a model to infer h from v is that we do not have a supervised training set with which to train the model. given a v we do not know the appropriate h. the mapping from v to h depends on the choice of model family and evolves throughout the learning process as changes. the wake-sleep algorithm resolves this problem by drawing samples of both h and v from the model distribution. for example in a directed model this can be done cheaply by performing ancestral sampling beginning at h and ending at v. the inference network can then be trained to perform the reverse mapping predicting which h caused the present v. the main drawback to this approach is that we will only be able to train the inference network on values of v that have high probability under the model. early in learning the model distribution will not resemble the data distribution so the inference network will not have an opportunity to learn on samples that resemble data. et al. in section we saw that one possible explanation for the role of dream sleep in human beings and animals is that dreams could provide the negative phase samples that monte carlo training algorithms use to approximate the negative gradient of the log partition function of undirected models. another possible explanation for biological dreaming is that it is providing samples from ph v which can be used to train an inference network to predict h given v in some senses this explanation is more satisfying than the partition function explanation. monte carlo algorithms generally do not perform well if they are run using only the positive phase of the gradient for several steps then with only the negative phase of the gradient for several steps. human beings and animals are usually awake for several consecutive hours then asleep for several consecutive hours. it is chapter approximate inference l not readily apparent how this schedule could support monte carlo training of an undirected model. learning algorithms based on maximizing can be run with prolonged periods of improving q and prolonged periods of improving however. if the role of biological dreaming is to train networks for predicting q then this explains how animals are able to remain awake for several hours longer they are awake the greater the gap between will remain a lower bound and to remain asleep for several hours generative model itself is not modified during sleep without damaging their internal models. of course these ideas are purely speculative and there is no hard evidence to suggest that dreaming accomplishes either of these goals. dreaming may also serve reinforcement learning rather than probabilistic modeling by sampling synthetic experiences from the animal s transition model on which to train the animal s policy. or sleep may serve some other purpose not yet anticipated by the machine learning community. and log pv but l l other forms of learned inference this strategy of learned approximate inference has also been applied to other models. salakhutdinov and larochelle showed that a single pass in a learned inference network could yield faster inference than iterating the mean field fixed point equations in a dbm. the training procedure is based on running the inference network then applying one step of mean field to improve its estimates and training the inference network to output this refined estimate instead of its original estimate. we have already seen in section that the predictive sparse decomposition model trains a shallow encoder network to predict a sparse code for the input. this can be seen as a hybrid between an autoencoder and sparse coding. it is possible to devise probabilistic semantics for the model under which the encoder may be viewed as performing learned approximate map inference. due to its shallow encoder psd is not able to implement the kind of competition between units that we have seen in mean field inference. however that problem can be remedied by training a deep encoder to perform learned approximate inference as in the ista technique gregor and lecun learned approximate inference has recently become one of the dominant approaches to generative modeling in the form of the variational autoencoder kingma rezende et al. in this elegant approach there is no need to construct explicit targets for the inference network. instead the inference network l and then the parameters of the inference network are is simply used to define adapted to increase this model is described in depth later in section l chapter approximate inference using approximate inference it is possible to train and use a wide variety of models. many of these models are described in the next chapter. chapter deep generative models in this chapter we present several of the specific kinds of generative models that can be built and trained using the techniques presented in chapters all of these models represent probability distributions over multiple variables in some way. some allow the probability distribution function to be evaluated explicitly. others do not allow the evaluation of the probability distribution function but support operations that implicitly require knowledge of it such as drawing samples from the distribution. some of these models are structured probabilistic models described in terms of graphs and factors using the language of graphical models presented in chapter others can not easily be described in terms of factors but represent probability distributions nonetheless. boltzmann machines ackley et al. hinton boltzmann machines were originally introduced as a general connectionist approach to learning arbitrary probability distributions over binary vectors et al. hinton and sejnowski variants of the boltzmann machine that include other kinds of variables have long ago surpassed the popularity of the original. in this section we briefly introduce the binary boltzmann machine and discuss the issues that come up when trying to train and perform inference in the model. we define the boltzmann machine over a d-dimensional binary random vector d. the boltzmann machine is an energy-based model et al. x chapter deep generative models meaning we define the joint probability distribution using an energy function e x exp z p x where ex is the energy function and z is the partition function that ensures that the energy function of the boltzmann machine is given by p x x e x u x b x where u is the weight matrix of model parameters and b is the vector of bias parameters. in the general setting of the boltzmann machine we are given a set of training examples each of which are n-dimensional. equation describes the joint probability distribution over the observed variables. while this scenario is certainly viable it does limit the kinds of interactions between the observed variables to those described by the weight matrix. specifically it means that the probability of one unit being on is given by a linear model regression from the values of the other units. the boltzmann machine becomes more powerful when not all the variables are observed. in this case the latent variables can act similarly to hidden units in a multi-layer perceptron and model higher-order interactions among the visible units. just as the addition of hidden units to convert logistic regression into an mlp results in the mlp being a universal approximator of functions a boltzmann machine with hidden units is no longer limited to modeling linear relationships between variables. instead the boltzmann machine becomes a universal approximator of probability mass functions over discrete variables le roux and bengio formally we decompose the units x into two subsets the visible units v and the latent hidden units h v e h rv the energy function becomes v w h h sh b c v h. boltzmann machine learning learning algorithms for boltzmann machines are usually based on maximum likelihood. all boltzmann machines have an intractable partition function so the maximum likelihood gradient must be approximated using the techniques described in chapter one interesting property of boltzmann machines when trained with learning rules based on maximum likelihood is that the update for a particular weight connecting two units depends only the statistics of those two units collected under different distributions pmodelv and pdatavpmodelh v the rest of the chapter deep generative models network participates in shaping those statistics but the weight can be updated without knowing anything about the rest of the network or how those statistics were produced. this means that the learning rule is local which makes boltzmann machine learning somewhat biologically plausible. it is conceivable that if each neuron were a random variable in a boltzmann machine then the axons and dendrites connecting two random variables could learn only by observing the firing pattern of the cells that they actually physically touch. in particular in the positive phase two units that frequently activate together have their connection strengthened. this is an example of a hebbian learning rule often summarized with the mnemonic fire together wire together. hebbian learning rules are among the oldest hypothesized explanations for learning in biological systems and remain relevant today giudice et al. hebb other learning algorithms that use more information than local statistics seem to require us to hypothesize the existence of more machinery than this. for example for the brain to implement back-propagation in a multilayer perceptron it seems necessary for the brain to maintain a secondary communication network for transmitting gradient information backwards through the network. proposals for biologically plausible implementations approximations of back-propagation have been made but remain to be validated and bengio links back-propagation of gradients to inference in energy-based models similar to the boltzmann machine with continuous latent variables. hinton bengio the negative phase of boltzmann machine learning is somewhat harder to explain from a biological point of view. as argued in section dream sleep may be a form of negative phase sampling. this idea is more speculative though. restricted boltzmann machines smolensky restricted boltzmann invented under the name harmonium machines are some of the most common building blocks of deep probabilistic models. we have briefly described rbms previously in section here we review the previous information and go into more detail. rbms are undirected probabilistic graphical models containing a layer of observable variables and a single layer of latent variables. rbms may be stacked on top of the other to form deeper models. see figure a shows the graph structure of the rbm itself. it is a bipartite graph with no connections permitted between any variables in the observed layer or between any units in the latent layer. for some examples. in particular figure chapter deep generative models figure examples of models that may be built with restricted boltzmann machines. restricted boltzmann machine itself is an undirected graphical model based on a bipartite graph with visible units in one part of the graph and hidden units in the other part. there are no connections among the visible units nor any connections among the hidden units. typically every visible unit is connected to every hidden unit but it is possible to construct sparsely connected rbms such as convolutional rbms. ab deep belief network is a hybrid graphical model involving both directed and undirected connections. like an rbm it has no intralayer connections. however a dbn has multiple hidden layers and thus there are connections between hidden units that are in separate layers. all of the local conditional probability distributions needed by the deep belief network are copied directly from the local conditional probability distributions of its constituent rbms. alternatively we could also represent the deep belief network with a completely undirected graph but it would need intralayer connections to capture the dependencies between parents. a deep boltzmann machine is an undirected graphical model with several layers of latent variables. like rbms and dbns dbms lack intralayer connections. dbms are less closely tied to rbms than dbns are. when initializing a dbm from a stack of rbms it is necessary to modify the rbm parameters slightly. some kinds of dbms may be trained without first training a set of rbms. chapter deep generative models we begin with the binary version of the restricted boltzmann machine but as we see later there are extensions to other types of visible and hidden units. more formally let the observed layer consist of a set of n v binary random variables which we refer to collectively with the vector v. we refer to the latent or hidden layer of nh binary random variables as like the general boltzmann machine the restricted boltzmann machine is an energy-based model with the joint probability distribution specified by its energy function p v v h e v h exp z the energy function for an rbm is given by c b e h v h v w h and z is the normalizing constant known as the partition function e v h z exp v h it is apparent from the definition of the partition function z that the naive method of computing z summing over all states could be computationally intractable unless a cleverly designed algorithm could exploit regularities in the probability distribution to compute z faster. in the case of restricted boltzmann z machines is intractable. the intractable partition function z implies that the normalized joint probability distribution formally proved that the partition function is also intractable to evaluate. long and servedio p conditional distributions though p is intractable the bipartite graph structure of the rbm has the very special property that its conditional distributions ph v are factorial and relatively simple to compute and to sample from. and p h deriving the conditional distributions from the joint distribution is straightfor h v w h ward h v p p v p p z exp z v b c exp c h v w h chapter deep generative models nh exp z z nh exp wj hj nh v cjhj c jhj v wj hj since we are conditioning on the visible units v we can treat these as constant with respect to the distribution p v the factorial nature of the conditional p v follows immediately from our ability to write the joint probability over the vector h as the product of distributions over the individual elements h j. it is now a simple matter of normalizing the distributions over the individual binary hj. p h j v v p h j p h j p h j v exp wj cj v cj v exp exp wj cj v wj v nh we can now express the full conditional over the hidden layer as the factorial distribution h v p h c w v j a similar derivation will show that the other condition of interest to us p h is also a factorial distribution v h p v nv b w h i training restricted boltzmann machines because the rbm admits efficient evaluation and differentiation of p and efficient mcmc sampling in the form of block gibbs sampling it can readily be trained with any of the techniques described in chapter for training models that have intractable partition functions. this includes cd sml ratio matching and so on. compared to other undirected models used in deep learning v the rbm is relatively straightforward to train because we can compute ph chapter deep generative models exactly in closed form. some other deep models such as the deep boltzmann machine combine both the difficulty of an intractable partition function and the difficulty of intractable inference. deep belief networks et al. deep belief networks were one of the first non-convolutional models to successfully admit training of deep architectures hinton the introduction of deep belief networks in began the current deep learning renaissance. prior to the introduction of deep belief networks deep models were considered too difficult to optimize. kernel machines with convex objective functions dominated the research landscape. deep belief networks demonstrated that deep architectures can be successful by outperforming kernelized support vector machines on the mnist dataset today deep belief networks have mostly fallen out of favor and are rarely used even compared to other unsupervised or generative learning algorithms but they are still deservedly recognized for their important role in deep learning history. hinton et al. deep belief networks are generative models with several layers of latent variables. the latent variables are typically binary while the visible units may be binary or real. there are no intralayer connections. usually every unit in each layer is connected to every unit in each neighboring layer though it is possible to construct more sparsely connected dbns. the connections between the top two layers are undirected. the connections between all other layers are directed with the arrows pointed toward the layer that is closest to the data. see figure b for an example. a dbn with l hidden layers contains l weight matrices w w it also contains l bias vectors b with providing the biases for the visible layer. the probability distribution represented by the dbn is given by p h i k h l p h exp b l h b i w b p v i k l h w h h l i k l i w i. h k in the case of real-valued visible units substitute n v w v b chapter deep generative models with diagonal for tractability. generalizations to other exponential family visible units are straightforward at least in theory. a dbn with only one hidden layer is just an rbm. to generate a sample from a dbn we first run several steps of gibbs sampling on the top two hidden layers. this stage is essentially drawing a sample from the rbm defined by the top two hidden layers. we can then use a single pass of ancestral sampling through the rest of the model to draw a sample from the visible units. deep belief networks incur many of the problems associated with both directed models and undirected models. inference in a deep belief network is intractable due to the explaining away effect within each directed layer and due to the interaction between the two hidden layers that have undirected connections. evaluating or maximizing the standard evidence lower bound on the log-likelihood is also intractable because the evidence lower bound takes the expectation of cliques whose size is equal to the network width. evaluating or maximizing the log-likelihood requires not just confronting the problem of intractable inference to marginalize out the latent variables but also the problem of an intractable partition function within the undirected model of the top two layers. to train a deep belief network one begins by training an rbm to maximize log pv using contrastive divergence or stochastic maximum likelihood. pdata ev the parameters of the rbm then define the parameters of the first layer of the dbn. next a second rbm is trained to approximately maximize ev v log where is the probability distribution represented by the first rbm and is the probability distribution represented by the second rbm. in other words the second rbm is trained to model the distribution defined by sampling the hidden units of the first rbm when the first rbm is driven by the data. this procedure can be repeated indefinitely to add as many layers to the dbn as desired with each new rbm modeling the samples of the previous one. each rbm defines another layer of the dbn. this procedure can be justified as increasing a variational lower bound on the log-likelihood of the data under the dbn et al. in most applications no effort is made to jointly train the dbn after the greedy layer-wise procedure is complete. however it is possible to perform generative fine-tuning using the wake-sleep algorithm. chapter deep generative models v the trained dbn may be used directly as a generative model but most of the interest in dbns arose from their ability to improve classification models. we can take the weights from the dbn and use them to define an mlp w l m l w h b i h after initializing this mlp with the weights and biases learned via generative training of the dbn we may train the mlp to perform a classification task. this additional training of the mlp is an example of discriminative fine-tuning. tight this specific choice of mlp is somewhat arbitrary compared to many of the inference equations in chapter that are derived from first principles. this mlp is a heuristic choice that seems to work well in practice and is used consistently in the literature. many approximate inference techniques are motivated by their ability to find a maximally variational lower bound on the log-likelihood under some set of constraints. one can construct a variational lower bound on the log-likelihood using the hidden unit expectations defined by the dbn s mlp but this is true of probability distribution over the hidden units and there is no reason to believe that this mlp provides a particularly tight bound. in particular the mlp ignores many important interactions in the dbn graphical model. the mlp propagates information upward from the visible units to the deepest hidden units but does not propagate any information downward or sideways. the dbn graphical model has explaining away interactions between all of the hidden units within the same layer as well as top-down interactions between layers. any while the log-likelihood of a dbn is intractable it may be approximated with this permits evaluating its quality as a ais and murray generative model. the term deep belief network is commonly used incorrectly to refer to any kind of deep neural network even networks without latent variable semantics. the term deep belief network should refer specifically to models with undirected connections in the deepest layer and directed connections pointing downward between all other pairs of consecutive layers. the term deep belief network may also cause some confusion because the term belief network is sometimes used to refer to purely directed models while deep belief networks contain an undirected layer. deep belief networks also share the acronym dbn with dynamic bayesian networks and kanazawa which are bayesian networks for representing markov chains. chapter deep generative models figure the graphical model for a deep boltzmann machine with one visible layer and two hidden layers. connections are only between units in neighboring layers. there are no intralayer layer connections. deep boltzmann machines a deep boltzmann machine or dbm and hinton is another kind of deep generative model. unlike the deep belief network it is an entirely undirected model. unlike the rbm the dbm has several layers of latent variables have just one. but like the rbm within each layer each of the variables are mutually independent conditioned on the variables in the neighboring layers. see figure for the graph structure. deep boltzmann machines have been applied to a variety of tasks including document modeling et al. like rbms and dbns dbms typically contain only binary units as we assume for simplicity of our presentation of the model but it is straightforward to include real-valued visible units. a dbm is an energy-based model meaning that the the joint probability distribution over the model variables is parametrized by an energy function e in the case of a deep boltzmann machine with one visible layer v and three hidden layers and the joint probability is given by p v h z exp e to simplify our presentation we omit the bias parameters below. the dbm energy function is then defined as follows e v w w w chapter deep generative models v v figure a deep boltzmann machine re-arranged to reveal its bipartite graph structure. in comparison to the rbm energy function the dbm energy function includes connections between the hidden units variables in the form of the weight matrices and w as we will see these connections have significant consequences for both the model behavior as well as how we go about performing inference in the model. in comparison to fully connected boltzmann machines every unit connected to every other unit the dbm offers some advantages that are similar to those offered by the rbm. specifically as illustrated in figure the dbm layers can be organized into a bipartite graph with odd layers on one side and even layers on the other. this immediately implies that when we condition on the variables in the even layer the variables in the odd layers become conditionally independent. of course when we condition on the variables in the odd layers the variables in the even layers also become conditionally independent. the bipartite structure of the dbm means that we can apply the same equations we have previously used for the conditional distributions of an rbm to determine the conditional distributions in a dbm. the units within a layer are conditionally independent from each other given the values of the neighboring layers so the distributions over binary variables can be fully described by the bernoulli parameters giving the probability of each unit being active. in our example with two hidden layers the activation probabilities are given by p v i w i chapter deep generative models and p h i p h k v v h h i w w h w the bipartite structure makes gibbs sampling in a deep boltzmann machine efficient. the naive approach to gibbs sampling is to update only one variable at a time. rbms allow all of the visible units to be updated in one block and all of the hidden units to be updated in a second block. one might naively assume that a dbm with l layers requires l updates with each iteration updating a block consisting of one layer of units. instead it is possible to update all of the units in only two iterations. gibbs sampling can be divided into two blocks of updates one including all even layers the visible layer and the other including all odd layers. due to the bipartite dbm connection pattern given the even layers the distribution over the odd layers is factorial and thus can be sampled simultaneously and independently as a block. likewise given the odd layers the even layers can be sampled simultaneously and independently as a block. efficient sampling is especially important for training with the stochastic maximum likelihood algorithm. interesting properties deep boltzmann machines have many interesting properties. dbms were developed after dbns. compared to dbns the posterior distribu is simpler for dbms. somewhat counterintuitively the simplicity of tion ph v this posterior distribution allows richer approximations of the posterior. in the case of the dbn we perform classification using a heuristically motivated approximate inference procedure in which we guess that a reasonable value for the mean field expectation of the hidden units can be provided by an upward pass through the network in an mlp that uses sigmoid activation functions and the same weights as qh may be used to obtain a variational lower the original dbn. bound on the log-likelihood. this heuristic procedure therefore allows us to obtain such a bound. however the bound is not explicitly optimized in any way so the bound may be far from tight. in particular the heuristic estimate of q ignores interactions between hidden units within the same layer as well as the top-down feedback influence of hidden units in deeper layers on hidden units that are closer to the input. because the heuristic mlp-based inference procedure in the dbn is not able to account for these interactions the resulting q is presumably far distribution any chapter deep generative models from optimal. in dbms all of the hidden units within a layer are conditionally independent given the other layers. this lack of intralayer interaction makes it possible to use fixed point equations to actually optimize the variational lower bound and find the true optimal mean field expectations within some numerical tolerance. the use of proper mean field allows the approximate inference procedure for dbms to capture the influence of top-down feedback interactions. this makes dbms interesting from the point of view of neuroscience because the human brain is known to use many top-down feedback connections. because of this property dbms have been used as computational models of real neuroscientific phenomena series et al. reichert et al. one unfortunate property of dbms is that sampling from them is relatively difficult. dbns only need to use mcmc sampling in their top pair of layers. the other layers are used only at the end of the sampling process in one efficient ancestral sampling pass. to generate a sample from a dbm it is necessary to use mcmc across all layers with every layer of the model participating in every markov chain transition. dbm mean field inference p the conditional distribution over one dbm layer given the neighboring layers is factorial. in the example of the dbm with two hidden layers these distributions the distribution over all are p h hidden layers generally does not factorize because of interactions between layers. in the example with two hidden layers p v does not factorize due due to the interaction weights w between and which render these variables mutually dependent. and p v h as was the case with the dbn we are left to seek out methods to approximate the dbm posterior distribution. however unlike the dbn the dbm posterior distribution over their hidden units while complicated is easy to approximate with a variational approximation discussed in section specifically a mean field approximation. the mean field approximation is a simple form of variational inference where we restrict the approximating distribution to fully factorial distributions. in the context of dbms the mean field equations capture the bidirectional interactions between layers. in this section we derive the iterative approximate inference procedure originally introduced in salakhutdinov and hinton in variational approximations to inference we approach the task of approxi chapter deep generative models mating a particular target distribution in our case the posterior distribution over the hidden units given the visible units by some reasonably simple family of distributions. in the case of the mean field approximation the approximating family is the set of distributions where the hidden units are conditionally independent. we now develop the mean field approach for the example with two hidden v. the mean v be the approximation of p layers. let field assumption implies that v q h j v v. q h k j k the mean field approximation attempts to find a member of this family of distributions that best fits the true posterior p v. importantly the inference process must be run again to find a different distribution q every time we use a new value of one can conceive of many ways of measuring how well qh v fits p v the mean field approach is to minimize kl v log q p h p v v in general we do not have to provide a parametric form of the approximating distribution beyond enforcing the independence assumptions. the variational approximation procedure is generally able to recover a functional form of the approximate distribution. however in the case of a mean field assumption on binary hidden units case we are developing here there is no loss of generality resulting from fixing a parametrization of the model in advance. we parametrize q as a product of bernoulli distributions that is we associate the probability of each element of with a parameter. specifically for each j j v j where k thus we have the following approximation to the posterior and for each k h k v where k j v q h j v q h k v j j j j k j j k k k k h k of course for dbms with more layers the approximate posterior parametrization can be extended in the obvious way exploiting the bipartite structure of the graph chapter deep generative models to update all of the even layers simultaneously and then to update all of the odd layers simultaneously following the same schedule as gibbs sampling. now that we have specified our family of approximating distributions q it remains to specify a procedure for choosing the member of this family that best fits p. the most straightforward way to do this is to use the mean field equations specified by equation these equations were derived by solving for where the derivatives of the variational lower bound are zero. they describe in an abstract manner how to optimize the variational lower bound for any model simply by taking expectations with respect to applying these general equations we obtain the update rules ignoring bias terms j viw ij w jk h k j i k k j j j k. l at a fixed point of this system of equations we have a local maximum of the thus these fixed point update equations define an variational lower bound iterative algorithm where we alternate updates of h and updates of on small problems such as mnist as few k as ten iterations can be sufficient to find an approximate positive phase gradient for learning and fifty usually suffice to obtain a high quality representation of a single specific example to be used for high-accuracy classification. extending approximate variational inference to deeper dbms is straightforward. equation equation j dbm parameter learning learning in the dbm must confront both the challenge of an intractable partition function using the techniques from chapter and the challenge of an intractable posterior distribution using the techniques from chapter as described in section l a distribution qh v proceeds by maximizing log-likelihood log p v that approximates the intractable p h v variational inference allows the construction of learning then the variational lower bound on the intractable q chapter deep generative models for a deep boltzmann machine with two hidden layers is given by l h l q j i vi ij j j w k j j k log z this expression still contains the log partition function log z because a deep boltzmann machine contains restricted boltzmann machines as components the hardness results for computing the partition function and sampling that apply to restricted boltzmann machines also apply to deep boltzmann machines. this means that evaluating the probability mass function of a boltzmann machine requires approximate methods such as annealed importance sampling. likewise training the model requires approximations to the gradient of the log partition function. see chapter for a general description of these methods. dbms are typically trained using stochastic maximum likelihood. many of the other techniques described in chapter are not applicable. techniques such as pseudolikelihood require the ability to evaluate the unnormalized probabilities rather than merely obtain a variational lower bound on them. contrastive divergence is slow for deep boltzmann machines because they do not allow efficient sampling of the hidden units given the visible units instead contrastive divergence would require burning in a markov chain every time a new negative phase sample is needed. the non-variational version of stochastic maximum likelihood algorithm was variational stochastic maximum likelihood as recall that we describe a simplified discussed earlier in section applied to the dbm is given in algorithm varient of the dbm that lacks bias parameters including them is trivial. layer-wise pretraining unfortunately training a dbm using stochastic maximum likelihood described above from a random initialization usually results in failure. in some cases the model fails to learn to represent the distribution adequately. in other cases the dbm may represent the distribution well but with no higher likelihood than could be obtained with just an rbm. a dbm with very small weights in all but the first layer represents approximately the same distribution as an rbm. various techniques that permit joint training have been developed and are however the original and most popular method for described in section overcoming the joint training problem of dbms is greedy layer-wise pretraining. in this method each layer of the dbm is trained in isolation as an rbm. the first layer is trained to model the input data. each subsequent rbm is trained to model samples from the previous rbm s posterior distribution. after all of the chapter deep generative models algorithm the variational stochastic maximum likelihood algorithm for training a dbm with two hidden layers. to burn in starting from samples from pv h set the step size to a small positive number set k the number of gibbs steps high enough to allow a markov chain of pv h initialize three matrices v h and h each with m rows set to random values from bernoulli distributions possibly with marginals matched to the model s marginals. while not converged loop do sample a minibatch of m examples from the training data and arrange them as the rows of a design matrix initialize matrices h and possibly to the model s marginals. while not converged field inference loop do h h v w h l w w h v h k sampling end while m m to for gibbs block i j v ij sampled from p vij i j h gibbs block i j h ij sampled from p ij sampled from p do i w j ij i w ij viw h i w j w w end for w w effective algorithm such as momentum with a decaying learning rate w h v m m w w is a cartoon illustration in practice use a more w h w w end while chapter deep generative models rbms have been trained in this way they can be combined to form a dbm. the dbm may then be trained with pcd. typically pcd training will make only a small change in the model s parameters and its performance as measured by the log-likelihood it assigns to the data or its ability to classify inputs. see figure for an illustration of the training procedure. this greedy layer-wise training procedure is not just coordinate ascent. it bears some passing resemblance to coordinate ascent because we optimize one subset of the parameters at each step. the two methods differ because the greedy layer-wise training procedure uses a different objective function at each step. greedy layer-wise pretraining of a dbm differs from greedy layer-wise pretraining of a dbn. the parameters of each individual rbm may be copied to the corresponding dbn directly. in the case of the dbm the rbm parameters must be modified before inclusion in the dbm. a layer in the middle of the stack of rbms is trained with only bottom-up input but after the stack is combined to form the dbm the layer will have both bottom-up and top-down input. to account for this effect salakhutdinov and hinton advocate dividing the weights of all but the top and bottom rbm in half before inserting them into the dbm. additionally the bottom rbm must be trained using two copies of each visible unit and the weights tied to be equal between the two copies. this means that the weights are effectively doubled during the upward pass. similarly the top rbm should be trained with two copies of the topmost layer. obtaining the state of the art results with the deep boltzmann machine requires a modification of the standard sml algorithm which is to use a small amount of mean field during the negative phase of the joint pcd training step and hinton specifically the expectation of the energy gradient should be computed with respect to the mean field distribution in which all of the units are independent from each other. the parameters of this mean field distribution should be obtained by running the mean field fixed point equations for just one step. see for a comparison of the performance of centered dbms with and without the use of partial mean field in the negative phase. goodfellow et al. jointly training deep boltzmann machines classic dbms require greedy unsupervised pretraining and to perform classification well require a separate mlp-based classifier on top of the hidden features they extract. this has some undesirable properties. it is hard to track performance during training because we cannot evaluate properties of the full dbm while training the first rbm. thus it is hard to tell how well our hyperparameters chapter deep generative models a b c d et al. figure the deep boltzmann machine training procedure used to classify the mnist dataset and hinton srivastava train an rbm by using cd to approximately maximize log pv. train a second rbm that models and target class y by using cd-k to approximately maximize log p y where is drawn from the first rbm s posterior conditioned on the data. increase k from combine the two rbms into a dbm. train it to approximately to during learning. maximize log pv y using stochastic maximum likelihood with k y from the model. define a new set of features and that are obtained by running mean field inference in the model lacking y. use these features as input to an mlp whose structure is the same as an additional pass of mean field with an additional output layer for the estimate of y. initialize the mlp s weights to be the same as the dbm s weights. train the mlp to approximately maximize log p v using stochastic gradient descent and dropout. figure reprinted from goodfellow et al. delete chapter deep generative models are working until quite late in the training process. software implementations of dbms need to have many different components for cd training of individual rbms pcd training of the full dbm and training based on back-propagation through the mlp. finally the mlp on top of the boltzmann machine loses many of the advantages of the boltzmann machine probabilistic model such as being able to perform inference when some input values are missing. there are two main ways to resolve the joint training problem of the deep boltzmann machine. the first is the centered deep boltzmann machine and muller which reparametrizes the model in order to make the hessian of the cost function better-conditioned at the beginning of the learning process. this yields a model that can be trained without a greedy layer-wise pretraining stage. the resulting model obtains excellent test set log-likelihood and produces high quality samples. unfortunately it remains unable to compete with appropriately regularized mlps as a classifier. the second way to jointly train a deep boltzmann machine is to use a multi-prediction deep boltzmann machine this model uses an alternative training criterion that allows the use of the back-propagation algorithm in order to avoid the problems with mcmc estimates of the gradient. unfortunately the new criterion does not lead to good likelihood or samples but compared to the mcmc approach it does lead to superior classification performance and ability to reason well about missing inputs. et al. the centering trick for the boltzmann machine is easiest to describe if we return to the general view of a boltzmann machine as consisting of a set of units x with a weight matrix u and biases b. recall from equation that he energy function is given by x e x u x b x. using different sparsity patterns in the weight matrix u we can implement structures of boltzmann machines such as rbms or dbms with different numbers of layers. this is accomplished by partitioning x into visible and hidden units and zeroing out elements of u for units that do not interact. the centered boltzmann machine introduces a vector that is subtracted from all of the states x x u x b. e x u b typically is a hyperparameter fixed at the beginning of training. it is usually chosen to make sure that x when the model is initialized. this reparametrization does not change the set of probability distributions that the model can represent but it does change the dynamics of stochastic gradient descent applied to the likelihood. specifically in many cases this reparametrization results chapter deep generative models experimentally in a hessian matrix that is better conditioned. confirmed that the conditioning of the hessian matrix improves and observed that the centering trick is equivalent to another boltzmann machine learning technique the enhanced gradient the improved conditioning of the hessian matrix allows learning to succeed even in difficult cases like training a deep boltzmann machine with multiple layers. melchior et al. cho et al. the other approach to jointly training deep boltzmann machines is the multiprediction deep boltzmann machine which works by viewing the mean field equations as defining a family of recurrent networks for approximately solving every possible inference problem rather than training the model to maximize the likelihood the model is trained to make each recurrent network obtain an accurate answer to the corresponding inference problem. the training process is illustrated in figure it consists of randomly sampling a training example randomly sampling a subset of inputs to the inference network and then training the inference network to predict the values of the remaining units. goodfellow et al. et al. this general principle of back-propagating through the computational graph for approximate inference has been applied to other models in these models and in the mp-dbm the final loss is not brakel the lower bound on the likelihood. instead the final loss is typically based on the approximate conditional distribution that the approximate inference network imposes over the missing values. this means that the training of these models is somewhat heuristically motivated. if we inspect the pv represented by the boltzmann machine learned by the mp-dbm it tends to be somewhat defective in the sense that gibbs sampling yields poor samples. et al. back-propagation through the inference graph has two main advantages. first it trains the model as it is really used with approximate inference. this means that approximate inference for example to fill in missing inputs or to perform classification despite the presence of missing inputs is more accurate in the mpdbm than in the original dbm. the original dbm does not make an accurate classifier on its own the best classification results with the original dbm were based on training a separate classifier to use features extracted by the dbm rather than by using inference in the dbm to compute the distribution over the class labels. mean field inference in the mp-dbm performs well as a classifier without special modifications. the other advantage of back-propagating through approximate inference is that back-propagation computes the exact gradient of the loss. this is better for optimization than the approximate gradients of sml training which suffer from both bias and variance. this probably explains why mp chapter deep generative models figure an illustration of the multi-prediction training process for a deep boltzmann machine. each row indicates a different example within a minibatch for the same training step. each column represents a time step within the mean field inference process. for each example we sample a subset of the data variables to serve as inputs to the inference process. these variables are shaded black to indicate conditioning. we then run the mean field inference process with arrows indicating which variables influence which other variables in the process. in practical applications we unroll mean field for several steps. in this illustration we unroll for only two steps. dashed arrows indicate how the process could be unrolled for more steps. the data variables that were not used as inputs to the inference process become targets shaded in gray. we can view the inference process for each example as a recurrent network. we use gradient descent and back-propagation to train these recurrent networks to produce the correct targets given their inputs. this trains the mean field process for the mp-dbm to produce accurate estimates. figure adapted from goodfellow et al. chapter deep generative models dbms may be trained jointly while dbms require a greedy layer-wise pretraining. the disadvantage of back-propagating through the approximate inference graph is that it does not provide a way to optimize the log-likelihood but rather a heuristic approximation of the generalized pseudolikelihood. the mp-dbm inspired the nade-k extension to the nade framework which is described in section et al. the mp-dbm has some connections to dropout. dropout shares the same parameters among many different computational graphs with the difference between each graph being whether it includes or excludes each unit. the mp-dbm also shares parameters across many computational graphs. in the case of the mp-dbm the difference between the graphs is whether each input unit is observed or not. when a unit is not observed the mp-dbm does not delete it entirely as dropout does. instead the mp-dbm treats it as a latent variable to be inferred. one could imagine applying dropout to the mp-dbm by additionally removing some units rather than making them latent. boltzmann machines for real-valued data while boltzmann machines were originally developed for use with binary data many applications such as image and audio modeling seem to require the ability to represent probability distributions over real values. in some cases it is possible to treat real-valued data in the interval as representing the expectation of a binary variable. for example treats grayscale images in the training set as defining probability values. each pixel defines the probability of a binary value being and the binary pixels are all sampled independently from each other. this is a common procedure for evaluating binary models on grayscale image datasets. however it is not a particularly theoretically satisfying approach and binary images sampled independently in this way have a noisy appearance. in this section we present boltzmann machines that define a probability density over real-valued data. hinton gaussian-bernoulli rbms restricted boltzmann machines may be developed for many exponential family conditional distributions of these the most common is the rbm with binary hidden units and real-valued visible units with the conditional distribution over the visible units being a gaussian distribution whose mean is a function of the hidden units. et al. chapter deep generative models there are many ways of parametrizing gaussian-bernoulli rbms. one choice is whether to use a covariance matrix or a precision matrix for the gaussian distribution. here we present the precision formulation. the modification to obtain the covariance formulation is straightforward. we wish to have the conditional distribution v h p n v w h we can find the terms we need to add to the energy function by expanding the unnormalized log conditional distribution n log v w h v w h v w h here f encapsulates all the terms that are a function only of the parameters and not the random variables in the model. we can discard f because its only role is to normalize the distribution and the partition function of whatever energy function we choose will carry out that role. if we include all of the terms their sign flipped involving v from equav then in our energy function and do not add any other terms involving tion our energy function will represent the desired conditional we have some freedom regarding the other conditional distribution ph v v h p note that equation contains a term h w w h. this term cannot be included in its entirety because it includes hihj terms. these correspond to edges between the hidden units. if we included these terms we would have a linear factor model instead of a restricted boltzmann machine. when designing our boltzmann machine we simply omit these hi hj cross terms. omitting them does not change the conditional pv h is still respected. however we still have a choice about whether to include the terms involving only a single hi. if we assume a diagonal precision matrix we find that for each hidden unit hi we have a term so equation h i jw ji. in the above we used the fact that if we include this term its sign flipped in the energy function then it will naturally bias h i to be turned off when the weights for that unit are large and connected to visible units with high precision. the choice of whether or not to include this bias term does not affect the family of distributions the model can represent that j i hi because hi chapter deep generative models we include bias parameters for the hidden units but it does affect the learning dynamics of the model. including the term may help the hidden unit activations remain reasonable even when the weights rapidly increase in magnitude. one way to define the energy function on a gaussian-bernoulli rbm is thus e h v v v w h b h but we may also add extra terms or parametrize the energy in terms of the variance rather than precision if we choose. in this derivation we have not included a bias term on the visible units but one could easily be added. one final source of variability in the parametrization of a gaussian-bernoulli rbm is the choice of how to treat the precision matrix. it may either be fixed to a constant estimated based on the marginal precision of the data or learned. it may also be a scalar times the identity matrix or it may be a diagonal matrix. typically we do not allow the precision matrix to be non-diagonal in this context because some operations on the gaussian distribution require inverting the matrix and a diagonal matrix can be inverted trivially. in the sections ahead we will see that other forms of boltzmann machines permit modeling the covariance structure using various techniques to avoid inverting the precision matrix. undirected models of conditional covariance ranzato et al. while the gaussian rbm has been the canonical energy model for real-valued data argue that the gaussian rbm inductive bias is not well suited to the statistical variations present in some types of real-valued data especially natural images. the problem is that much of the information content present in natural images is embedded in the covariance between pixels rather than in the raw pixel values. in other words it is the relationships between pixels and not their absolute values where most of the useful information in images resides. since the gaussian rbm only models the conditional mean of the input given the hidden units it cannot capture conditional covariance information. in response to these criticisms alternative models have been proposed that attempt to better account for the covariance of real-valued data. these models include the mean and covariance rbm the mean-product of t-distribution model and the spike and slab rbm term mcrbm is pronounced by saying the name of the letters m-c-r-b-m the mc is not pronounced like the mc in mcdonald s. chapter deep generative models mean and covariance rbm the mcrbm uses its hidden units to independently encode the conditional mean and covariance of all observed units. the mcrbm hidden layer is divided into two groups of units mean units and covariance units. the group that models the conditional mean is simply a gaussian rbm. the other half is a covariance rbm also called a crbm whose components model the conditional covariance structure as described below. ranzato et al. specifically with binary mean units h and binary covariance units h the mcrbm model is defined as the combination of two energy functions emcx h h emx h ecx h where em is the standard gaussian-bernoulli rbm energy emx h x x j h b j j x wjh j j and ec is the crbm energy function that models the conditional covariance information ec h j h j x r j b j h j the parameter r corresponds to the covariance weight vector associated with h and b is a vector of covariance offsets. the combined energy function defines j a joint distribution z emcx h pmcx h h exp h and a corresponding conditional distribution over the observations given h h as a multivariate gaussian distribution and n h pmcx h x c mc x h wjh j c mc x h is non-diagonal note that the covariance matrix cmc x h and that w is the weight matrix associated with the gaussian rbm modeling the i j r r j h version of the gaussian-bernoulli rbm energy function assumes the image data has zero mean per pixel. pixel offsets can easily be added to the model to account for nonzero pixel means. j chapter deep generative models conditional means. it is difficult to train the mcrbm via contrastive divergence or persistent contrastive divergence because of its non-diagonal conditional covariance h structure. cd and pcd require sampling from the joint distribution of x h which in a standard rbm is accomplished by gibbs sampling over the conditionals. h requires computing however in the mcrbm sampling from pmcx h at every iteration of learning. this can be an impractical computational burden for larger observations. ranzato and hinton avoid direct sampling h by sampling directly from the marginal from the conditional pmc h px using hamiltonian monte carlo on the mcrbm free energy. neal t extends the pot model the mean-product of student s mean-product of student s t-distribution model welling ranzato et al. et al. in a manner similar to how the mcrbm extends the crbm. this is achieved by including nonzero gaussian means by the addition of gaussian rbm-like hidden units. like the mcrbm the pot conditional distribution over the observation is a multivariate gaussian non-diagonal covariance distribution however unlike the mcrbm the complementary conditional distribution over the hidden variables is given by conditionally independent gamma distributions. the is a probability distribution over positive real numbers gamma distribution with mean k it is not necessary to have a more detailed understanding of the gamma distribution to understand the basic ideas underlying the mpot model. g the mpot energy function is h empotx h emx h h j j r x j log h j where r is as defined in equation is the covariance weight vector associated with unit h j and emx h just as with the mcrbm the mpot model energy function specifies a multivariate gaussian with a conditional distribution over x that has non-diagonal covariance. learning in the mpot model again like the mcrbm is complicated by the inability to sample from the non-diagonal gaussian conditional h so pmpotx h also advocate direct sampling of p via hamiltonian monte carlo. ranzato et al. chapter deep generative models courville et al. spike and slab restricted boltzmann machines spike and slab restricted boltzmann machines or ssrbms provide another means of modeling the covariance structure of real-valued data. compared to mcrbms ssrbms have the advantage of requiring neither matrix inversion nor hamiltonian monte carlo methods. like the mcrbm and the mpot model the ssrbm s binary hidden units encode the conditional covariance across pixels through the use of auxiliary real-valued variables. the spike and slab rbm has two sets of hidden units binary spike units h and real-valued slab units s the mean of the visible units conditioned on the hidden units is given by s in other words each column w defines a component that can appear in the input when hi the corresponding spike variable hi determines whether that component is present at all. the corresponding slab variable si determines the intensity of that component if it is present. when a spike variable is active the corresponding slab variable adds variance to the input along the axis defined by wi. this allows us to model the covariance of the inputs. fortunately contrastive divergence and persistent contrastive divergence with gibbs sampling are still applicable. there is no need to invert any matrix. formally the ssrbm model is defined via its energy function e ss x s h x i isih i wisihi ihi i i i i i i bih i i i hi i x x where bi is the offset of the spike hi and is a diagonal precision matrix on the observations x. the parameter i is a scalar precision parameter for the real-valued slab variable si. the parameter i is a non-negative diagonal matrix that defines an h-modulated quadratic penalty on x. each i is a mean parameter for the slab variable si. with the joint distribution defined via the energy function it is relatively straightforward to derive the ssrbm conditional distributions. for example by marginalizing out the slab variables s the conditional distribution over the observations given the binary spike variables exp is given by h e x s h ds z p n pss x h x c ss x h wi ih i css x h i chapter deep generative models i i hiwiw is positive definite. where c ss ihi x h the covariance matrix c ss x h gating by the spike variables means that the true marginal distribution over is sparse. this is different from sparse coding where samples from the model h s almost never the measure theoretic sense contain zeros in the code and map inference is required to impose sparsity. the last equality holds only if i as i j h j r r comparing the ssrbm to the mcrbm and the mpot models the ssrbm parametrizes the conditional covariance of the observation in a significantly different way. the mcrbm and mpot both model the covariance structure of the observation using the activation of the hidden units hj to enforce constraints on the conditional covariance in the direction r in contrast the ssrbm specifies the conditional covariance of the observations using the hidden spike activations hi to pinch the precision matrix along the direction specified by the corresponding weight vector. the ssrbm conditional covariance is very similar to that given by a different model the product of probabilistic principal components analysis and agakov in the overcomplete setting sparse activations with the ssrbm parametrization permit significant only in the selected directions variance the nominal variance given by of the sparsely activated hi. in the mcrbm or mpot models an overcomplete representation would mean that to capture variation in a particular direction in the observation space requires removing potentially all constraints with positive projection in that direction. this would suggest that these models are less well suited to the overcomplete setting. the primary disadvantage of the spike and slab restricted boltzmann machine is that some settings of the parameters can correspond to a covariance matrix that is not positive definite. such a covariance matrix places more unnormalized probability on values that are farther from the mean causing the integral over all possible outcomes to diverge. generally this issue can be avoided with simple heuristic tricks. there is not yet any theoretically satisfying solution. using constrained optimization to explicitly avoid the regions where the probability is undefined is difficult to do without being overly conservative and also preventing the model from accessing high-performing regions of parameter space. qualitatively convolutional variants of the ssrbm produce excellent samples of natural images. some examples are shown in figure the ssrbm allows for several extensions. including higher-order interactions and average-pooling of the slab variables enables the model to learn excellent features for a classifier when labeled data is scarce. adding a courville et al. chapter deep generative models term to the energy function that prevents the partition function from becoming undefined results in a sparse coding model spike and slab sparse coding et al. also known as convolutional boltzmann machines as seen in chapter extremely high dimensional inputs such as images place great strain on the computation memory and statistical requirements of machine learning models. replacing matrix multiplication by discrete convolution with a small kernel is the standard way of solving these problems for inputs that have translation invariant spatial or temporal structure. desjardins and bengio showed that this approach works well when applied to rbms. deep convolutional networks usually require a pooling operation so that the spatial size of each successive layer decreases. feedforward convolutional networks often use a pooling function such as the maximum of the elements to be pooled. it is unclear how to generalize this to the setting of energy-based models. we could introduce a binary pooling unit p over n binary detector units d and enforce p maxi di by setting the energy function to be whenever that constraint is violated. this does not scale well though as it requires evaluating n different energy configurations to compute the normalization constant. for a small pooling region this requires energy function evaluations per pooling unit! lee et al. developed a solution to this problem called probabilistic max pooling to be confused with stochastic pooling which is a technique for implicitly constructing ensembles of convolutional feedforward networks. the strategy behind probabilistic max pooling is to constrain the detector units so at most one may be active at a time. this means there are only n total states state for each of the n detector units being on and an additional state corresponding to all of the detector units being off. the pooling unit is on if and only if one of the detector units is on. the state with all units off is assigned energy zero. we can think of this as describing a model with a single variable that has n states or equivalently as a model that has n variables that assigns energy joint assignments of variables. to all but n while efficient probabilistic max pooling does force the detector units to be mutually exclusive which may be a useful regularizing constraint in some contexts or a harmful limit on model capacity in other contexts. it also does not support overlapping pooling regions. overlapping pooling regions are usually required to obtain the best performance from feedforward convolutional networks so this constraint probably greatly reduces the performance of convolutional boltzmann chapter deep generative models machines. lee et al. demonstrated that probabilistic max pooling could be used to build convolutional deep boltzmann this model is able to perform operations such as filling in missing portions of its input. while intellectually appealing this model is challenging to make work in practice and usually does not perform as well as a classifier as traditional convolutional networks trained with supervised learning. many convolutional models work equally well with inputs of many different spatial sizes. for boltzmann machines it is difficult to change the input size for a variety of reasons. the partition function changes as the size of the input changes. moreover many convolutional networks achieve size invariance by scaling up the size of their pooling regions proportional to the size of the input but scaling boltzmann machine pooling regions is awkward. traditional convolutional neural networks can use a fixed number of pooling units and dynamically increase the size of their pooling regions in order to obtain a fixed-size representation of a variable-sized input. for boltzmann machines large pooling regions become too expensive for the naive approach. the approach of of making each of the detector units in the same pooling region mutually exclusive solves the computational problems but still does not allow variable-size pooling regions. for example suppose we learn a model with probabilistic max pooling over detector units that learn edge detectors. this enforces the constraint that only one of these edges may appear in each region. if we then increase the size of the input image by in each direction we would expect the number of edges to increase correspondingly. instead if we increase the size of the pooling regions by in each direction to then the mutual exclusivity constraint now specifies that each of these edges may only appear once in a region. as we grow a model s input image in this way the model generates edges with less density. of course these issues only arise when the model must use variable amounts of pooling in order to emit a fixed-size output vector. models that use probabilistic max pooling may still accept variable-sized input images so long as the output of the model is a feature map that can scale in size proportional to the input image. lee et al. pixels at the boundary of the image also pose some difficulty which is exacerbated by the fact that connections in a boltzmann machine are symmetric. if we do not implicitly zero-pad the input then there are fewer hidden units than visible units and the visible units at the boundary of the image are not modeled publication describes the model as a deep belief network but because it can be described as a purely undirected model with tractable layer-wise mean field fixed point updates it best fits the definition of a deep boltzmann machine. chapter deep generative models well because they lie in the receptive field of fewer hidden units. however if we do implicitly zero-pad the input then the hidden units at the boundary are driven by fewer input pixels and may fail to activate when needed. boltzmann machines for structured or sequential outputs in the structured output scenario we wish to train a model that can map from some input x to some output y and the different entries of y are related to each other and must obey some constraints. for example in the speech synthesis task y is a waveform and the entire waveform must sound like a coherent utterance. a natural way to represent the relationships between the entries in y is to x. boltzmann machines extended to model use a probability distribution py conditional distributions can supply this probabilistic model. the same tool of conditional modeling with a boltzmann machine can be used not just for structured output tasks but also for sequence modeling. in the latter case rather than mapping an input x to an output y the model must estimate a probability distribution over a sequence of variables x conditional boltzmann machines can represent factors of the form px in order to accomplish this task. t x x x t an important sequence modeling task for the video game and film industry is modeling sequences of joint angles of skeletons used to render characters. these sequences are often collected using motion capture systems to record the movements of actors. a probabilistic model of a character s movement allows the generation of new previously unseen but realistic animations. to solve et al. this sequence modeling task taylor introduced a conditional rbm modeling px t m for small m. the model is an rbm over px whose bias parameters are a linear function of the preceding m values of x. when we condition on different values of x t and earlier variables we get a new rbm over x the weights in the rbm over x never change but by conditioning on different past values we can change the probability of different hidden units in the rbm being active. by activating and deactivating different subsets of hidden units we can make large changes to the probability distribution induced on x other variants of conditional rbm and other variants of sequence modeling using conditional rbms are possible and hinton sutskever et al. boulanger-lewandowski mnih et al. et al. another sequence modeling task is to model the distribution over sequences chapter deep generative models et al. of musical notes used to compose songs. boulanger-lewandowski introduced the rnn-rbm sequence model and applied it to this task. the rnn-rbm is a generative model of a sequence of frames x consisting of an rnn that emits the rbm parameters for each time step. unlike previous approaches in which only the bias parameters of the rbm varied from one time step to the next the rnn-rbm uses the rnn to emit all of the parameters of the rbm including the weights. to train the model we need to be able to back-propagate the gradient of the loss function through the rnn. the loss function is not applied directly to the rnn outputs. instead it is applied to the rbm. this means that we must approximately differentiate the loss with respect to the rbm parameters using contrastive divergence or a related algorithm. this approximate gradient may then be back-propagated through the rnn using the usual back-propagation through time algorithm. other boltzmann machines many other variants of boltzmann machines are possible. boltzmann machines may be extended with different training criteria. we have focused on boltzmann machines trained to approximately maximize the generative criterion log pv. it is also possible to train discriminative rbms that aim to maximize log py this approach often performs the best when using a linear combination of both the generative and the discriminative criteria. unfortunately rbms do not seem to be as powerful supervised learners as mlps at least using existing methodology. larochelle and bengio v instead sejnowski most boltzmann machines used in practice have only second-order interactions in their energy functions meaning that their energy functions are the sum of many terms and each individual term only includes the product between two random variables. an example of such a term is viwijhj it is also possible to train higher-order boltzmann machines whose energy function terms involve the products between many variables. three-way interactions between a hidden unit and two different images can model spatial transformations from one frame of video to the next and hinton multiplication by a one-hot class variable can change the relationship between visible and hidden units depending on which class is present one recent example of the use of higher-order interactions is a boltzmann machine with two groups of hidden units with one group of hidden units that interact with both the visible units v and the class label y and another group of hidden units that interact only with the v input values this can be interpreted as encouraging nair and hinton luo et al. chapter deep generative models some hidden units to learn to model the input using features that are relevant to the class but also to learn extra hidden units that explain nuisance details that are necessary for the samples of v to be realistic but do not determine the class of the example. another use of higher-order interactions is to gate some features. sohn introduced a boltzmann machine with third-order interactions with binary mask variables associated with each visible unit. when these masking variables are set to zero they remove the influence of a visible unit on the hidden units. this allows visible units that are not relevant to the classification problem to be removed from the inference pathway that estimates the class. et al. more generally the boltzmann machine framework is a rich space of models permitting many more model structures than have been explored so far. developing a new form of boltzmann machine requires some more care and creativity than developing a new neural network layer because it is often difficult to find an energy function that maintains tractability of all of the different conditional distributions needed to use the boltzmann machine but despite this required effort the field remains open to innovation. back-propagation through random operations traditional neural networks implement a deterministic transformation of some input variables x. when developing generative models we often wish to extend neural networks to implement stochastic transformations of x. one straightforward way to do this is to augment the neural network with extra inputs z that are sampled from some simple probability distribution such as a uniform or gaussian distribution. the neural network can then continue to perform deterministic computation internally but the function f z will appear stochastic to an observer who does not have access to z. provided that f is continuous and differentiable we can then compute the gradients necessary for training using back-propagation as usual. as an example let us consider the operation consisting of drawing samples y from a gaussian distribution with mean n y and variance because an individual sample of y is not produced by a function but rather by a sampling process whose output changes every time we query it it may seem counterintuitive to take the derivatives of y with respect to the parameters of its distribution and however we can rewrite the sampling process as chapter deep generative models transforming an underlying random value z the desired distribution n to obtain a sample from y z we are now able to back-propagate through the sampling operation by regarding it as a deterministic operation with an extra input z. crucially the extra input is a random variable whose distribution is not a function of any of the variables whose derivatives we want to calculate. the result tells us how an infinitesimal change in or would change the output if we could repeat the sampling operation again with the same value of z. being able to back-propagate through this sampling operation allows us to incorporate it into a larger graph. we can build elements of the graph on top of the output of the sampling distribution. for example we can compute the derivatives of some loss function jy. we can also build elements of the graph whose outputs are the inputs or the parameters of the sampling operation. for example we could build a larger graph with f and gx in this augmented graph we can use back-propagation through these functions to derive j y the principle used in this gaussian sampling example is more generally applix where is a variable containing both parameters and if applicable where may in cable. we can express any probability distribution of the form py or p as py the inputs x. given a value y sampled from distribution py turn be a function of other variables we can rewrite y p as y y z where z is a source of randomness. we may then compute the derivatives of y with respect to using traditional tools such as the back-propagation algorithm applied to f so long as f is continuous and differentiable almost everywhere. crucially must not be a function of z and z must not be a function of this technique is often called the reparametrization trick stochastic back-propagation or perturbation analysis. the requirement that f be continuous and differentiable of course requires y to be continuous. if we wish to back-propagate through a sampling process that produces discrete-valued samples it may still be possible to estimate a gradient on using reinforcement learning algorithms such as variants of the reinforce algorithm discussed in section williams chapter deep generative models in neural network applications we typically choose z to be drawn from some simple distribution such as a unit uniform or unit gaussian distribution and achieve more complex distributions by allowing the deterministic portion of the network to reshape its input. price bonnet the idea of propagating gradients or optimizing through stochastic operations and was dates back to the mid-twentieth century williams first used for machine learning in the context of reinforcement learning more recently it has been applied to variational approximations and stochastic or generative neural networks and archambeau et al. goodfellow many networks such as denoising autoencoders or networks regularized with dropout are also naturally designed to take noise as an input without requiring any special reparametrization to make the noise independent from the model. kingma kingma and welling a rezende et al. et al. back-propagating through discrete stochastic operations when a model emits a discrete variable y the reparametrization trick is not applicable. suppose that the model takes inputs x and parameters both encapsulated in the vector and combines them with random noise z to produce y y z because y is discrete f must be a step function. the derivatives of a step function are not useful at any point. right at each step boundary the derivatives are undefined but that is a small problem. the large problem is that the derivatives are zero almost everywhere on the regions between step boundaries. the derivatives of any cost function j therefore do not give any information for how to update the model parameters the reinforce algorithm increment non-negative factor characteristic eligibility provides a framework defining a offset reinforcement the core idea is that family of simple but powerful solutions even though j is a step function with useless derivatives the expected z is often a smooth function amenable to gradient descent. p f cost ez although that expectation is typically not tractable when y is high-dimensional is the result of the composition of many discrete stochastic decisions it can be estimated without bias using a monte carlo average. the stochastic estimate of the gradient can be used with sgd or other stochastic gradient-based optimization techniques. williams z chapter deep generative models the simplest version of reinforce can be derived by simply differentiating the expected cost ez j y je j p j p p log p y y j y m y m p i j log p relies on the assumption that equation trivial to extend the approach to relax this assumption. equation the derivative rule for the logarithm p an unbiased monte carlo estimator of the gradient. j does not reference directly. it is exploits gives equation log p p anywhere we write py in this section one could equally write py x this is because py is parametrized by and contains both and x if x is present. one issue with the above simple reinforce estimator is that it has a very high variance so that many samples of y need to be drawn to obtain a good estimator of the gradient or equivalently if only one sample is drawn sgd will converge very slowly and will require a smaller learning rate. it is possible to considerably reduce the variance of that estimator by using variance reduction methods the idea is to modify the estimator so that its expected value remains unchanged but its variance get reduced. in the context of reinforce the proposed variance reduction methods involve the computation of a baseline that is used to offset j note that any offset b that does not depend on y would not change the expectation of the estimated gradient because wilson l ecuyer ep log p log p p p p y y y chapter deep generative models which means that ep j y b log p ep j log p b e p log p furthermore we can obtain the optimal b by computing the variance of b that this optimal baseline b under py and minimizing with respect to b what we find is i is different for each element i of the vector log p ep j log p i b ep j log p i ep log p i the gradient estimator with respect to i then becomes j y b i p log i log p i and ep where b estimates the above b the estimate b is usually obtained by adding extra outputs to the neural network and training the new outputs to estimate ep for each element of these extra outputs can be trained with the mean squared error objective using respectively jy as targets when y is sampled from py for a given the estimate b may then be recovered by substituting these estimates into preferred to use a single shared output equation all elements i of trained with the target jy using as baseline b ep j y mnih and gregor p log i log p i and log p i et al. variance reduction methods have been introduced in the reinforcement learning generalizing previous work sutton et al. weaver and tao context bengio mnih on the case of binary reward by dayan see and gregor ba for or et al. examples of modern uses of the reinforce algorithm with reduced variance in the context of deep learning. in addition to the use of an input-dependent baseline b b could be adjusted during training by dividing it by its standard deviation estimated by a moving average during training as a kind of adaptive learning rate to counter the effect of important variations that occur during the course of training in the found that the scale of mnih and gregor et al. xu mnih et al. jy chapter deep generative models magnitude of this quantity. normalization. mnih and gregor called this heuristic variance reinforce-based estimators can be understood as estimating the gradient by correlating choices of y with corresponding values of j if a good value of y is unlikely under the current parametrization it might take a long time to obtain it by chance and get the required signal that this configuration should be reinforced. directed generative nets as discussed in chapter directed graphical models make up a prominent class of graphical models. while directed graphical models have been very popular within the greater machine learning community within the smaller deep learning community they have until roughly been overshadowed by undirected models such as the rbm. in this section we review some of the standard directed graphical models that have traditionally been associated with the deep learning community. we have already described deep belief networks which are a partially directed model. we have also already described sparse coding models which can be thought of as shallow directed generative models. they are often used as feature learners in the context of deep learning though they tend to perform poorly at sample generation and density estimation. we now describe a variety of deep fully directed models. sigmoid belief nets neal sigmoid belief networks are a simple form of directed graphical model with a specific kind of conditional probability distribution. in general we can think of a sigmoid belief network as having a vector of binary states s with each element of the state influenced by its ancestors p s i wjisj bi ji the most common structure of sigmoid belief network is one that is divided into many layers with ancestral sampling proceeding through a series of many hidden layers and then ultimately generating the visible layer. this structure is very similar to the deep belief network except that the units at the beginning of chapter deep generative models the sampling process are independent from each other rather than sampled from a restricted boltzmann machine. such a structure is interesting for a variety of reasons. one reason is that the structure is a universal approximator of probability distributions over the visible units in the sense that it can approximate any probability distribution over binary variables arbitrarily well given enough depth even if the width of the individual layers is restricted to the dimensionality of the visible layer and hinton while generating a sample of the visible units is very efficient in a sigmoid belief network most other operations are not. inference over the hidden units given the visible units is intractable. mean field inference is also intractable because the variational lower bound involves taking expectations of cliques that encompass entire layers. this problem has remained difficult enough to restrict the popularity of directed discrete networks. et al. dayan and hinton one approach for performing inference in a sigmoid belief network is to construct a different lower bound that is specialized for sigmoid belief networks saul et al. this approach has only been applied to very small networks. another approach is to use learned inference mechanisms as described in section the helmholtz machine is a sigmoid belief network combined with an inference network that predicts the parameters of the mean field distribution over the hidden units. modern approaches gregor et al. mnih and gregor to sigmoid belief networks still use this inference network approach. these techniques remain difficult due to the discrete nature of the latent variables. one cannot simply back-propagate through the output of the inference network but instead must use the relatively unreliable machinery for backpropagating through discrete sampling processes described in section recent approaches based on importance sampling reweighted wake-sleep and bengio make it possible to quickly train sigmoid belief networks and reach state-of-the-art performance on benchmark tasks. and bidirectional helmholtz machines bornschein et al. a special case of sigmoid belief networks is the case where there are no latent variables. learning in this case is efficient because there is no need to marginalize latent variables out of the likelihood. a family of models called auto-regressive networks generalize this fully visible belief network to other kinds of variables besides binary variables and other structures of conditional distributions besides loglinear relationships. auto-regressive networks are described later in section chapter deep generative models differentiable generator nets many generative models are based on the idea of using a differentiable generator network. the model transforms samples of latent variables z to samples x or to distributions over samples x using a differentiable function gz which is typically represented by a neural network. this model class includes variational autoencoders which pair the generator net with an inference net generative adversarial networks which pair the generator network with a discriminator network and techniques that train generator networks in isolation. generator networks are essentially just parametrized computational procedures for generating samples where the architecture provides the family of possible distributions to sample from and the parameters select a distribution from within that family. as an example the standard procedure for drawing samples from a normal distribution with mean and covariance is to feed samples z from a normal distribution with zero mean and identity covariance into a very simple generator network. this generator network contains just one affine layer x z lz where l is given by the cholesky decomposition of pseudorandom number generators can also use nonlinear transformations of simple distributions. for example inverse transform sampling draws a scalar z from u and applies a nonlinear transformation to a scalar x. in this case gz is given by the inverse of the cumulative distribution function x pvdv if we are able to specify px integrate over x and invert the f resulting function we can sample from without using machine learning. p x to generate samples from more complicated distributions that are difficult to specify directly difficult to integrate over or whose resulting integrals are difficult to invert we use a feedforward network to represent a parametric family of nonlinear functions g and use training data to infer the parameters selecting the desired function. we can think of g as providing a nonlinear change of variables that transforms the distribution over z into the desired distribution over x recall from equation that for invertible differentiable continuous g pz z px g z det g z chapter deep generative models this implicitly imposes a probability distribution over pz det g z px of course this formula may be difficult to evaluate depending on the choice of g so we often use indirect means of learning g rather than trying to maximize log p x directly. in some cases rather than using g to provide a sample of x directly we use g to define a conditional distribution over x. for example we could use a generator net whose final layer consists of sigmoid outputs to provide the mean parameters of bernoulli distributions pxi in this case when we use g to define px z marginalizing z g z i we impose a distribution over x by x z ezp p x both approaches define a distribution pgx and allow us to train various criteria of pg using the reparametrization trick of section the two different approaches to formulating generator nets emitting the parameters of a conditional distribution versus directly emitting samples have complementary strengths and weaknesses. when the generator net defines a conditional distribution over x it is capable of generating discrete data as well as continuous data. when the generator net provides samples directly it is capable of generating only continuous data could introduce discretization in the forward propagation but doing so would mean the model could no longer be trained using back-propagation. the advantage to direct sampling is that we are no longer forced to use conditional distributions whose form can be easily written down and algebraically manipulated by a human designer. approaches based on differentiable generator networks are motivated by the success of gradient descent applied to differentiable feedforward networks for classification. in the context of supervised learning deep feedforward networks trained with gradient-based learning seem practically guaranteed to succeed given enough hidden units and enough training data. can this same recipe for success transfer to generative modeling? generative modeling seems to be more difficult than classification or regression because the learning process requires optimizing intractable criteria. in the context chapter deep generative models of differentiable generator nets the criteria are intractable because the data does not specify both the inputs z and the outputs x of the generator net. in the case of supervised learning both the inputs x and the outputs y were given and the optimization procedure needs only to learn how to produce the specified mapping. in the case of generative modeling the learning procedure needs to determine how to arrange space in a useful way and additionally how to map from to x z z et al. dosovitskiy studied a simplified problem where the correspondence between z and x is given. specifically the training data is computer-rendered imagery of chairs. the latent variables z are parameters given to the rendering engine describing the choice of which chair model to use the position of the chair and other configuration details that affect the rendering of the image. using this synthetically generated data a convolutional network is able to learn to map z descriptions of the content of an image to x approximations of rendered images. this suggests that contemporary differentiable generator networks have sufficient model capacity to be good generative models and that contemporary optimization algorithms have the ability to fit them. the difficulty lies in determining how to train generator networks when the value of z for each x is not fixed and known ahead of each time. the following sections describe several approaches to training differentiable generator nets given only training samples of variational autoencoders the variational autoencoder or vae is a directed model that uses learned approximate inference and can be trained purely with gradient-based methods. kingma rezende et al. to generate a sample from the model the vae first draws a sample z from the code distribution pmodel the sample is then run through a differentiable generator network gz finally x is sampled from a distribution pmodelx gz pmodelx z however during training the approximate inference network encoder qz x is then viewed as a decoder network. is used to obtain z and pmodelx z the key insight behind variational autoencoders is that they may be trained l by maximizing the variational lower bound h z x q z q q z x z x log pmodel log pmodel l q ez ez x q z dkl x pmodel x z associated with data point x log p model chapter deep generative models we recognize the first term as the joint log-likelihood of the visible in equation and hidden variables under the approximate posterior over the latent variables like with em except that we use an approximate rather than the exact posterior. we recognize also a second term the entropy of the approximate posterior. when q is chosen to be a gaussian distribution with noise added to a predicted mean value maximizing this entropy term encourages increasing the standard deviation of this noise. more generally this entropy term encourages the variational posterior to place high probability mass on many z values that could have generated x rather than collapsing to a single point estimate of the most likely value. in equation we recognize the first term as the reconstruction log-likelihood found in other autoencoders. the second term tries to make the approximate posterior distribution qz x and the model prior pmodelz approach each other. traditional approaches to variational inference and learning infer q via an opti. these mization algorithm typically iterated fixed point equations q log p modelz x approaches are slow and often require the ability to compute ez in closed form. the main idea behind the variational autoencoder is to train a parametric encoder sometimes called an inference network or recognition model that produces the parameters of q. so long as z is a continuous variable we can then back-propagate through samples of z drawn from qz x q fx in order to obtain a gradient with respect to learning then consists solely of maximizing with respect to the parameters of the encoder and decoder. all of the expectations in may be approximated by monte carlo sampling. l l the variational autoencoder approach is elegant theoretically pleasing and simple to implement. it also obtains excellent results and is among the state of the art approaches to generative modeling. its main drawback is that samples from variational autoencoders trained on images tend to be somewhat blurry. the causes of this phenomenon are not yet known. one possibility is that the blurriness is an intrinsic effect of maximum likelihood which minimizes dklpdata pmodel. as illustrated in figure this means that the model will assign high probability to points that occur in the training set but may also assign high probability to other points. these other points may include blurry images. part of the reason that the model would choose to put probability mass on blurry images rather than some other part of the space is that the variational autoencoders used in practice usually have a gaussian distribution for pmodelx gz. maximizing a lower bound on the likelihood of such a distribution is similar to training a traditional autoencoder with mean squared error in the sense that it has a tendency to ignore features of the input that occupy few pixels or that cause only a small change in the brightness of the pixels that they occupy. this issue is not specific to vaes and chapter deep generative models pmodel as argued by is shared with generative models that optimize a log-likelihood or equivalently dklp data another troubling issue with contemporary vae models is that they tend to use only a small subset of the dimensions of z as if the encoder was not able to transform enough of the local directions in input space to a space where the marginal distribution matches the factorized prior. theis et al. huszar and by the vae framework is very straightforward to extend to a wide range of model architectures. this is a key advantage over boltzmann machines which require extremely careful model design to maintain tractability. vaes work very well with a diverse family of differentiable operators. one particularly sophisticated vae is the deep recurrent attention writer or draw model draw uses a recurrent encoder and recurrent decoder combined with an attention mechanism. the generation process for the draw model consists of sequentially visiting different small image patches and drawing the values of the pixels at those points. vaes can also be extended to generate sequences by defining variational rnns by using a recurrent encoder and decoder within the vae framework. generating a sample from a traditional rnn involves only non-deterministic operations at the output space. variational rnns also have random variability at the potentially more abstract level captured by the vae latent variables. chung et al. gregor et al. the vae framework has been extended to maximize not just the traditional variational lower bound but instead the importance weighted autoencoder burda et al. objective l k x q qz x log k k pmodelx z x qz l this new objective is equivalent to the traditional lower bound when k however it may also be interpreted as forming an estimate of the true log pmodelx using importance sampling of z from proposal distribution qz x the importance weighted autoencoder objective is also a lower bound on log pmodel and becomes tighter as increases. k variational autoencoders have some interesting connections to the mp-dbm and other approaches that involve back-propagation through the approximate inference graph these previous approaches required an inference procedure such as mean field fixed point equations to provide the computational graph. the variational autoencoder is defined for arbitrary computational graphs which makes it applicable to a wider range of probabilistic model families because there is no need to restrict the choice stoyanov brakel et al. et al. et al. chapter deep generative models of models to those with tractable mean field fixed point equations. the variational autoencoder also has the advantage that it increases a bound on the log-likelihood of the model while the criteria for the mp-dbm and related models are more heuristic and have little probabilistic interpretation beyond making the results of approximate inference accurate. one disadvantage of the variational autoencoder is that it learns an inference network for only one problem inferring z given x. the older methods are able to perform approximate inference over any subset of variables given any other subset of variables because the mean field fixed point equations specify how to share parameters between the computational graphs for all of these different problems. one very nice property of the variational autoencoder is that simultaneously training a parametric encoder in combination with the generator network forces the model to learn a predictable coordinate system that the encoder can capture. this makes it an excellent manifold learning algorithm. see figure for examples of low-dimensional manifolds learned by the variational autoencoder. in one of the cases demonstrated in the figure the algorithm discovered two independent factors of variation present in images of faces angle of rotation and emotional expression. generative adversarial networks generative adversarial networks or gans generative modeling approach based on differentiable generator networks. goodfellow et al. are another generative adversarial networks are based on a game theoretic scenario in which the generator network must compete against an adversary. the generator network directly produces samples x gz its adversary the discriminator network attempts to distinguish between samples drawn from the training data and samples drawn from the generator. the discriminator emits a probability value given by dx indicating the probability that x is a real training example rather than a fake sample drawn from the model. the simplest way to formulate learning in generative adversarial networks is as a zero-sum game in which a function v determines the payoff of the v as its own payoff. during discriminator. the generator receives learning each player attempts to maximize its own payoff so that at convergence g arg min g v g d max d the default choice for isv v ex p data log d x pmodel e x log d x chapter deep generative models figure examples of two-dimensional coordinate systems for high-dimensional manifolds learned by a variational autoencoder and welling two dimensions may be plotted directly on the page for visualization so we can gain an understanding of how the model works by training a model with a latent code even if we believe the intrinsic dimensionality of the data manifold is much higher. the images shown are not examples from the training set but images x actually generated by the model px z simply by changing the code z image corresponds to a different choice of code z on a uniform grid. two-dimensional map of the frey faces manifold. one dimension that has been discovered mostly corresponds to a rotation of the face while the other corresponds to the emotional expression. the two-dimensional map of the mnist manifold. this drives the discriminator to attempt to learn to correctly classify samples as real or fake. simultaneously the generator attempts to fool the classifier into believing its samples are real. at convergence the generator s samples are indistinguishable from real data and the discriminator outputs everywhere. the discriminator may then be discarded. the main motivation for the design of gans is that the learning process requires neither approximate inference nor approximation of a partition function gradient. in the case where maxd vg d is convex in as the case where optimization is performed directly in the space of probability density functions the procedure is guaranteed to converge and is asymptotically consistent. unfortunately learning in gans can be difficult in practice when g and d are represented by neural networks and maxd vg d is not convex. goodfellow chapter deep generative models identified non-convergence as an issue that may cause gans to underfit. in general simultaneous gradient descent on two players costs is not guaranteed to reach an equilibrium. consider for example the value function va b ab where one player controls a and incurs cost ab while the other player controls b and receives a cost ab. if we model each player as making infinitesimally small gradient steps each player reducing their own cost at the expense of the other player then a and b go into a stable circular orbit rather than arriving at the equilibrium point at the origin. note that the equilibria for a minimax game are not local minima of v. instead they are points that are simultaneously minima for both players costs. this means that they are saddle points of v that are local minima with respect to the first player s parameters and local maxima with respect to the second player s parameters. it is possible for the two players to take turns increasing then decreasing v forever rather than landing exactly on the saddle point where neither player is capable of reducing its cost. it is not known to what extent this non-convergence problem affects gans. goodfellow identified an alternative formulation of the payoffs in which the game is no longer zero-sum that has the same expected gradient as maximum likelihood learning whenever the discriminator is optimal. because maximum likelihood training converges this reformulation of the gan game should also converge given enough samples. unfortunately this alternative formulation does not seem to improve convergence in practice possibly due to suboptimality of the discriminator or possibly due to high variance around the expected gradient. goodfellow et al. in realistic experiments the best-performing formulation of the gan game is a different formulation that is neither zero-sum nor equivalent to maximum likelihood introduced by with a heuristic motivation. in this best-performing formulation the generator aims to increase the log probability that the discriminator makes a mistake rather than aiming to decrease the log probability that the discriminator makes the correct prediction. this reformulation is motivated solely by the observation that it causes the derivative of the generator s cost function with respect to the discriminator s logits to remain large even in the situation where the discriminator confidently rejects all generator samples. stabilization of gan learning remains an open problem. fortunately gan learning performs well when the model architecture and hyperparameters are carefully selected. crafted a deep convolutional gan that performs very well for image synthesis tasks and showed that its latent representation space captures important factors of variation as shown in figure see figure for examples of images generated by a dcgan generator. radford et al. the gan learning problem can also be simplified by breaking the generation chapter deep generative models figure images generated by gans trained on the lsun dataset. of bedrooms generated by a dcgan model reproduced with permission from radford et al. images of churches generated by a lapgan model reproduced with permission from denton et al. that learn to sample from a distribution px y process into many levels of detail. it is possible to train conditional gans rather and osindero than simply sampling from a marginal distribution px. denton et al. showed that a series of conditional gans can be trained to first generate a very low-resolution version of an image then incrementally add details to the image. this technique is called the lapgan model due to the use of a laplacian pyramid to generate the images containing varying levels of detail. lapgan generators are able to fool not only discriminator networks but also human observers with experimental subjects identifying up to of the outputs of the network as being real data. see figure for examples of images generated by a lapgan generator. one unusual capability of the gan training procedure is that it can fit probability distributions that assign zero probability to the training points. rather than maximizing the log probability of specific points the generator net learns to trace out a manifold whose points resemble training points in some way. somewhat paradoxically this means that the model may assign a log-likelihood of negative infinity to the test set while still representing a manifold that a human observer judges to capture the essence of the generation task. this is not clearly an advantage or a disadvantage and one may also guarantee that the generator network assigns non-zero probability to all points simply by making the last layer of the generator network add gaussian noise to all of the generated values. generator networks that add gaussian noise in this manner sample from the same distribution that one obtains by using the generator network to parametrize the mean of a conditional chapter deep generative models gaussian distribution. dropout seems to be important in the discriminator network. in particular units should be stochastically dropped while computing the gradient for the generator network to follow. following the gradient of the deterministic version of the discriminator with its weights divided by two does not seem to be as effective. likewise never using dropout seems to yield poor results. while the gan framework is designed for differentiable generator networks similar principles can be used to train other kinds of models. for example selfsupervised boosting can be used to train an rbm generator to fool a logistic regression discriminator et al. generative moment matching networks generative moment matching networks li et al. dziugaite et al. are another form of generative model based on differentiable generator networks. unlike vaes and gans they do not need to pair the generator network with any other network neither an inference network as used with vaes nor a discriminator network as used with gans. these networks are trained with a technique called moment matching. the basic idea behind moment matching is to train the generator in such a way that many of the statistics of samples generated by the model are as similar as possible to those of the statistics of the examples in the training set. in this context a moment is an expectation of different powers of a random variable. for example the first moment is the mean the second moment is the mean of the squared values and so on. in multiple dimensions each element of the random vector may be raised to different powers so that a moment may be any quantity of the form where n n nd ex i xni i is a vector of non-negative integers. upon first examination this approach seems to be computationally infeasible. for example if we want to match all the moments of the form xixj then we need to minimize the difference between a number of values that is quadratic in the dimension of x. moreover even matching all of the first and second moments would only be sufficient to fit a multivariate gaussian distribution which captures only linear relationships between values. our ambitions for neural networks are to capture complex nonlinear relationships which would require far more moments. gans avoid this problem of exhaustively enumerating all moments by using a chapter deep generative models dynamically updated discriminator that automatically focuses its attention on whichever statistic the generator network is matching the least effectively. et al. instead generative moment matching networks can be trained by minimizing a cost function called maximum mean discrepancy lkopf and smola gretton or mmd. this cost function measures the error in the first moments in an infinite-dimensional space using an implicit mapping to feature space defined by a kernel function in order to make computations on infinite-dimensional vectors tractable. the mmd cost is zero if and only if the two distributions being compared are equal. visually the samples from generative moment matching networks are somewhat disappointing. fortunately they can be improved by combining the generator network with an autoencoder. first an autoencoder is trained to reconstruct the training set. next the encoder of the autoencoder is used to transform the entire training set into code space. the generator network is then trained to generate code samples which may be mapped to visually pleasing samples via the decoder. unlike gans the cost function is defined only with respect to a batch of examples from both the training set and the generator network. it is not possible to make a training update as a function of only one training example or only one sample from the generator network. this is because the moments must be computed as an empirical average across many samples. when the batch size is too small mmd can underestimate the true amount of variation in the distributions being sampled. no finite batch size is sufficiently large to eliminate this problem entirely but larger batches reduce the amount of underestimation. when the batch size is too large the training procedure becomes infeasibly slow because many examples must be processed in order to compute a single small gradient step. as with gans it is possible to train a generator net using mmd even if that generator net assigns zero probability to the training points. convolutional generative networks when generating images it is often useful to use a generator network that includes a convolutional structure for example goodfellow dosovitskiy to do so we use the transpose of the convolution operator et al. described in section this approach often yields more realistic images and does so using fewer parameters than using fully connected layers without parameter sharing. et al. or convolutional networks for recognition tasks have information flow from the image to some summarization layer at the top of the network often a class label. chapter deep generative models as this image flows upward through the network information is discarded as the representation of the image becomes more invariant to nuisance transformations. in a generator network the opposite is true. rich details must be added as the representation of the image to be generated propagates through the network culminating in the final representation of the image which is of course the image itself in all of its detailed glory with object positions and poses and textures and lighting. the primary mechanism for discarding information in a convolutional recognition network is the pooling layer. the generator network seems to need to add information. we cannot put the inverse of a pooling layer into the generator network because most pooling functions are not invertible. a simpler operation is to merely increase the spatial size of the representation. an approach that seems to perform acceptably is to use an un-pooling as introduced by dosovitskiy et al. this layer corresponds to the inverse of the max-pooling operation under certain simplifying conditions. first the stride of the max-pooling operation is constrained to be equal to the width of the pooling region. second the maximum input within each pooling region is assumed to be the input in the upper-left corner. finally all non-maximal inputs within each pooling region are assumed to be zero. these are very strong and unrealistic assumptions but they do allow the max-pooling operator to be inverted. the inverse un-pooling operation allocates a tensor of zeros then copies each value from spatial coordinate i of the input to spatial coordinate i of the output. the integer value k defines the size of the pooling region. even though the assumptions motivating the definition of the un-pooling operator are unrealistic the subsequent layers are able to learn to compensate for its unusual output so the samples generated by the model as a whole are visually pleasing. k auto-regressive networks auto-regressive networks are directed probabilistic models with no latent random variables. the conditional probability distributions in these models are represented by neural networks extremely simple neural networks such as logistic regression. the graph structure of these models is the complete graph. they decompose a joint probability over the observed variables using the chain rule of xd probability to obtain a product of conditionals of the form pxd such models have been called fully-visible bayes networks and used successfully in many forms first with logistic regression for each conditional and then with neural networks with hidden units distribution in some forms of autoand bengio larochelle and murray regressive networks such as nade described larochelle and murray chapter deep generative models below we can introduce a form of parameter sharing that in section brings both a statistical advantage unique parameters and a computational advantage computation. this is one more instance of the recurring deep learning motif of reuse of features. p x p x p x p x p x p x p x p x x x x x figure a fully visible belief network predicts the i-th variable from the i previous ones. corresponding computational graph in the case of the logistic fvbn where each prediction is made by a linear predictor. the directed graphical model for an fvbn. linear auto-regressive networks the simplest form of auto-regressive network has no hidden units and no sharing xi is parametrized as a linear of parameters or features. each p model regression for real-valued data logistic regression for binary data softmax regression for discrete data. this model was introduced by frey and has parameters when there are d variables to model. it is illustrated in figure if the variables are continuous a linear auto-regressive model is merely another way to formulate a multivariate gaussian distribution capturing linear pairwise interactions between the observed variables. linear auto-regressive networks are essentially the generalization of linear classification methods to generative modeling. they therefore have the same chapter deep generative models advantages and disadvantages as linear classifiers. like linear classifiers they may be trained with convex loss functions and sometimes admit closed form solutions in the gaussian case. like linear classifiers the model itself does not offer a way of increasing its capacity so capacity must be raised using techniques like basis expansions of the input or the kernel trick. p x p x p x p x p x p x p x p x x x x x figure a neural auto-regressive network predicts the i-th variable xi from the i previous ones but is parametrized so that features of hidden units denoted hi that are functions of xi can be reused in predicting all of the subsequent variables xd. neural auto-regressive networks bengio and bengio b have the same neural auto-regressive networks left-to-right graphical model as logistic auto-regressive networks but employ a different parametrization of the conditional distributions within that graphical model structure. the new parametrization is more powerful in the sense that its capacity can be increased as much as needed allowing approximation of any joint distribution. the new parametrization can also improve generalization by introducing a parameter sharing and feature sharing principle common to deep learning in general. the models were motivated by the objective of avoiding the curse of dimensionality arising out of traditional tabular graphical models sharing the same structure as figure in tabular discrete probabilistic models each conditional distribution is represented by a table of probabilities with one entry and one parameter for each possible configuration of the variables involved. by using a neural network instead two advantages are obtained chapter deep generative models the parametrization of each p xi by a neural network with k inputs and k outputs the variables are discrete and take k values encoded one-hot allows one to estimate the conditional probability without requiring an exponential number of parameters examples yet still is able to capture high-order dependencies between the random variables. left-to-right connectivity illustrated in figure instead of having a different neural network for the prediction of each xi a allows one to merge all the neural networks into one. equivalently it means that the hidden layer features computed for predicting xi can be reused for predicting xi k the hidden units are thus organized in groups that have the particularity that all the units in the i-th group only depend on the input values xi. the parameters used to compute these hidden units are jointly optimized to improve the prediction of all the variables in the sequence. this is an instance of the reuse principle that recurs throughout deep learning in scenarios ranging from recurrent and convolutional network architectures to multi-task and transfer learning. each pxi xi can represent a conditional distribution by having outputs of the neural network predict parameters of the conditional distribution of xi as discussed in section although the original neural auto-regressive networks were initially evaluated in the context of purely discrete multivariate data a sigmoid output for a bernoulli variable or softmax output for a multinoulli variable it is natural to extend such models to continuous variables or joint distributions involving both discrete and continuous variables. nade the neural autoregressive density estimator is a very successful recent form of neural auto-regressive network and murray the connectivity is the same as for the original neural auto-regressive network of bengio but nade introduces an additional parameter sharing scheme and bengio as illustrated in figure the parameters of the hidden units of different groups j are shared. the weights w of hidden unit h k jki from the i-th input xi to the k element of the j-th group j are shared among the groups i jki wki. w the remaining weights where j i are zero. chapter deep generative models p x p x p x p x p x p x p x p x w w w w w w x x x x figure an illustration of the neural autoregressive density estimator the hidden units are organized in groups h so that only the inputs x i participate in computing h and predicting p for j i. nade is differentiated from earlier neural auto-regressive networks by the use of a particular weight sharing pattern w jki wki is shared in the figure by the use of the same line pattern for every instance of a replicated weight for all the weights going out from xi to the k-th unit of any group wni is denoted wi. recall that the vector i xj j larochelle and murray chose this sharing scheme so that forward propagation in a nade model loosely resembles the computations performed in mean field inference to fill in missing inputs in an rbm. this mean field inference corresponds to running a recurrent network with shared weights and the first step of that inference is the same as in nade. the only difference is that with nade the output weights connecting the hidden units to the output are parametrized independently from the weights connecting the input units to the hidden units. in the rbm the hidden-to-output weights are the transpose of the input-to-hidden weights. the nade architecture can be extended to mimic not just one time step of the mean field recurrent inference but to mimic k steps. this approach is called nade k raiko et al. as mentioned previously auto-regressive networks may be extend to process continuous-valued data. a particularly powerful and generic way of parametrizing a continuous density is as a gaussian mixture in section with mixture weights i coefficient or prior probability for component i percomponent conditional mean i and per-component conditional variance i a uses this parametrization to extend nade model called rnade to real values. as with other mixture density networks the parameters of this uria et al. chapter deep generative models distribution are outputs of the network with the mixture weight probabilities produced by a softmax unit and the variances parametrized so that they are positive. stochastic gradient descent can be numerically ill-behaved due to the interactions between the conditional means i and the conditional variances i to reduce this difficulty use a pseudo-gradient that replaces the gradient on the mean in the back-propagation phase. uria et al. another very interesting extension of the neural auto-regressive architectures gets rid of the need to choose an arbitrary order for the observed variables and larochelle in auto-regressive networks the idea is to train the network to be able to cope with any order by randomly sampling orders and providing the information to hidden units specifying which of the inputs are observed the right side of the conditioning bar and which are to be predicted and are thus considered missing the left side of the conditioning bar. this is nice because it allows one to use a trained auto-regressive network to perform any inference problem predict or sample from the probability distribution over any subset of variables given any subset extremely efficiently. finally since many orders of variables are possible for n variables and each order o of variables yields a different we can form an ensemble of models for many values of o o p pensemble p o k k this ensemble model usually generalizes better and assigns higher probability to the test set than does an individual model defined by a single ordering. bengio and bengio in the same paper the authors propose deep versions of the architecture but unfortunately that immediately makes computation as expensive as in the original neural auto-regressive neural network the first layer and the output layer can still be computed in onh multiply-add operations as in the regular nade where h is the number of hidden units size of the in bengio and bengio groups hi in figures o if every previous group at layer l participates in predicting the next group at layer l assuming n groups of h hidden units at each layer. making the i-th group at layer l only depend on the i group as in murray and larochelle at layer l reduces it to o nh however for the other hidden layers the computation is times worse than the regular nade. which is still whereas it is and h chapter deep generative models drawing samples from autoencoders in chapter we saw that many kinds of autoencoders learn the data distribution. there are close connections between score matching denoising autoencoders and contractive autoencoders. these connections demonstrate that some kinds of autoencoders learn the data distribution in some way. we have not yet seen how to draw samples from such models. some kinds of autoencoders such as the variational autoencoder explicitly represent a probability distribution and admit straightforward ancestral sampling. most other kinds of autoencoders require mcmc sampling. contractive autoencoders are designed to recover an estimate of the tangent plane of the data manifold. this means that repeated encoding and decoding with injected noise will induce a random walk along the surface of the manifold et al. this manifold diffusion technique is a kind of markov chain. mesnil et al. there is also a more general markov chain that can sample from any denoising autoencoder. markov chain associated with any denoising autoen coder the above discussion left open the question of what noise to inject and where in order to obtain a markov chain that would generate from the distribution estimated by the autoencoder. showed how to construct such a markov chain for generalized denoising autoencoders. generalized denoising autoencoders are specified by a denoising distribution for sampling an estimate of the clean input given the corrupted input. bengio et al. each step of the markov chain that generates from the estimated distribution consists of the following sub-steps illustrated in figure starting from the previous state x inject corruption noise sampling x from c x x encode x into h x. decode h x p h p x. g x. to obtain the parameters h of sample the next state fromx p x g h p chapter deep generative models hh g f x x c x x xx p x x x figure each step of the markov chain associated with a trained denoising autoencoder that generates the samples from the probabilistic model implicitly trained by the denoising log-likelihood criterion. each step consists in injecting noise via corruption process c in state x yielding x encoding it with function f yielding h f x decoding the result with function g yielding parameters for the reconstruction distribution and given sampling a new state from the reconstruction distribution gf x in the typical squared reconstruction error case g x which px estimates ex x corruption consists in adding gaussian noise and sampling from consists in adding gaussian noise a second time to the reconstruction x. the px latter noise level should correspond to the mean squared error of reconstructions whereas the injected noise is a hyperparameter that controls the mixing speed as well as the extent to which the estimator smooths the empirical distribution in the example illustrated here only the c and p conditionals are stochastic steps and g are deterministic computations although noise can also be injected inside the autoencoder as in generative stochastic networks bengio et al. vincent chapter deep generative models showed that if the autoencoder p x et al. x forms a consistent bengio estimator of the corresponding true conditional distribution then the stationary distribution of the above markov chain forms a consistent estimator an implicit one of the data generating distribution of clamping and conditional sampling similarly to boltzmann machines denoising autoencoders and their generalizations as gsns described below can be used to sample from a conditional distrixo simply by clamping the observed units xf and only resampling bution pxf the free units xo given xf and the sampled latent variables any. for example mp-dbms can be interpreted as a form of denoising autoencoder and are able to sample missing inputs. gsns later generalized some of the ideas present in mp-dbms to perform the same operation bengio et al. alain et al. identified a missing condition from proposition of which is that the transition operator by the stochastic mapping going from one state of the chain to the next should satisfy a property called detailed balance which specifies that a markov chain at equilibrium will remain in equilibrium whether the transition operator is run in forward or reverse. bengio et al. an experiment in clamping half of the pixels right part of the image and running the markov chain on the other half is shown in figure chapter deep generative models figure illustration of clamping the right half of the image and running the markov chain by resampling only the left half at each step. these samples come from a gsn trained to reconstruct mnist digits at each time step using the walkback procedure. walk-back training procedure bengio et al. the walk-back training procedure was proposed by as a way to accelerate the convergence of generative training of denoising autoencoders. instead of performing a one-step encode-decode reconstruction this procedure consists in alternative multiple stochastic encode-decode steps in the generative markov chain initialized at a training example like with the contrastive divergence algorithm described in section and penalizing the last probabilistic reconstructions all of the reconstructions along the way. training with k steps is equivalent the sense of achieving the same stationary distribution as training with one step but practically has the advantage that spurious modes further from the data can be removed more efficiently. generative stochastic networks generative stochastic networks or gsns are generalizations of denoising autoencoders that include latent variables h in the generative bengio et al. chapter deep generative models markov chain in addition to the visible variables denoted a gsn is parametrized by two conditional probability distributions which specify one step of the markov chain px h tells how to generate the next visible variable given the current latent state. such a reconstruction distribution is also found in denoising autoencoders rbms dbns and dbms. ph h k k x tells how to update the latent state variable given the previous latent state and visible variable. denoising autoencoders and gsns differ from classical probabilistic models or undirected in that they parametrize the generative process itself rather than the mathematical specification of the joint distribution of visible and latent variables. instead the latter is defined as the stationary distribution of the generative markov chain. the conditions for existence of the stationary distribution are mild and are the same conditions required by standard mcmc methods section these conditions are necessary to guarantee that the chain mixes but they can be violated by some choices of the transition distributions example if they were deterministic. implicitly if it exists bengio et al. one could imagine different training criteria for gsns. the one proposed and evaluated by is simply reconstruction log-probability on the visible units just like for denoising autoencoders. this is achieved by clamping x to the observed example and maximizing the probability of generating x at some subsequent time steps i.e. maximizing log px x h where h is sampled from the chain given x. in order to estimate the gradient of log px x h with respect to the other pieces of the model bengio et al. use the reparametrization trick introduced in section the walk-back training protocol in section to improve training convergence of gsns. et al. gio discriminant gsns was used ben the original formulation of gsns was meant for unsupervised learning and implicitly modeling px for observed data x but it is possible to modify the framework to optimize bengio et al. x p y for example zhou and troyanskaya generalize gsns in this way by only back-propagating the reconstruction log-probability over the output variables keeping the input variables fixed. they applied this successfully to model sequences chapter deep generative models secondary structure and introduced a convolutional structure in the transition operator of the markov chain. it is important to remember that for each step of the markov chain one generates a new sequence for each layer and that sequence is the input for computing other layer values the one below and the one above at the next time step. hence the markov chain is really over the output variable associated higherlevel hidden layers and the input sequence only serves to condition that chain with back-propagation allowing to learn how the input sequence can condition the output distribution implicitly represented by the markov chain. it is therefore a case of using the gsn in the context of structured outputs. z hrer and pernkopf introduced a hybrid model that combines a supervised objective in the above work and an unsupervised objective in the original gsn work by simply adding a different weight the supervised and unsupervised costs i.e. the reconstruction log-probabilities of y and x respectively. such a hybrid criterion had previously been introduced for rbms by larochelle and bengio they show improved classification performance using this scheme. other generation schemes the methods we have described so far use either mcmc sampling ancestral sampling or some mixture of the two to generate samples. while these are the most popular approaches to generative modeling they are by no means the only approaches. et al. sohl-dickstein developed a diffusion inversion training scheme for learning a generative model based on non-equilibrium thermodynamics. the approach is based on the idea that the probability distributions we wish to sample from have structure. this structure can gradually be destroyed by a diffusion process that incrementally changes the probability distribution to have more entropy. to form a generative model we can run the process in reverse by training a model that gradually restores the structure to an unstructured distribution. by iteratively applying a process that brings a distribution closer to the target one we can gradually approach that target distribution. this approach resembles mcmc methods in the sense that it involves many iterations to produce a sample. however the model is defined to be the probability distribution produced by the final step of the chain. in this sense there is no approximation induced by the iterative procedure. the approach introduced by sohl-dickstein et al. is also very close to the generative interpretation of the denoising autoencoder chapter deep generative models as with the denoising autoencoder diffusion inversion trains a transition operator that attempts to probabilistically undo the effect of adding some noise. the difference is that diffusion inversion requres undoing only one step of the diffusion process rather than traveling all the way back to a clean data point. this addresses the following dilemma present with the ordinary reconstruction log-likelihood objective of denoising autoencoders with small levels of noise the learner only sees configurations near the data points while with large levels of noise it is asked to do an almost impossible job the denoising distribution is highly complex and multi-modal. with the diffusion inversion objective the learner can learn the shape of the density around the data points more precisely as well as remove spurious modes that could show up far from the data points. rubin et al. another approach to sample generation is the approximate bayesian com. in this approach samples are putation framework rejected or modified in order to make the moments of selected functions of the samples match those of the desired distribution. while this idea uses the moments of the samples like in moment matching it is different from moment matching because it modifies the samples themselves rather than training the model to automatically emit samples with the correct moments. bachman and precup showed how to use ideas from abc in the context of deep learning by using abc to shape the mcmc trajectories of gsns. we expect that many other possible approaches to generative modeling await discovery. evaluating generative models researchers studying generative models often need to compare one generative model to another usually in order to demonstrate that a newly invented generative model is better at capturing some distribution than the pre-existing models. this can be a difficult and subtle task. in many cases we can not actually evaluate the log probability of the data under the model but only an approximation. in these cases it is important to think and communicate clearly about exactly what is being measured. for example suppose we can evaluate a stochastic estimate of the log-likelihood for model a and a deterministic lower bound on the log-likelihood for model b. if model a gets a higher score than model b which is better? if we care about determining which model has a better internal representation of the distribution we actually cannot tell unless we have some way of determining how loose the bound for model b is. however if we care about how well we can use the model in practice for example to perform anomaly detection then it is fair to chapter deep generative models say that a model is preferable based on a criterion specific to the practical task of interest e.g. based on ranking test examples and ranking criteria such as precision and recall. another subtlety of evaluating generative models is that the evaluation metrics are often hard research problems in and of themselves. it can be very difficult to establish that models are being compared fairly. for example suppose we use ais to estimate log z in order to compute log px log z for a new model we have just invented. a computationally economical implementation of ais may fail to find several modes of the model distribution and underestimate z which will result in us overestimating log px. it can thus be difficult to tell whether a high likelihood estimate is due to a good model or a bad ais implementation. other fields of machine learning usually allow for some variation in the preprocessing of the data. for example when comparing the accuracy of object recognition algorithms it is usually acceptable to preprocess the input images slightly differently for each algorithm based on what kind of input requirements it has. generative modeling is different because changes in preprocessing even very small and subtle ones are completely unacceptable. any change to the input data changes the distribution to be captured and fundamentally alters the task. for example multiplying the input by will artificially increase likelihood by a factor of issues with preprocessing commonly arise when benchmarking generative models on the mnist dataset one of the more popular generative modeling benchmarks. mnist consists of grayscale images. some models treat mnist images as points in a real vector space while others treat them as binary. yet others treat the grayscale values as probabilities for a binary samples. it is essential to compare real-valued models only to other real-valued models and binary-valued models only to other binary-valued models. otherwise the likelihoods measured are not on the same space. for binary-valued models the log-likelihood can be at most zero while for real-valued models it can be arbitrarily high since it is the measurement of a density. among binary models it is important to compare models using exactly the same kind of binarization. for example we might binarize a gray pixel to or by thresholding at or by drawing a random sample whose probability of being is given by the gray pixel intensity. if we use the random binarization we might binarize the whole dataset once or we might draw a different random example for each step of training and then draw multiple samples for evaluation. each of these three schemes yields wildly different likelihood numbers and when comparing different models it is important that both models use the same binarization scheme for training and for evaluation. in fact researchers who apply a single random chapter deep generative models binarization step share a file containing the results of the random binarization so that there is no difference in results based on different outcomes of the binarization step. et al. because being able to generate realistic samples from the data distribution is one of the goals of a generative model practitioners often evaluate generative models by visually inspecting the samples. in the best case this is done not by the researchers themselves but by experimental subjects who do not know the source of the samples unfortunately it is possible for a very poor probabilistic model to produce very good samples. a common practice to verify if the model only copies some of the training examples is illustrated in figure the idea is to show for some of the generated samples their nearest neighbor in the training set according to euclidean distance in the space of x. this test is intended to detect the case where the model overfits the training set and just reproduces training instances. it is even possible to simultaneously underfit and overfit yet still produce samples that individually look good. imagine a generative model trained on images of dogs and cats that simply learns to reproduce the training images of dogs. such a model has clearly overfit because it does not produces images that were not in the training set but it has also underfit because it assigns no probability to the training images of cats. yet a human observer would judge each individual image of a dog to be high quality. in this simple example it would be easy for a human observer who can inspect many samples to determine that the cats are absent. in more realistic settings a generative model trained on data with tens of thousands of modes may ignore a small number of modes and a human observer would not easily be able to inspect or remember enough images to detect the missing variation. since the visual quality of samples is not a reliable guide we often also evaluate the log-likelihood that the model assigns to the test data when this is computationally feasible. unfortunately in some cases the likelihood seems not to measure any attribute of the model that we really care about. for example real-valued models of mnist can obtain arbitrarily high likelihood by assigning arbitrarily low variance to background pixels that never change. models and algorithms that detect these constant features can reap unlimited rewards even though this is not a very useful thing to do. the potential to achieve a cost approaching negative infinity is present for any kind of maximum likelihood problem with real values but it is especially problematic for generative models of mnist because so many of the output values are trivial to predict. this strongly suggests a need for developing other ways of evaluating generative models. theis et al. review many of the issues involved in evaluating generative chapter deep generative models models including many of the ideas described above. they highlight the fact that there are many different uses of generative models and that the choice of metric must match the intended use of the model. for example some generative models are better at assigning high probability to most realistic points while other generative models are better at rarely assigning high probability to unrealistic points. these differences can result from whether a generative model is designed to minimize d klpdata unfortunately even when we restrict the use of each metric to the task it is most suited for all of the metrics currently in use continue to have serious weaknesses. one of the most important research topics in generative modeling is therefore not just how to improve generative models but in fact designing new techniques to measure our progress. pdata as illustrated in figure pmodel or d klpmodel conclusion training generative models with hidden units is a powerful way to make models understand the world represented in the given training data. by learning a model pmodelx and a representation pmodel x a generative model can provide answers to many inference problems about the relationships between input variables in x and can provide many different ways of representing x by taking expectations of h at different layers of the hierarchy. generative models hold the promise to provide ai systems with a framework for all of the many different intuitive concepts they need to understand and the ability to reason about these concepts in the face of uncertainty. we hope that our readers will find new ways to make these approaches more powerful and continue the journey to understanding the principles that underlie learning and intelligence. bibliography abadi m. agarwal a. barham p. brevdo e. chen z. citro c. corrado g. s. davis a. dean j. devin m. ghemawat s. goodfellow i. harp a. irving g. isard m. jia y. jozefowicz r. kaiser l. kudlur m. levenberg j. man d. monga r. moore s. murray d. olah c. schuster m. shlens j. steiner b. sutskever i. talwar k. tucker p. vanhoucke v. vasudevan v. vi gas f. vinyals o. warden p. wattenberg m. wicke m. yu y. and zheng x. tensorflow large-scale machine learning on heterogeneous systems. software available from tensorflow.org. ackley d. h. hinton g. e. and sejnowski t. j. a learning algorithm for boltzmann machines. cognitive science alain g. and bengio y. what regularized auto-encoders learn from the data generating distribution. in iclr alain g. bengio y. yao l. ric thibodeau-laufer yosinski j. and vincent p. gsns generative stochastic networks. anderson e. the irises of the gasp peninsula. bulletin of the american iris society ba j. mnih v. and kavukcuoglu k. multiple object recognition with visual attention. bachman p. and precup d. variational generative stochastic networks with collaborative shaping. in proceedings of the international conference on machine learning icml lille france july pages bacon p.-l. bengio e. pineau j. and precup d. conditional computation in neural networks using a decision-theoretic approach. in multidisciplinary conference on reinforcement learning and decision making bagnell j. a. and bradley d. m. differentiable sparse coding. in d. koller d. schuurmans y. bengio and l. bottou editors advances in neural information processing systems pages bibliography bahdanau d. cho k. and bengio y. neural machine translation by jointly iclr learning to align and translate. in bahl l. r. brown p. de souza p. v. and mercer r. l. speech recognition with continuous-parameter hidden markov models. computer speech and language baldi p. and hornik k. neural networks and principal component analysis learning from examples without local minima. neural networks baldi p. brunak s. frasconi p. soda g. and pollastri g. exploiting the bioinformatics past and the future in protein secondary structure prediction. baldi p. sadowski p. and whiteson d. searching for exotic particles in high-energy physics with deep learning. nature communications ballard d. h. hinton g. e. and sejnowski t. j. parallel vision computation. nature. barlow h. b. unsupervised learning. neural computation barron a. e. universal approximation bounds for superpositions of a sigmoidal function. ieee trans. on information theory bartholomew d. j. latent variable models and factor analysis. oxford university press. basilevsky a. statistical factor analysis and related methods theory and applications. wiley. bastien f. lamblin p. pascanu r. bergstra j. goodfellow i. j. bergeron a. bouchard n. and bengio y. theano new features and speed improvements. deep learning and unsupervised feature learning nips workshop. basu s. and christensen j. teaching classification boundaries to humans. in aaai baxter j. learning internal representations. in proceedings of the international conference on computational learning theory pages santa cruz california. acm press. bayer j. and osendorfer c. learning stochastic recurrent networks. arxiv e-prints. becker s. and hinton g. a self-organizing neural network that discovers surfaces in random-dot stereograms. nature bibliography behnke s. learning iterative image reconstruction in the neural abstraction pyramid. int. j. computational intelligence and applications beiu v. quintana j. m. and avedillo m. j. vlsi implementations of threshold logic-a comprehensive survey. neural networks ieee transactions on belkin m. and niyogi p. laplacian eigenmaps and spectral techniques for embedding and clustering. in t. dietterich s. becker and z. ghahramani editors advances in neural information processing systems cambridge ma. mit press. belkin m. and niyogi p. laplacian eigenmaps for dimensionality reduction and data representation. neural computation bengio e. bacon p.-l. pineau j. and precup d. conditional computation in neural networks for faster models. bengio s. and bengio y. taking on the curse of dimensionality in joint distributions using neural networks. ieee transactions on neural networks special issue on data mining and knowledge discovery bengio s. vinyals o. jaitly n. and shazeer n. scheduled sampling for sequence prediction with recurrent neural networks. technical report bengio y. artificial neural networks and their application to sequence recognition. ph.d. thesis mcgill university science montreal canada. bengio y. gradient-based optimization of hyperparameters. neural computation bengio y. new distributed probabilistic language models. technical report dept. iro universit de montr al. bengio y. learning deep architectures for ai now publishers. bengio y. deep learning of representations looking forward. in statistical language and speech processing volume of lecture notes in computer science pages springer also in arxiv at bengio y. early inference in energy-based models approximates back-propagation. technical report universite de montreal. bengio y. and bengio s. modeling high-dimensional discrete data with multi layer neural networks. in nips pages mit press. bengio y. and delalleau o. justifying and generalizing contrastive divergence. neural computation bibliography bengio y. and grandvalet y. no unbiased estimator of the variance of k-fold cross-validation. in s. thrun l. saul and b. sch lkopf editors advances in neural information processing systems cambridge ma. mit press cambridge. bengio y. and lecun y. scaling learning algorithms towards ai. in large scale kernel machines. bengio y. and monperrus m. non-local manifold tangent learning. in l. saul y. weiss and l. bottou editors advances in neural information processing systems pages mit press. bengio y. and s n cal j.-s. quick training of probabilistic neural nets by importance sampling. in proceedings of aistats bengio y. and s n cal j.-s. adaptive importance sampling to accelerate training of a neural probabilistic language model. ieee trans. neural networks bengio y. de mori r. flammia g. and kompe r. phonetically motivated acoustic parameters for continuous speech recognition using artificial neural networks. in proceedings of eurospeech bengio y. de mori r. flammia g. and kompe r. neural network-gaussian pages mixture hybrid for speech recognition or density estimation. in morgan kaufmann. nips bengio y. frasconi p. and simard p. the problem of learning long-term in ieee international conference on neural dependencies in recurrent networks. networks pages san francisco. ieee press. paper. bengio y. simard p. and frasconi p. learning long-term dependencies with gradient descent is difficult. ieee tr. neural nets. bengio y. latendresse s. and dugas c. gradient-based learning of hyper parameters. learning conference snowbird. bengio y. ducharme r. and vincent p. a neural probabilistic language model. pages mit nips in t. k. leen t. g. dietterich and v. tresp editors press. bengio y. ducharme r. vincent p. and jauvin c. a neural probabilistic language model. jmlr bengio y. le roux n. vincent p. delalleau o. and marcotte p. convex neural networks. in nips pages bengio y. delalleau o. and le roux n. the curse of highly variable functions for local kernel machines. in nips bibliography bengio y. larochelle h. and vincent p. non-local manifold parzen windows. in nips mit press. bengio y. lamblin p. popovici d. and larochelle h. greedy layer-wise training of deep networks. in nips bengio y. louradour j. collobert r. and weston j. curriculum learning. in icml bengio y. mesnil g. dauphin y. and rifai s. better mixing via deep representations. in icml bengio y. l onard n. and courville a. estimating or propagating gradients through stochastic neurons for conditional computation. bengio y. yao l. alain g. and vincent p. generalized denoising auto encoders as generative models. in nips bengio y. courville a. and vincent p. representation learning a review and new perspectives. ieee trans. pattern analysis and machine intelligence bengio y. thibodeau-laufer e. alain g. and yosinski j. deep generative stochastic networks trainable by backprop. in icml bennett c. efficient estimation of free energy differences from monte carlo data. journal of computational physics bennett j. and lanning s. the netflix prize. berger a. l. della pietra v. j. and della pietra s. a. a maximum entropy approach to natural language processing. computational linguistics berglund m. and raiko t. stochastic gradient estimate variance in contrastive divergence and persistent contrastive divergence. corr bergstra j. incorporating complex cells into neural networks for pattern classification. ph.d. thesis universit de montr al. bergstra j. and bengio y. slow decorrelated features for pretraining complex cell-like networks. in nips bergstra j. and bengio y. random search for hyper-parameter optimization. j. machine learning res. bergstra j. breuleux o. bastien f. lamblin p. pascanu r. desjardins g. turian j. warde-farley d. and bengio y. theano a cpu and gpu math expression compiler. in proc. scipy. bibliography bergstra j. bardenet r. bengio y. and k gl b. algorithms for hyper-parameter optimization. in nips berkes p. and wiskott l. slow feature analysis yields a rich repertoire of complex cell properties. journal of vision bertsekas d. p. and tsitsiklis j. neuro-dynamic programming. athena scientific. besag j. statistical analysis of non-lattice data. the statistician bishop c. m. mixture density networks. bishop c. m. regularization and complexity control in feed-forward networks. in proceedings international conference on artificial neural networks icann volume page bishop c. m. training with noise is equivalent to tikhonov regularization. neural computation bishop c. m. pattern recognition and machine learning. springer. blum a. l. and rivest r. l. training a neural network is np-complete. blumer a. ehrenfeucht a. haussler d. and warmuth m. k. learnability and the vapnik chervonenkis dimension. journal of the acm bonnet g. transformations des signaux al atoires travers les syst mes non lin aires sans m moire. annales des t l communications bordes a. weston j. collobert r. and bengio y. learning structured embeddings of knowledge bases. in aaai bordes a. glorot x. weston j. and bengio y. joint learning of words and meaning representations for open-text semantic parsing. aistats bordes a. glorot x. weston j. and bengio y. a semantic matching energy function for learning with multi-relational data. machine learning special issue on learning semantics. bordes a. usunier n. garcia-duran a. weston j. and yakhnenko o. translating embeddings for modeling multi-relational data. in c. burges l. bottou m. welling z. ghahramani and k. weinberger editors advances in neural information processing systems pages curran associates inc. bornschein j. and bengio y. reweighted wake-sleep. in iclr bibliography bornschein j. shabanian s. fischer a. and bengio y. training bidirectional helmholtz machines. technical report boser b. e. guyon i. m. and vapnik v. n. a training algorithm for optimal margin classifiers. in colt proceedings of the fifth annual workshop on computational learning theory pages new york ny usa. acm. bottou l. online algorithms and stochastic approximations. in d. saad editor online learning in neural networks. cambridge university press cambridge uk. bottou l. from machine learning to machine reasoning. technical report bottou l. multilayer neural networks. deep learning summer school. bottou l. and bousquet o. the tradeoffs of large scale learning. in nips boulanger-lewandowski n. bengio y. and vincent p. modeling temporal dependencies in high-dimensional sequences application to polyphonic music generation and transcription. in icml boureau y. ponce j. and lecun y. a theoretical analysis of feature pooling in vision algorithms. in proc. international conference on machine learning boureau y. le roux n. bach f. ponce j. and lecun y. ask the locals multi-way local pooling for image recognition. in proc. international conference on computer vision ieee. bourlard h. and kamp y. auto-association by multilayer perceptrons and singular value decomposition. biological cybernetics bourlard h. and wellekens c. speech pattern discrimination and multi-layered perceptrons. computer speech and language boyd s. and vandenberghe l. convex optimization cambridge university press new york ny usa. brady m. l. raghavan r. and slawny j. back-propagation fails to separate where perceptrons succeed. ieee transactions on circuits and systems brakel p. stroobandt d. and schrauwen b. training energy-based models for time-series imputation. journal of machine learning research brand m. charting a manifold. in nips pages mit press. bibliography breiman l. bagging predictors. machine learning breiman l. friedman j. h. olshen r. a. and stone c. j. classification and regression trees. wadsworth international group belmont ca. bridle j. s. alphanets a recurrent neural network architecture with a hidden markov model interpretation. speech communication briggman k. denk w. seung s. helmstaedter m. n. and turaga s. c. maximin affinity learning of image segmentation. in pages nips brown p. f. cocke j. pietra s. a. d. pietra v. j. d. jelinek f. lafferty j. d. mercer r. l. and roossin p. s. a statistical approach to machine translation. computational linguistics brown p. f. pietra v. j. d. desouza p. v. lai j. c. and mercer r. l. classcomputational linguistics n based models of natural language. bryson a. and ho y. applied optimal control optimization estimation and control. blaisdell pub. co. bryson jr. a. e. and denham w. f. a steepest-ascent method for solving optimum programming problems. technical report raytheon company missle and space division. bucilu a c. caruana r. and niculescu-mizil a. model compression. in proceedings of the acm sigkdd international conference on knowledge discovery and data mining pages acm. burda y. grosse r. and salakhutdinov r. importance weighted autoencoders. arxiv preprint cai m. shi y. and liu j. deep maxout neural networks for speech recognition. in automatic speech recognition and understanding ieee workshop on pages ieee. carreira-perpi an m. a. and hinton g. e. on contrastive divergence learning. in r. g. cowell and z. ghahramani editors proceedings of the tenth international workshop on artificial intelligence and statistics pages society for artificial intelligence and statistics. caruana r. multitask connectionist learning. in proc. connectionist models summer school pages cauchy a. m thode g n rale pour la r solution de syst mes d quations tan es. in compte rendu des s ances de l acad mie des sciences pages bibliography cayton l. algorithms for manifold learning. technical report ucsd. chandola v. banerjee a. and kumar v. anomaly detection a survey. acm computing surveys chapelle o. weston j. and sch lkopf b. cluster kernels for semi-supervised learning. in s. becker s. thrun and k. obermayer editors advances in neural information processing systems pages cambridge ma. mit press. chapelle o. sch lkopf b. and zien a. editors semi-supervised learning. mit press cambridge ma. chellapilla k. puri s. and simard p. high performance convolutional neural in guy lorette editor tenth international networks for document processing. workshop on frontiers in handwriting recognition la baule universit de rennes suvisoft. httpwww.suvisoft.com. chen b. ting j.-a. marlin b. m. and de freitas n. deep learning of invariant spatio-temporal features from video. deep learning and unsupervised feature learning workshop. chen s. f. and goodman j. t. an empirical study of smoothing techniques for language modeling. computer speech and language chen t. du z. sun n. wang j. wu c. chen y. and temam o. diannao a small-footprint high-throughput accelerator for ubiquitous machine-learning. in proceedings of the international conference on architectural support for programming languages and operating systems pages acm. chen t. li m. li y. lin m. wang n. wang m. xiao t. xu b. zhang c. and zhang z. mxnet a flexible and efficient machine learning library for heterogeneous distributed systems. arxiv preprint dadiannao a machine-learning supercomputer. in chen y. luo t. liu s. zhang s. he l. wang j. li l. chen t. xu z. sun n. et al. microarchitecture annual ieeeacm international symposium on pages ieee. chilimbi t. suzue y. apacible j. and kalyanaraman k. project adam building an efficient and scalable deep learning training system. in usenix symposium on operating systems design and implementation cho k. raiko t. and ilin a. parallel tempering is efficient for learning restricted boltzmann machines. in ijcnn bibliography cho k. raiko t. and ilin a. enhanced gradient and adaptive learning rate for training restricted boltzmann machines. in icml pages cho k. van merri nboer b. gulcehre c. bougares f. schwenk h. and bengio y. learning phrase representations using rnn encoder-decoder for statistical machine translation. in proceedings of the empiricial methods in natural language processing cho k. van merri nboer b. bahdanau d. and bengio y. on the prop arxiv e-prints erties of neural machine translation encoder-decoder approaches. choromanska a. henaff m. mathieu m. arous g. b. and lecun y. the loss surface of multilayer networks. chorowski j. bahdanau d. cho k. and bengio y. end-to-end continuous speech recognition using attention-based recurrent nn first results. christianson b. automatic hessians by reverse accumulation. ima journal of numerical analysis chrupala g. kadar a. and alishahi a. learning language through pictures. arxiv chung j. gulcehre c. cho k. and bengio y. empirical evaluation of gated recurrent neural networks on sequence modeling. nips deep learning workshop arxiv chung j. g l ehre cho k. and bengio y. gated feedback recurrent neural networks. in icml chung j. kastner k. dinh l. goel k. courville a. and bengio y. a recurrent latent variable model for sequential data. in nips ciresan d. meier u. masci j. and schmidhuber j. multi-column deep neural network for traffic sign classification. neural networks ciresan d. c. meier u. gambardella l. m. and schmidhuber j. deep big simple neural nets for handwritten digit recognition. neural computation coates a. and ng a. y. the importance of encoding versus training with sparse coding and vector quantization. in icml coates a. lee h. and ng a. y. an analysis of single-layer networks in unsupervised feature learning. in proceedings of the thirteenth international conference on artificial intelligence and statistics bibliography coates a. huval b. wang t. wu d. catanzaro b. and andrew n. deep learning with cots hpc systems. in s. dasgupta and d. mcallester editors proceedings of the international conference on machine learning volume pages jmlr workshop and conference proceedings. cohen n. sharir o. and shashua a. on the expressive power of deep learning a tensor analysis. collobert r. large scale machine learning. ph.d. thesis universit de paris vi collobert r. deep learning for efficient discriminative parsing. in aistats collobert r. and weston j. a unified architecture for natural language processing deep neural networks with multitask learning. in icml collobert r. and weston j. a unified architecture for natural language processing deep neural networks with multitask learning. in icml collobert r. bengio s. and bengio y. a parallel mixture of svms for very large scale problems. technical report idiap. collobert r. bengio s. and bengio y. parallel mixture of svms for very large scale problems. neural computation collobert r. weston j. bottou l. karlen m. kavukcuoglu k. and kuksa p. natural language processing from scratch. the journal of machine learning research collobert r. kavukcuoglu k. and farabet c. a matlab-like environ ment for machine learning. in biglearn nips workshop. comon p. independent component analysis a new concept? signal processing cortes c. and vapnik v. support vector networks. machine learning couprie c. farabet c. najman l. and lecun y. indoor semantic segmentation using depth information. in international conference on learning representations courbariaux m. bengio y. and david j.-p. low precision arithmetic for deep learning. in iclr workshop. courville a. bergstra j. and bengio y. unsupervised models of images by spike-and-slab rbms. in icml bibliography courville a. desjardins g. bergstra j. and bengio y. the spike-and-slab rbm and extensions to discrete and sparse data distributions. pattern analysis and machine intelligence ieee transactions on cover t. m. and thomas j. a. elements of information theory edition. wiley-interscience. cox d. and pinto n. beyond simple features a large-scale feature search approach to unconstrained face recognition. in automatic face gesture recognition and workshops ieee international conference on pages ieee. cram r h. mathematical methods of statistics. princeton university press. crick f. h. c. and mitchison g. the function of dream sleep. nature cybenko g. approximation by superpositions of a sigmoidal function. mathematics of control signals and systems dahl g. e. ranzato m. mohamed a. and hinton g. e. phone recognition with the mean-covariance restricted boltzmann machine. in nips dahl g. e. yu d. deng l. and acero a. context-dependent pre-trained deep neural networks for large vocabulary speech recognition. ieee transactions on audio speech and language processing dahl g. e. sainath t. n. and hinton g. e. improving deep neural networks for lvcsr using rectified linear units and dropout. in icassp dahl g. e. jaitly n. and salakhutdinov r. multi-task neural networks for qsar predictions. dauphin y. and bengio y. stochastic ratio matching of rbms for sparse high-dimensional inputs. in nips foundation. dauphin y. glorot x. and bengio y. large-scale learning of embeddings with reconstruction sampling. in icml dauphin y. pascanu r. gulcehre c. cho k. ganguli s. and bengio y. identifying and attacking the saddle point problem in high-dimensional non-convex optimization. in nips davis a. rubinstein m. wadhwa n. mysore g. durand f. and freeman w. t. the visual microphone passive recovery of sound from video. acm transactions on graphics siggraph bibliography dayan p. reinforcement comparison. in connectionist models proceedings of the connectionist summer school san mateo ca. dayan p. and hinton g. e. varieties of helmholtz machine. neural networks dayan p. hinton g. e. neal r. m. and zemel r. s. the helmholtz machine. neural computation dean j. corrado g. monga r. chen k. devin m. le q. mao m. ranzato m. senior a. tucker p. yang k. and ng a. y. large scale distributed deep networks. in nips dean t. and kanazawa k. a model for reasoning about persistence and causation. computational intelligence deerwester s. dumais s. t. furnas g. w. landauer t. k. and harshman r. indexing by latent semantic analysis. journal of the american society for information science delalleau o. and bengio y. shallow vs. deep sum-product networks. in nips deng j. dong w. socher r. li l.-j. li k. and fei-fei l. imagenet a large-scale hierarchical image database. in deng j. berg a. c. li k. and fei-fei l. what does classifying more than image categories tell us? in proceedings of the european conference on computer vision part v eccv pages berlin heidelberg. springer-verlag. deng l. and yu d. deep learning methods and applications. foundations and trends in signal processing. deng l. seltzer m. yu d. acero a. mohamed a. and hinton g. binary coding of speech spectrograms using a deep auto-encoder. in interspeech makuhari chiba japan. denil m. bazzani l. larochelle h. and de freitas n. learning where to attend with deep architectures for image tracking. neural computation denton e. chintala s. szlam a. and fergus r. deep generative image models using a laplacian pyramid of adversarial networks. nips desjardins g. and bengio y. empirical evaluation of convolutional rbms for vision. technical report d partement d informatique et de recherche op rationnelle universit de montr al. bibliography desjardins g. courville a. c. bengio y. vincent p. and delalleau o. tempered markov chain monte carlo for training of restricted boltzmann machines. in international conference on artificial intelligence and statistics pages desjardins g. courville a. and bengio y. on tracking the partition function. in nips desjardins g. simonyan k. pascanu r. et al. natural neural networks. in advances in neural information processing systems pages devlin j. zbib r. huang z. lamar t. schwartz r. and makhoul j. fast and robust neural network joint models for statistical machine translation. in proc. acl devroye l. non-uniform random variate generation. springerlink b cher. springer new york. dicarlo j. j. mechanisms underlying visual object recognition humans vs. neurons vs. machines. nips tutorial. dinh l. krueger d. and bengio y. nice non-linear independent components estimation. donahue j. hendricks l. a. guadarrama s. rohrbach m. venugopalan s. saenko k. and darrell t. long-term recurrent convolutional networks for visual recognition and description. donoho d. l. and grimes c. hessian eigenmaps new locally linear embedding techniques for high-dimensional data. technical report dept. statistics stanford university. dosovitskiy a. springenberg j. t. and brox t. learning to generate chairs with convolutional neural networks. in proceedings of the ieee conference on computer vision and pattern recognition pages doya k. bifurcations of recurrent neural networks in gradient descent learning. ieee transactions on neural networks dreyfus s. e. the numerical solution of variational problems. journal of mathematical analysis and applications dreyfus s. e. the computational solution of optimal control problems with time lag. ieee transactions on automatic control drucker h. and lecun y. improving generalisation performance using double back-propagation. ieee transactions on neural networks bibliography duchi j. hazan e. and singer y. adaptive subgradient methods for online learning and stochastic optimization. journal of machine learning research. dudik m. langford j. and li l. doubly robust policy evaluation and learning. in proceedings of the international conference on machine learning icml dugas c. bengio y. b lisle f. and nadeau c. incorporating second-order functional knowledge for better option pricing. in t. leen t. dietterich and v. tresp editors advances in neural information processing systems pages mit press. dziugaite g. k. roy d. m. and ghahramani z. training generative neural networks via maximum mean discrepancy optimization. arxiv preprint el hihi s. and bengio y. hierarchical recurrent neural networks for long-term dependencies. in nips elkahky a. m. song y. and he x. a multi-view deep learning approach for cross domain user modeling in recommendation systems. in proceedings of the international conference on world wide web pages elman j. l. learning and development in neural networks the importance of starting small. cognition erhan d. manzagol p.-a. bengio y. bengio s. and vincent p. the difficulty of training deep architectures and the effect of unsupervised pre-training. in proceedings of aistats erhan d. bengio y. courville a. manzagol p. vincent p. and bengio s. why does unsupervised pre-training help deep learning? j. machine learning res. fahlman s. e. hinton g. e. and sejnowski t. j. massively parallel architectures in proceedings of the national for ai netl thistle and boltzmann machines. conference on artificial intelligence fang h. gupta s. iandola f. srivastava r. deng l. doll r p. gao j. he x. mitchell m. platt j. c. zitnick c. l. and zweig g. from captions to visual concepts and back. farabet c. lecun y. kavukcuoglu k. culurciello e. martini b. akselrod p. and talay s. large-scale fpga-based convolutional networks. in r. bekkerman m. bilenko and j. langford editors scaling up machine learning parallel and distributed approaches. cambridge university press. bibliography farabet c. couprie c. najman l. and lecun y. learning hierarchical features for scene labeling. ieee transactions on pattern analysis and machine intelligence fei-fei l. fergus r. and perona p. one-shot learning of object categories. ieee transactions on pattern analysis and machine intelligence finn c. tan x. y. duan y. darrell t. levine s. and abbeel p. learning visual feature spaces for robotic manipulation with deep spatial autoencoders. arxiv preprint fisher r. a. the use of multiple measurements in taxonomic problems. annals of eugenics f ldi k p. adaptive network for optimal linear feature extraction. in international joint conference on neural networks volume pages washington ieee new york. franzius m. sprekeler h. and wiskott l. slowness and sparseness lead to place head-direction and spatial-view cells. franzius m. wilbert n. and wiskott l. invariant object recognition with slow feature analysis. in artificial neural networks-icann pages springer. frasconi p. gori m. and sperduti a. on the efficient classification of data structures by neural networks. in proc. int. joint conf. on artificial intelligence. frasconi p. gori m. and sperduti a. a general framework for adaptive processing of data structures. ieee transactions on neural networks freund y. and schapire r. e. experiments with a new boosting algorithm. in machine learning proceedings of thirteenth international conference pages usa. acm. freund y. and schapire r. e. game theory on-line prediction and boosting. in proceedings of the ninth annual conference on computational learning theory pages frey b. j. graphical models for machine learning and digital communication. mit press. frey b. j. hinton g. e. and dayan p. does the wake-sleep algorithm learn good density estimators? in d. touretzky m. mozer and m. hasselmo editors advances in neural information processing systems pages mit press cambridge ma. bibliography frobenius g. ber matrizen aus positiven elementen s. b. preuss. akad. wiss. berlin germany. fukushima k. cognitron a self-organizing multilayered neural network. biological cybernetics fukushima k. neocognitron a self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position. biological cybernetics gal y. and ghahramani z. bayesian convolutional neural networks with bernoulli approximate variational inference. arxiv preprint gallinari p. lecun y. thiria s. and fogelman-soulie f. memoires associatives distribuees. in proceedings of cognitiva paris la villette. garcia-duran a. bordes a. usunier n. and grandvalet y. combining two and three-way embeddings models for link prediction in knowledge bases. arxiv preprint garofolo j. s. lamel l. f. fisher w. m. fiscus j. g. and pallett d. s. darpa timit acoustic-phonetic continous speech corpus cd-rom. nist speech disc nasa stirecon technical report n garson j. the metric system of identification of criminals as used in great britain and ireland. the journal of the anthropological institute of great britain and ireland gers f. a. schmidhuber j. and cummins f. learning to forget continual prediction with lstm. neural computation ghahramani z. and hinton g. e. the em algorithm for mixtures of factor analyzers. technical report dpt. of comp. sci. univ. of toronto. gillick d. brunk c. vinyals o. and subramanya a. multilingual language processing from bytes. arxiv preprint girshick r. donahue j. darrell t. and malik j. region-based convolutional networks for accurate object detection and segmentation. giudice m. d. manera v. and keysers c. programmed to learn? the ontogeny of mirror neurons. dev. sci. glorot x. and bengio y. understanding the difficulty of training deep feedforward neural networks. in aistats glorot x. bordes a. and bengio y. deep sparse rectifier neural networks. in aistats bibliography glorot x. bordes a. and bengio y. domain adaptation for large-scale sentiment classification a deep learning approach. in icml goldberger j. roweis s. hinton g. e. and salakhutdinov r. neighbourhood components analysis. in l. saul y. weiss and l. bottou editors advances in neural information processing systems mit press. gong s. mckenna s. and psarrou a. dynamic vision from images to face recognition. imperial college press. goodfellow i. le q. saxe a. and ng a. measuring invariances in deep networks. in nips pages goodfellow i. koenig n. muja m. pantofaru c. sorokin a. and takayama l. help me help you interfaces for personal robots. in proc. of human robot interaction osaka japan. acm press acm press. goodfellow i. j. technical report multidimensional downsampled convolution for autoencoders. technical report universit de montr al. goodfellow i. j. on distinguishability criteria for estimating generative models. in international conference on learning representations workshops track. goodfellow i. j. courville a. and bengio y. spike-and-slab sparse coding in nips workshop on challenges in learning for unsupervised feature discovery. hierarchical models. goodfellow i. j. warde-farley d. mirza m. courville a. and bengio y. pages maxout networks. in s. dasgupta and d. mcallester editors icml goodfellow i. j. mirza m. courville a. and bengio y. multi-prediction deep nips foundation. boltzmann machines. in goodfellow i. j. warde-farley d. lamblin p. dumoulin v. mirza m. pascanu r. bergstra j. bastien f. and bengio y. a machine learning research library. arxiv preprint goodfellow i. j. courville a. and bengio y. scaling up spike-and-slab models for unsupervised feature learning. ieee transactions on pattern analysis and machine intelligence goodfellow i. j. mirza m. xiao d. courville a. and bengio y. an empirical iclr investigation of catastrophic forgeting in gradient-based neural networks. in bibliography goodfellow i. j. shlens j. and szegedy c. explaining and harnessing adver sarial examples. corr goodfellow i. j. pouget-abadie j. mirza m. xu b. warde-farley d. ozair s. nips courville a. and bengio y. generative adversarial networks. in goodfellow i. j. bulatov y. ibarz j. arnoud s. and shet v. multi-digit number recognition from street view imagery using deep convolutional neural networks. in international conference on learning representations. goodfellow i. j. vinyals o. and saxe a. m. qualitatively characterizing neural network optimization problems. in international conference on learning representations. goodman j. classes for fast maximum entropy training. in international conference on acoustics speech and signal processing utah. gori m. and tesi a. on the problem of local minima in backpropagation. ieee transactions on pattern analysis and machine intelligence gosset w. s. the probable error of a mean. biometrika originally published under the pseudonym student gouws s. bengio y. and corrado g. bilbowa fast bilingual distributed representations without word alignments. technical report graf h. p. and jackel l. d. analog electronic neural network circuits. circuits and devices magazine ieee graves a. practical variational inference for neural networks. in nips graves a. supervised sequence labelling with recurrent neural networks. studies in computational intelligence. springer. graves a. generating sequences with recurrent neural networks. technical report graves a. and jaitly n. towards end-to-end speech recognition with recurrent neural networks. in icml graves a. and schmidhuber j. framewise phoneme classification with bidirectional lstm and other neural network architectures. neural networks graves a. and schmidhuber j. o ine handwriting recognition with multidimensional recurrent neural networks. in d. koller d. schuurmans y. bengio and l. bottou editors pages nips bibliography graves a. fern ndez s. gomez f. and schmidhuber j. connectionist temporal classification labelling unsegmented sequence data with recurrent neural networks. in icml pages pittsburgh usa. graves a. liwicki m. bunke h. schmidhuber j. and fern ndez s. unconstrained on-line handwriting recognition with recurrent neural networks. in j. platt d. koller y. singer and s. roweis editors pages nips graves a. liwicki m. fern ndez s. bertolami r. bunke h. and schmidhuber j. a novel connectionist system for unconstrained handwriting recognition. pattern analysis and machine intelligence ieee transactions on graves a. mohamed a. and hinton g. speech recognition with deep recurrent neural networks. in icassp pages graves a. wayne g. and danihelka i. neural turing machines. graves a. wayne g. and danihelka i. neural turing machines. arxiv preprint grefenstette e. hermann k. m. suleyman m. and blunsom p. learning to transduce with unbounded memory. in nips greff k. srivastava r. k. koutn k j. steunebrink b. r. and schmidhuber j. lstm a search space odyssey. arxiv preprint gregor k. and lecun y. emergence of complex-like cells in a temporal product network with local receptive fields. technical report gregor k. and lecun y. learning fast approximations of sparse coding. in l. bottou and m. littman editors proceedings of the twenty-seventh international conference on machine learning acm. gregor k. danihelka i. mnih a. blundell c. and wierstra d. deep autoregressive networks. in international conference on machine learning gregor k. danihelka i. graves a. and wierstra d. draw a recurrent neural network for image generation. arxiv preprint gretton a. borgwardt k. m. rasch m. j. sch lkopf b. and smola a. a kernel two-sample test. the journal of machine learning research g l ehre and bengio y. knowledge matters importance of prior information for optimization. in international conference on learning representations bibliography guo h. and gelfand s. b. classification trees with neural network feature extraction. neural networks ieee transactions on gupta s. agrawal a. gopalakrishnan k. and narayanan p. deep learning with limited numerical precision. corr gutmann m. and hyvarinen a. noise-contrastive estimation a new estimation principle for unnormalized statistical models. in proceedings of the thirteenth international conference on artificial intelligence and statistics hadsell r. sermanet p. ben j. erkan a. han j. muller u. and lecun y. online learning for offroad robots spatial label propagation to learn long-range traversability. in proceedings of robotics science and systems atlanta ga usa. hajnal a. maass w. pudlak p. szegedy m. and turan g. threshold circuits of bounded depth. j. comput. system. sci. h stad j. almost optimal lower bounds for small depth circuits. in proceedings of the annual acm symposium on theory of computing pages berkeley california. acm press. h stad j. and goldmann m. on the power of small-depth threshold circuits. computational complexity hastie t. tibshirani r. and friedman j. the elements of statistical learning data mining inference and prediction. springer series in statistics. springer verlag. he k. zhang x. ren s. and sun j. delving deep into rectifiers surpassing human-level performance on imagenet classification. arxiv preprint hebb d. o. the organization of behavior. wiley new york. henaff m. jarrett k. kavukcuoglu k. and lecun y. unsupervised learning of sparse features for scalable audio classification. in ismir henderson j. inducing history representations for broad coverage statistical parsing. in hlt-naacl pages henderson j. discriminative training of a neural network statistical parser. in proceedings of the annual meeting on association for computational linguistics page henniges m. puertas g. bornschein j. eggert j. and l cke j. binary sparse coding. in latent variable analysis and signal separation pages springer. bibliography herault j. and ans b. circuits neuronaux synapses modifiables d codage de messages composites par apprentissage non supervis comptes rendus de l acad mie des sciences hinton g. neural networks for machine learning. coursera video lectures. hinton g. deng l. dahl g. e. mohamed a. jaitly n. senior a. vanhoucke v. nguyen p. sainath t. and kingsbury b. deep neural networks for acoustic modeling in speech recognition. ieee signal processing magazine hinton g. vinyals o. and dean j. distilling the knowledge in a neural network. arxiv preprint hinton g. e. connectionist learning procedures. artificial intelligence hinton g. e. mapping part-whole hierarchies into connectionist networks. artificial intelligence hinton g. e. products of experts. in icann hinton g. e. training products of experts by minimizing contrastive divergence. technical report gcnu tr gatsby unit university college london. hinton g. e. to recognize shapes first learn to generate images. technical report utml tr university of toronto. hinton g. e. how to do backpropagation in a brain. invited talk at the nips deep learning workshop. hinton g. e. learning multiple layers of representation. trends in cognitive sciences hinton g. e. a practical guide to training restricted boltzmann machines. technical report utml tr department of computer science university of toronto. hinton g. e. and ghahramani z. generative models for discovering sparse distributed representations. philosophical transactions of the royal society of london. hinton g. e. and mcclelland j. l. learning representations by recirculation. in nips pages hinton g. e. and roweis s. stochastic neighbor embedding. in nips bibliography hinton g. e. and salakhutdinov r. reducing the dimensionality of data with neural networks. science hinton g. e. and sejnowski t. j. learning and relearning in boltzmann machines. in d. e. rumelhart and j. l. mcclelland editors parallel distributed processing volume chapter pages mit press cambridge. hinton g. e. and sejnowski t. j. unsupervised learning foundations of neural computation. mit press. hinton g. e. and shallice t. lesioning an attractor network investigations of acquired dyslexia. psychological review hinton g. e. and zemel r. s. autoencoders minimum description length and helmholtz free energy. in nips hinton g. e. sejnowski t. j. and ackley d. h. boltzmann machines constraint satisfaction networks that learn. technical report carnegie-mellon university dept. of computer science. hinton g. e. mcclelland j. and rumelhart d. distributed representations. in d. e. rumelhart and j. l. mcclelland editors parallel distributed processing explorations in the microstructure of cognition volume pages mit press cambridge. hinton g. e. revow m. and dayan p. recognizing handwritten digits using mixtures of linear models. in g. tesauro d. touretzky and t. leen editors advances in neural information processing systems pages mit press cambridge ma. hinton g. e. dayan p. frey b. j. and neal r. m. the wake-sleep algorithm for unsupervised neural networks. science hinton g. e. dayan p. and revow m. modelling the manifolds of images of handwritten digits. ieee transactions on neural networks hinton g. e. welling m. teh y. w. and osindero s. a new view of ica. in proceedings of international conference on independent component analysis and blind signal separation pages san diego ca. hinton g. e. osindero s. and teh y. a fast learning algorithm for deep belief nets. neural computation hinton g. e. deng l. yu d. dahl g. e. mohamed a. jaitly n. senior a. vanhoucke v. nguyen p. sainath t. n. and kingsbury b. deep neural networks for acoustic modeling in speech recognition the shared views of four research groups. ieee signal process. mag. bibliography hinton g. e. srivastava n. krizhevsky a. sutskever i. and salakhutdinov r. improving neural networks by preventing co-adaptation of feature detectors. technical report hinton g. e. vinyals o. and dean j. dark knowledge. invited talk at the baylearn bay area machine learning symposium. hochreiter s. untersuchungen zu dynamischen neuronalen netzen. diploma thesis t.u. m nchen. hochreiter s. and schmidhuber j. simplifying neural nets by discovering flat minima. in advances in neural information processing systems pages mit press. hochreiter s. and schmidhuber j. long short-term memory. neural computation hochreiter s. bengio y. and frasconi p. gradient flow in recurrent nets the difficulty of learning long-term dependencies. in j. kolen and s. kremer editors field guide to dynamical recurrent networks. ieee press. holi j. l. and hwang j.-n. finite precision error analysis of neural network hardware implementations. computers ieee transactions on holt j. l. and baker t. e. back propagation simulations using limited precision calculations. in neural networks international joint conference on volume pages ieee. hornik k. stinchcombe m. and white h. multilayer feedforward networks are universal approximators. neural networks hornik k. stinchcombe m. and white h. universal approximation of an unknown mapping and its derivatives using multilayer feedforward networks. neural networks hsu f.-h. behind deep blue building the computer that defeated the world chess champion. princeton university press princeton nj usa. huang f. and ogata y. generalized pseudo-likelihood estimates for markov random fields on lattice. annals of the institute of statistical mathematics huang p.-s. he x. gao j. deng l. acero a. and heck l. learning deep structured semantic models for web search using clickthrough data. in proceedings of the acm international conference on conference on information knowledge management pages acm. hubel d. and wiesel t. receptive fields and functional architecture of monkey striate cortex. journal of physiology bibliography hubel d. h. and wiesel t. n. receptive fields of single neurons in the cat s striate cortex. journal of physiology hubel d. h. and wiesel t. n. receptive fields binocular interaction and functional architecture in the cat s visual cortex. journal of physiology huszar f. how to train your generative model schedule sampling likelihood adversary? hutter f. hoos h. and leyton-brown k. sequential model-based optimization extended version as ubc tech report for general algorithm configuration. in hyotyniemi h. turing machines are recurrent neural networks. in step pages hyv rinen a. survey on independent component analysis. neural computing surveys hyv rinen a. estimation of non-normalized statistical models using score matching. journal of machine learning research hyv rinen a. connections between score matching contrastive divergence and pseudolikelihood for continuous-valued variables. ieee transactions on neural networks hyv rinen a. some extensions of score matching. computational statistics and data analysis hyv rinen a. and hoyer p. o. emergence of topography and complex cell properties from natural images using extensions of ica. in pages nips hyv rinen a. and pajunen p. nonlinear independent component analysis existence and uniqueness results. neural networks hyv rinen a. karhunen j. and oja e. independent component analysis. wiley-interscience. hyv rinen a. hoyer p. o. and inki m. o. topographic independent component analysis. neural computation hyv rinen a. hurri j. and hoyer p. o. natural image statistics a probabilistic approach to early computational vision. springer-verlag. iba y. extended ensemble monte carlo. international journal of modern physics bibliography inayoshi h. and kurita t. improved generalization by adding both autoassociation and hidden-layer noise to neural-network-based-classifiers. ieee workshop on machine learning for signal processing pages ioffe s. and szegedy c. batch normalization accelerating deep network training by reducing internal covariate shift. jacobs r. a. increased rates of convergence through learning rate adaptation. neural networks jacobs r. a. jordan m. i. nowlan s. j. and hinton g. e. adaptive mixtures of local experts. neural computation jaeger h. adaptive nonlinear system identification with echo state networks. in advances in neural information processing systems jaeger h. discovering multiscale dynamical features with hierarchical echo state networks. technical report jacobs university. jaeger h. echo state network. scholarpedia jaeger h. long short-term memory in echo state networks details of a simulation study. technical report technical report jacobs university bremen. jaeger h. and haas h. harnessing nonlinearity predicting chaotic systems and saving energy in wireless communication. science jaeger h. lukosevicius m. popovici d. and siewert u. optimization and applications of echo state networks with leaky- integrator neurons. neural networks jain v. murray j. f. roth f. turaga s. zhigulin v. briggman k. l. helmstaedter m. n. denk w. and seung h. s. supervised learning of image restoration with convolutional networks. in computer vision iccv ieee international conference on pages ieee. jaitly n. and hinton g. learning a better representation of speech soundwaves in acoustics speech and signal processing using restricted boltzmann machines. ieee international conference on pages ieee. jaitly n. and hinton g. e. vocal tract length perturbation improves speech recognition. in icml jarrett k. kavukcuoglu k. ranzato m. and lecun y. what is the best iccv multi-stage architecture for object recognition? in jarzynski c. nonequilibrium equality for free energy differences. phys. rev. lett. bibliography jaynes e. t. probability theory the logic of science. cambridge university press. jean s. cho k. memisevic r. and bengio y. on using very large target vocabulary for neural machine translation. jelinek f. and mercer r. l. interpolated estimation of markov source parameters from sparse data. in e. s. gelsema and l. n. kanal editors pattern recognition in practice. north-holland amsterdam. jia y. caffe an open source convolutional architecture for fast feature embedding. httpcaffe.berkeleyvision.org. jia y. huang c. and darrell t. beyond spatial pyramids receptive field in computer vision and pattern recognition learning for pooled image features. ieee conference on pages ieee. jim k.-c. giles c. l. and horne b. g. an analysis of noise in recurrent neural networks convergence and generalization. ieee transactions on neural networks jordan m. i. learning in graphical models. kluwer dordrecht netherlands. joulin a. and mikolov t. inferring algorithmic patterns with stack-augmented recurrent nets. arxiv preprint jozefowicz r. zaremba w. and sutskever i. an empirical evaluation of recurrent network architectures. in icml judd j. s. neural network design and the complexity of learning. mit press. jutten c. and herault j. blind separation of sources part i an adaptive algorithm based on neuromimetic architecture. signal processing kahou s. e. pal c. bouthillier x. froumenty p. g l ehre c. memisevic r. vincent p. courville a. bengio y. ferrari r. c. mirza m. jean s. carrier p. l. dauphin y. boulanger-lewandowski n. aggarwal a. zumer j. lamblin p. raymond j.-p. desjardins g. pascanu r. warde-farley d. torabi a. sharma a. bengio e. c t m. konda k. r. and wu z. combining modality specific deep neural networks for emotion recognition in video. in proceedings of the acm on international conference on multimodal interaction. kalchbrenner n. and blunsom p. recurrent continuous translation models. in emnlp kalchbrenner n. danihelka i. and graves a. grid long short-term memory. arxiv preprint bibliography kamyshanska h. and memisevic r. the potential energy of an autoencoder. ieee transactions on pattern analysis and machine intelligence. karpathy a. and li f.-f. deep visual-semantic alignments for generating image descriptions. in cvpr karpathy a. toderici g. shetty s. leung t. sukthankar r. and fei-fei l. large-scale video classification with convolutional neural networks. in cvpr karush w. minima of functions of several variables with inequalities as side constraints. master s thesis dept. of mathematics univ. of chicago. katz s. m. estimation of probabilities from sparse data for the language model component of a speech recognizer. ieee transactions on acoustics speech and signal processing kavukcuoglu k. ranzato m. and lecun y. fast inference in sparse coding algorithms with applications to object recognition. technical report computational and biological learning lab courant institute nyu. tech report kavukcuoglu k. ranzato m.-a. fergus r. and lecun y. learning invariant features through topographic filter maps. in cvpr kavukcuoglu k. sermanet p. boureau y.-l. gregor k. mathieu m. and lecun y. nips learning convolutional feature hierarchies for visual recognition. in kelley h. j. gradient theory of optimal flight paths. ars journal khan f. zhu x. and mutlu b. how do humans teach on curriculum learning and teaching dimension. in advances in neural information processing systems pages kim s. k. mcafee l. c. mcmahon p. l. and olukotun k. a highly scalable restricted boltzmann machine fpga implementation. in field programmable logic and applications fpl international conference on pages ieee. kindermann r. markov random fields and their applications mathematics v. american mathematical society. kingma d. and ba j. adam a method for stochastic optimization. arxiv preprint kingma d. and lecun y. regularized estimation of image statistics by score matching. in nips bibliography kingma d. rezende d. mohamed s. and welling m. semi-supervised learning with deep generative models. in nips kingma d. p. fast gradient-based inference with continuous latent variable models in auxiliary form. technical report kingma d. p. and welling m. auto-encoding variational bayes. in proceedings of the international conference on learning representations kingma d. p. and welling m. efficient gradient-based inference through transformations between bayes nets and neural nets. technical report kirkpatrick s. jr. c. d. g. and vecchi m. p. optimization by simulated annealing. science kiros r. salakhutdinov r. and zemel r. multimodal neural language models. in icml kiros r. salakhutdinov r. and zemel r. unifying visual-semantic embeddings with multimodal neural language models. klementiev a. titov i. and bhattarai b. inducing crosslingual distributed representations of words. in proceedings of coling knowles-barley s. jones t. r. morgan j. lee d. kasthuri n. lichtman j. w. and pfister h. deep learning for the connectome. gpu technology conference. koller d. and friedman n. probabilistic graphical models principles and techniques. mit press. konig y. bourlard h. and morgan n. remap recursive estimation and maximization of a posteriori probabilities application to transition-based connectionist speech recognition. in d. touretzky m. mozer and m. hasselmo editors advances in neural information processing systems mit press cambridge ma. koren y. the bellkor solution to the netflix grand prize. kotzias d. denil m. de freitas n. and smyth p. from group to individual labels using deep features. in acm sigkdd koutnik j. greff k. gomez f. and schmidhuber j. a clockwork rnn. in icml ko isk t. hermann k. m. and blunsom p. learning bilingual word repre sentations by marginalizing alignments. in proceedings of acl. krause o. fischer a. glasmachers t. and igel c. approximation properties of dbns with binary hidden units and real-valued visible units. in icml bibliography krizhevsky a. convolutional deep belief networks on technical report university of toronto. unpublished manuscript httpwww.cs.utoronto.ca krizhevsky a. and hinton g. learning multiple layers of features from tiny images. technical report university of toronto. krizhevsky a. and hinton g. e. using very deep autoencoders for content-based image retrieval. in esann krizhevsky a. sutskever i. and hinton g. imagenet classification with deep convolutional neural networks. in nips krueger k. a. and dayan p. flexible shaping how learning in small steps helps. cognition kuhn h. w. and tucker a. w. nonlinear programming. in proceedings of the second berkeley symposium on mathematical statistics and probability pages berkeley calif. university of california press. kumar a. irsoy o. su j. bradbury j. english r. pierce b. ondruska p. iyyer m. gulrajani i. and socher r. ask me anything dynamic memory networks for natural language processing. kumar m. p. packer b. and koller d. self-paced learning for latent variable models. in nips lang k. j. and hinton g. e. the development of the time-delay neural network architecture for speech recognition. technical report carnegie-mellon university. lang k. j. waibel a. h. and hinton g. e. a time-delay neural network architecture for isolated word recognition. neural networks langford j. and zhang t. the epoch-greedy algorithm for contextual multi-armed bandits. in nips pages lappalainen h. giannakopoulos x. honkela a. and karhunen j. nonlinear independent component analysis using ensemble learning experiments and discussion. in proc. ica. citeseer. larochelle h. and bengio y. classification using discriminative restricted boltzmann machines. in icml larochelle h. and hinton g. e. learning to combine foveal glimpses with a third-order boltzmann machine. in advances in neural information processing systems pages bibliography larochelle h. and murray i. the neural autoregressive distribution estimator. in aistats larochelle h. erhan d. and bengio y. zero-data learning of new tasks. in aaai conference on artificial intelligence. larochelle h. bengio y. louradour j. and lamblin p. exploring strategies for training deep neural networks. journal of machine learning research lasserre j. a. bishop c. m. and minka t. p. principled hybrids of generative and discriminative models. in proceedings of the computer vision and pattern recognition conference pages washington dc usa. ieee computer society. le q. ngiam j. chen z. hao chia d. j. koh p. w. and ng a. tiled in j. lafferty c. k. i. williams j. shawe-taylor convolutional neural networks. r. zemel and a. culotta editors advances in neural information processing systems pages le q. ngiam j. coates a. lahiri a. prochnow b. and ng a. on optimization methods for deep learning. in proc. icml acm. le q. ranzato m. monga r. devin m. corrado g. chen k. dean j. and ng a. building high-level features using large scale unsupervised learning. in icml le roux n. and bengio y. representational power of restricted boltzmann machines and deep belief networks. neural computation le roux n. and bengio y. deep belief networks are compact universal approxi mators. neural computation lecun y. une proc dure d apprentissage pour r seau seuil assym trique. in cognitiva a la fronti re de l intelligence artificielle des sciences de la connaissance et des neurosciences pages paris cesta paris. lecun y. learning processes in an asymmetric threshold network. in f. fogelmansouli e. bienenstock and g. weisbuch editors disordered systems and biological organization pages springer-verlag les houches france. lecun y. mod les connexionistes de l apprentissage. ph.d. thesis universit de paris vi. lecun y. generalization and network design strategies. technical report university of toronto. bibliography lecun y. jackel l. d. boser b. denker j. s. graf h. p. guyon i. henderson d. howard r. e. and hubbard w. handwritten digit recognition applications of neural network chips and automatic learning. ieee communications magazine lecun y. bottou l. orr g. b. and m ller k.-r. efficient backprop. in neural networks tricks of the trade lecture notes in computer science lncs springer verlag. lecun y. bottou l. bengio y. and haffner p. gradient based learning applied to document recognition. proc. ieee. lecun y. kavukcuoglu k. and farabet c. convolutional networks and applications in vision. in circuits and systems proceedings of ieee international symposium on pages ieee. l ecuyer p. efficiency improvement and variance reduction. in proceedings of the winter simulation conference pages lee c.-y. xie s. gallagher p. zhang z. and tu z. deeply-supervised nets. arxiv preprint lee h. battle a. raina r. and ng a. efficient sparse coding algorithms. in b. sch lkopf j. platt and t. hoffman editors advances in neural information processing systems pages mit press. lee h. ekanadham c. and ng a. sparse deep belief net model for visual area in nips lee h. grosse r. ranganath r. and ng a. y. convolutional deep belief networks for scalable unsupervised learning of hierarchical representations. in l. bottou and m. littman editors proceedings of the twenty-sixth international conference on machine learning acm montreal canada. lee y. j. and grauman k. learning the easy things first self-paced visual category discovery. in cvpr leibniz g. w. memoir using the chain rule. in tmme p lenat d. b. and guha r. v. building large knowledge-based systems representation and inference in the cyc project. addison-wesley longman publishing co. inc. leshno m. lin v. y. pinkus a. and schocken s. multilayer feedforward networks with a nonpolynomial activation function can approximate any function. neural networks bibliography levenberg k. a method for the solution of certain non-linear problems in least squares. quarterly journal of applied mathematics ii l h pital g. f. a. analyse des infiniment petits pour l intelligence des lignes courbes. paris l imprimerie royale. li y. swersky k. and zemel r. s. generative moment matching networks. corr lin t. horne b. g. tino p. and giles c. l. learning long-term dependencies is not as difficult with narx recurrent neural networks. ieee transactions on neural networks lin y. liu z. sun m. liu y. and zhu x. learning entity and relation embeddings for knowledge graph completion. in proc. aaai linde n. the machine that changed the world episode documentary miniseries. lindsey c. and lindblad t. review of hardware neural networks a user s perspective. in proc. third workshop on neural networks from biology to high energy physics pages isola d elba italy. linnainmaa s. taylor expansion of the accumulated rounding error. bit numerical mathematics lisa deep learning tutorials restricted boltzmann machines. technical report lisa lab universit de montr al. long p. m. and servedio r. a. restricted boltzmann machines are hard to approximately evaluate or simulate. in proceedings of the international conference on machine learning lotter w. kreiman g. and cox d. unsupervised learning of visual structure using predictive generative networks. arxiv preprint lovelace a. notes upon l. f. menabrea s sketch of the analytical engine invented by charles babbage lu l. zhang x. cho k. and renals s. a study of the recurrent neural network encoder-decoder for large vocabulary speech recognition. in proc. interspeech. lu t. p l d. and p l m. contextual multi-armed bandits. in international conference on artificial intelligence and statistics pages luenberger d. g. linear and nonlinear programming. addison wesley. luko evi ius m. and jaeger h. reservoir computing approaches to recurrent neural network training. computer science review bibliography luo h. shen r. niu c. and ullrich c. learning class-relevant features and class-irrelevant features via a hybrid third-order rbm. in international conference on artificial intelligence and statistics pages luo h. carrier p. l. courville a. and bengio y. texture modeling with convolutional spike-and-slab rbms and deep extensions. in aistats lyu s. interpretation and generalization of score matching. in proceedings of the twenty-fifth conference in uncertainty in artificial intelligence ma j. sheridan r. p. liaw a. dahl g. e. and svetnik v. deep neural nets as a method for quantitative structure activity relationships. j. chemical information and modeling. maas a. l. hannun a. y. and ng a. y. rectifier nonlinearities improve neural network acoustic models. in icml workshop on deep learning for audio speech and language processing. maass w. bounds for the computational power and learning complexity of analog neural nets abstract. in proc. of the acm symp. theory of computing pages maass w. schnitger g. and sontag e. d. a comparison of the computational power of sigmoid and boolean threshold circuits. theoretical advances in neural computation and learning pages maass w. natschlaeger t. and markram h. real-time computing without stable states a new framework for neural computation based on perturbations. neural computation mackay d. information theory inference and learning algorithms. cambridge university press. maclaurin d. duvenaud d. and adams r. p. gradient-based hyperparameter optimization through reversible learning. arxiv preprint mao j. xu w. yang y. wang j. huang z. and yuille a. l. deep captioning with multimodal recurrent neural networks. in iclr marcotte p. and savard g. novel approaches to the discrimination problem. zeitschrift f r operations research marlin b. and de freitas n. asymptotic efficiency of deterministic estimators for uai discrete energy-based models ratio matching and pseudolikelihood. in bibliography marlin b. swersky k. chen b. and de freitas n. inductive principles for restricted boltzmann machine learning. in proceedings of the thirteenth international conference on artificial intelligence and statistics volume pages marquardt d. w. an algorithm for least-squares estimation of non-linear parameters. journal of the society of industrial and applied mathematics marr d. and poggio t. cooperative computation of stereo disparity. science martens j. deep learning via hessian-free optimization. in l. bottou and m. littman editors proceedings of the twenty-seventh international conference on machine learning pages acm. martens j. and medabalimi v. on the expressive efficiency of sum product networks. martens j. and sutskever i. learning recurrent neural networks with hessian-free optimization. in proc. icml acm. mase s. consistency of the maximum pseudo-likelihood estimator of continuous state space gibbsian processes. the annals of applied probability pp. mcclelland j. rumelhart d. and hinton g. the appeal of parallel distributed processing. in computation intelligence pages american association for artificial intelligence. mcculloch w. s. and pitts w. a logical calculus of ideas immanent in nervous activity. bulletin of mathematical biophysics mead c. and ismail m. analog vlsi implementation of neural systems volume springer science business media. melchior j. fischer a. and wiskott l. how to center binary deep boltzmann machines. arxiv preprint memisevic r. and hinton g. e. unsupervised learning of image transformations. in proceedings of the computer vision and pattern recognition conference memisevic r. and hinton g. e. learning to represent spatial transformations with factored higher-order boltzmann machines. neural computation bibliography mesnil g. dauphin y. glorot x. rifai s. bengio y. goodfellow i. lavoie e. muller x. desjardins g. warde-farley d. vincent p. courville a. and bergstra j. unsupervised and transfer learning challenge a deep learning approach. in jmlr wcp proc. unsupervised and transfer learning volume mesnil g. rifai s. dauphin y. bengio y. and vincent p. surfing on the manifold. learning workshop snowbird. miikkulainen r. and dyer m. g. natural language processing with modular pdp networks and distributed lexicon. cognitive science mikolov t. statistical language models based on neural networks. ph.d. thesis brno university of technology. mikolov t. deoras a. kombrink s. burget l. and cernocky j. empirical evaluation and combination of advanced language modeling techniques. in proc. annual conference of the international speech communication association mikolov t. deoras a. povey d. burget l. and cernocky j. strategies for training large scale neural network language models. in proc. asru mikolov t. chen k. corrado g. and dean j. efficient estimation of word representations in vector space. in international conference on learning representations workshops track. mikolov t. le q. v. and sutskever i. exploiting similarities among languages for machine translation. technical report minka t. divergence measures and message passing. microsoft research cambridge uk tech rep minsky m. l. and papert s. a. perceptrons. mit press cambridge. mirza m. and osindero s. conditional generative adversarial nets. arxiv preprint mishkin d. and matas j. all you need is a good init. arxiv preprint misra j. and saha i. artificial neural networks in hardware a survey of two decades of progress. neurocomputing mitchell t. m. machine learning. mcgraw-hill new york. miyato t. maeda s. koyama m. nakae k. and ishii s. distributional smoothing with virtual adversarial training. in preprint iclr bibliography mnih a. and gregor k. neural variational inference and learning in belief networks. in icml mnih a. and hinton g. e. three new graphical models for statistical language modelling. in z. ghahramani editor proceedings of the twenty-fourth international conference on machine learning pages acm. mnih a. and hinton g. e. a scalable hierarchical distributed language model. in d. koller d. schuurmans y. bengio and l. bottou editors advances in neural information processing systems pages mnih a. and kavukcuoglu k. learning word embeddings efficiently with noisecontrastive estimation. in c. burges l. bottou m. welling z. ghahramani and k. weinberger editors advances in neural information processing systems pages curran associates inc. mnih a. and teh y. w. a fast and simple algorithm for training neural probabilistic language models. in icml pages mnih v. and hinton g. learning to detect roads in high-resolution aerial images. in proceedings of the european conference on computer vision mnih v. larochelle h. and hinton g. conditional restricted boltzmann machines for structure output prediction. in proc. conf. on uncertainty in artificial intelligence mnih v. kavukcuoglo k. silver d. graves a. antonoglou i. and wierstra d. playing atari with deep reinforcement learning. technical report mnih v. heess n. graves a. and kavukcuoglu k. recurrent models of visual attention. in z. ghahramani m. welling c. cortes n. lawrence and k. weinberger editors pages nips mnih v. kavukcuoglo k. silver d. rusu a. a. veness j. bellemare m. g. graves a. riedmiller m. fidgeland a. k. ostrovski g. petersen s. beattie c. sadik a. antonoglou i. king h. kumaran d. wierstra d. legg s. and hassabis d. human-level control through deep reinforcement learning. nature mobahi h. and fisher iii j. w. a theoretical analysis of optimization by gaussian continuation. in aaai mobahi h. collobert r. and weston j. deep learning from temporal coherence in video. in l. bottou and m. littman editors proceedings of the international conference on machine learning pages montreal. omnipress. mohamed a. dahl g. and hinton g. deep belief networks for phone recognition. bibliography mohamed a. sainath t. n. dahl g. ramabhadran b. hinton g. e. and picheny m. a. deep belief networks using discriminative features for phone recognition. in acoustics speech and signal processing ieee international conference on pages ieee. mohamed a. dahl g. and hinton g. acoustic modeling using deep belief networks. ieee trans. on audio speech and language processing mohamed a. hinton g. and penn g. understanding how deep belief networks perform acoustic modelling. in acoustics speech and signal processing ieee international conference on pages ieee. moller m. f. a scaled conjugate gradient algorithm for fast supervised learning. neural networks montavon g. and muller k.-r. deep boltzmann machines and the centering trick. in g. montavon g. orr and k.-r. m ller editors neural networks tricks of the trade volume of lecture notes in computer science pages preprint mont far g. universal approximation depth and errors of narrow belief networks with discrete units. neural computation mont far g. and ay n. refinements of universal approximation results for deep belief networks and restricted boltzmann machines. neural computation montufar g. f. pascanu r. cho k. and bengio y. on the number of linear regions of deep neural networks. in nips mor-yosef s. samueloff a. modan b. navot d. and schenker j. g. ranking the risk factors for cesarean logistic regression analysis of a nationwide study. obstet gynecol morin f. and bengio y. hierarchical probabilistic neural network language model. in aistats mozer m. c. the induction of multiscale temporal structure. in j. m. s. hanson and r. lippmann editors advances in neural information processing systems pages san mateo ca. morgan kaufmann. murphy k. p. machine learning a probabilistic perspective mit press cambridge ma usa. murray b. u. i. and larochelle h. a deep and tractable density estimator. in icml nair v. and hinton g. rectified linear units improve restricted boltzmann machines. in icml bibliography nair v. and hinton g. e. object recognition with deep belief nets. in y. bengio d. schuurmans j. d. lafferty c. k. i. williams and a. culotta editors advances in neural information processing systems pages curran associates inc. narayanan h. and mitter s. sample complexity of testing the manifold hypothesis. in nips naumann u. optimal jacobian accumulation is np-complete. mathematical programming navigli r. and velardi p. structural semantic interconnections a knowledgebased approach to word sense disambiguation. ieee trans. pattern analysis and machine intelligence neal r. and hinton g. a view of the em algorithm that justifies incremental sparse and other variants. in m. i. jordan editor learning in graphical models. mit press cambridge ma. neal r. m. learning stochastic feedforward networks. technical report. neal r. m. probabilistic inference using markov chain monte-carlo methods. technical report dept. of computer science university of toronto. neal r. m. sampling from multimodal distributions using tempered transitions. technical report dept. of statistics university of toronto. neal r. m. bayesian learning for neural networks. lecture notes in statistics. springer. neal r. m. annealed importance sampling. statistics and computing neal r. m. estimating ratios of normalizing constants using linked importance sampling. nesterov y. a method of solving a convex programming problem with convergence rate o soviet mathematics doklady nesterov y. introductory lectures on convex optimization a basic course. applied optimization. kluwer academic publ. boston dordrecht london. netzer y. wang t. coates a. bissacco a. wu b. and ng a. y. reading digits in natural images with unsupervised feature learning. deep learning and unsupervised feature learning workshop nips. ney h. and kneser r. improved clustering techniques for class-based statistical language modelling. in european conference on speech communication and technology pages berlin. bibliography ng a. advice for applying machine learning. niesler t. r. whittaker e. w. d. and woodland p. c. comparison of part-ofspeech and automatically derived category-based language models for speech recognition. in international conference on acoustics speech and signal processing pages ning f. delhomme d. lecun y. piano f. bottou l. and barbano p. e. toward automatic phenotyping of developing embryos from videos. image processing ieee transactions on nocedal j. and wright s. numerical optimization. springer. norouzi m. and fleet d. j. minimal loss hashing for compact binary codes. in icml nowlan s. j. competing experts an experimental investigation of associative mixture models. technical report university of toronto. nowlan s. j. and hinton g. e. simplifying neural networks by soft weight-sharing. neural computation olshausen b. and field d. j. how close are we to understanding neural computation olshausen b. a. and field d. j. emergence of simple-cell receptive field properties by learning a sparse code for natural images. nature olshausen b. a. anderson c. h. and van essen d. c. a neurobiological model of visual attention and invariant pattern recognition based on dynamic routing of information. j. neurosci. opper m. and archambeau c. the variational gaussian approximation revisited. neural computation oquab m. bottou l. laptev i. and sivic j. learning and transferring mid-level image representations using convolutional neural networks. in computer vision and pattern recognition ieee conference on pages ieee. osindero s. and hinton g. e. modeling image patches with a directed hierarchy of markov random fields. in j. platt d. koller y. singer and s. roweis editors advances in neural information processing systems pages cambridge ma. mit press. ovid and martin c. metamorphoses w.w. norton. bibliography paccanaro a. and hinton g. e. extracting distributed representations of concepts and relations from positive and negative propositions. in international joint conference on neural networks como italy. ieee new york. paine t. l. khorrami p. han w. and huang t. s. an analysis of unsupervised pre-training in light of recent advances. arxiv preprint palatucci m. pomerleau d. hinton g. e. and mitchell t. m. zero-shot learning with semantic output codes. in y. bengio d. schuurmans j. d. lafferty c. k. i. williams and a. culotta editors advances in neural information processing systems pages curran associates inc. parker d. b. learning-logic. technical report center for comp. research in economics and management sci. mit. pascanu r. mikolov t. and bengio y. on the difficulty of training recurrent neural networks. in icml pascanu r. g l ehre cho k. and bengio y. how to construct deep recurrent neural networks. in iclr pascanu r. montufar g. and bengio y. on the number of inference regions iclr of deep feed forward networks with piece-wise linear activations. in pati y. rezaiifar r. and krishnaprasad p. orthogonal matching pursuit recursive function approximation with applications to wavelet decomposition. in proceedings of the th annual asilomar conference on signals systems and computers pages pearl j. bayesian networks a model of self-activated memory for evidential in proceedings of the conference of the cognitive science society reasoning. university of california irvine pages pearl j. probabilistic reasoning in intelligent systems networks of plausible inference. morgan kaufmann. perron o. zur theorie der matrices. mathematische annalen petersen k. b. and pedersen m. s. the matrix cookbook. version peterson g. b. a day of great illumination b. f. skinner s discovery of shaping. journal of the experimental analysis of behavior pham d.-t. garat p. and jutten c. separation of a mixture of independent sources through a maximum likelihood approach. in eusipco pages bibliography pham p.-h. jelaca d. farabet c. martini b. lecun y. and culurciello e. neuflow dataflow vision processing system-on-a-chip. in circuits and systems ieee international midwest symposium on pages ieee. pinheiro p. h. o. and collobert r. recurrent convolutional neural networks for scene labeling. in icml pinheiro p. h. o. and collobert r. from image-level to pixel-level labeling with convolutional networks. in conference on computer vision and pattern recognition pinto n. cox d. d. and dicarlo j. j. why is real-world visual object recognition hard? plos comput biol pinto n. stone z. zickler t. and cox d. scaling up biologically-inspired computer vision a case study in unconstrained face recognition on facebook. in computer vision and pattern recognition workshops ieee computer society conference on pages ieee. pollack j. b. recursive distributed representations. artificial intelligence polyak b. and juditsky a. acceleration of stochastic approximation by averaging. siam j. control and optimization polyak b. t. some methods of speeding up the convergence of iteration methods. ussr computational mathematics and mathematical physics poole b. sohl-dickstein j. and ganguli s. analyzing noise in autoencoders and deep networks. corr poon h. and domingos p. sum-product networks a new deep architecture. in proceedings of the twenty-seventh conference in uncertainty in artificial intelligence barcelona spain. presley r. k. and haggard r. l. a fixed point implementation of the backpropagation learning algorithm. in southeastcon creative technology transfer-a global affair. proceedings of the ieee pages ieee. price r. a useful theorem for nonlinear devices having gaussian inputs. ieee transactions on information theory quiroga r. q. reddy l. kreiman g. koch c. and fried i. invariant visual representation by single neurons in the human brain. nature bibliography radford a. metz l. and chintala s. unsupervised representation learning with deep convolutional generative adversarial networks. arxiv preprint raiko t. yao l. cho k. and bengio y. iterative neural autoregressive distribution estimator technical report raina r. madhavan a. and ng a. y. large-scale deep unsupervised learning using graphics processors. in l. bottou and m. littman editors proceedings of the twenty-sixth international conference on machine learning pages new york ny usa. acm. ramsey f. p. truth and probability. in r. b. braithwaite editor the foundations of mathematics and other logical essays chapter pages mcmaster university archive for the history of economic thought. ranzato m. and hinton g. h. modeling pixel means and covariances using factorized third-order boltzmann machines. in cvpr pages ranzato m. poultney c. chopra s. and lecun y. efficient learning of sparse representations with an energy-based model. in nips ranzato m. huang f. boureau y. and lecun y. unsupervised learning of invariant feature hierarchies with applications to object recognition. in proceedings of the computer vision and pattern recognition conference ieee press. ranzato m. boureau y. and lecun y. sparse feature learning for deep belief networks. in nips ranzato m. krizhevsky a. and hinton g. e. factored restricted boltzmann machines for modeling natural images. in proceedings of aistats ranzato m. mnih v. and hinton g. generating more realistic images using gated mrfs. in nips rao c. information and the accuracy attainable in the estimation of statistical parameters. bulletin of the calcutta mathematical society rasmus a. valpola h. honkala m. berglund m. and raiko t. semi-supervised learning with ladder network. arxiv preprint recht b. re c. wright s. and niu f. hogwild a lock-free approach to parallelizing stochastic gradient descent. in nips reichert d. p. seri s p. and storkey a. j. neuronal adaptation for samplingbased probabilistic inference in perceptual bistability. in advances in neural information processing systems pages bibliography rezende d. j. mohamed s. and wierstra d. stochastic backpropagation preprint and approximate inference in deep generative models. icml in rifai s. vincent p. muller x. glorot x. and bengio y. contractive icml auto-encoders explicit invariance during feature extraction. in rifai s. mesnil g. vincent p. muller x. bengio y. dauphin y. and glorot x. higher order contractive auto-encoder. in ecml pkdd rifai s. dauphin y. vincent p. bengio y. and muller x. the manifold tangent classifier. in nips rifai s. bengio y. dauphin y. and vincent p. a generative process for sampling contractive auto-encoders. in icml ringach d. and shapley r. reverse correlation in neurophysiology. cognitive science roberts s. and everson r. independent component analysis principles and practice. cambridge university press. robinson a. j. and fallside f. a recurrent error propagation network speech recognition system. computer speech and language rockafellar r. t. convex analysis. princeton landmarks in mathematics. romero a. ballas n. ebrahimi kahou s. chassang a. gatta c. and bengio y. fitnets hints for thin deep nets. in iclr rosen j. b. the gradient projection method for nonlinear programming. part i. linear constraints. journal of the society for industrial and applied mathematics pp. rosenblatt f. the perceptron a probabilistic model for information storage and organization in the brain. psychological review rosenblatt f. principles of neurodynamics. spartan new york. roweis s. and saul l. k. nonlinear dimensionality reduction by locally linear embedding. science roweis s. saul l. and hinton g. global coordination of local linear models. in t. dietterich s. becker and z. ghahramani editors advances in neural information processing systems cambridge ma. mit press. rubin d. b. et al. bayesianly justifiable and relevant frequency calculations for the applied statistician. the annals of statistics bibliography rumelhart d. hinton g. and williams r. learning representations by back-propagating errors. nature rumelhart d. e. hinton g. e. and williams r. j. learning internal representations by error propagation. in d. e. rumelhart and j. l. mcclelland editors parallel distributed processing volume chapter pages mit press cambridge. rumelhart d. e. mcclelland j. l. and the pdp research group parallel distributed processing explorations in the microstructure of cognition. mit press cambridge. russakovsky o. deng j. su h. krause j. satheesh s. ma s. huang z. karpathy a. khosla a. bernstein m. berg a. c. and fei-fei l. imagenet large scale visual recognition challenge. russakovsky o. deng j. su h. krause j. satheesh s. ma s. huang z. karpathy imagenet large scale visual recognition et al. a. khosla a. bernstein m. challenge. arxiv preprint russel s. j. and norvig p. artificial intelligence a modern approach. prentice hall. rust n. schwartz o. movshon j. a. and simoncelli e. spatiotemporal elements of macaque receptive fields. neuron sainath t. mohamed a. kingsbury b. and ramabhadran b. deep convolu tional neural networks for lvcsr. in icassp salakhutdinov r. learning in markov random fields using tempered transitions. in y. bengio d. schuurmans c. williams j. lafferty and a. culotta editors advances in neural information processing systems salakhutdinov r. and hinton g. deep boltzmann machines. in proceedings of the international conference on artificial intelligence and statistics volume pages salakhutdinov r. and hinton g. semantic hashing. in international journal of approximate reasoning. salakhutdinov r. and hinton g. e. learning a nonlinear embedding by preserving class neighbourhood structure. in proceedings of the eleventh international conference on artificial intelligence and statistics san juan porto rico. omnipress. salakhutdinov r. and hinton g. e. semantic hashing. in sigir bibliography salakhutdinov r. and hinton g. e. using deep belief nets to learn covariance kernels for gaussian processes. in j. platt d. koller y. singer and s. roweis editors advances in neural information processing systems pages cambridge ma. mit press. salakhutdinov r. and larochelle h. efficient learning of deep boltzmann machines. in proceedings of the thirteenth international conference on artificial intelligence and statistics jmlr wcp volume pages salakhutdinov r. and mnih a. probabilistic matrix factorization. in nips salakhutdinov r. and murray i. on the quantitative analysis of deep belief networks. in w. w. cohen a. mccallum and s. t. roweis editors proceedings of the twenty-fifth international conference on machine learning volume pages acm. salakhutdinov r. mnih a. and hinton g. restricted boltzmann machines for collaborative filtering. in icml sanger t. d. neural network learning control of robot manipulators using gradually increasing task difficulty. ieee transactions on robotics and automation saul l. k. and jordan m. i. exploiting tractable substructures in intractable networks. in d. touretzky m. mozer and m. hasselmo editors advances in neural information processing systems mit press cambridge ma. saul l. k. jaakkola t. and jordan m. i. mean field theory for sigmoid belief networks. journal of artificial intelligence research savich a. w. moussa m. and areibi s. the impact of arithmetic representation on implementing mlp-bp on fpgas a study. neural networks ieee transactions on saxe a. m. koh p. w. chen z. bhand m. suresh b. and ng a. on random weights and unsupervised feature learning. in proc. icml acm. saxe a. m. mcclelland j. l. and ganguli s. exact solutions to the nonlinear dynamics of learning in deep linear neural networks. in iclr schaul t. antonoglou i. and silver d. unit tests for stochastic optimization. in international conference on learning representations. schmidhuber j. learning complex extended sequences using the principle of history compression. neural computation schmidhuber j. sequential neural text compression. ieee transactions on neural networks bibliography schmidhuber j. self-delimiting neural networks. arxiv preprint sch lkopf b. and smola a. j. learning with kernels support vector machines regularization optimization and beyond. mit press. sch lkopf b. smola a. and m ller k.-r. nonlinear component analysis as a kernel eigenvalue problem. neural computation sch lkopf b. burges c. j. c. and smola a. j. advances in kernel methods support vector learning. mit press cambridge ma. sch lkopf b. janzing d. peters j. sgouritsa e. zhang k. and mooij j. on causal and anticausal learning. in icml pages schuster m. on supervised learning from sequential data with applications for speech recognition. schuster m. and paliwal k. bidirectional recurrent neural networks. ieee transactions on signal processing schwenk h. continuous space language models. computer speech and language schwenk h. continuous space language models for statistical machine translation. the prague bulletin of mathematical linguistics schwenk h. cleaned subset of wmt dataset. schwenk h. and bengio y. training methods for adaptive boosting of neural networks. in m. jordan m. kearns and s. solla editors advances in neural information processing systems pages mit press. schwenk h. and gauvain j.-l. connectionist language modeling for large vocabulary continuous speech recognition. in international conference on acoustics speech and signal processing pages orlando florida. schwenk h. costa-juss m. r. and fonollosa j. a. r. continuous space in international workshop on spoken language models for the iwslt task. language translation pages seide f. li g. and yu d. conversational speech transcription using context dependent deep neural networks. in interspeech pages sejnowski t. higher-order boltzmann machines. in aip conference proceedings on neural networks for computing pages american institute of physics inc. bibliography series p. reichert d. p. and storkey a. j. hallucinations in charles bonnet syndrome induced by homeostasis a deep boltzmann machine model. in advances in neural information processing systems pages sermanet p. chintala s. and lecun y. convolutional neural networks applied to house numbers digit classification. corr sermanet p. kavukcuoglu k. chintala s. and lecun y. pedestrian detection with unsupervised multi-stage feature learning. in proc. international conference on computer vision and pattern recognition ieee. shilov g. linear algebra. dover books on mathematics series. dover publications. siegelmann h. computation beyond the turing limit. science siegelmann h. and sontag e. turing computability with neural nets. applied mathematics letters siegelmann h. t. and sontag e. d. on the computational power of neural nets. journal of computer and systems sciences sietsma j. and dow r. creating artificial neural networks that generalize. neural networks simard d. steinkraus p. y. and platt j. c. best practices for convolutional neural networks. in icdar simard p. and graf h. p. backpropagation without multiplication. in advances in neural information processing systems pages simard p. victorri b. lecun y. and denker j. tangent prop a formalism nips for specifying selected invariances in an adaptive network. in simard p. y. lecun y. and denker j. efficient pattern recognition using a new transformation distance. in nips simard p. y. lecun y. a. denker j. s. and victorri b. transformation invariance in pattern recognition tangent distance and tangent propagation. lecture notes in computer science simons d. j. and levin d. t. failure to detect changes to people during a real-world interaction. psychonomic bulletin review simonyan k. and zisserman a. very deep convolutional networks for large-scale image recognition. in iclr bibliography sj berg j. and ljung l. overtraining regularization and searching for a minimum with application to neural networks. international journal of control skinner b. f. reinforcement today. american psychologist smolensky p. information processing in dynamical systems foundations of harmony theory. in d. e. rumelhart and j. l. mcclelland editors parallel distributed processing volume chapter pages mit press cambridge. snoek j. larochelle h. and adams r. p. practical bayesian optimization of machine learning algorithms. in nips socher r. huang e. h. pennington j. ng a. y. and manning c. d. dynamic nips pooling and unfolding recursive autoencoders for paraphrase detection. in socher r. manning c. and ng a. y. parsing natural scenes and natural language with recursive neural networks. in proceedings of the twenty-eighth international conference on machine learning socher r. pennington j. huang e. h. ng a. y. and manning c. d. in semi-supervised recursive autoencoders for predicting sentiment distributions. emnlp socher r. perelygin a. wu j. y. chuang j. manning c. d. ng a. y. and potts c. recursive deep models for semantic compositionality over a sentiment treebank. in emnlp socher r. ganjoo m. manning c. d. and ng a. y. zero-shot learning through cross-modal transfer. in annual conference on neural information processing systems sohl-dickstein j. weiss e. a. maheswaranathan n. and ganguli s. deep unsupervised learning using nonequilibrium thermodynamics. sohn k. zhou g. and lee h. learning and selecting features jointly with point-wise gated boltzmann machines. in icml solomonoff r. j. a system for incremental learning based on algorithmic proba bility. sontag e. d. vc dimension of neural networks. nato asi series f computer and systems sciences sontag e. d. and sussman h. j. backpropagation can give rise to spurious local minima even for networks without hidden layers. complex systems bibliography sparkes b. the red and the black studies in greek pottery. routledge. spitkovsky v. i. alshawi h. and jurafsky d. from baby steps to leapfrog how less is more in unsupervised dependency parsing. in hlt squire w. and trapp g. using complex variables to estimate derivatives of real functions. siam rev. srebro n. and shraibman a. rank trace-norm and max-norm. in proceedings of the annual conference on learning theory pages springer-verlag. srivastava n. improving neural networks with dropout. master s thesis u. toronto. srivastava n. and salakhutdinov r. multimodal learning with deep boltzmann machines. in nips srivastava n. salakhutdinov r. r. and hinton g. e. modeling documents with deep boltzmann machines. arxiv preprint srivastava n. hinton g. krizhevsky a. sutskever i. and salakhutdinov r. dropout a simple way to prevent neural networks from overfitting. journal of machine learning research srivastava r. k. greff k. and schmidhuber j. highway networks. steinkrau d. simard p. y. and buck i. using gpus for machine learning algorithms. international conference on document analysis and recognition stoyanov v. ropson a. and eisner j. empirical risk minimization of graphical model parameters given approximate inference decoding and model structure. in proceedings of the international conference on artificial intelligence and statistics pages fort lauderdale. supplementary material pages also available. jmlr workshop and conference proceedings volume of sukhbaatar s. szlam a. weston j. and fergus r. weakly supervised memory networks. arxiv preprint supancic j. and ramanan d. self-paced learning for long-term tracking. in cvpr sussillo d. random walks training very deep nonlinear feed-forward networks with smart initialization. corr sutskever i. training recurrent neural networks. ph.d. thesis department of computer science university of toronto. bibliography sutskever i. and hinton g. e. deep narrow sigmoid belief networks are universal approximators. neural computation sutskever i. and tieleman t. on the convergence properties of contrastive divergence. in y. w. teh and m. titterington editors proc. of the international conference on artificial intelligence and statistics volume pages sutskever i. hinton g. and taylor g. the recurrent temporal restricted boltzmann machine. in nips sutskever i. martens j. and hinton g. e. generating text with recurrent neural networks. in icml pages sutskever i. martens j. dahl g. and hinton g. on the importance of initialization and momentum in deep learning. in icml sutskever i. vinyals o. and le q. v. sequence to sequence learning with neural networks. in nips sutton r. and barto a. reinforcement learning an introduction. mit press. sutton r. s. mcallester d. singh s. and mansour y. policy gradient methods pages for reinforcement learning with function approximation. in mit press. nips swersky k. ranzato m. buchman d. marlin b. and de freitas n. on autoencoders and score matching for energy based models. in icml acm. swersky k. snoek j. and adams r. p. freeze-thaw bayesian optimization. arxiv preprint szegedy c. liu w. jia y. sermanet p. reed s. anguelov d. erhan d. vanhoucke v. and rabinovich a. going deeper with convolutions. technical report szegedy c. zaremba w. sutskever i. bruna j. erhan d. goodfellow i. j. and iclr fergus r. intriguing properties of neural networks. szegedy c. vanhoucke v. ioffe s. shlens j. and wojna z. rethinking the inception architecture for computer vision. arxiv e-prints taigman y. yang m. ranzato m. and wolf l. deepface closing the gap to human-level performance in face verification. in cvpr tandy d. w. works and days a translation and commentary for the social sciences. university of california press. bibliography tang y. and eliasmith c. deep networks for robust visual recognition. in proceedings of the international conference on machine learning june haifa israel. tang y. salakhutdinov r. and hinton g. deep mixtures of factor analysers. arxiv preprint taylor g. and hinton g. factored conditional restricted boltzmann machines for modeling motion style. in l. bottou and m. littman editors proceedings of the twenty-sixth international conference on machine learning pages montreal quebec canada. acm. taylor g. hinton g. e. and roweis s. modeling human motion using binary latent variables. in b. sch lkopf j. platt and t. hoffman editors advances in neural information processing systems pages mit press cambridge ma. teh y. welling m. osindero s. and hinton g. e. energy-based models for sparse overcomplete representations. journal of machine learning research tenenbaum j. de silva v. and langford j. c. a global geometric framework for nonlinear dimensionality reduction. science theis l. van den oord a. and bethge m. a note on the evaluation of generative models. thompson j. jain a. lecun y. and bregler c. joint training of a convolutional network and a graphical model for human pose estimation. in nips thrun s. learning to play the game of chess. in nips tibshirani r. j. regression shrinkage and selection via the lasso. journal of the royal statistical society b tieleman t. training restricted boltzmann machines using approximations to the likelihood gradient. in w. w. cohen a. mccallum and s. t. roweis editors proceedings of the twenty-fifth international conference on machine learning pages acm. tieleman t. and hinton g. using fast weights to improve persistent contrastive divergence. in l. bottou and m. littman editors proceedings of the twenty-sixth international conference on machine learning pages acm. tipping m. e. and bishop c. m. probabilistic principal components analysis. journal of the royal statistical society b bibliography torralba a. fergus r. and weiss y. small codes and large databases for recognition. in proceedings of the computer vision and pattern recognition conference pages touretzky d. s. and minton g. e. symbols among the neurons details of a connectionist inference architecture. in proceedings of the international joint conference on artificial intelligence volume ijcai pages san francisco ca usa. morgan kaufmann publishers inc. tu k. and honavar v. on the utility of curricula in unsupervised learning of probabilistic grammars. in ijcai turaga s. c. murray j. f. jain v. roth f. helmstaedter m. briggman k. denk w. and seung h. s. convolutional networks can learn to generate affinity graphs for image segmentation. neural computation turian j. ratinov l. and bengio y. word representations a simple and general method for semi-supervised learning. in proc. acl pages t scher a. jahrer m. and bell r. m. the bigchaos solution to the netflix grand prize. uria b. murray i. and larochelle h. rnade the real-valued neural autoregres sive density-estimator. in nips van den o rd a. dieleman s. and schrauwen b. deep content-based music recommendation. in nips van der maaten l. and hinton g. e. visualizing data using t-sne. j. machine learning res. vanhoucke v. senior a. and mao m. z. improving the speed of neural networks on cpus. in proc. deep learning and unsupervised feature learning nips workshop. vapnik v. n. estimation of dependences based on empirical data springer verlag berlin. vapnik v. n. the nature of statistical learning theory. springer new york. vapnik v. n. and chervonenkis a. y. on the uniform convergence of relative frequencies of events to their probabilities. theory of probability and its applications vincent p. a connection between score matching and denoising autoencoders. neural computation bibliography vincent p. and bengio y. manifold parzen windows. in nips mit press. vincent p. larochelle h. bengio y. and manzagol p.-a. extracting and composing robust features with denoising autoencoders. in icml vincent p. larochelle h. lajoie i. bengio y. and manzagol p.-a. stacked denoising autoencoders learning useful representations in a deep network with a local denoising criterion. j. machine learning res. vincent p. de br bisson a. and bouthillier x. efficient exact gradient update for training deep networks with very large sparse targets. in c. cortes n. d. lawrence d. d. lee m. sugiyama and r. garnett editors advances in neural information processing systems pages curran associates inc. vinyals o. kaiser l. koo t. petrov s. sutskever i. and hinton g. grammar as a foreign language. technical report vinyals o. toshev a. bengio s. and erhan d. show and tell a neural image caption generator. arxiv vinyals o. fortunato m. and jaitly n. pointer networks. arxiv preprint vinyals o. toshev a. bengio s. and erhan d. show and tell a neural image caption generator. in cvpr viola p. and jones m. robust real-time object detection. in international journal of computer vision. visin f. kastner k. cho k. matteucci m. courville a. and bengio y. renet a recurrent neural network based alternative to convolutional networks. arxiv preprint von melchner l. pallas s. l. and sur m. visual behaviour mediated by retinal projections directed to the auditory pathway. nature wager s. wang s. and liang p. dropout training as adaptive regularization. in advances in neural information processing systems pages waibel a. hanazawa t. hinton g. e. shikano k. and lang k. phoneme recognition using time-delay neural networks. ieee transactions on acoustics speech and signal processing wan l. zeiler m. zhang s. lecun y. and fergus r. regularization of neural networks using dropconnect. in icml wang s. and manning c. fast dropout training. in icml bibliography wang z. zhang j. feng j. and chen z. knowledge graph and text jointly embedding. in proc. emnlp wang z. zhang j. feng j. and chen z. knowledge graph embedding by translating on hyperplanes. in proc. aaai warde-farley d. goodfellow i. j. courville a. and bengio y. an empirical analysis of dropout in piecewise linear networks. in iclr wawrzynek j. asanovic k. kingsbury b. johnson d. beck j. and morgan n. spert-ii a vector microprocessor system. computer weaver l. and tao n. the optimal reward baseline for gradient-based reinforce ment learning. in proc. uai pages weinberger k. q. and saul l. k. unsupervised learning of image manifolds by semidefinite programming. in cvpr pages weiss y. torralba a. and fergus r. spectral hashing. in nips pages welling m. zemel r. s. and hinton g. e. self supervised boosting. in advances in neural information processing systems pages welling m. hinton g. e. and osindero s. learning sparse topographic representations with products of student-t distributions. in nips welling m. zemel r. and hinton g. e. self-supervised boosting. in s. becker s. thrun and k. obermayer editors advances in neural information processing systems pages mit press. welling m. rosen-zvi m. and hinton g. e. exponential family harmoniums with an application to information retrieval. in l. saul y. weiss and l. bottou editors advances in neural information processing systems volume cambridge ma. mit press. werbos p. j. applications of advances in nonlinear sensitivity analysis. in proceedings of the ifip conference nyc pages weston j. bengio s. and usunier n. large scale image annotation learning to rank with joint word-image embeddings. machine learning weston j. chopra s. and bordes a. memory networks. arxiv preprint widrow b. and hoff m. e. adaptive switching circuits. in ire wescon convention record volume pages ire new york. bibliography wikipedia list of animals by number of neurons wikipedia the free encyclopedia. accessed williams c. k. i. and agakov f. v. products of gaussians and probabilistic minor component analysis. neural computation williams c. k. i. and rasmussen c. e. gaussian processes for regression. in d. touretzky m. mozer and m. hasselmo editors advances in neural information processing systems pages mit press cambridge ma. williams r. j. simple statistical gradient-following algorithms connectionist reinforcement learning. machine learning williams r. j. and zipser d. a learning algorithm for continually running fully recurrent neural networks. neural computation wilson d. r. and martinez t. r. the general inefficiency of batch training for gradient descent learning. neural networks wilson j. r. variance reduction techniques for digital simulation. american journal of mathematical and management sciences wiskott l. and sejnowski t. j. slow feature analysis unsupervised learning of invariances. neural computation wolpert d. and macready w. no free lunch theorems for optimization. ieee transactions on evolutionary computation wolpert d. h. the lack of a priori distinction between learning algorithms. neural computation wu r. yan s. shan y. dang q. and sun g. deep image scaling up image recognition. wu z. global continuation for distance geometry problems. siam journal of optimization xiong h. y. barash y. and frey b. j. bayesian prediction of tissue-regulated bioinformatics splicing using rna sequence and cellular context. xu k. ba j. l. kiros r. cho k. courville a. salakhutdinov r. zemel r. s. and bengio y. show attend and tell neural image caption generation with visual attention. in icml yildiz i. b. jaeger h. and kiebel s. j. re-visiting the echo state property. neural networks bibliography yosinski j. clune j. bengio y. and lipson h. how transferable are features in deep neural networks? in nips younes l. on the convergence of markovian stochastic algorithms with rapidly decreasing ergodicity rates. in stochastics and stochastics models pages yu d. wang s. and deng l. sequential labeling using deep-structured conditional random fields. ieee journal of selected topics in signal processing. zaremba w. and sutskever i. learning to execute. arxiv zaremba w. and sutskever i. reinforcement learning neural turing machines. zaslavsky t. facing up to arrangements face-count formulas for partitions of space by hyperplanes. number no. in memoirs of the american mathematical society. american mathematical society. zeiler m. d. and fergus r. visualizing and understanding convolutional networks. in eccv zeiler m. d. ranzato m. monga r. mao m. yang k. le q. nguyen p. senior a. vanhoucke v. dean j. and hinton g. e. on rectified linear units for speech processing. in icassp zhou b. khosla a. lapedriza a. oliva a. and torralba a. object detectors emerge in deep scene cnns. iclr zhou j. and troyanskaya o. g. deep supervised and convolutional generative stochastic network for protein secondary structure prediction. in icml zhou y. and chellappa r. computation of optical flow using a neural network. in neural networks ieee international conference on pages ieee. z hrer m. and pernkopf f. general stochastic networks for classification. in nips index loss absolute value rectification accuracy activation function active constraint adagrad adaline see adaptive linear element adam adaptive linear element adversarial example adversarial training affine ais see annealed importance sampling almost everywhere almost sure convergence ancestral sampling ann see artificial neural network annealed importance sampling approximate bayesian computation approximate inference artificial intelligence artificial neural network see neural net work bag of words bagging batch normalization bayes error bayes rule bayesian hyperparameter optimization bayesian network see directed graphical model bayesian probability bayesian statistics belief network see directed graphical model bernoulli distribution bfgs bias bias parameter biased importance sampling bigram binary relation block gibbs sampling boltzmann distribution boltzmann machine bptt see back-propagation through time broadcasting burn-in asr see automatic speech recognition asymptotically unbiased audio autoencoder automatic speech recognition back-propagation back-propagation through time backprop see back-propagation cae see contractive autoencoder calculus of variations categorical distribution see multinoulli dis tribution cd see contrastive divergence centering trick central limit theorem chain rule chain rule of probability index chess chord chordal graph class-based language models classical dynamical system classification clique potential see factor model cnn see convolutional neural network collaborative filtering collider see explaining away color images complex cell computational graph computer vision concept drift condition number conditional computation see dynamic struc ture conditional independence conditional probability conditional rbm connectionism connectionist temporal classification consistency constrained optimization content-based addressing content-based recommender systems context-specific independence contextual bandits continuation methods contractive autoencoder contrast contrastive divergence convex optimization convolution convolutional network convolutional neural network coordinate descent correlation cost function see objective function covariance covariance matrix coverage critical temperature cross-correlation cross-entropy cross-validation ctc see connectionist temporal classifica tion curriculum learning curse of dimensionality cyc d-separation dae see denoising autoencoder data generating distribution data generating process data parallelism dataset dataset augmentation dbm see deep boltzmann machine dcgan decision tree decoder deep belief network deep blue deep boltzmann machine deep feedforward network deep learning denoising autoencoder denoising score matching density estimation derivative design matrix detector layer determinant xii diagonal matrix differential entropy dirac delta function directed graphical model directional derivative discriminative fine-tuning see supervised fine-tuning discriminative rbm distributed representation domain adaptation index dot product double backprop doubly block circulant matrix dream sleep dropconnect dropout dynamic structure e-step early stopping ebm see energy-based model echo state network effective capacity eigendecomposition eigenvalue eigenvector elbo see evidence lower bound element-wise product see hadamard prod uct see hadamard product em see expectation maximization embedding empirical distribution empirical risk empirical risk minimization encoder energy function energy-based model ensemble methods epoch equality constraint equivariance error function see objective function esn see echo state network euclidean norm euler-lagrange equation evidence lower bound example expectation expectation maximization expected value see expectation explaining away exploitation exploration exponential distribution f-score factor model factor analysis factor graph factors of variation feature feature selection feedforward neural network fine-tuning finite differences forget gate forward propagation fourier transform fovea fpcd free energy freebase frequentist probability frequentist statistics frobenius norm fully-visible bayes network functional derivatives fvbn see fully-visible bayes network gabor function gans see generative adversarial networks gated recurrent unit gaussian distribution see normal distribu tion gaussian kernel gaussian mixture gcn see global contrast normalization geneontology generalization generalized lagrange function see general ized lagrangian generalized lagrangian generative adversarial networks generative moment matching networks generator network gibbs distribution gibbs sampling global contrast normalization gpu see graphics processing unit gradient index gradient clipping gradient descent graph xii graphical model see structured probabilis tic model graphics processing unit greedy algorithm greedy layer-wise unsupervised pretraining greedy supervised pretraining grid search hadamard product hard harmonium see restricted boltzmann ma tanh chine harmony theory helmholtz free energy see evidence lower bound hessian hessian matrix heteroscedastic hidden layer hill climbing hyperparameter optimization hyperparameters hypothesis space i.i.d. assumptions identity matrix ilsvrc see imagenet large scale visual recognition challenge imagenet large scale visual recognition challenge immorality importance sampling importance weighted autoencoder independence independent and identically distributed see i.i.d. assumptions independent component analysis independent subspace analysis inequality constraint inference information retrieval initialization integral xiii invariance isotropic jacobian matrix joint probability xiii k-means k-nearest neighbors karush-kuhn-tucker conditions karush kuhn tucker kernel kernel machine kernel trick kkt see karush kuhn tucker kkt conditions see karush-kuhn-tucker conditions kl divergence see kullback-leibler diver gence knowledge base krylov methods kullback-leibler divergence label smoothing lagrange multipliers lagrangian see generalized lagrangian lapgan laplace distribution latent variable layer network lcn see local contrast normalization leaky relu leaky units learning rate line search linear combination linear dependence linear factor models linear regression link prediction lipschitz constant lipschitz continuous liquid state machine index local conditional probability distribution local contrast normalization logistic regression logistic sigmoid long short-term memory loop loopy belief propagation loss function see objective function lp norm lstm see long short-term memory m-step machine learning machine translation main diagonal manifold manifold hypothesis manifold learning manifold tangent classifier map approximation marginal probability markov chain markov chain monte carlo markov network see undirected model markov random field see undirected model matrix xi xii matrix inverse matrix product max norm max pooling maximum likelihood maxout mcmc see markov chain monte carlo mean field mean squared error measure theory measure zero memory network method of steepest descent see gradient descent minibatch missing inputs mixing chain mixture density networks mixture distribution mixture model mixture of experts mlp see multilayer perception mnist model averaging model compression model identifiability model parallelism moment matching moore-penrose pseudoinverse moralized graph mp-dbm see multi-prediction dbm mrf random field see undi rected model mse see mean squared error multi-modal learning multi-prediction dbm multi-task learning multilayer perception multilayer perceptron multinomial distribution multinoulli distribution n-gram nade naive bayes nat natural image natural language processing nearest neighbor regression negative definite negative phase neocognitron nesterov momentum netflix grand prize neural language model neural network neural turing machine neuroscience newton s method nlm see neural language model nlp see natural language processing no free lunch theorem index noise-contrastive estimation non-parametric model norm normal distribution normal equations normalized initialization numerical differentiation see finite differ ences object detection object recognition objective function omp- see orthogonal matching pursuit one-shot learning operation optimization orthodox statistics see frequentist statistics orthogonal matching pursuit orthogonal matrix orthogonality output layer parallel distributed processing parameter initialization parameter sharing parameter tying see parameter sharing parametric model parametric relu partial derivative partition function pca see principal components analysis pcd see stochastic maximum likelihood perceptron persistent contrastive divergence see stochas tic maximum likelihood perturbation analysis see reparametrization trick point estimator policy pooling positive definite positive phase precision precision a normal distribution predictive sparse decomposition preprocessing pretraining primary visual cortex principal components analysis prior probability distribution probabilistic max pooling probabilistic pca probability density function probability distribution probability mass function probability mass function estimation product of experts product rule of probability see chain rule of probability psd see predictive sparse decomposition pseudolikelihood quadrature pair quasi-newton methods radial basis function random search random variable ratio matching rbf rbm see restricted boltzmann machine recall receptive field recommender systems rectified linear unit recurrent network recurrent neural network regression regularization regularizer reinforce reinforcement learning relational database relations reparametrization trick representation learning representational capacity restricted boltzmann machine index ridge regression see weight decay risk rnn-rbm saddle points sample mean scalar xi xii score matching second derivative second derivative test self-information semantic hashing semi-supervised learning separable convolution separation modeling set xii sgd see stochastic gradient descent shannon entropy shortlist sigmoid sigmoid belief network simple cell singular value see singular value decompo see logistic sigmoid sition singular value decomposition singular vector see singular value decom position xiv slow feature analysis sml see stochastic maximum likelihood softmax softplus spam detection sparse coding sparse initialization sparse representation spearmint spectral radius speech recognition see automatic speech recognition sphering see whitening spike and slab restricted boltzmann ma chine spn see sum-product network square matrix ssrbm see spike and slab restricted boltz mann machine standard deviation standard error standard error of the mean statistic statistical learning theory steepest descent see gradient descent stochastic back-propagation see reparametriza tion trick stochastic gradient descent stochastic maximum likelihood stochastic pooling structure learning structured output structured probabilistic model sum rule of probability sum-product network supervised fine-tuning supervised learning support vector machine surrogate loss function svd see singular value decomposition symmetric matrix xi xii tangent distance tangent plane tangent prop tdnn see time-delay neural network teacher forcing tempering template matching tensor test set tikhonov regularization see weight decay tiled convolution time-delay neural network toeplitz matrix topographic ica trace operator training error transcription transfer learning index transpose triangle inequality triangulated graph see chordal graph trigram zero-data learning see zero-shot learning zero-shot learning unbiased undirected graphical model undirected model uniform distribution unigram unit norm unit vector universal approximation theorem universal approximator unnormalized probability distribution unsupervised learning unsupervised pretraining v-structure see explaining away vae see variational autoencoder vapnik-chervonenkis dimension variance variational autoencoder variational derivatives see functional deriva xiii tives variational free energy see evidence lower bound vc dimension see vapnik-chervonenkis di mension xi xii vector virtual adversarial examples visible layer volumetric data wake-sleep weight decay weight space symmetry weights whitening wikibase wikibase word embedding word-sense disambiguation wordnet